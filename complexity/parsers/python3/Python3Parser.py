# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3_")
        buf.write("\u0447\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\3\2\3\2\7\2")
        buf.write("K\n\2\f\2\16\2N\13\2\3\2\3\2\3\3\3\3\3\3\5\3U\n\3\3\3")
        buf.write("\3\3\5\3Y\n\3\3\3\3\3\3\3\3\3\5\3_\n\3\3\3\3\3\5\3c\n")
        buf.write("\3\7\3e\n\3\f\3\16\3h\13\3\3\3\3\3\3\3\3\3\3\3\5\3o\n")
        buf.write("\3\5\3q\n\3\3\3\3\3\3\3\3\3\5\3w\n\3\3\3\3\3\5\3{\n\3")
        buf.write("\7\3}\n\3\f\3\16\3\u0080\13\3\3\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("\u0087\n\3\5\3\u0089\n\3\3\3\3\3\3\3\3\3\5\3\u008f\n\3")
        buf.write("\5\3\u0091\n\3\5\3\u0093\n\3\3\3\3\3\3\3\3\3\5\3\u0099")
        buf.write("\n\3\5\3\u009b\n\3\3\3\3\3\3\3\3\3\5\3\u00a1\n\3\3\3\3")
        buf.write("\3\5\3\u00a5\n\3\7\3\u00a7\n\3\f\3\16\3\u00aa\13\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u00b1\n\3\5\3\u00b3\n\3\3\3\3\3\3")
        buf.write("\3\3\3\5\3\u00b9\n\3\5\3\u00bb\n\3\3\4\3\4\3\4\5\4\u00c0")
        buf.write("\n\4\3\4\3\4\3\4\3\4\5\4\u00c6\n\4\7\4\u00c8\n\4\f\4\16")
        buf.write("\4\u00cb\13\4\3\4\3\4\3\4\5\4\u00d0\n\4\3\4\3\4\3\4\3")
        buf.write("\4\5\4\u00d6\n\4\7\4\u00d8\n\4\f\4\16\4\u00db\13\4\3\4")
        buf.write("\3\4\3\4\5\4\u00e0\n\4\3\4\3\4\5\4\u00e4\n\4\5\4\u00e6")
        buf.write("\n\4\3\4\3\4\5\4\u00ea\n\4\3\4\3\4\3\4\3\4\5\4\u00f0\n")
        buf.write("\4\7\4\u00f2\n\4\f\4\16\4\u00f5\13\4\3\4\3\4\3\4\5\4\u00fa")
        buf.write("\n\4\3\4\3\4\5\4\u00fe\n\4\3\5\3\5\3\5\7\5\u0103\n\5\f")
        buf.write("\5\16\5\u0106\13\5\3\5\5\5\u0109\n\5\3\5\5\5\u010c\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0116\n\5\3\5\3\5")
        buf.write("\3\5\3\5\5\5\u011c\n\5\7\5\u011e\n\5\f\5\16\5\u0121\13")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u012a\n\5\f\5\16\5")
        buf.write("\u012d\13\5\3\5\3\5\5\5\u0131\n\5\3\5\5\5\u0134\n\5\3")
        buf.write("\5\7\5\u0137\n\5\f\5\16\5\u013a\13\5\3\5\3\5\3\5\3\5\5")
        buf.write("\5\u0140\n\5\3\5\5\5\u0143\n\5\3\5\3\5\3\5\3\5\5\5\u0149")
        buf.write("\n\5\3\5\3\5\3\5\5\5\u014e\n\5\5\5\u0150\n\5\3\5\3\5\5")
        buf.write("\5\u0154\n\5\3\6\3\6\5\6\u0158\n\6\3\6\5\6\u015b\n\6\3")
        buf.write("\6\3\6\3\6\5\6\u0160\n\6\3\6\5\6\u0163\n\6\7\6\u0165\n")
        buf.write("\6\f\6\16\6\u0168\13\6\3\6\5\6\u016b\n\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u0174\n\6\f\6\16\6\u0177\13\6\3\6\5")
        buf.write("\6\u017a\n\6\5\6\u017c\n\6\3\6\3\6\3\6\7\6\u0181\n\6\f")
        buf.write("\6\16\6\u0184\13\6\3\6\5\6\u0187\n\6\5\6\u0189\n\6\3\6")
        buf.write("\7\6\u018c\n\6\f\6\16\6\u018f\13\6\5\6\u0191\n\6\3\6\3")
        buf.write("\6\5\6\u0195\n\6\3\6\3\6\3\6\5\6\u019a\n\6\3\6\7\6\u019d")
        buf.write("\n\6\f\6\16\6\u01a0\13\6\3\6\5\6\u01a3\n\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u01af\n\6\f\6\16\6\u01b2")
        buf.write("\13\6\3\6\3\6\5\6\u01b6\n\6\3\6\3\6\3\6\3\6\7\6\u01bc")
        buf.write("\n\6\f\6\16\6\u01bf\13\6\3\6\3\6\5\6\u01c3\n\6\7\6\u01c5")
        buf.write("\n\6\f\6\16\6\u01c8\13\6\3\6\3\6\7\6\u01cc\n\6\f\6\16")
        buf.write("\6\u01cf\13\6\3\6\3\6\3\6\7\6\u01d4\n\6\f\6\16\6\u01d7")
        buf.write("\13\6\3\6\6\6\u01da\n\6\r\6\16\6\u01db\5\6\u01de\n\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u01e6\n\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u01ec\n\6\7\6\u01ee\n\6\f\6\16\6\u01f1\13\6\3\6\5\6")
        buf.write("\u01f4\n\6\3\6\3\6\3\6\3\6\5\6\u01fa\n\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u0200\n\6\7\6\u0202\n\6\f\6\16\6\u0205\13\6\3\6")
        buf.write("\5\6\u0208\n\6\5\6\u020a\n\6\3\6\3\6\3\6\3\6\7\6\u0210")
        buf.write("\n\6\f\6\16\6\u0213\13\6\3\6\5\6\u0216\n\6\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u021c\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0225")
        buf.write("\n\b\f\b\16\b\u0228\13\b\3\b\5\b\u022b\n\b\5\b\u022d\n")
        buf.write("\b\3\b\3\b\5\b\u0231\n\b\3\b\5\b\u0234\n\b\3\b\3\b\3\b")
        buf.write("\5\b\u0239\n\b\3\b\5\b\u023c\n\b\7\b\u023e\n\b\f\b\16")
        buf.write("\b\u0241\13\b\3\b\5\b\u0244\n\b\5\b\u0246\n\b\3\t\3\t")
        buf.write("\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f\7\f\u0252\n\f\f\f\16")
        buf.write("\f\u0255\13\f\3\f\5\f\u0258\n\f\5\f\u025a\n\f\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u0260\n\r\5\r\u0262\n\r\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\7\16\u026a\n\16\f\16\16\16\u026d\13\16\3")
        buf.write("\16\5\16\u0270\n\16\5\16\u0272\n\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\7\17\u027d\n\17\f\17\16\17\u0280")
        buf.write("\13\17\3\17\5\17\u0283\n\17\3\20\3\20\3\20\3\20\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u028e\n\21\3\22\3\22\5\22\u0292")
        buf.write("\n\22\3\22\3\22\3\22\5\22\u0297\n\22\3\22\7\22\u029a\n")
        buf.write("\22\f\22\16\22\u029d\13\22\3\22\5\22\u02a0\n\22\3\22\3")
        buf.write("\22\3\22\3\22\7\22\u02a6\n\22\f\22\16\22\u02a9\13\22\3")
        buf.write("\22\5\22\u02ac\n\22\3\22\3\22\3\22\5\22\u02b1\n\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\6\23\u02ba\n\23\r\23\16")
        buf.write("\23\u02bb\3\23\5\23\u02bf\n\23\3\23\3\23\3\23\5\23\u02c4")
        buf.write("\n\23\3\23\3\23\3\23\5\23\u02c9\n\23\3\24\3\24\3\24\3")
        buf.write("\24\5\24\u02cf\n\24\5\24\u02d1\n\24\3\25\3\25\3\25\7\25")
        buf.write("\u02d6\n\25\f\25\16\25\u02d9\13\25\3\25\5\25\u02dc\n\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\6\25\u02e3\n\25\r\25\16\25\u02e4")
        buf.write("\3\25\3\25\5\25\u02e9\n\25\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u02f1\n\26\3\26\3\26\5\26\u02f5\n\26\3\26\3\26")
        buf.write("\5\26\u02f9\n\26\3\27\3\27\3\27\5\27\u02fe\n\27\3\27\3")
        buf.write("\27\5\27\u0302\n\27\3\30\3\30\3\30\7\30\u0307\n\30\f\30")
        buf.write("\16\30\u030a\13\30\3\31\3\31\3\31\5\31\u030f\n\31\3\31")
        buf.write("\3\31\3\31\5\31\u0314\n\31\3\31\3\31\7\31\u0318\n\31\f")
        buf.write("\31\16\31\u031b\13\31\5\31\u031d\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u032c\n\32\3\33\3\33\3\33\7\33\u0331\n\33\f\33\16\33")
        buf.write("\u0334\13\33\3\34\3\34\3\34\3\34\3\34\7\34\u033b\n\34")
        buf.write("\f\34\16\34\u033e\13\34\3\34\3\34\5\34\u0342\n\34\5\34")
        buf.write("\u0344\n\34\3\35\3\35\5\35\u0348\n\35\3\35\3\35\3\35\5")
        buf.write("\35\u034d\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u0354\n\35")
        buf.write("\3\35\3\35\5\35\u0358\n\35\3\35\7\35\u035b\n\35\f\35\16")
        buf.write("\35\u035e\13\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\7\36")
        buf.write("\u0367\n\36\f\36\16\36\u036a\13\36\3\36\5\36\u036d\n\36")
        buf.write("\5\36\u036f\n\36\3\36\3\36\3\36\3\36\7\36\u0375\n\36\f")
        buf.write("\36\16\36\u0378\13\36\3\36\5\36\u037b\n\36\5\36\u037d")
        buf.write("\n\36\5\36\u037f\n\36\3\36\3\36\3\36\3\36\3\36\3\36\7")
        buf.write("\36\u0387\n\36\f\36\16\36\u038a\13\36\3\36\5\36\u038d")
        buf.write("\n\36\5\36\u038f\n\36\5\36\u0391\n\36\3\36\3\36\3\36\5")
        buf.write("\36\u0396\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\6\36\u03a1\n\36\r\36\16\36\u03a2\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u03a9\n\36\5\36\u03ab\n\36\3\37\3\37\5\37\u03af")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3\37\7\37\u03b6\n\37\f\37\16")
        buf.write("\37\u03b9\13\37\3\37\5\37\u03bc\n\37\3\37\3\37\3\37\3")
        buf.write("\37\5\37\u03c2\n\37\3 \3 \5 \u03c6\n \3 \3 \5 \u03ca\n")
        buf.write(" \3 \3 \5 \u03ce\n \5 \u03d0\n \5 \u03d2\n \3!\3!\3!\5")
        buf.write("!\u03d7\n!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u03e1\n!\f!\16!")
        buf.write("\u03e4\13!\3!\5!\u03e7\n!\3!\3!\7!\u03eb\n!\f!\16!\u03ee")
        buf.write("\13!\3!\5!\u03f1\n!\5!\u03f3\n!\3\"\3\"\5\"\u03f7\n\"")
        buf.write("\3\"\3\"\5\"\u03fb\n\"\3\"\3\"\7\"\u03ff\n\"\f\"\16\"")
        buf.write("\u0402\13\"\3\"\3\"\5\"\u0406\n\"\3\"\3\"\5\"\u040a\n")
        buf.write("\"\3\"\5\"\u040d\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u0414\n\"")
        buf.write("\3\"\3\"\5\"\u0418\n\"\7\"\u041a\n\"\f\"\16\"\u041d\13")
        buf.write("\"\3\"\3\"\3\"\5\"\u0422\n\"\3\"\3\"\5\"\u0426\n\"\3#")
        buf.write("\3#\3#\3#\5#\u042c\n#\5#\u042e\n#\3$\3$\5$\u0432\n$\3")
        buf.write("$\3$\3$\5$\u0437\n$\3$\7$\u043a\n$\f$\16$\u043d\13$\3")
        buf.write("$\5$\u0440\n$\3$\3$\3$\5$\u0445\n$\3$\2\38%\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDF\2\b\3\2-.\3\2\t\n\3\2O[\3\2\27\30\5\2//9BMM\4\2")
        buf.write(">?CC\2\u051e\2L\3\2\2\2\4\u00ba\3\2\2\2\6\u00fd\3\2\2")
        buf.write("\2\b\u0153\3\2\2\2\n\u0215\3\2\2\2\f\u0217\3\2\2\2\16")
        buf.write("\u021d\3\2\2\2\20\u0247\3\2\2\2\22\u0249\3\2\2\2\24\u024b")
        buf.write("\3\2\2\2\26\u024d\3\2\2\2\30\u025b\3\2\2\2\32\u0263\3")
        buf.write("\2\2\2\34\u0273\3\2\2\2\36\u0284\3\2\2\2 \u0288\3\2\2")
        buf.write("\2\"\u028f\3\2\2\2$\u02b2\3\2\2\2&\u02ca\3\2\2\2(\u02e8")
        buf.write("\3\2\2\2*\u02f8\3\2\2\2,\u0301\3\2\2\2.\u0303\3\2\2\2")
        buf.write("\60\u031c\3\2\2\2\62\u032b\3\2\2\2\64\u032d\3\2\2\2\66")
        buf.write("\u0343\3\2\2\28\u0345\3\2\2\2:\u03aa\3\2\2\2<\u03c1\3")
        buf.write("\2\2\2>\u03d1\3\2\2\2@\u03d3\3\2\2\2B\u0400\3\2\2\2D\u042d")
        buf.write("\3\2\2\2F\u042f\3\2\2\2HK\7$\2\2IK\5\b\5\2JH\3\2\2\2J")
        buf.write("I\3\2\2\2KN\3\2\2\2LJ\3\2\2\2LM\3\2\2\2MO\3\2\2\2NL\3")
        buf.write("\2\2\2OP\7\2\2\3P\3\3\2\2\2QT\7%\2\2RS\7\63\2\2SU\5*\26")
        buf.write("\2TR\3\2\2\2TU\3\2\2\2UX\3\2\2\2VW\7\66\2\2WY\5*\26\2")
        buf.write("XV\3\2\2\2XY\3\2\2\2Yf\3\2\2\2Z[\7\62\2\2[^\7%\2\2\\]")
        buf.write("\7\63\2\2]_\5*\26\2^\\\3\2\2\2^_\3\2\2\2_b\3\2\2\2`a\7")
        buf.write("\66\2\2ac\5*\26\2b`\3\2\2\2bc\3\2\2\2ce\3\2\2\2dZ\3\2")
        buf.write("\2\2eh\3\2\2\2fd\3\2\2\2fg\3\2\2\2g\u0092\3\2\2\2hf\3")
        buf.write("\2\2\2i\u0090\7\62\2\2jp\7/\2\2kn\7%\2\2lm\7\63\2\2mo")
        buf.write("\5*\26\2nl\3\2\2\2no\3\2\2\2oq\3\2\2\2pk\3\2\2\2pq\3\2")
        buf.write("\2\2q~\3\2\2\2rs\7\62\2\2sv\7%\2\2tu\7\63\2\2uw\5*\26")
        buf.write("\2vt\3\2\2\2vw\3\2\2\2wz\3\2\2\2xy\7\66\2\2y{\5*\26\2")
        buf.write("zx\3\2\2\2z{\3\2\2\2{}\3\2\2\2|r\3\2\2\2}\u0080\3\2\2")
        buf.write("\2~|\3\2\2\2~\177\3\2\2\2\177\u0088\3\2\2\2\u0080~\3\2")
        buf.write("\2\2\u0081\u0082\7\62\2\2\u0082\u0083\7\65\2\2\u0083\u0086")
        buf.write("\7%\2\2\u0084\u0085\7\63\2\2\u0085\u0087\5*\26\2\u0086")
        buf.write("\u0084\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u0089\3\2\2\2")
        buf.write("\u0088\u0081\3\2\2\2\u0088\u0089\3\2\2\2\u0089\u0091\3")
        buf.write("\2\2\2\u008a\u008b\7\65\2\2\u008b\u008e\7%\2\2\u008c\u008d")
        buf.write("\7\63\2\2\u008d\u008f\5*\26\2\u008e\u008c\3\2\2\2\u008e")
        buf.write("\u008f\3\2\2\2\u008f\u0091\3\2\2\2\u0090j\3\2\2\2\u0090")
        buf.write("\u008a\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u0093\3\2\2\2")
        buf.write("\u0092i\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u00bb\3\2\2")
        buf.write("\2\u0094\u009a\7/\2\2\u0095\u0098\7%\2\2\u0096\u0097\7")
        buf.write("\63\2\2\u0097\u0099\5*\26\2\u0098\u0096\3\2\2\2\u0098")
        buf.write("\u0099\3\2\2\2\u0099\u009b\3\2\2\2\u009a\u0095\3\2\2\2")
        buf.write("\u009a\u009b\3\2\2\2\u009b\u00a8\3\2\2\2\u009c\u009d\7")
        buf.write("\62\2\2\u009d\u00a0\7%\2\2\u009e\u009f\7\63\2\2\u009f")
        buf.write("\u00a1\5*\26\2\u00a0\u009e\3\2\2\2\u00a0\u00a1\3\2\2\2")
        buf.write("\u00a1\u00a4\3\2\2\2\u00a2\u00a3\7\66\2\2\u00a3\u00a5")
        buf.write("\5*\26\2\u00a4\u00a2\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5")
        buf.write("\u00a7\3\2\2\2\u00a6\u009c\3\2\2\2\u00a7\u00aa\3\2\2\2")
        buf.write("\u00a8\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00b2\3")
        buf.write("\2\2\2\u00aa\u00a8\3\2\2\2\u00ab\u00ac\7\62\2\2\u00ac")
        buf.write("\u00ad\7\65\2\2\u00ad\u00b0\7%\2\2\u00ae\u00af\7\63\2")
        buf.write("\2\u00af\u00b1\5*\26\2\u00b0\u00ae\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\u00b3\3\2\2\2\u00b2\u00ab\3\2\2\2\u00b2")
        buf.write("\u00b3\3\2\2\2\u00b3\u00bb\3\2\2\2\u00b4\u00b5\7\65\2")
        buf.write("\2\u00b5\u00b8\7%\2\2\u00b6\u00b7\7\63\2\2\u00b7\u00b9")
        buf.write("\5*\26\2\u00b8\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9")
        buf.write("\u00bb\3\2\2\2\u00baQ\3\2\2\2\u00ba\u0094\3\2\2\2\u00ba")
        buf.write("\u00b4\3\2\2\2\u00bb\5\3\2\2\2\u00bc\u00bf\7%\2\2\u00bd")
        buf.write("\u00be\7\66\2\2\u00be\u00c0\5*\26\2\u00bf\u00bd\3\2\2")
        buf.write("\2\u00bf\u00c0\3\2\2\2\u00c0\u00c9\3\2\2\2\u00c1\u00c2")
        buf.write("\7\62\2\2\u00c2\u00c5\7%\2\2\u00c3\u00c4\7\66\2\2\u00c4")
        buf.write("\u00c6\5*\26\2\u00c5\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2")
        buf.write("\u00c6\u00c8\3\2\2\2\u00c7\u00c1\3\2\2\2\u00c8\u00cb\3")
        buf.write("\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00e5")
        buf.write("\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cc\u00e3\7\62\2\2\u00cd")
        buf.write("\u00cf\7/\2\2\u00ce\u00d0\7%\2\2\u00cf\u00ce\3\2\2\2\u00cf")
        buf.write("\u00d0\3\2\2\2\u00d0\u00d9\3\2\2\2\u00d1\u00d2\7\62\2")
        buf.write("\2\u00d2\u00d5\7%\2\2\u00d3\u00d4\7\66\2\2\u00d4\u00d6")
        buf.write("\5*\26\2\u00d5\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6")
        buf.write("\u00d8\3\2\2\2\u00d7\u00d1\3\2\2\2\u00d8\u00db\3\2\2\2")
        buf.write("\u00d9\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00df\3")
        buf.write("\2\2\2\u00db\u00d9\3\2\2\2\u00dc\u00dd\7\62\2\2\u00dd")
        buf.write("\u00de\7\65\2\2\u00de\u00e0\7%\2\2\u00df\u00dc\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e4\3\2\2\2\u00e1\u00e2\7")
        buf.write("\65\2\2\u00e2\u00e4\7%\2\2\u00e3\u00cd\3\2\2\2\u00e3\u00e1")
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6\3\2\2\2\u00e5")
        buf.write("\u00cc\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00fe\3\2\2\2")
        buf.write("\u00e7\u00e9\7/\2\2\u00e8\u00ea\7%\2\2\u00e9\u00e8\3\2")
        buf.write("\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00f3\3\2\2\2\u00eb\u00ec")
        buf.write("\7\62\2\2\u00ec\u00ef\7%\2\2\u00ed\u00ee\7\66\2\2\u00ee")
        buf.write("\u00f0\5*\26\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2")
        buf.write("\u00f0\u00f2\3\2\2\2\u00f1\u00eb\3\2\2\2\u00f2\u00f5\3")
        buf.write("\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f9")
        buf.write("\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\u00f7\7\62\2\2\u00f7")
        buf.write("\u00f8\7\65\2\2\u00f8\u00fa\7%\2\2\u00f9\u00f6\3\2\2\2")
        buf.write("\u00f9\u00fa\3\2\2\2\u00fa\u00fe\3\2\2\2\u00fb\u00fc\7")
        buf.write("\65\2\2\u00fc\u00fe\7%\2\2\u00fd\u00bc\3\2\2\2\u00fd\u00e7")
        buf.write("\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\7\3\2\2\2\u00ff\u0104")
        buf.write("\5\n\6\2\u0100\u0101\7\64\2\2\u0101\u0103\5\n\6\2\u0102")
        buf.write("\u0100\3\2\2\2\u0103\u0106\3\2\2\2\u0104\u0102\3\2\2\2")
        buf.write("\u0104\u0105\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3")
        buf.write("\2\2\2\u0107\u0109\7\64\2\2\u0108\u0107\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u010b\3\2\2\2\u010a\u010c\7$\2\2")
        buf.write("\u010b\u010a\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u0154\3")
        buf.write("\2\2\2\u010d\u0154\5\34\17\2\u010e\u0154\5 \21\2\u010f")
        buf.write("\u0154\5\"\22\2\u0110\u0154\5$\23\2\u0111\u0112\7\24\2")
        buf.write("\2\u0112\u0115\5*\26\2\u0113\u0114\7\b\2\2\u0114\u0116")
        buf.write("\5\64\33\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116")
        buf.write("\u011f\3\2\2\2\u0117\u0118\7\62\2\2\u0118\u011b\5*\26")
        buf.write("\2\u0119\u011a\7\b\2\2\u011a\u011c\5\64\33\2\u011b\u0119")
        buf.write("\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3\2\2\2\u011d")
        buf.write("\u0117\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121\u011f\3")
        buf.write("\2\2\2\u0122\u0123\7\63\2\2\u0123\u0124\5(\25\2\u0124")
        buf.write("\u0154\3\2\2\2\u0125\u0126\7M\2\2\u0126\u012b\7%\2\2\u0127")
        buf.write("\u0128\7-\2\2\u0128\u012a\7%\2\2\u0129\u0127\3\2\2\2\u012a")
        buf.write("\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2")
        buf.write("\u012c\u0133\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130\7")
        buf.write("\60\2\2\u012f\u0131\5B\"\2\u0130\u012f\3\2\2\2\u0130\u0131")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\7\61\2\2\u0133")
        buf.write("\u012e\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2")
        buf.write("\u0135\u0137\7$\2\2\u0136\u0125\3\2\2\2\u0137\u013a\3")
        buf.write("\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u014f")
        buf.write("\3\2\2\2\u013a\u0138\3\2\2\2\u013b\u013c\7\36\2\2\u013c")
        buf.write("\u0142\7%\2\2\u013d\u013f\7\60\2\2\u013e\u0140\5B\"\2")
        buf.write("\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0141\3")
        buf.write("\2\2\2\u0141\u0143\7\61\2\2\u0142\u013d\3\2\2\2\u0142")
        buf.write("\u0143\3\2\2\2\u0143\u0150\3\2\2\2\u0144\u0145\7\3\2\2")
        buf.write("\u0145\u0146\7%\2\2\u0146\u0148\7\60\2\2\u0147\u0149\5")
        buf.write("\4\3\2\u0148\u0147\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014a")
        buf.write("\3\2\2\2\u014a\u014d\7\61\2\2\u014b\u014c\7N\2\2\u014c")
        buf.write("\u014e\5*\26\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2")
        buf.write("\u014e\u0150\3\2\2\2\u014f\u013b\3\2\2\2\u014f\u0144\3")
        buf.write("\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\7\63\2\2\u0152")
        buf.write("\u0154\5(\25\2\u0153\u00ff\3\2\2\2\u0153\u010d\3\2\2\2")
        buf.write("\u0153\u010e\3\2\2\2\u0153\u010f\3\2\2\2\u0153\u0110\3")
        buf.write("\2\2\2\u0153\u0111\3\2\2\2\u0153\u0138\3\2\2\2\u0154\t")
        buf.write("\3\2\2\2\u0155\u015b\5*\26\2\u0156\u0158\7/\2\2\u0157")
        buf.write("\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\3\2\2\2")
        buf.write("\u0159\u015b\5\64\33\2\u015a\u0155\3\2\2\2\u015a\u0157")
        buf.write("\3\2\2\2\u015b\u0166\3\2\2\2\u015c\u0162\7\62\2\2\u015d")
        buf.write("\u0163\5*\26\2\u015e\u0160\7/\2\2\u015f\u015e\3\2\2\2")
        buf.write("\u015f\u0160\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0163\5")
        buf.write("\64\33\2\u0162\u015d\3\2\2\2\u0162\u015f\3\2\2\2\u0163")
        buf.write("\u0165\3\2\2\2\u0164\u015c\3\2\2\2\u0165\u0168\3\2\2\2")
        buf.write("\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016a\3")
        buf.write("\2\2\2\u0168\u0166\3\2\2\2\u0169\u016b\7\62\2\2\u016a")
        buf.write("\u0169\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u0190\3\2\2\2")
        buf.write("\u016c\u0188\5\20\t\2\u016d\u017b\7\37\2\2\u016e\u016f")
        buf.write("\7\6\2\2\u016f\u017c\5*\26\2\u0170\u0175\5*\26\2\u0171")
        buf.write("\u0172\7\62\2\2\u0172\u0174\5*\26\2\u0173\u0171\3\2\2")
        buf.write("\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0178")
        buf.write("\u017a\7\62\2\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2")
        buf.write("\2\u017a\u017c\3\2\2\2\u017b\u016e\3\2\2\2\u017b\u0170")
        buf.write("\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u0189\3\2\2\2\u017d")
        buf.write("\u0182\5*\26\2\u017e\u017f\7\62\2\2\u017f\u0181\5*\26")
        buf.write("\2\u0180\u017e\3\2\2\2\u0181\u0184\3\2\2\2\u0182\u0180")
        buf.write("\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0186\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0185\u0187\7\62\2\2\u0186\u0185\3\2\2")
        buf.write("\2\u0186\u0187\3\2\2\2\u0187\u0189\3\2\2\2\u0188\u016d")
        buf.write("\3\2\2\2\u0188\u017d\3\2\2\2\u0189\u0191\3\2\2\2\u018a")
        buf.write("\u018c\5\16\b\2\u018b\u018a\3\2\2\2\u018c\u018f\3\2\2")
        buf.write("\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0191")
        buf.write("\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u016c\3\2\2\2\u0190")
        buf.write("\u018d\3\2\2\2\u0191\u0216\3\2\2\2\u0192\u0194\7 \2\2")
        buf.write("\u0193\u0195\7/\2\2\u0194\u0193\3\2\2\2\u0194\u0195\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\u019e\5\64\33\2\u0197")
        buf.write("\u0199\7\62\2\2\u0198\u019a\7/\2\2\u0199\u0198\3\2\2\2")
        buf.write("\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d\5")
        buf.write("\64\33\2\u019c\u0197\3\2\2\2\u019d\u01a0\3\2\2\2\u019e")
        buf.write("\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a2\3\2\2\2")
        buf.write("\u01a0\u019e\3\2\2\2\u01a1\u01a3\7\62\2\2\u01a2\u01a1")
        buf.write("\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u0216\3\2\2\2\u01a4")
        buf.write("\u0216\7!\2\2\u01a5\u0216\5\22\n\2\u01a6\u0216\5\24\13")
        buf.write("\2\u01a7\u0216\5\26\f\2\u01a8\u0216\5\30\r\2\u01a9\u0216")
        buf.write("\5\32\16\2\u01aa\u01ab\7\7\2\2\u01ab\u01b0\7%\2\2\u01ac")
        buf.write("\u01ad\7-\2\2\u01ad\u01af\7%\2\2\u01ae\u01ac\3\2\2\2\u01af")
        buf.write("\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2")
        buf.write("\u01b1\u01b5\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b3\u01b4\7")
        buf.write("\b\2\2\u01b4\u01b6\7%\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6")
        buf.write("\3\2\2\2\u01b6\u01c6\3\2\2\2\u01b7\u01b8\7\62\2\2\u01b8")
        buf.write("\u01bd\7%\2\2\u01b9\u01ba\7-\2\2\u01ba\u01bc\7%\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb\3\2\2\2")
        buf.write("\u01bd\u01be\3\2\2\2\u01be\u01c2\3\2\2\2\u01bf\u01bd\3")
        buf.write("\2\2\2\u01c0\u01c1\7\b\2\2\u01c1\u01c3\7%\2\2\u01c2\u01c0")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2\u01c4")
        buf.write("\u01b7\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2")
        buf.write("\u01c6\u01c7\3\2\2\2\u01c7\u0216\3\2\2\2\u01c8\u01c6\3")
        buf.write("\2\2\2\u01c9\u01dd\7\6\2\2\u01ca\u01cc\t\2\2\2\u01cb\u01ca")
        buf.write("\3\2\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd")
        buf.write("\u01ce\3\2\2\2\u01ce\u01d0\3\2\2\2\u01cf\u01cd\3\2\2\2")
        buf.write("\u01d0\u01d5\7%\2\2\u01d1\u01d2\7-\2\2\u01d2\u01d4\7%")
        buf.write("\2\2\u01d3\u01d1\3\2\2\2\u01d4\u01d7\3\2\2\2\u01d5\u01d3")
        buf.write("\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01de\3\2\2\2\u01d7")
        buf.write("\u01d5\3\2\2\2\u01d8\u01da\t\2\2\2\u01d9\u01d8\3\2\2\2")
        buf.write("\u01da\u01db\3\2\2\2\u01db\u01d9\3\2\2\2\u01db\u01dc\3")
        buf.write("\2\2\2\u01dc\u01de\3\2\2\2\u01dd\u01cd\3\2\2\2\u01dd\u01d9")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u0209\7\7\2\2\u01e0")
        buf.write("\u020a\7/\2\2\u01e1\u01e2\7\60\2\2\u01e2\u01e5\7%\2\2")
        buf.write("\u01e3\u01e4\7\b\2\2\u01e4\u01e6\7%\2\2\u01e5\u01e3\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01ef\3\2\2\2\u01e7\u01e8")
        buf.write("\7\62\2\2\u01e8\u01eb\7%\2\2\u01e9\u01ea\7\b\2\2\u01ea")
        buf.write("\u01ec\7%\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2")
        buf.write("\u01ec\u01ee\3\2\2\2\u01ed\u01e7\3\2\2\2\u01ee\u01f1\3")
        buf.write("\2\2\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f3")
        buf.write("\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01f4\7\62\2\2\u01f3")
        buf.write("\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5\3\2\2\2")
        buf.write("\u01f5\u020a\7\61\2\2\u01f6\u01f9\7%\2\2\u01f7\u01f8\7")
        buf.write("\b\2\2\u01f8\u01fa\7%\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa")
        buf.write("\3\2\2\2\u01fa\u0203\3\2\2\2\u01fb\u01fc\7\62\2\2\u01fc")
        buf.write("\u01ff\7%\2\2\u01fd\u01fe\7\b\2\2\u01fe\u0200\7%\2\2\u01ff")
        buf.write("\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2")
        buf.write("\u0201\u01fb\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201\3")
        buf.write("\2\2\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203")
        buf.write("\3\2\2\2\u0206\u0208\7\62\2\2\u0207\u0206\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209\u01e0\3\2\2\2")
        buf.write("\u0209\u01e1\3\2\2\2\u0209\u01f6\3\2\2\2\u020a\u0216\3")
        buf.write("\2\2\2\u020b\u020c\t\3\2\2\u020c\u0211\7%\2\2\u020d\u020e")
        buf.write("\7\62\2\2\u020e\u0210\7%\2\2\u020f\u020d\3\2\2\2\u0210")
        buf.write("\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2\2")
        buf.write("\u0212\u0216\3\2\2\2\u0213\u0211\3\2\2\2\u0214\u0216\5")
        buf.write("\f\7\2\u0215\u015a\3\2\2\2\u0215\u0192\3\2\2\2\u0215\u01a4")
        buf.write("\3\2\2\2\u0215\u01a5\3\2\2\2\u0215\u01a6\3\2\2\2\u0215")
        buf.write("\u01a7\3\2\2\2\u0215\u01a8\3\2\2\2\u0215\u01a9\3\2\2\2")
        buf.write("\u0215\u01aa\3\2\2\2\u0215\u01c9\3\2\2\2\u0215\u020b\3")
        buf.write("\2\2\2\u0215\u0214\3\2\2\2\u0216\13\3\2\2\2\u0217\u0218")
        buf.write("\7\13\2\2\u0218\u021b\5*\26\2\u0219\u021a\7\62\2\2\u021a")
        buf.write("\u021c\5*\26\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\r\3\2\2\2\u021d\u0245\7\66\2\2\u021e\u022c\7\37")
        buf.write("\2\2\u021f\u0220\7\6\2\2\u0220\u022d\5*\26\2\u0221\u0226")
        buf.write("\5*\26\2\u0222\u0223\7\62\2\2\u0223\u0225\5*\26\2\u0224")
        buf.write("\u0222\3\2\2\2\u0225\u0228\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3")
        buf.write("\2\2\2\u0229\u022b\7\62\2\2\u022a\u0229\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022d\3\2\2\2\u022c\u021f\3\2\2\2")
        buf.write("\u022c\u0221\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u0246\3")
        buf.write("\2\2\2\u022e\u0234\5*\26\2\u022f\u0231\7/\2\2\u0230\u022f")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u0234\5\64\33\2\u0233\u022e\3\2\2\2\u0233\u0230\3\2\2")
        buf.write("\2\u0234\u023f\3\2\2\2\u0235\u023b\7\62\2\2\u0236\u023c")
        buf.write("\5*\26\2\u0237\u0239\7/\2\2\u0238\u0237\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023c\5\64\33")
        buf.write("\2\u023b\u0236\3\2\2\2\u023b\u0238\3\2\2\2\u023c\u023e")
        buf.write("\3\2\2\2\u023d\u0235\3\2\2\2\u023e\u0241\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0243\3\2\2\2")
        buf.write("\u0241\u023f\3\2\2\2\u0242\u0244\7\62\2\2\u0243\u0242")
        buf.write("\3\2\2\2\u0243\u0244\3\2\2\2\u0244\u0246\3\2\2\2\u0245")
        buf.write("\u021e\3\2\2\2\u0245\u0233\3\2\2\2\u0246\17\3\2\2\2\u0247")
        buf.write("\u0248\t\4\2\2\u0248\21\3\2\2\2\u0249\u024a\7#\2\2\u024a")
        buf.write("\23\3\2\2\2\u024b\u024c\7\"\2\2\u024c\25\3\2\2\2\u024d")
        buf.write("\u0259\7\4\2\2\u024e\u0253\5*\26\2\u024f\u0250\7\62\2")
        buf.write("\2\u0250\u0252\5*\26\2\u0251\u024f\3\2\2\2\u0252\u0255")
        buf.write("\3\2\2\2\u0253\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254")
        buf.write("\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0256\u0258\7\62\2")
        buf.write("\2\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025a")
        buf.write("\3\2\2\2\u0259\u024e\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\27\3\2\2\2\u025b\u0261\7\5\2\2\u025c\u025f\5*\26\2\u025d")
        buf.write("\u025e\7\6\2\2\u025e\u0260\5*\26\2\u025f\u025d\3\2\2\2")
        buf.write("\u025f\u0260\3\2\2\2\u0260\u0262\3\2\2\2\u0261\u025c\3")
        buf.write("\2\2\2\u0261\u0262\3\2\2\2\u0262\31\3\2\2\2\u0263\u0271")
        buf.write("\7\37\2\2\u0264\u0265\7\6\2\2\u0265\u0272\5*\26\2\u0266")
        buf.write("\u026b\5*\26\2\u0267\u0268\7\62\2\2\u0268\u026a\5*\26")
        buf.write("\2\u0269\u0267\3\2\2\2\u026a\u026d\3\2\2\2\u026b\u0269")
        buf.write("\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026f\3\2\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026e\u0270\7\62\2\2\u026f\u026e\3\2\2")
        buf.write("\2\u026f\u0270\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u0264")
        buf.write("\3\2\2\2\u0271\u0266\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\33\3\2\2\2\u0273\u0274\7\f\2\2\u0274\u0275\5*\26\2\u0275")
        buf.write("\u0276\7\63\2\2\u0276\u027e\5(\25\2\u0277\u0278\7\r\2")
        buf.write("\2\u0278\u0279\5*\26\2\u0279\u027a\7\63\2\2\u027a\u027b")
        buf.write("\5(\25\2\u027b\u027d\3\2\2\2\u027c\u0277\3\2\2\2\u027d")
        buf.write("\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2")
        buf.write("\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0283\5")
        buf.write("\36\20\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\35\3\2\2\2\u0284\u0285\7\16\2\2\u0285\u0286\7\63\2\2")
        buf.write("\u0286\u0287\5(\25\2\u0287\37\3\2\2\2\u0288\u0289\7\17")
        buf.write("\2\2\u0289\u028a\5*\26\2\u028a\u028b\7\63\2\2\u028b\u028d")
        buf.write("\5(\25\2\u028c\u028e\5\36\20\2\u028d\u028c\3\2\2\2\u028d")
        buf.write("\u028e\3\2\2\2\u028e!\3\2\2\2\u028f\u0291\7\20\2\2\u0290")
        buf.write("\u0292\7/\2\2\u0291\u0290\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0293\3\2\2\2\u0293\u029b\5\64\33\2\u0294\u0296")
        buf.write("\7\62\2\2\u0295\u0297\7/\2\2\u0296\u0295\3\2\2\2\u0296")
        buf.write("\u0297\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\5\64\33")
        buf.write("\2\u0299\u0294\3\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299")
        buf.write("\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029f\3\2\2\2\u029d")
        buf.write("\u029b\3\2\2\2\u029e\u02a0\7\62\2\2\u029f\u029e\3\2\2")
        buf.write("\2\u029f\u02a0\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a2")
        buf.write("\7\21\2\2\u02a2\u02a7\5*\26\2\u02a3\u02a4\7\62\2\2\u02a4")
        buf.write("\u02a6\5*\26\2\u02a5\u02a3\3\2\2\2\u02a6\u02a9\3\2\2\2")
        buf.write("\u02a7\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02ab\3")
        buf.write("\2\2\2\u02a9\u02a7\3\2\2\2\u02aa\u02ac\7\62\2\2\u02ab")
        buf.write("\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad\u02ae\7\63\2\2\u02ae\u02b0\5(\25\2\u02af\u02b1")
        buf.write("\5\36\20\2\u02b0\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1")
        buf.write("#\3\2\2\2\u02b2\u02b3\7\22\2\2\u02b3\u02b4\7\63\2\2\u02b4")
        buf.write("\u02c8\5(\25\2\u02b5\u02b6\5&\24\2\u02b6\u02b7\7\63\2")
        buf.write("\2\u02b7\u02b8\5(\25\2\u02b8\u02ba\3\2\2\2\u02b9\u02b5")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02be\3\2\2\2\u02bd\u02bf\5\36\20")
        buf.write("\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c3")
        buf.write("\3\2\2\2\u02c0\u02c1\7\23\2\2\u02c1\u02c2\7\63\2\2\u02c2")
        buf.write("\u02c4\5(\25\2\u02c3\u02c0\3\2\2\2\u02c3\u02c4\3\2\2\2")
        buf.write("\u02c4\u02c9\3\2\2\2\u02c5\u02c6\7\23\2\2\u02c6\u02c7")
        buf.write("\7\63\2\2\u02c7\u02c9\5(\25\2\u02c8\u02b9\3\2\2\2\u02c8")
        buf.write("\u02c5\3\2\2\2\u02c9%\3\2\2\2\u02ca\u02d0\7\25\2\2\u02cb")
        buf.write("\u02ce\5*\26\2\u02cc\u02cd\7\b\2\2\u02cd\u02cf\7%\2\2")
        buf.write("\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1\3")
        buf.write("\2\2\2\u02d0\u02cb\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\'")
        buf.write("\3\2\2\2\u02d2\u02d7\5\n\6\2\u02d3\u02d4\7\64\2\2\u02d4")
        buf.write("\u02d6\5\n\6\2\u02d5\u02d3\3\2\2\2\u02d6\u02d9\3\2\2\2")
        buf.write("\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02db\3")
        buf.write("\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02dc\7\64\2\2\u02db")
        buf.write("\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2")
        buf.write("\u02dd\u02de\7$\2\2\u02de\u02e9\3\2\2\2\u02df\u02e0\7")
        buf.write("$\2\2\u02e0\u02e2\7^\2\2\u02e1\u02e3\5\b\5\2\u02e2\u02e1")
        buf.write("\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\7_\2\2")
        buf.write("\u02e7\u02e9\3\2\2\2\u02e8\u02d2\3\2\2\2\u02e8\u02df\3")
        buf.write("\2\2\2\u02e9)\3\2\2\2\u02ea\u02f0\5.\30\2\u02eb\u02ec")
        buf.write("\7\f\2\2\u02ec\u02ed\5.\30\2\u02ed\u02ee\7\16\2\2\u02ee")
        buf.write("\u02ef\5*\26\2\u02ef\u02f1\3\2\2\2\u02f0\u02eb\3\2\2\2")
        buf.write("\u02f0\u02f1\3\2\2\2\u02f1\u02f9\3\2\2\2\u02f2\u02f4\7")
        buf.write("\26\2\2\u02f3\u02f5\5\6\4\2\u02f4\u02f3\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\7\63\2")
        buf.write("\2\u02f7\u02f9\5*\26\2\u02f8\u02ea\3\2\2\2\u02f8\u02f2")
        buf.write("\3\2\2\2\u02f9+\3\2\2\2\u02fa\u0302\5.\30\2\u02fb\u02fd")
        buf.write("\7\26\2\2\u02fc\u02fe\5\6\4\2\u02fd\u02fc\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\7\63\2")
        buf.write("\2\u0300\u0302\5,\27\2\u0301\u02fa\3\2\2\2\u0301\u02fb")
        buf.write("\3\2\2\2\u0302-\3\2\2\2\u0303\u0308\5\60\31\2\u0304\u0305")
        buf.write("\t\5\2\2\u0305\u0307\5\60\31\2\u0306\u0304\3\2\2\2\u0307")
        buf.write("\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0309\3\2\2\2")
        buf.write("\u0309/\3\2\2\2\u030a\u0308\3\2\2\2\u030b\u030c\7\31\2")
        buf.write("\2\u030c\u031d\5\60\31\2\u030d\u030f\7/\2\2\u030e\u030d")
        buf.write("\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310")
        buf.write("\u0319\5\64\33\2\u0311\u0313\5\62\32\2\u0312\u0314\7/")
        buf.write("\2\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315")
        buf.write("\3\2\2\2\u0315\u0316\5\64\33\2\u0316\u0318\3\2\2\2\u0317")
        buf.write("\u0311\3\2\2\2\u0318\u031b\3\2\2\2\u0319\u0317\3\2\2\2")
        buf.write("\u0319\u031a\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3")
        buf.write("\2\2\2\u031c\u030b\3\2\2\2\u031c\u030e\3\2\2\2\u031d\61")
        buf.write("\3\2\2\2\u031e\u032c\7F\2\2\u031f\u032c\7G\2\2\u0320\u032c")
        buf.write("\7H\2\2\u0321\u032c\7I\2\2\u0322\u032c\7J\2\2\u0323\u032c")
        buf.write("\7K\2\2\u0324\u032c\7L\2\2\u0325\u032c\7\21\2\2\u0326")
        buf.write("\u0327\7\31\2\2\u0327\u032c\7\21\2\2\u0328\u032c\7\32")
        buf.write("\2\2\u0329\u032a\7\32\2\2\u032a\u032c\7\31\2\2\u032b\u031e")
        buf.write("\3\2\2\2\u032b\u031f\3\2\2\2\u032b\u0320\3\2\2\2\u032b")
        buf.write("\u0321\3\2\2\2\u032b\u0322\3\2\2\2\u032b\u0323\3\2\2\2")
        buf.write("\u032b\u0324\3\2\2\2\u032b\u0325\3\2\2\2\u032b\u0326\3")
        buf.write("\2\2\2\u032b\u0328\3\2\2\2\u032b\u0329\3\2\2\2\u032c\63")
        buf.write("\3\2\2\2\u032d\u0332\5\66\34\2\u032e\u032f\t\6\2\2\u032f")
        buf.write("\u0331\5\66\34\2\u0330\u032e\3\2\2\2\u0331\u0334\3\2\2")
        buf.write("\2\u0332\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\65\3")
        buf.write("\2\2\2\u0334\u0332\3\2\2\2\u0335\u0336\t\7\2\2\u0336\u0344")
        buf.write("\5\66\34\2\u0337\u0344\58\35\2\u0338\u033c\5:\36\2\u0339")
        buf.write("\u033b\5<\37\2\u033a\u0339\3\2\2\2\u033b\u033e\3\2\2\2")
        buf.write("\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0341\3")
        buf.write("\2\2\2\u033e\u033c\3\2\2\2\u033f\u0340\7\65\2\2\u0340")
        buf.write("\u0342\5\66\34\2\u0341\u033f\3\2\2\2\u0341\u0342\3\2\2")
        buf.write("\2\u0342\u0344\3\2\2\2\u0343\u0335\3\2\2\2\u0343\u0337")
        buf.write("\3\2\2\2\u0343\u0338\3\2\2\2\u0344\67\3\2\2\2\u0345\u0347")
        buf.write("\b\35\1\2\u0346\u0348\7-\2\2\u0347\u0346\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034a\7%\2\2")
        buf.write("\u034a\u034c\7\60\2\2\u034b\u034d\5B\"\2\u034c\u034b\3")
        buf.write("\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f")
        buf.write("\7\61\2\2\u034f\u035c\3\2\2\2\u0350\u0353\f\3\2\2\u0351")
        buf.write("\u0352\7-\2\2\u0352\u0354\7%\2\2\u0353\u0351\3\2\2\2\u0353")
        buf.write("\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0357\7\60\2")
        buf.write("\2\u0356\u0358\5B\"\2\u0357\u0356\3\2\2\2\u0357\u0358")
        buf.write("\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\7\61\2\2\u035a")
        buf.write("\u0350\3\2\2\2\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2")
        buf.write("\u035c\u035d\3\2\2\2\u035d9\3\2\2\2\u035e\u035c\3\2\2")
        buf.write("\2\u035f\u037e\7\60\2\2\u0360\u036e\7\37\2\2\u0361\u0362")
        buf.write("\7\6\2\2\u0362\u036f\5*\26\2\u0363\u0368\5*\26\2\u0364")
        buf.write("\u0365\7\62\2\2\u0365\u0367\5*\26\2\u0366\u0364\3\2\2")
        buf.write("\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369")
        buf.write("\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2\u036b")
        buf.write("\u036d\7\62\2\2\u036c\u036b\3\2\2\2\u036c\u036d\3\2\2")
        buf.write("\2\u036d\u036f\3\2\2\2\u036e\u0361\3\2\2\2\u036e\u0363")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u037f\3\2\2\2\u0370")
        buf.write("\u037c\5*\26\2\u0371\u037d\5F$\2\u0372\u0373\7\62\2\2")
        buf.write("\u0373\u0375\5*\26\2\u0374\u0372\3\2\2\2\u0375\u0378\3")
        buf.write("\2\2\2\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u037a")
        buf.write("\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u037b\7\62\2\2\u037a")
        buf.write("\u0379\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\3\2\2\2")
        buf.write("\u037c\u0371\3\2\2\2\u037c\u0376\3\2\2\2\u037d\u037f\3")
        buf.write("\2\2\2\u037e\u0360\3\2\2\2\u037e\u0370\3\2\2\2\u037e\u037f")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u03ab\7\61\2\2\u0381")
        buf.write("\u0390\7\67\2\2\u0382\u038e\5*\26\2\u0383\u038f\5F$\2")
        buf.write("\u0384\u0385\7\62\2\2\u0385\u0387\5*\26\2\u0386\u0384")
        buf.write("\3\2\2\2\u0387\u038a\3\2\2\2\u0388\u0386\3\2\2\2\u0388")
        buf.write("\u0389\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2")
        buf.write("\u038b\u038d\7\62\2\2\u038c\u038b\3\2\2\2\u038c\u038d")
        buf.write("\3\2\2\2\u038d\u038f\3\2\2\2\u038e\u0383\3\2\2\2\u038e")
        buf.write("\u0388\3\2\2\2\u038f\u0391\3\2\2\2\u0390\u0382\3\2\2\2")
        buf.write("\u0390\u0391\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u03ab\7")
        buf.write("8\2\2\u0393\u0395\7D\2\2\u0394\u0396\5@!\2\u0395\u0394")
        buf.write("\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u03ab\7E\2\2\u0398\u03a9\7%\2\2\u0399\u03a9\7\'\2\2\u039a")
        buf.write("\u03a9\7(\2\2\u039b\u03a9\7)\2\2\u039c\u03a9\7*\2\2\u039d")
        buf.write("\u03a9\7+\2\2\u039e\u03a9\7,\2\2\u039f\u03a1\7&\2\2\u03a0")
        buf.write("\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a0\3\2\2\2")
        buf.write("\u03a2\u03a3\3\2\2\2\u03a3\u03a9\3\2\2\2\u03a4\u03a9\7")
        buf.write(".\2\2\u03a5\u03a9\7\33\2\2\u03a6\u03a9\7\34\2\2\u03a7")
        buf.write("\u03a9\7\35\2\2\u03a8\u0398\3\2\2\2\u03a8\u0399\3\2\2")
        buf.write("\2\u03a8\u039a\3\2\2\2\u03a8\u039b\3\2\2\2\u03a8\u039c")
        buf.write("\3\2\2\2\u03a8\u039d\3\2\2\2\u03a8\u039e\3\2\2\2\u03a8")
        buf.write("\u03a0\3\2\2\2\u03a8\u03a4\3\2\2\2\u03a8\u03a5\3\2\2\2")
        buf.write("\u03a8\u03a6\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03ab\3")
        buf.write("\2\2\2\u03aa\u035f\3\2\2\2\u03aa\u0381\3\2\2\2\u03aa\u0393")
        buf.write("\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab;\3\2\2\2\u03ac\u03ae")
        buf.write("\7\60\2\2\u03ad\u03af\5B\"\2\u03ae\u03ad\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03c2\7\61\2")
        buf.write("\2\u03b1\u03b2\7\67\2\2\u03b2\u03b7\5> \2\u03b3\u03b4")
        buf.write("\7\62\2\2\u03b4\u03b6\5> \2\u03b5\u03b3\3\2\2\2\u03b6")
        buf.write("\u03b9\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b8\3\2\2\2")
        buf.write("\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03ba\u03bc\7")
        buf.write("\62\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\78\2\2\u03be\u03c2\3\2\2\2")
        buf.write("\u03bf\u03c0\7-\2\2\u03c0\u03c2\7%\2\2\u03c1\u03ac\3\2")
        buf.write("\2\2\u03c1\u03b1\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2=\3")
        buf.write("\2\2\2\u03c3\u03d2\5*\26\2\u03c4\u03c6\5*\26\2\u03c5\u03c4")
        buf.write("\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7")
        buf.write("\u03c9\7\63\2\2\u03c8\u03ca\5*\26\2\u03c9\u03c8\3\2\2")
        buf.write("\2\u03c9\u03ca\3\2\2\2\u03ca\u03cf\3\2\2\2\u03cb\u03cd")
        buf.write("\7\63\2\2\u03cc\u03ce\5*\26\2\u03cd\u03cc\3\2\2\2\u03cd")
        buf.write("\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03cb\3\2\2\2")
        buf.write("\u03cf\u03d0\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03c3\3")
        buf.write("\2\2\2\u03d1\u03c5\3\2\2\2\u03d2?\3\2\2\2\u03d3\u03f2")
        buf.write("\5*\26\2\u03d4\u03d5\7\63\2\2\u03d5\u03d7\5*\26\2\u03d6")
        buf.write("\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3\2\2\2")
        buf.write("\u03d8\u03f3\5F$\2\u03d9\u03da\7\63\2\2\u03da\u03e2\5")
        buf.write("*\26\2\u03db\u03dc\7\62\2\2\u03dc\u03dd\5*\26\2\u03dd")
        buf.write("\u03de\7\63\2\2\u03de\u03df\5*\26\2\u03df\u03e1\3\2\2")
        buf.write("\2\u03e0\u03db\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e5\u03e7\7\62\2\2\u03e6\u03e5\3\2\2")
        buf.write("\2\u03e6\u03e7\3\2\2\2\u03e7\u03f3\3\2\2\2\u03e8\u03e9")
        buf.write("\7\62\2\2\u03e9\u03eb\5*\26\2\u03ea\u03e8\3\2\2\2\u03eb")
        buf.write("\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2")
        buf.write("\u03ed\u03f0\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef\u03f1\7")
        buf.write("\62\2\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1")
        buf.write("\u03f3\3\2\2\2\u03f2\u03d6\3\2\2\2\u03f2\u03d9\3\2\2\2")
        buf.write("\u03f2\u03ec\3\2\2\2\u03f3A\3\2\2\2\u03f4\u03fa\5*\26")
        buf.write("\2\u03f5\u03f7\5F$\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3")
        buf.write("\2\2\2\u03f7\u03fb\3\2\2\2\u03f8\u03f9\7\66\2\2\u03f9")
        buf.write("\u03fb\5*\26\2\u03fa\u03f6\3\2\2\2\u03fa\u03f8\3\2\2\2")
        buf.write("\u03fb\u03fc\3\2\2\2\u03fc\u03fd\7\62\2\2\u03fd\u03ff")
        buf.write("\3\2\2\2\u03fe\u03f4\3\2\2\2\u03ff\u0402\3\2\2\2\u0400")
        buf.write("\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0425\3\2\2\2")
        buf.write("\u0402\u0400\3\2\2\2\u0403\u0409\5*\26\2\u0404\u0406\5")
        buf.write("F$\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u040a")
        buf.write("\3\2\2\2\u0407\u0408\7\66\2\2\u0408\u040a\5*\26\2\u0409")
        buf.write("\u0405\3\2\2\2\u0409\u0407\3\2\2\2\u040a\u040c\3\2\2\2")
        buf.write("\u040b\u040d\7\62\2\2\u040c\u040b\3\2\2\2\u040c\u040d")
        buf.write("\3\2\2\2\u040d\u0426\3\2\2\2\u040e\u040f\7/\2\2\u040f")
        buf.write("\u041b\5*\26\2\u0410\u0411\7\62\2\2\u0411\u0417\5*\26")
        buf.write("\2\u0412\u0414\5F$\2\u0413\u0412\3\2\2\2\u0413\u0414\3")
        buf.write("\2\2\2\u0414\u0418\3\2\2\2\u0415\u0416\7\66\2\2\u0416")
        buf.write("\u0418\5*\26\2\u0417\u0413\3\2\2\2\u0417\u0415\3\2\2\2")
        buf.write("\u0418\u041a\3\2\2\2\u0419\u0410\3\2\2\2\u041a\u041d\3")
        buf.write("\2\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u0421")
        buf.write("\3\2\2\2\u041d\u041b\3\2\2\2\u041e\u041f\7\62\2\2\u041f")
        buf.write("\u0420\7\65\2\2\u0420\u0422\5*\26\2\u0421\u041e\3\2\2")
        buf.write("\2\u0421\u0422\3\2\2\2\u0422\u0426\3\2\2\2\u0423\u0424")
        buf.write("\7\65\2\2\u0424\u0426\5*\26\2\u0425\u0403\3\2\2\2\u0425")
        buf.write("\u040e\3\2\2\2\u0425\u0423\3\2\2\2\u0426C\3\2\2\2\u0427")
        buf.write("\u042e\5F$\2\u0428\u0429\7\f\2\2\u0429\u042b\5,\27\2\u042a")
        buf.write("\u042c\5D#\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c")
        buf.write("\u042e\3\2\2\2\u042d\u0427\3\2\2\2\u042d\u0428\3\2\2\2")
        buf.write("\u042eE\3\2\2\2\u042f\u0431\7\20\2\2\u0430\u0432\7/\2")
        buf.write("\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433")
        buf.write("\3\2\2\2\u0433\u043b\5\64\33\2\u0434\u0436\7\62\2\2\u0435")
        buf.write("\u0437\7/\2\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2\2\2")
        buf.write("\u0437\u0438\3\2\2\2\u0438\u043a\5\64\33\2\u0439\u0434")
        buf.write("\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043b")
        buf.write("\u043c\3\2\2\2\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2\2")
        buf.write("\u043e\u0440\7\62\2\2\u043f\u043e\3\2\2\2\u043f\u0440")
        buf.write("\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442\7\21\2\2\u0442")
        buf.write("\u0444\5.\30\2\u0443\u0445\5D#\2\u0444\u0443\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445G\3\2\2\2\u00cbJLTX^bfnpvz~\u0086")
        buf.write("\u0088\u008e\u0090\u0092\u0098\u009a\u00a0\u00a4\u00a8")
        buf.write("\u00b0\u00b2\u00b8\u00ba\u00bf\u00c5\u00c9\u00cf\u00d5")
        buf.write("\u00d9\u00df\u00e3\u00e5\u00e9\u00ef\u00f3\u00f9\u00fd")
        buf.write("\u0104\u0108\u010b\u0115\u011b\u011f\u012b\u0130\u0133")
        buf.write("\u0138\u013f\u0142\u0148\u014d\u014f\u0153\u0157\u015a")
        buf.write("\u015f\u0162\u0166\u016a\u0175\u0179\u017b\u0182\u0186")
        buf.write("\u0188\u018d\u0190\u0194\u0199\u019e\u01a2\u01b0\u01b5")
        buf.write("\u01bd\u01c2\u01c6\u01cd\u01d5\u01db\u01dd\u01e5\u01eb")
        buf.write("\u01ef\u01f3\u01f9\u01ff\u0203\u0207\u0209\u0211\u0215")
        buf.write("\u021b\u0226\u022a\u022c\u0230\u0233\u0238\u023b\u023f")
        buf.write("\u0243\u0245\u0253\u0257\u0259\u025f\u0261\u026b\u026f")
        buf.write("\u0271\u027e\u0282\u028d\u0291\u0296\u029b\u029f\u02a7")
        buf.write("\u02ab\u02b0\u02bb\u02be\u02c3\u02c8\u02ce\u02d0\u02d7")
        buf.write("\u02db\u02e4\u02e8\u02f0\u02f4\u02f8\u02fd\u0301\u0308")
        buf.write("\u030e\u0313\u0319\u031c\u032b\u0332\u033c\u0341\u0343")
        buf.write("\u0347\u034c\u0353\u0357\u035c\u0368\u036c\u036e\u0376")
        buf.write("\u037a\u037c\u037e\u0388\u038c\u038e\u0390\u0395\u03a2")
        buf.write("\u03a8\u03aa\u03ae\u03b7\u03bb\u03c1\u03c5\u03c9\u03cd")
        buf.write("\u03cf\u03d1\u03d6\u03e2\u03e6\u03ec\u03f0\u03f2\u03f6")
        buf.write("\u03fa\u0400\u0405\u0409\u040c\u0413\u0417\u041b\u0421")
        buf.write("\u0425\u042b\u042d\u0431\u0436\u043b\u043f\u0444")
        return buf.getvalue()


class Python3Parser(Parser):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'...'",
                    "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='",
                    "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'",
                    "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'",
                    "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='",
                    "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='",
                    "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='",
                    "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_BYTES_LITERAL",
                     "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER",
                     "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS",
                     "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON",
                     "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK",
                     "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT",
                     "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE",
                     "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS",
                     "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW",
                     "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN",
                     "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN",
                     "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN",
                     "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR",
                     "INDENT", "DEDENT"]

    RULE_file_input = 0
    RULE_typedargslist = 1
    RULE_varargslist = 2
    RULE_stmt = 3
    RULE_small_stmt = 4
    RULE_assert_stmt = 5
    RULE_assign = 6
    RULE_augassign = 7
    RULE_break_stmt = 8
    RULE_continue_stmt = 9
    RULE_return_stmt = 10
    RULE_raise_stmt = 11
    RULE_yield_stmt = 12
    RULE_if_stmt = 13
    RULE_else_suite = 14
    RULE_while_stmt = 15
    RULE_for_stmt = 16
    RULE_try_stmt = 17
    RULE_except_clause = 18
    RULE_suite = 19
    RULE_test = 20
    RULE_test_nocond = 21
    RULE_or_test = 22
    RULE_not_test = 23
    RULE_comp_op = 24
    RULE_expr = 25
    RULE_factor = 26
    RULE_call = 27
    RULE_atom = 28
    RULE_trailer = 29
    RULE_subscript = 30
    RULE_dictorsetmaker = 31
    RULE_arglist = 32
    RULE_comp_iter = 33
    RULE_comp_for = 34

    ruleNames = ["file_input", "typedargslist", "varargslist", "stmt",
                 "small_stmt", "assert_stmt", "assign", "augassign", "break_stmt",
                 "continue_stmt", "return_stmt", "raise_stmt", "yield_stmt",
                 "if_stmt", "else_suite", "while_stmt", "for_stmt", "try_stmt",
                 "except_clause", "suite", "test", "test_nocond", "or_test",
                 "not_test", "comp_op", "expr", "factor", "call", "atom",
                 "trailer", "subscript", "dictorsetmaker", "arglist",
                 "comp_iter", "comp_for"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_BYTES_LITERAL = 36
    DECIMAL_INTEGER = 37
    OCT_INTEGER = 38
    HEX_INTEGER = 39
    BIN_INTEGER = 40
    FLOAT_NUMBER = 41
    IMAG_NUMBER = 42
    DOT = 43
    ELLIPSIS = 44
    STAR = 45
    OPEN_PAREN = 46
    CLOSE_PAREN = 47
    COMMA = 48
    COLON = 49
    SEMI_COLON = 50
    POWER = 51
    ASSIGN = 52
    OPEN_BRACK = 53
    CLOSE_BRACK = 54
    OR_OP = 55
    XOR = 56
    AND_OP = 57
    LEFT_SHIFT = 58
    RIGHT_SHIFT = 59
    ADD = 60
    MINUS = 61
    DIV = 62
    MOD = 63
    IDIV = 64
    NOT_OP = 65
    OPEN_BRACE = 66
    CLOSE_BRACE = 67
    LESS_THAN = 68
    GREATER_THAN = 69
    EQUALS = 70
    GT_EQ = 71
    LT_EQ = 72
    NOT_EQ_1 = 73
    NOT_EQ_2 = 74
    AT = 75
    ARROW = 76
    ADD_ASSIGN = 77
    SUB_ASSIGN = 78
    MULT_ASSIGN = 79
    AT_ASSIGN = 80
    DIV_ASSIGN = 81
    MOD_ASSIGN = 82
    AND_ASSIGN = 83
    OR_ASSIGN = 84
    XOR_ASSIGN = 85
    LEFT_SHIFT_ASSIGN = 86
    RIGHT_SHIFT_ASSIGN = 87
    POWER_ASSIGN = 88
    IDIV_ASSIGN = 89
    SKIP_ = 90
    UNKNOWN_CHAR = 91
    INDENT = 92
    DEDENT = 93

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 74
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                    1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                            1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (
                            1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (
                            1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                            1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (
                            1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (
                            1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                            1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                            1 << Python3Parser.STRING_BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                            1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                            1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                            1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.DOT) | (
                            1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (
                            1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK) | (
                            1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                    1 << (Python3Parser.AT - 65)))) != 0):
                self.state = 72
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NEWLINE:
                    self.state = 70
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM,
                               Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT,
                               Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY,
                               Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE,
                               Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD,
                               Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK,
                               Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.DOT,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE, Python3Parser.AT]:
                    self.state = 71
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 76
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 77
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 79
                self.match(Python3Parser.NAME)
                self.state = 82
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 80
                    self.match(Python3Parser.COLON)
                    self.state = 81
                    self.test()

                self.state = 86
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 84
                    self.match(Python3Parser.ASSIGN)
                    self.state = 85
                    self.test()

                self.state = 100
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 88
                        self.match(Python3Parser.COMMA)
                        self.state = 89
                        self.match(Python3Parser.NAME)
                        self.state = 92
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 90
                            self.match(Python3Parser.COLON)
                            self.state = 91
                            self.test()

                        self.state = 96
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 94
                            self.match(Python3Parser.ASSIGN)
                            self.state = 95
                            self.test()

                    self.state = 102
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 103
                    self.match(Python3Parser.COMMA)
                    self.state = 142
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 104
                        self.match(Python3Parser.STAR)
                        self.state = 110
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 105
                            self.match(Python3Parser.NAME)
                            self.state = 108
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 106
                                self.match(Python3Parser.COLON)
                                self.state = 107
                                self.test()

                        self.state = 124
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 112
                                self.match(Python3Parser.COMMA)
                                self.state = 113
                                self.match(Python3Parser.NAME)
                                self.state = 116
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.COLON:
                                    self.state = 114
                                    self.match(Python3Parser.COLON)
                                    self.state = 115
                                    self.test()

                                self.state = 120
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 118
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 119
                                    self.test()

                            self.state = 126
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                        self.state = 134
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 127
                            self.match(Python3Parser.COMMA)
                            self.state = 128
                            self.match(Python3Parser.POWER)
                            self.state = 129
                            self.match(Python3Parser.NAME)
                            self.state = 132
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 130
                                self.match(Python3Parser.COLON)
                                self.state = 131
                                self.test()

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 136
                        self.match(Python3Parser.POWER)
                        self.state = 137
                        self.match(Python3Parser.NAME)
                        self.state = 140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 138
                            self.match(Python3Parser.COLON)
                            self.state = 139
                            self.test()

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 146
                self.match(Python3Parser.STAR)
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 147
                    self.match(Python3Parser.NAME)
                    self.state = 150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 148
                        self.match(Python3Parser.COLON)
                        self.state = 149
                        self.test()

                self.state = 166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 154
                        self.match(Python3Parser.COMMA)
                        self.state = 155
                        self.match(Python3Parser.NAME)
                        self.state = 158
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 156
                            self.match(Python3Parser.COLON)
                            self.state = 157
                            self.test()

                        self.state = 162
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 160
                            self.match(Python3Parser.ASSIGN)
                            self.state = 161
                            self.test()

                    self.state = 168
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 169
                    self.match(Python3Parser.COMMA)
                    self.state = 170
                    self.match(Python3Parser.POWER)
                    self.state = 171
                    self.match(Python3Parser.NAME)
                    self.state = 174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 172
                        self.match(Python3Parser.COLON)
                        self.state = 173
                        self.test()

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 178
                self.match(Python3Parser.POWER)
                self.state = 179
                self.match(Python3Parser.NAME)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 180
                    self.match(Python3Parser.COLON)
                    self.state = 181
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.match(Python3Parser.NAME)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 187
                    self.match(Python3Parser.ASSIGN)
                    self.state = 188
                    self.test()

                self.state = 199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 191
                        self.match(Python3Parser.COMMA)
                        self.state = 192
                        self.match(Python3Parser.NAME)
                        self.state = 195
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 193
                            self.match(Python3Parser.ASSIGN)
                            self.state = 194
                            self.test()

                    self.state = 201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 202
                    self.match(Python3Parser.COMMA)
                    self.state = 225
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 203
                        self.match(Python3Parser.STAR)
                        self.state = 205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 204
                            self.match(Python3Parser.NAME)

                        self.state = 215
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 207
                                self.match(Python3Parser.COMMA)
                                self.state = 208
                                self.match(Python3Parser.NAME)
                                self.state = 211
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 209
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 210
                                    self.test()

                            self.state = 217
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

                        self.state = 221
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 218
                            self.match(Python3Parser.COMMA)
                            self.state = 219
                            self.match(Python3Parser.POWER)
                            self.state = 220
                            self.match(Python3Parser.NAME)

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 223
                        self.match(Python3Parser.POWER)
                        self.state = 224
                        self.match(Python3Parser.NAME)
                        pass
                    elif token == Python3Parser.COLON:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.match(Python3Parser.STAR)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 230
                    self.match(Python3Parser.NAME)

                self.state = 241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 233
                        self.match(Python3Parser.COMMA)
                        self.state = 234
                        self.match(Python3Parser.NAME)
                        self.state = 237
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 235
                            self.match(Python3Parser.ASSIGN)
                            self.state = 236
                            self.test()

                    self.state = 243
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 244
                    self.match(Python3Parser.COMMA)
                    self.state = 245
                    self.match(Python3Parser.POWER)
                    self.state = 246
                    self.match(Python3Parser.NAME)

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 249
                self.match(Python3Parser.POWER)
                self.state = 250
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def arglist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArglistContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArglistContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        self._la = 0  # Token type
        try:
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                         Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                         Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.small_stmt()
                self.state = 258
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 254
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 255
                        self.small_stmt()
                    self.state = 260
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 261
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
                if la_ == 1:
                    self.state = 264
                    self.match(Python3Parser.NEWLINE)

                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.if_stmt()
                pass
            elif token == Python3Parser.WHILE:
                self.enterOuterAlt(localctx, 3)
                self.state = 268
                self.while_stmt()
                pass
            elif token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 4)
                self.state = 269
                self.for_stmt()
                pass
            elif token == Python3Parser.TRY:
                self.enterOuterAlt(localctx, 5)
                self.state = 270
                self.try_stmt()
                pass
            elif token == Python3Parser.WITH:
                self.enterOuterAlt(localctx, 6)
                self.state = 271
                self.match(Python3Parser.WITH)
                self.state = 272
                self.test()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 273
                    self.match(Python3Parser.AS)
                    self.state = 274
                    self.expr()

                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 277
                    self.match(Python3Parser.COMMA)
                    self.state = 278
                    self.test()
                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 279
                        self.match(Python3Parser.AS)
                        self.state = 280
                        self.expr()

                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self.match(Python3Parser.COLON)
                self.state = 289
                self.suite()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.AT:
                    self.state = 291
                    self.match(Python3Parser.AT)
                    self.state = 292
                    self.match(Python3Parser.NAME)
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 293
                        self.match(Python3Parser.DOT)
                        self.state = 294
                        self.match(Python3Parser.NAME)
                        self.state = 299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 300
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 302
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.DOT - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 301
                            self.arglist()

                        self.state = 304
                        self.match(Python3Parser.CLOSE_PAREN)

                    self.state = 307
                    self.match(Python3Parser.NEWLINE)
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.CLASS:
                    self.state = 313
                    self.match(Python3Parser.CLASS)
                    self.state = 314
                    self.match(Python3Parser.NAME)
                    self.state = 320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 315
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 317
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.DOT - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 316
                            self.arglist()

                        self.state = 319
                        self.match(Python3Parser.CLOSE_PAREN)

                    pass
                elif token == Python3Parser.DEF:
                    self.state = 322
                    self.match(Python3Parser.DEF)
                    self.state = 323
                    self.match(Python3Parser.NAME)
                    self.state = 324
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                        self.state = 325
                        self.typedargslist()

                    self.state = 328
                    self.match(Python3Parser.CLOSE_PAREN)
                    self.state = 331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.ARROW:
                        self.state = 329
                        self.match(Python3Parser.ARROW)
                        self.state = 330
                        self.test()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 335
                self.match(Python3Parser.COLON)
                self.state = 336
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSmall_stmt"):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_small_stmt)
        self._la = 0  # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                         Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                         Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 339
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 340
                        self.match(Python3Parser.STAR)

                    self.state = 343
                    self.expr()
                    pass

                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 346
                        self.match(Python3Parser.COMMA)
                        self.state = 352
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                        if la_ == 1:
                            self.state = 347
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 349
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 348
                                self.match(Python3Parser.STAR)

                            self.state = 351
                            self.expr()
                            pass

                    self.state = 358
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 359
                    self.match(Python3Parser.COMMA)

                self.state = 398
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                             Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                             Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                             Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN,
                             Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                    self.state = 362
                    self.augassign()
                    self.state = 390
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.YIELD:
                        self.state = 363
                        self.match(Python3Parser.YIELD)
                        self.state = 377
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
                        if la_ == 1:
                            self.state = 364
                            self.match(Python3Parser.FROM)
                            self.state = 365
                            self.test()

                        elif la_ == 2:
                            self.state = 366
                            self.test()
                            self.state = 371
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 367
                                    self.match(Python3Parser.COMMA)
                                    self.state = 368
                                    self.test()
                                self.state = 373
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

                            self.state = 375
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COMMA:
                                self.state = 374
                                self.match(Python3Parser.COMMA)

                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                                   Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                                   Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 379
                        self.test()
                        self.state = 384
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 380
                                self.match(Python3Parser.COMMA)
                                self.state = 381
                                self.test()
                            self.state = 386
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 387
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Python3Parser.EOF, Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE,
                               Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL,
                               Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR,
                               Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT,
                               Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS,
                               Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                               Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME,
                               Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.DOT,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.SEMI_COLON, Python3Parser.ASSIGN, Python3Parser.OPEN_BRACK,
                               Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE,
                               Python3Parser.AT, Python3Parser.DEDENT]:
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.ASSIGN:
                        self.state = 392
                        self.assign()
                        self.state = 397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == Python3Parser.DEL:
                self.enterOuterAlt(localctx, 2)
                self.state = 400
                self.match(Python3Parser.DEL)
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 401
                    self.match(Python3Parser.STAR)

                self.state = 404
                self.expr()
                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 405
                        self.match(Python3Parser.COMMA)
                        self.state = 407
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 406
                            self.match(Python3Parser.STAR)

                        self.state = 409
                        self.expr()
                    self.state = 414
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 415
                    self.match(Python3Parser.COMMA)

                pass
            elif token == Python3Parser.PASS:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.match(Python3Parser.PASS)
                pass
            elif token == Python3Parser.BREAK:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.break_stmt()
                pass
            elif token == Python3Parser.CONTINUE:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.continue_stmt()
                pass
            elif token == Python3Parser.RETURN:
                self.enterOuterAlt(localctx, 6)
                self.state = 421
                self.return_stmt()
                pass
            elif token == Python3Parser.RAISE:
                self.enterOuterAlt(localctx, 7)
                self.state = 422
                self.raise_stmt()
                pass
            elif token == Python3Parser.YIELD:
                self.enterOuterAlt(localctx, 8)
                self.state = 423
                self.yield_stmt()
                pass
            elif token == Python3Parser.IMPORT:
                self.enterOuterAlt(localctx, 9)
                self.state = 424
                self.match(Python3Parser.IMPORT)
                self.state = 425
                self.match(Python3Parser.NAME)
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 426
                        self.match(Python3Parser.DOT)
                        self.state = 427
                        self.match(Python3Parser.NAME)
                    self.state = 432
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)

                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 433
                    self.match(Python3Parser.AS)
                    self.state = 434
                    self.match(Python3Parser.NAME)

                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 437
                    self.match(Python3Parser.COMMA)
                    self.state = 438
                    self.match(Python3Parser.NAME)
                    self.state = 443
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 439
                            self.match(Python3Parser.DOT)
                            self.state = 440
                            self.match(Python3Parser.NAME)
                        self.state = 445
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 76, self._ctx)

                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 446
                        self.match(Python3Parser.AS)
                        self.state = 447
                        self.match(Python3Parser.NAME)

                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.FROM:
                self.enterOuterAlt(localctx, 10)
                self.state = 455
                self.match(Python3Parser.FROM)
                self.state = 475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
                if la_ == 1:
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                        self.state = 456
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 461
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 462
                    self.match(Python3Parser.NAME)
                    self.state = 467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 463
                        self.match(Python3Parser.DOT)
                        self.state = 464
                        self.match(Python3Parser.NAME)
                        self.state = 469
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 470
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 473
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            break

                    pass

                self.state = 477
                self.match(Python3Parser.IMPORT)
                self.state = 519
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.STAR:
                    self.state = 478
                    self.match(Python3Parser.STAR)
                    pass
                elif token == Python3Parser.OPEN_PAREN:
                    self.state = 479
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 480
                    self.match(Python3Parser.NAME)
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 481
                        self.match(Python3Parser.AS)
                        self.state = 482
                        self.match(Python3Parser.NAME)

                    self.state = 493
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 485
                            self.match(Python3Parser.COMMA)
                            self.state = 486
                            self.match(Python3Parser.NAME)
                            self.state = 489
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 487
                                self.match(Python3Parser.AS)
                                self.state = 488
                                self.match(Python3Parser.NAME)

                        self.state = 495
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 496
                        self.match(Python3Parser.COMMA)

                    self.state = 499
                    self.match(Python3Parser.CLOSE_PAREN)
                    pass
                elif token == Python3Parser.NAME:
                    self.state = 500
                    self.match(Python3Parser.NAME)
                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 501
                        self.match(Python3Parser.AS)
                        self.state = 502
                        self.match(Python3Parser.NAME)

                    self.state = 513
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 505
                            self.match(Python3Parser.COMMA)
                            self.state = 506
                            self.match(Python3Parser.NAME)
                            self.state = 509
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 507
                                self.match(Python3Parser.AS)
                                self.state = 508
                                self.match(Python3Parser.NAME)

                        self.state = 515
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)

                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 516
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.GLOBAL, Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 521
                _la = self._input.LA(1)
                if not (_la == Python3Parser.GLOBAL or _la == Python3Parser.NONLOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 522
                self.match(Python3Parser.NAME)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 523
                    self.match(Python3Parser.COMMA)
                    self.state = 524
                    self.match(Python3Parser.NAME)
                    self.state = 529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.ASSERT:
                self.enterOuterAlt(localctx, 12)
                self.state = 530
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(Python3Parser.ASSERT)
            self.state = 534
            self.test()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 535
                self.match(Python3Parser.COMMA)
                self.state = 536
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(Python3Parser.ASSIGN)
            self.state = 579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.YIELD:
                self.state = 540
                self.match(Python3Parser.YIELD)
                self.state = 554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 541
                    self.match(Python3Parser.FROM)
                    self.state = 542
                    self.test()

                elif la_ == 2:
                    self.state = 543
                    self.test()
                    self.state = 548
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 544
                            self.match(Python3Parser.COMMA)
                            self.state = 545
                            self.test()
                        self.state = 550
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)

                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 551
                        self.match(Python3Parser.COMMA)

                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                           Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                           Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                           Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                           Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                           Python3Parser.OPEN_BRACE]:
                self.state = 561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
                if la_ == 1:
                    self.state = 556
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 557
                        self.match(Python3Parser.STAR)

                    self.state = 560
                    self.expr()
                    pass

                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 563
                        self.match(Python3Parser.COMMA)
                        self.state = 569
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                        if la_ == 1:
                            self.state = 564
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 565
                                self.match(Python3Parser.STAR)

                            self.state = 568
                            self.expr()
                            pass

                    self.state = 575
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)

                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 576
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            _la = self._input.LA(1)
            if not (((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & (
                    (1 << (Python3Parser.ADD_ASSIGN - 77)) | (1 << (Python3Parser.SUB_ASSIGN - 77)) | (
                    1 << (Python3Parser.MULT_ASSIGN - 77)) | (1 << (Python3Parser.AT_ASSIGN - 77)) | (
                            1 << (Python3Parser.DIV_ASSIGN - 77)) | (1 << (Python3Parser.MOD_ASSIGN - 77)) | (
                            1 << (Python3Parser.AND_ASSIGN - 77)) | (1 << (Python3Parser.OR_ASSIGN - 77)) | (
                            1 << (Python3Parser.XOR_ASSIGN - 77)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 77)) | (
                            1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 77)) | (1 << (Python3Parser.POWER_ASSIGN - 77)) | (
                            1 << (Python3Parser.IDIV_ASSIGN - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinue_stmt"):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)

    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_return_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(Python3Parser.RETURN)
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.state = 588
                self.test()
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 589
                        self.match(Python3Parser.COMMA)
                        self.state = 590
                        self.test()
                    self.state = 595
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)

                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 596
                    self.match(Python3Parser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_raise_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(Python3Parser.RAISE)
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.state = 602
                self.test()
                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
                if la_ == 1:
                    self.state = 603
                    self.match(Python3Parser.FROM)
                    self.state = 604
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_yield_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(Python3Parser.YIELD)
            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.state = 610
                self.match(Python3Parser.FROM)
                self.state = 611
                self.test()

            elif la_ == 2:
                self.state = 612
                self.test()
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 613
                        self.match(Python3Parser.COMMA)
                        self.state = 614
                        self.test()
                    self.state = 619
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 620
                    self.match(Python3Parser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(Python3Parser.IF)
            self.state = 626
            self.test()
            self.state = 627
            self.match(Python3Parser.COLON)
            self.state = 628
            self.suite()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 629
                self.match(Python3Parser.ELIF)
                self.state = 630
                self.test()
                self.state = 631
                self.match(Python3Parser.COLON)
                self.state = 632
                self.suite()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 639
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(Python3Parser.ELSE)
            self.state = 643
            self.match(Python3Parser.COLON)
            self.state = 644
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(Python3Parser.WHILE)
            self.state = 647
            self.test()
            self.state = 648
            self.match(Python3Parser.COLON)
            self.state = 649
            self.suite()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 650
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(Python3Parser.FOR)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 654
                self.match(Python3Parser.STAR)

            self.state = 657
            self.expr()
            self.state = 665
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 658
                    self.match(Python3Parser.COMMA)
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 659
                        self.match(Python3Parser.STAR)

                    self.state = 662
                    self.expr()
                self.state = 667
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)

            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 668
                self.match(Python3Parser.COMMA)

            self.state = 671
            self.match(Python3Parser.IN)
            self.state = 672
            self.test()
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 673
                    self.match(Python3Parser.COMMA)
                    self.state = 674
                    self.test()
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 680
                self.match(Python3Parser.COMMA)

            self.state = 683
            self.match(Python3Parser.COLON)
            self.state = 684
            self.suite()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 685
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(Python3Parser.TRY)
            self.state = 689
            self.match(Python3Parser.COLON)
            self.state = 690
            self.suite()
            self.state = 710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.EXCEPT:
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 691
                    self.except_clause()
                    self.state = 692
                    self.match(Python3Parser.COLON)
                    self.state = 693
                    self.suite()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 699
                    self.else_suite()

                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 702
                    self.match(Python3Parser.FINALLY)
                    self.state = 703
                    self.match(Python3Parser.COLON)
                    self.state = 704
                    self.suite()

                pass
            elif token == Python3Parser.FINALLY:
                self.state = 707
                self.match(Python3Parser.FINALLY)
                self.state = 708
                self.match(Python3Parser.COLON)
                self.state = 709
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(Python3Parser.EXCEPT)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                            1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                            1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                            1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                            1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 713
                self.test()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 714
                    self.match(Python3Parser.AS)
                    self.state = 715
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                         Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                         Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.small_stmt()
                self.state = 725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 721
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 722
                        self.small_stmt()
                    self.state = 727
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 728
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 731
                self.match(Python3Parser.NEWLINE)
                pass
            elif token == Python3Parser.NEWLINE:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(Python3Parser.NEWLINE)
                self.state = 734
                self.match(Python3Parser.INDENT)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 735
                    self.stmt()
                    self.state = 738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                            1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                                    1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                                    1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                                    1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                                    1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                                    1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                                    1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                                    1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                                    1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                                    1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_BYTES_LITERAL) | (
                                    1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                                    1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (
                                    1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (
                                    1 << Python3Parser.DOT) | (1 << Python3Parser.ELLIPSIS) | (
                                    1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (
                                    1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (
                                    1 << Python3Parser.MINUS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and (
                            (1 << (_la - 65)) & (
                            (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                            1 << (Python3Parser.AT - 65)))) != 0)):
                        break

                self.state = 740
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext, i)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.DOT,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.or_test()
                self.state = 750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
                if la_ == 1:
                    self.state = 745
                    self.match(Python3Parser.IF)
                    self.state = 746
                    self.or_test()
                    self.state = 747
                    self.match(Python3Parser.ELSE)
                    self.state = 748
                    self.test()

                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(Python3Parser.LAMBDA)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 753
                    self.varargslist()

                self.state = 756
                self.match(Python3Parser.COLON)
                self.state = 757
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_test_nocond)
        self._la = 0  # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.DOT,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.or_test()
                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(Python3Parser.LAMBDA)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 762
                    self.varargslist()

                self.state = 765
                self.match(Python3Parser.COLON)
                self.state = 766
                self.test_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.not_test()
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR or _la == Python3Parser.AND:
                self.state = 770
                _la = self._input.LA(1)
                if not (_la == Python3Parser.OR or _la == Python3Parser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 771
                self.not_test()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_not_test)
        self._la = 0  # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NOT:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(Python3Parser.NOT)
                self.state = 778
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 779
                    self.match(Python3Parser.STAR)

                self.state = 782
                self.expr()
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 783
                        self.comp_op()
                        self.state = 785
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 784
                            self.match(Python3Parser.STAR)

                        self.state = 787
                        self.expr()
                    self.state = 793
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_comp_op)
        try:
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 801
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 802
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 803
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 804
                self.match(Python3Parser.NOT)
                self.state = 805
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 806
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 807
                self.match(Python3Parser.IS)
                self.state = 808
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.factor()
            self.state = 816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 812
                    _la = self._input.LA(1)
                    if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & (
                            (1 << (Python3Parser.STAR - 45)) | (1 << (Python3Parser.OR_OP - 45)) | (
                            1 << (Python3Parser.XOR - 45)) | (1 << (Python3Parser.AND_OP - 45)) | (
                                    1 << (Python3Parser.LEFT_SHIFT - 45)) | (1 << (Python3Parser.RIGHT_SHIFT - 45)) | (
                                    1 << (Python3Parser.ADD - 45)) | (1 << (Python3Parser.MINUS - 45)) | (
                                    1 << (Python3Parser.DIV - 45)) | (1 << (Python3Parser.MOD - 45)) | (
                                    1 << (Python3Parser.IDIV - 45)) | (1 << (Python3Parser.AT - 45)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 813
                    self.factor()
                self.state = 818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                _la = self._input.LA(1)
                if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                        (1 << (Python3Parser.ADD - 60)) | (1 << (Python3Parser.MINUS - 60)) | (
                        1 << (Python3Parser.NOT_OP - 60)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 820
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.call(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 822
                self.atom()
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 823
                        self.trailer()
                    self.state = 828
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 829
                    self.match(Python3Parser.POWER)
                    self.state = 830
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.DOT:
                self.state = 836
                self.match(Python3Parser.DOT)

            self.state = 839
            self.match(Python3Parser.NAME)

            self.state = 840
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                            1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                            1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 841
                self.arglist()

            self.state = 844
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 846
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.DOT:
                        self.state = 847
                        self.match(Python3Parser.DOT)
                        self.state = 848
                        self.match(Python3Parser.NAME)

                    self.state = 851
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.DOT - 20)) | (
                                    1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                    1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 852
                        self.arglist()

                    self.state = 855
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def STRING_BYTES_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.STRING_BYTES_LITERAL)
            else:
                return self.getToken(Python3Parser.STRING_BYTES_LITERAL, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 892
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.YIELD:
                    self.state = 862
                    self.match(Python3Parser.YIELD)
                    self.state = 876
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FROM:
                        self.state = 863
                        self.match(Python3Parser.FROM)
                        self.state = 864
                        self.test()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                                   Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                                   Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 865
                        self.test()
                        self.state = 870
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 866
                                self.match(Python3Parser.COMMA)
                                self.state = 867
                                self.test()
                            self.state = 872
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)

                        self.state = 874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 873
                            self.match(Python3Parser.COMMA)

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.DOT, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 878
                    self.test()
                    self.state = 890
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 879
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                        self.state = 884
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 880
                                self.match(Python3Parser.COMMA)
                                self.state = 881
                                self.test()
                            self.state = 886
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

                        self.state = 888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 887
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token == Python3Parser.CLOSE_PAREN:
                    pass
                else:
                    pass
                self.state = 894
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 896
                    self.test()
                    self.state = 908
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 897
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                        self.state = 902
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 898
                                self.match(Python3Parser.COMMA)
                                self.state = 899
                                self.test()
                            self.state = 904
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)

                        self.state = 906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 905
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 912
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.OPEN_BRACE:
                self.enterOuterAlt(localctx, 3)
                self.state = 913
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 914
                    self.dictorsetmaker()

                self.state = 917
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 934
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NAME:
                    self.state = 918
                    self.match(Python3Parser.NAME)
                    pass
                elif token == Python3Parser.DECIMAL_INTEGER:
                    self.state = 919
                    self.match(Python3Parser.DECIMAL_INTEGER)
                    pass
                elif token == Python3Parser.OCT_INTEGER:
                    self.state = 920
                    self.match(Python3Parser.OCT_INTEGER)
                    pass
                elif token == Python3Parser.HEX_INTEGER:
                    self.state = 921
                    self.match(Python3Parser.HEX_INTEGER)
                    pass
                elif token == Python3Parser.BIN_INTEGER:
                    self.state = 922
                    self.match(Python3Parser.BIN_INTEGER)
                    pass
                elif token == Python3Parser.FLOAT_NUMBER:
                    self.state = 923
                    self.match(Python3Parser.FLOAT_NUMBER)
                    pass
                elif token == Python3Parser.IMAG_NUMBER:
                    self.state = 924
                    self.match(Python3Parser.IMAG_NUMBER)
                    pass
                elif token == Python3Parser.STRING_BYTES_LITERAL:
                    self.state = 926
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 925
                            self.match(Python3Parser.STRING_BYTES_LITERAL)

                        else:
                            raise NoViableAltException(self)
                        self.state = 928
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 165, self._ctx)

                    pass
                elif token == Python3Parser.ELLIPSIS:
                    self.state = 930
                    self.match(Python3Parser.ELLIPSIS)
                    pass
                elif token == Python3Parser.NONE:
                    self.state = 931
                    self.match(Python3Parser.NONE)
                    pass
                elif token == Python3Parser.TRUE:
                    self.state = 932
                    self.match(Python3Parser.TRUE)
                    pass
                elif token == Python3Parser.FALSE:
                    self.state = 933
                    self.match(Python3Parser.FALSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 939
                    self.arglist()

                self.state = 942
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 944
                self.subscript()
                self.state = 949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 945
                        self.match(Python3Parser.COMMA)
                        self.state = 946
                        self.subscript()
                    self.state = 951
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)

                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 952
                    self.match(Python3Parser.COMMA)

                self.state = 955
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.DOT:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.match(Python3Parser.DOT)
                self.state = 958
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 962
                    self.test()

                self.state = 965
                self.match(Python3Parser.COLON)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.DOT - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 966
                    self.test()

                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 969
                    self.match(Python3Parser.COLON)
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.DOT - 20)) | (
                                    1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                    1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 970
                        self.test()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.test()
            self.state = 1008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 978
                    self.match(Python3Parser.COLON)
                    self.state = 979
                    self.test()

                self.state = 982
                self.comp_for()
                pass

            elif la_ == 2:
                self.state = 983
                self.match(Python3Parser.COLON)
                self.state = 984
                self.test()
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 985
                        self.match(Python3Parser.COMMA)
                        self.state = 986
                        self.test()
                        self.state = 987
                        self.match(Python3Parser.COLON)
                        self.state = 988
                        self.test()
                    self.state = 994
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)

                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 995
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 3:
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 998
                        self.match(Python3Parser.COMMA)
                        self.state = 999
                        self.test()
                    self.state = 1004
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1005
                    self.match(Python3Parser.COMMA)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_forContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_forContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1010
                    self.test()
                    self.state = 1016
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FOR, Python3Parser.COMMA]:
                        self.state = 1012
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.FOR:
                            self.state = 1011
                            self.comp_for()

                        pass
                    elif token == Python3Parser.ASSIGN:
                        self.state = 1014
                        self.match(Python3Parser.ASSIGN)
                        self.state = 1015
                        self.test()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1018
                    self.match(Python3Parser.COMMA)
                self.state = 1024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)

            self.state = 1059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.state = 1025
                self.test()
                self.state = 1031
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.FOR:
                        self.state = 1026
                        self.comp_for()

                    pass
                elif token == Python3Parser.ASSIGN:
                    self.state = 1029
                    self.match(Python3Parser.ASSIGN)
                    self.state = 1030
                    self.test()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1033
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 1036
                self.match(Python3Parser.STAR)
                self.state = 1037
                self.test()
                self.state = 1049
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1038
                        self.match(Python3Parser.COMMA)
                        self.state = 1039
                        self.test()
                        self.state = 1045
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                            self.state = 1041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.FOR:
                                self.state = 1040
                                self.comp_for()

                            pass
                        elif token == Python3Parser.ASSIGN:
                            self.state = 1043
                            self.match(Python3Parser.ASSIGN)
                            self.state = 1044
                            self.test()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 1051
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)

                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1052
                    self.match(Python3Parser.COMMA)
                    self.state = 1053
                    self.match(Python3Parser.POWER)
                    self.state = 1054
                    self.test()

                pass

            elif la_ == 3:
                self.state = 1057
                self.match(Python3Parser.POWER)
                self.state = 1058
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_comp_iter)
        self._la = 0  # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.comp_for()
                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(Python3Parser.IF)
                self.state = 1063
                self.test_nocond()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                    self.state = 1064
                    self.comp_iter()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(Python3Parser.FOR)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 1070
                self.match(Python3Parser.STAR)

            self.state = 1073
            self.expr()
            self.state = 1081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1074
                    self.match(Python3Parser.COMMA)
                    self.state = 1076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 1075
                        self.match(Python3Parser.STAR)

                    self.state = 1078
                    self.expr()
                self.state = 1083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 1084
                self.match(Python3Parser.COMMA)

            self.state = 1087
            self.match(Python3Parser.IN)
            self.state = 1088
            self.or_test()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1089
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[27] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
