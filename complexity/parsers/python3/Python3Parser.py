# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3_")
        buf.write("\u03ef\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\3\2\3\2\7\2G\n\2\f\2\16")
        buf.write("\2J\13\2\3\2\3\2\3\3\3\3\3\3\5\3Q\n\3\3\3\3\3\5\3U\n\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3[\n\3\3\3\3\3\5\3_\n\3\7\3a\n\3\f")
        buf.write("\3\16\3d\13\3\3\3\3\3\3\3\3\3\3\3\5\3k\n\3\5\3m\n\3\3")
        buf.write("\3\3\3\3\3\3\3\5\3s\n\3\3\3\3\3\5\3w\n\3\7\3y\n\3\f\3")
        buf.write("\16\3|\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u0083\n\3\5\3\u0085")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3\u008b\n\3\5\3\u008d\n\3\5\3\u008f")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3\u0095\n\3\5\3\u0097\n\3\3\3\3")
        buf.write("\3\3\3\3\3\5\3\u009d\n\3\3\3\3\3\5\3\u00a1\n\3\7\3\u00a3")
        buf.write("\n\3\f\3\16\3\u00a6\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u00ad")
        buf.write("\n\3\5\3\u00af\n\3\3\3\3\3\3\3\3\3\5\3\u00b5\n\3\5\3\u00b7")
        buf.write("\n\3\3\4\3\4\3\4\5\4\u00bc\n\4\3\4\3\4\3\4\3\4\5\4\u00c2")
        buf.write("\n\4\7\4\u00c4\n\4\f\4\16\4\u00c7\13\4\3\4\3\4\3\4\5\4")
        buf.write("\u00cc\n\4\3\4\3\4\3\4\3\4\5\4\u00d2\n\4\7\4\u00d4\n\4")
        buf.write("\f\4\16\4\u00d7\13\4\3\4\3\4\3\4\5\4\u00dc\n\4\3\4\3\4")
        buf.write("\5\4\u00e0\n\4\5\4\u00e2\n\4\3\4\3\4\5\4\u00e6\n\4\3\4")
        buf.write("\3\4\3\4\3\4\5\4\u00ec\n\4\7\4\u00ee\n\4\f\4\16\4\u00f1")
        buf.write("\13\4\3\4\3\4\3\4\5\4\u00f6\n\4\3\4\3\4\5\4\u00fa\n\4")
        buf.write("\3\5\3\5\3\5\7\5\u00ff\n\5\f\5\16\5\u0102\13\5\3\5\5\5")
        buf.write("\u0105\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u0111\n\5\3\5\3\5\3\5\3\5\5\5\u0117\n\5\7\5\u0119\n\5")
        buf.write("\f\5\16\5\u011c\13\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u0125")
        buf.write("\n\5\f\5\16\5\u0128\13\5\3\5\3\5\5\5\u012c\n\5\3\5\5\5")
        buf.write("\u012f\n\5\3\5\7\5\u0132\n\5\f\5\16\5\u0135\13\5\3\5\3")
        buf.write("\5\3\5\3\5\5\5\u013b\n\5\3\5\5\5\u013e\n\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u0144\n\5\3\5\3\5\3\5\5\5\u0149\n\5\5\5\u014b")
        buf.write("\n\5\3\5\3\5\5\5\u014f\n\5\3\6\3\6\5\6\u0153\n\6\3\6\5")
        buf.write("\6\u0156\n\6\3\6\3\6\3\6\5\6\u015b\n\6\3\6\5\6\u015e\n")
        buf.write("\6\7\6\u0160\n\6\f\6\16\6\u0163\13\6\3\6\5\6\u0166\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\5\6\u016d\n\6\3\6\5\6\u0170\n\6\3")
        buf.write("\6\7\6\u0173\n\6\f\6\16\6\u0176\13\6\5\6\u0178\n\6\3\6")
        buf.write("\3\6\5\6\u017c\n\6\3\6\3\6\3\6\5\6\u0181\n\6\3\6\7\6\u0184")
        buf.write("\n\6\f\6\16\6\u0187\13\6\3\6\5\6\u018a\n\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u0190\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0197\n\6\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u019d\n\6\f\6\16\6\u01a0\13\6\3\6\3")
        buf.write("\6\5\6\u01a4\n\6\3\6\3\6\3\6\3\6\7\6\u01aa\n\6\f\6\16")
        buf.write("\6\u01ad\13\6\3\6\3\6\5\6\u01b1\n\6\7\6\u01b3\n\6\f\6")
        buf.write("\16\6\u01b6\13\6\3\6\3\6\7\6\u01ba\n\6\f\6\16\6\u01bd")
        buf.write("\13\6\3\6\3\6\3\6\7\6\u01c2\n\6\f\6\16\6\u01c5\13\6\3")
        buf.write("\6\6\6\u01c8\n\6\r\6\16\6\u01c9\5\6\u01cc\n\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u01d4\n\6\3\6\3\6\3\6\3\6\5\6\u01da")
        buf.write("\n\6\7\6\u01dc\n\6\f\6\16\6\u01df\13\6\3\6\5\6\u01e2\n")
        buf.write("\6\3\6\3\6\3\6\3\6\5\6\u01e8\n\6\3\6\3\6\3\6\3\6\5\6\u01ee")
        buf.write("\n\6\7\6\u01f0\n\6\f\6\16\6\u01f3\13\6\3\6\5\6\u01f6\n")
        buf.write("\6\5\6\u01f8\n\6\3\6\3\6\3\6\3\6\7\6\u01fe\n\6\f\6\16")
        buf.write("\6\u0201\13\6\3\6\3\6\3\6\3\6\5\6\u0207\n\6\3\6\5\6\u020a")
        buf.write("\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u0211\n\7\3\7\3\7\5\7\u0215")
        buf.write("\n\7\3\7\5\7\u0218\n\7\3\7\3\7\3\7\5\7\u021d\n\7\3\7\5")
        buf.write("\7\u0220\n\7\7\7\u0222\n\7\f\7\16\7\u0225\13\7\3\7\5\7")
        buf.write("\u0228\n\7\5\7\u022a\n\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u0234\n\n\5\n\u0236\n\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\7\13\u0241\n\13\f\13\16\13\u0244")
        buf.write("\13\13\3\13\5\13\u0247\n\13\3\f\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u0252\n\r\3\16\3\16\5\16\u0256\n\16\3\16")
        buf.write("\3\16\3\16\5\16\u025b\n\16\3\16\7\16\u025e\n\16\f\16\16")
        buf.write("\16\u0261\13\16\3\16\5\16\u0264\n\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\5\16\u026b\n\16\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\6\17\u0274\n\17\r\17\16\17\u0275\3\17\5\17\u0279")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u027e\n\17\3\17\3\17\3\17\5")
        buf.write("\17\u0283\n\17\3\20\3\20\3\20\3\20\5\20\u0289\n\20\5\20")
        buf.write("\u028b\n\20\3\21\3\21\3\21\7\21\u0290\n\21\f\21\16\21")
        buf.write("\u0293\13\21\3\21\5\21\u0296\n\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\6\21\u029d\n\21\r\21\16\21\u029e\3\21\3\21\5\21")
        buf.write("\u02a3\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02ab\n")
        buf.write("\22\3\22\3\22\5\22\u02af\n\22\3\22\3\22\5\22\u02b3\n\22")
        buf.write("\3\23\3\23\3\23\5\23\u02b8\n\23\3\23\3\23\5\23\u02bc\n")
        buf.write("\23\3\24\3\24\3\24\7\24\u02c1\n\24\f\24\16\24\u02c4\13")
        buf.write("\24\3\25\3\25\3\25\5\25\u02c9\n\25\3\25\3\25\3\25\5\25")
        buf.write("\u02ce\n\25\3\25\3\25\7\25\u02d2\n\25\f\25\16\25\u02d5")
        buf.write("\13\25\5\25\u02d7\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u02e6\n\26\3\27")
        buf.write("\3\27\3\27\7\27\u02eb\n\27\f\27\16\27\u02ee\13\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\7\30\u02f5\n\30\f\30\16\30\u02f8")
        buf.write("\13\30\3\30\3\30\5\30\u02fc\n\30\5\30\u02fe\n\30\3\31")
        buf.write("\3\31\3\31\3\31\5\31\u0304\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\5\31\u030b\n\31\3\31\7\31\u030e\n\31\f\31\16\31\u0311")
        buf.write("\13\31\3\32\3\32\3\32\3\32\3\32\5\32\u0318\n\32\3\32\5")
        buf.write("\32\u031b\n\32\3\32\3\32\3\32\5\32\u0320\n\32\3\32\3\32")
        buf.write("\3\32\5\32\u0325\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\6\32\u0330\n\32\r\32\16\32\u0331\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u0338\n\32\5\32\u033a\n\32\3\33\3\33")
        buf.write("\3\33\3\33\7\33\u0340\n\33\f\33\16\33\u0343\13\33\3\33")
        buf.write("\5\33\u0346\n\33\5\33\u0348\n\33\3\34\3\34\5\34\u034c")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\7\34\u0353\n\34\f\34\16")
        buf.write("\34\u0356\13\34\3\34\5\34\u0359\n\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u035f\n\34\3\35\3\35\5\35\u0363\n\35\3\35\3\35")
        buf.write("\5\35\u0367\n\35\3\35\3\35\5\35\u036b\n\35\5\35\u036d")
        buf.write("\n\35\5\35\u036f\n\35\3\36\3\36\3\36\7\36\u0374\n\36\f")
        buf.write("\36\16\36\u0377\13\36\3\36\5\36\u037a\n\36\3\37\3\37\3")
        buf.write("\37\5\37\u037f\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\7\37\u0389\n\37\f\37\16\37\u038c\13\37\3\37\5\37")
        buf.write("\u038f\n\37\3\37\3\37\7\37\u0393\n\37\f\37\16\37\u0396")
        buf.write("\13\37\3\37\5\37\u0399\n\37\5\37\u039b\n\37\3 \3 \5 \u039f")
        buf.write("\n \3 \3 \5 \u03a3\n \3 \3 \7 \u03a7\n \f \16 \u03aa\13")
        buf.write(" \3 \3 \5 \u03ae\n \3 \3 \5 \u03b2\n \3 \5 \u03b5\n \3")
        buf.write(" \3 \3 \3 \3 \5 \u03bc\n \3 \3 \5 \u03c0\n \7 \u03c2\n")
        buf.write(" \f \16 \u03c5\13 \3 \3 \3 \5 \u03ca\n \3 \3 \5 \u03ce")
        buf.write("\n \3!\3!\3!\3!\5!\u03d4\n!\5!\u03d6\n!\3\"\3\"\5\"\u03da")
        buf.write("\n\"\3\"\3\"\3\"\5\"\u03df\n\"\3\"\7\"\u03e2\n\"\f\"\16")
        buf.write("\"\u03e5\13\"\3\"\5\"\u03e8\n\"\3\"\3\"\3\"\5\"\u03ed")
        buf.write("\n\"\3\"\2\3\60#\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@B\2\t\3\2!\"\3\2-.\3\2\t\n\3")
        buf.write("\2O[\3\2\27\30\5\2//9BMM\4\2>?CC\2\u04b6\2H\3\2\2\2\4")
        buf.write("\u00b6\3\2\2\2\6\u00f9\3\2\2\2\b\u014e\3\2\2\2\n\u0209")
        buf.write("\3\2\2\2\f\u020b\3\2\2\2\16\u022b\3\2\2\2\20\u022d\3\2")
        buf.write("\2\2\22\u022f\3\2\2\2\24\u0237\3\2\2\2\26\u0248\3\2\2")
        buf.write("\2\30\u024c\3\2\2\2\32\u0253\3\2\2\2\34\u026c\3\2\2\2")
        buf.write("\36\u0284\3\2\2\2 \u02a2\3\2\2\2\"\u02b2\3\2\2\2$\u02bb")
        buf.write("\3\2\2\2&\u02bd\3\2\2\2(\u02d6\3\2\2\2*\u02e5\3\2\2\2")
        buf.write(",\u02e7\3\2\2\2.\u02fd\3\2\2\2\60\u02ff\3\2\2\2\62\u0339")
        buf.write("\3\2\2\2\64\u033b\3\2\2\2\66\u035e\3\2\2\28\u036e\3\2")
        buf.write("\2\2:\u0370\3\2\2\2<\u037b\3\2\2\2>\u03a8\3\2\2\2@\u03d5")
        buf.write("\3\2\2\2B\u03d7\3\2\2\2DG\7$\2\2EG\5\b\5\2FD\3\2\2\2F")
        buf.write("E\3\2\2\2GJ\3\2\2\2HF\3\2\2\2HI\3\2\2\2IK\3\2\2\2JH\3")
        buf.write("\2\2\2KL\7\2\2\3L\3\3\2\2\2MP\7%\2\2NO\7\63\2\2OQ\5\"")
        buf.write("\22\2PN\3\2\2\2PQ\3\2\2\2QT\3\2\2\2RS\7\66\2\2SU\5\"\22")
        buf.write("\2TR\3\2\2\2TU\3\2\2\2Ub\3\2\2\2VW\7\62\2\2WZ\7%\2\2X")
        buf.write("Y\7\63\2\2Y[\5\"\22\2ZX\3\2\2\2Z[\3\2\2\2[^\3\2\2\2\\")
        buf.write("]\7\66\2\2]_\5\"\22\2^\\\3\2\2\2^_\3\2\2\2_a\3\2\2\2`")
        buf.write("V\3\2\2\2ad\3\2\2\2b`\3\2\2\2bc\3\2\2\2c\u008e\3\2\2\2")
        buf.write("db\3\2\2\2e\u008c\7\62\2\2fl\7/\2\2gj\7%\2\2hi\7\63\2")
        buf.write("\2ik\5\"\22\2jh\3\2\2\2jk\3\2\2\2km\3\2\2\2lg\3\2\2\2")
        buf.write("lm\3\2\2\2mz\3\2\2\2no\7\62\2\2or\7%\2\2pq\7\63\2\2qs")
        buf.write("\5\"\22\2rp\3\2\2\2rs\3\2\2\2sv\3\2\2\2tu\7\66\2\2uw\5")
        buf.write("\"\22\2vt\3\2\2\2vw\3\2\2\2wy\3\2\2\2xn\3\2\2\2y|\3\2")
        buf.write("\2\2zx\3\2\2\2z{\3\2\2\2{\u0084\3\2\2\2|z\3\2\2\2}~\7")
        buf.write("\62\2\2~\177\7\65\2\2\177\u0082\7%\2\2\u0080\u0081\7\63")
        buf.write("\2\2\u0081\u0083\5\"\22\2\u0082\u0080\3\2\2\2\u0082\u0083")
        buf.write("\3\2\2\2\u0083\u0085\3\2\2\2\u0084}\3\2\2\2\u0084\u0085")
        buf.write("\3\2\2\2\u0085\u008d\3\2\2\2\u0086\u0087\7\65\2\2\u0087")
        buf.write("\u008a\7%\2\2\u0088\u0089\7\63\2\2\u0089\u008b\5\"\22")
        buf.write("\2\u008a\u0088\3\2\2\2\u008a\u008b\3\2\2\2\u008b\u008d")
        buf.write("\3\2\2\2\u008cf\3\2\2\2\u008c\u0086\3\2\2\2\u008c\u008d")
        buf.write("\3\2\2\2\u008d\u008f\3\2\2\2\u008ee\3\2\2\2\u008e\u008f")
        buf.write("\3\2\2\2\u008f\u00b7\3\2\2\2\u0090\u0096\7/\2\2\u0091")
        buf.write("\u0094\7%\2\2\u0092\u0093\7\63\2\2\u0093\u0095\5\"\22")
        buf.write("\2\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097")
        buf.write("\3\2\2\2\u0096\u0091\3\2\2\2\u0096\u0097\3\2\2\2\u0097")
        buf.write("\u00a4\3\2\2\2\u0098\u0099\7\62\2\2\u0099\u009c\7%\2\2")
        buf.write("\u009a\u009b\7\63\2\2\u009b\u009d\5\"\22\2\u009c\u009a")
        buf.write("\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u00a0\3\2\2\2\u009e")
        buf.write("\u009f\7\66\2\2\u009f\u00a1\5\"\22\2\u00a0\u009e\3\2\2")
        buf.write("\2\u00a0\u00a1\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u0098")
        buf.write("\3\2\2\2\u00a3\u00a6\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a5\u00ae\3\2\2\2\u00a6\u00a4\3\2\2\2")
        buf.write("\u00a7\u00a8\7\62\2\2\u00a8\u00a9\7\65\2\2\u00a9\u00ac")
        buf.write("\7%\2\2\u00aa\u00ab\7\63\2\2\u00ab\u00ad\5\"\22\2\u00ac")
        buf.write("\u00aa\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00af\3\2\2\2")
        buf.write("\u00ae\u00a7\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b7\3")
        buf.write("\2\2\2\u00b0\u00b1\7\65\2\2\u00b1\u00b4\7%\2\2\u00b2\u00b3")
        buf.write("\7\63\2\2\u00b3\u00b5\5\"\22\2\u00b4\u00b2\3\2\2\2\u00b4")
        buf.write("\u00b5\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6M\3\2\2\2\u00b6")
        buf.write("\u0090\3\2\2\2\u00b6\u00b0\3\2\2\2\u00b7\5\3\2\2\2\u00b8")
        buf.write("\u00bb\7%\2\2\u00b9\u00ba\7\66\2\2\u00ba\u00bc\5\"\22")
        buf.write("\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00c5")
        buf.write("\3\2\2\2\u00bd\u00be\7\62\2\2\u00be\u00c1\7%\2\2\u00bf")
        buf.write("\u00c0\7\66\2\2\u00c0\u00c2\5\"\22\2\u00c1\u00bf\3\2\2")
        buf.write("\2\u00c1\u00c2\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00bd")
        buf.write("\3\2\2\2\u00c4\u00c7\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c5")
        buf.write("\u00c6\3\2\2\2\u00c6\u00e1\3\2\2\2\u00c7\u00c5\3\2\2\2")
        buf.write("\u00c8\u00df\7\62\2\2\u00c9\u00cb\7/\2\2\u00ca\u00cc\7")
        buf.write("%\2\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00d5")
        buf.write("\3\2\2\2\u00cd\u00ce\7\62\2\2\u00ce\u00d1\7%\2\2\u00cf")
        buf.write("\u00d0\7\66\2\2\u00d0\u00d2\5\"\22\2\u00d1\u00cf\3\2\2")
        buf.write("\2\u00d1\u00d2\3\2\2\2\u00d2\u00d4\3\2\2\2\u00d3\u00cd")
        buf.write("\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00db\3\2\2\2\u00d7\u00d5\3\2\2\2")
        buf.write("\u00d8\u00d9\7\62\2\2\u00d9\u00da\7\65\2\2\u00da\u00dc")
        buf.write("\7%\2\2\u00db\u00d8\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\u00e0\3\2\2\2\u00dd\u00de\7\65\2\2\u00de\u00e0\7%\2\2")
        buf.write("\u00df\u00c9\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3")
        buf.write("\2\2\2\u00e0\u00e2\3\2\2\2\u00e1\u00c8\3\2\2\2\u00e1\u00e2")
        buf.write("\3\2\2\2\u00e2\u00fa\3\2\2\2\u00e3\u00e5\7/\2\2\u00e4")
        buf.write("\u00e6\7%\2\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6\3\2\2\2")
        buf.write("\u00e6\u00ef\3\2\2\2\u00e7\u00e8\7\62\2\2\u00e8\u00eb")
        buf.write("\7%\2\2\u00e9\u00ea\7\66\2\2\u00ea\u00ec\5\"\22\2\u00eb")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2")
        buf.write("\u00ed\u00e7\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3")
        buf.write("\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f5\3\2\2\2\u00f1\u00ef")
        buf.write("\3\2\2\2\u00f2\u00f3\7\62\2\2\u00f3\u00f4\7\65\2\2\u00f4")
        buf.write("\u00f6\7%\2\2\u00f5\u00f2\3\2\2\2\u00f5\u00f6\3\2\2\2")
        buf.write("\u00f6\u00fa\3\2\2\2\u00f7\u00f8\7\65\2\2\u00f8\u00fa")
        buf.write("\7%\2\2\u00f9\u00b8\3\2\2\2\u00f9\u00e3\3\2\2\2\u00f9")
        buf.write("\u00f7\3\2\2\2\u00fa\7\3\2\2\2\u00fb\u0100\5\n\6\2\u00fc")
        buf.write("\u00fd\7\64\2\2\u00fd\u00ff\5\n\6\2\u00fe\u00fc\3\2\2")
        buf.write("\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101")
        buf.write("\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2\u0103")
        buf.write("\u0105\7\64\2\2\u0104\u0103\3\2\2\2\u0104\u0105\3\2\2")
        buf.write("\2\u0105\u0106\3\2\2\2\u0106\u0107\7$\2\2\u0107\u014f")
        buf.write("\3\2\2\2\u0108\u014f\5\24\13\2\u0109\u014f\5\30\r\2\u010a")
        buf.write("\u014f\5\32\16\2\u010b\u014f\5\34\17\2\u010c\u010d\7\24")
        buf.write("\2\2\u010d\u0110\5\"\22\2\u010e\u010f\7\b\2\2\u010f\u0111")
        buf.write("\5,\27\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111")
        buf.write("\u011a\3\2\2\2\u0112\u0113\7\62\2\2\u0113\u0116\5\"\22")
        buf.write("\2\u0114\u0115\7\b\2\2\u0115\u0117\5,\27\2\u0116\u0114")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0119\3\2\2\2\u0118")
        buf.write("\u0112\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u011d\3\2\2\2\u011c\u011a\3")
        buf.write("\2\2\2\u011d\u011e\7\63\2\2\u011e\u011f\5 \21\2\u011f")
        buf.write("\u014f\3\2\2\2\u0120\u0121\7M\2\2\u0121\u0126\7%\2\2\u0122")
        buf.write("\u0123\7-\2\2\u0123\u0125\7%\2\2\u0124\u0122\3\2\2\2\u0125")
        buf.write("\u0128\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2")
        buf.write("\u0127\u012e\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u012b\7")
        buf.write("\60\2\2\u012a\u012c\5> \2\u012b\u012a\3\2\2\2\u012b\u012c")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012f\7\61\2\2\u012e")
        buf.write("\u0129\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0132\7$\2\2\u0131\u0120\3\2\2\2\u0132\u0135\3")
        buf.write("\2\2\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u014a")
        buf.write("\3\2\2\2\u0135\u0133\3\2\2\2\u0136\u0137\7\36\2\2\u0137")
        buf.write("\u013d\7%\2\2\u0138\u013a\7\60\2\2\u0139\u013b\5> \2\u013a")
        buf.write("\u0139\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\u013e\7\61\2\2\u013d\u0138\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u014b\3\2\2\2\u013f\u0140\7\3\2\2\u0140")
        buf.write("\u0141\7%\2\2\u0141\u0143\7\60\2\2\u0142\u0144\5\4\3\2")
        buf.write("\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145\3")
        buf.write("\2\2\2\u0145\u0148\7\61\2\2\u0146\u0147\7N\2\2\u0147\u0149")
        buf.write("\5\"\22\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014b\3\2\2\2\u014a\u0136\3\2\2\2\u014a\u013f\3\2\2\2")
        buf.write("\u014b\u014c\3\2\2\2\u014c\u014d\7\63\2\2\u014d\u014f")
        buf.write("\5 \21\2\u014e\u00fb\3\2\2\2\u014e\u0108\3\2\2\2\u014e")
        buf.write("\u0109\3\2\2\2\u014e\u010a\3\2\2\2\u014e\u010b\3\2\2\2")
        buf.write("\u014e\u010c\3\2\2\2\u014e\u0133\3\2\2\2\u014f\t\3\2\2")
        buf.write("\2\u0150\u0156\5\"\22\2\u0151\u0153\7/\2\2\u0152\u0151")
        buf.write("\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\3\2\2\2\u0154")
        buf.write("\u0156\5,\27\2\u0155\u0150\3\2\2\2\u0155\u0152\3\2\2\2")
        buf.write("\u0156\u0161\3\2\2\2\u0157\u015d\7\62\2\2\u0158\u015e")
        buf.write("\5\"\22\2\u0159\u015b\7/\2\2\u015a\u0159\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015b\u015c\3\2\2\2\u015c\u015e\5,\27\2")
        buf.write("\u015d\u0158\3\2\2\2\u015d\u015a\3\2\2\2\u015e\u0160\3")
        buf.write("\2\2\2\u015f\u0157\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0165\3\2\2\2\u0163")
        buf.write("\u0161\3\2\2\2\u0164\u0166\7\62\2\2\u0165\u0164\3\2\2")
        buf.write("\2\u0165\u0166\3\2\2\2\u0166\u0177\3\2\2\2\u0167\u016f")
        buf.write("\5\16\b\2\u0168\u016c\7\37\2\2\u0169\u016a\7\6\2\2\u016a")
        buf.write("\u016d\5\"\22\2\u016b\u016d\5:\36\2\u016c\u0169\3\2\2")
        buf.write("\2\u016c\u016b\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0170")
        buf.write("\3\2\2\2\u016e\u0170\5:\36\2\u016f\u0168\3\2\2\2\u016f")
        buf.write("\u016e\3\2\2\2\u0170\u0178\3\2\2\2\u0171\u0173\5\f\7\2")
        buf.write("\u0172\u0171\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3")
        buf.write("\2\2\2\u0174\u0175\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174")
        buf.write("\3\2\2\2\u0177\u0167\3\2\2\2\u0177\u0174\3\2\2\2\u0178")
        buf.write("\u020a\3\2\2\2\u0179\u017b\7 \2\2\u017a\u017c\7/\2\2\u017b")
        buf.write("\u017a\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017d\3\2\2\2")
        buf.write("\u017d\u0185\5,\27\2\u017e\u0180\7\62\2\2\u017f\u0181")
        buf.write("\7/\2\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\u0184\5,\27\2\u0183\u017e\3\2\2\2")
        buf.write("\u0184\u0187\3\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186\3")
        buf.write("\2\2\2\u0186\u0189\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u018a")
        buf.write("\7\62\2\2\u0189\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u020a\3\2\2\2\u018b\u020a\t\2\2\2\u018c\u020a\5\20\t")
        buf.write("\2\u018d\u018f\7\4\2\2\u018e\u0190\5:\36\2\u018f\u018e")
        buf.write("\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u020a\3\2\2\2\u0191")
        buf.write("\u020a\5\22\n\2\u0192\u0196\7\37\2\2\u0193\u0194\7\6\2")
        buf.write("\2\u0194\u0197\5\"\22\2\u0195\u0197\5:\36\2\u0196\u0193")
        buf.write("\3\2\2\2\u0196\u0195\3\2\2\2\u0196\u0197\3\2\2\2\u0197")
        buf.write("\u020a\3\2\2\2\u0198\u0199\7\7\2\2\u0199\u019e\7%\2\2")
        buf.write("\u019a\u019b\7-\2\2\u019b\u019d\7%\2\2\u019c\u019a\3\2")
        buf.write("\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a3\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1")
        buf.write("\u01a2\7\b\2\2\u01a2\u01a4\7%\2\2\u01a3\u01a1\3\2\2\2")
        buf.write("\u01a3\u01a4\3\2\2\2\u01a4\u01b4\3\2\2\2\u01a5\u01a6\7")
        buf.write("\62\2\2\u01a6\u01ab\7%\2\2\u01a7\u01a8\7-\2\2\u01a8\u01aa")
        buf.write("\7%\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01b0\3\2\2\2")
        buf.write("\u01ad\u01ab\3\2\2\2\u01ae\u01af\7\b\2\2\u01af\u01b1\7")
        buf.write("%\2\2\u01b0\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3")
        buf.write("\3\2\2\2\u01b2\u01a5\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4")
        buf.write("\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u020a\3\2\2\2")
        buf.write("\u01b6\u01b4\3\2\2\2\u01b7\u01cb\7\6\2\2\u01b8\u01ba\t")
        buf.write("\3\2\2\u01b9\u01b8\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9")
        buf.write("\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd")
        buf.write("\u01bb\3\2\2\2\u01be\u01c3\7%\2\2\u01bf\u01c0\7-\2\2\u01c0")
        buf.write("\u01c2\7%\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01cc\3")
        buf.write("\2\2\2\u01c5\u01c3\3\2\2\2\u01c6\u01c8\t\3\2\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb\u01bb\3\2\2\2")
        buf.write("\u01cb\u01c7\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01f7\7")
        buf.write("\7\2\2\u01ce\u01f8\7/\2\2\u01cf\u01d0\7\60\2\2\u01d0\u01d3")
        buf.write("\7%\2\2\u01d1\u01d2\7\b\2\2\u01d2\u01d4\7%\2\2\u01d3\u01d1")
        buf.write("\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01dd\3\2\2\2\u01d5")
        buf.write("\u01d6\7\62\2\2\u01d6\u01d9\7%\2\2\u01d7\u01d8\7\b\2\2")
        buf.write("\u01d8\u01da\7%\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3")
        buf.write("\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d5\3\2\2\2\u01dc\u01df")
        buf.write("\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e2\7\62\2")
        buf.write("\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e3")
        buf.write("\3\2\2\2\u01e3\u01f8\7\61\2\2\u01e4\u01e7\7%\2\2\u01e5")
        buf.write("\u01e6\7\b\2\2\u01e6\u01e8\7%\2\2\u01e7\u01e5\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01f1\3\2\2\2\u01e9\u01ea\7")
        buf.write("\62\2\2\u01ea\u01ed\7%\2\2\u01eb\u01ec\7\b\2\2\u01ec\u01ee")
        buf.write("\7%\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee")
        buf.write("\u01f0\3\2\2\2\u01ef\u01e9\3\2\2\2\u01f0\u01f3\3\2\2\2")
        buf.write("\u01f1\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f5\3")
        buf.write("\2\2\2\u01f3\u01f1\3\2\2\2\u01f4\u01f6\7\62\2\2\u01f5")
        buf.write("\u01f4\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\3\2\2\2")
        buf.write("\u01f7\u01ce\3\2\2\2\u01f7\u01cf\3\2\2\2\u01f7\u01e4\3")
        buf.write("\2\2\2\u01f8\u020a\3\2\2\2\u01f9\u01fa\t\4\2\2\u01fa\u01ff")
        buf.write("\7%\2\2\u01fb\u01fc\7\62\2\2\u01fc\u01fe\7%\2\2\u01fd")
        buf.write("\u01fb\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd\3\2\2\2")
        buf.write("\u01ff\u0200\3\2\2\2\u0200\u020a\3\2\2\2\u0201\u01ff\3")
        buf.write("\2\2\2\u0202\u0203\7\13\2\2\u0203\u0206\5\"\22\2\u0204")
        buf.write("\u0205\7\62\2\2\u0205\u0207\5\"\22\2\u0206\u0204\3\2\2")
        buf.write("\2\u0206\u0207\3\2\2\2\u0207\u020a\3\2\2\2\u0208\u020a")
        buf.write("\3\2\2\2\u0209\u0155\3\2\2\2\u0209\u0179\3\2\2\2\u0209")
        buf.write("\u018b\3\2\2\2\u0209\u018c\3\2\2\2\u0209\u018d\3\2\2\2")
        buf.write("\u0209\u0191\3\2\2\2\u0209\u0192\3\2\2\2\u0209\u0198\3")
        buf.write("\2\2\2\u0209\u01b7\3\2\2\2\u0209\u01f9\3\2\2\2\u0209\u0202")
        buf.write("\3\2\2\2\u0209\u0208\3\2\2\2\u020a\13\3\2\2\2\u020b\u0229")
        buf.write("\7\66\2\2\u020c\u0210\7\37\2\2\u020d\u020e\7\6\2\2\u020e")
        buf.write("\u0211\5\"\22\2\u020f\u0211\5:\36\2\u0210\u020d\3\2\2")
        buf.write("\2\u0210\u020f\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u022a")
        buf.write("\3\2\2\2\u0212\u0218\5\"\22\2\u0213\u0215\7/\2\2\u0214")
        buf.write("\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\3\2\2\2")
        buf.write("\u0216\u0218\5,\27\2\u0217\u0212\3\2\2\2\u0217\u0214\3")
        buf.write("\2\2\2\u0218\u0223\3\2\2\2\u0219\u021f\7\62\2\2\u021a")
        buf.write("\u0220\5\"\22\2\u021b\u021d\7/\2\2\u021c\u021b\3\2\2\2")
        buf.write("\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0220\5")
        buf.write(",\27\2\u021f\u021a\3\2\2\2\u021f\u021c\3\2\2\2\u0220\u0222")
        buf.write("\3\2\2\2\u0221\u0219\3\2\2\2\u0222\u0225\3\2\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0227\3\2\2\2")
        buf.write("\u0225\u0223\3\2\2\2\u0226\u0228\7\62\2\2\u0227\u0226")
        buf.write("\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022a\3\2\2\2\u0229")
        buf.write("\u020c\3\2\2\2\u0229\u0217\3\2\2\2\u022a\r\3\2\2\2\u022b")
        buf.write("\u022c\t\5\2\2\u022c\17\3\2\2\2\u022d\u022e\7#\2\2\u022e")
        buf.write("\21\3\2\2\2\u022f\u0235\7\5\2\2\u0230\u0233\5\"\22\2\u0231")
        buf.write("\u0232\7\6\2\2\u0232\u0234\5\"\22\2\u0233\u0231\3\2\2")
        buf.write("\2\u0233\u0234\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0230")
        buf.write("\3\2\2\2\u0235\u0236\3\2\2\2\u0236\23\3\2\2\2\u0237\u0238")
        buf.write("\7\f\2\2\u0238\u0239\5\"\22\2\u0239\u023a\7\63\2\2\u023a")
        buf.write("\u0242\5 \21\2\u023b\u023c\7\r\2\2\u023c\u023d\5\"\22")
        buf.write("\2\u023d\u023e\7\63\2\2\u023e\u023f\5 \21\2\u023f\u0241")
        buf.write("\3\2\2\2\u0240\u023b\3\2\2\2\u0241\u0244\3\2\2\2\u0242")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0246\3\2\2\2")
        buf.write("\u0244\u0242\3\2\2\2\u0245\u0247\5\26\f\2\u0246\u0245")
        buf.write("\3\2\2\2\u0246\u0247\3\2\2\2\u0247\25\3\2\2\2\u0248\u0249")
        buf.write("\7\16\2\2\u0249\u024a\7\63\2\2\u024a\u024b\5 \21\2\u024b")
        buf.write("\27\3\2\2\2\u024c\u024d\7\17\2\2\u024d\u024e\5\"\22\2")
        buf.write("\u024e\u024f\7\63\2\2\u024f\u0251\5 \21\2\u0250\u0252")
        buf.write("\5\26\f\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write("\31\3\2\2\2\u0253\u0255\7\20\2\2\u0254\u0256\7/\2\2\u0255")
        buf.write("\u0254\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257\u025f\5,\27\2\u0258\u025a\7\62\2\2\u0259\u025b")
        buf.write("\7/\2\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b")
        buf.write("\u025c\3\2\2\2\u025c\u025e\5,\27\2\u025d\u0258\3\2\2\2")
        buf.write("\u025e\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3")
        buf.write("\2\2\2\u0260\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0264")
        buf.write("\7\62\2\2\u0263\u0262\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0266\7\21\2\2\u0266\u0267\5:\36")
        buf.write("\2\u0267\u0268\7\63\2\2\u0268\u026a\5 \21\2\u0269\u026b")
        buf.write("\5\26\f\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b")
        buf.write("\33\3\2\2\2\u026c\u026d\7\22\2\2\u026d\u026e\7\63\2\2")
        buf.write("\u026e\u0282\5 \21\2\u026f\u0270\5\36\20\2\u0270\u0271")
        buf.write("\7\63\2\2\u0271\u0272\5 \21\2\u0272\u0274\3\2\2\2\u0273")
        buf.write("\u026f\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0273\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276\u0278\3\2\2\2\u0277\u0279\5")
        buf.write("\26\f\2\u0278\u0277\3\2\2\2\u0278\u0279\3\2\2\2\u0279")
        buf.write("\u027d\3\2\2\2\u027a\u027b\7\23\2\2\u027b\u027c\7\63\2")
        buf.write("\2\u027c\u027e\5 \21\2\u027d\u027a\3\2\2\2\u027d\u027e")
        buf.write("\3\2\2\2\u027e\u0283\3\2\2\2\u027f\u0280\7\23\2\2\u0280")
        buf.write("\u0281\7\63\2\2\u0281\u0283\5 \21\2\u0282\u0273\3\2\2")
        buf.write("\2\u0282\u027f\3\2\2\2\u0283\35\3\2\2\2\u0284\u028a\7")
        buf.write("\25\2\2\u0285\u0288\5\"\22\2\u0286\u0287\7\b\2\2\u0287")
        buf.write("\u0289\7%\2\2\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2")
        buf.write("\u0289\u028b\3\2\2\2\u028a\u0285\3\2\2\2\u028a\u028b\3")
        buf.write("\2\2\2\u028b\37\3\2\2\2\u028c\u0291\5\n\6\2\u028d\u028e")
        buf.write("\7\64\2\2\u028e\u0290\5\n\6\2\u028f\u028d\3\2\2\2\u0290")
        buf.write("\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2\u0294\u0296\7")
        buf.write("\64\2\2\u0295\u0294\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0297\3\2\2\2\u0297\u0298\7$\2\2\u0298\u02a3\3\2\2\2")
        buf.write("\u0299\u029a\7$\2\2\u029a\u029c\7^\2\2\u029b\u029d\5\b")
        buf.write("\5\2\u029c\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029c")
        buf.write("\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0")
        buf.write("\u02a1\7_\2\2\u02a1\u02a3\3\2\2\2\u02a2\u028c\3\2\2\2")
        buf.write("\u02a2\u0299\3\2\2\2\u02a3!\3\2\2\2\u02a4\u02aa\5&\24")
        buf.write("\2\u02a5\u02a6\7\f\2\2\u02a6\u02a7\5&\24\2\u02a7\u02a8")
        buf.write("\7\16\2\2\u02a8\u02a9\5\"\22\2\u02a9\u02ab\3\2\2\2\u02aa")
        buf.write("\u02a5\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02b3\3\2\2\2")
        buf.write("\u02ac\u02ae\7\26\2\2\u02ad\u02af\5\6\4\2\u02ae\u02ad")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0")
        buf.write("\u02b1\7\63\2\2\u02b1\u02b3\5\"\22\2\u02b2\u02a4\3\2\2")
        buf.write("\2\u02b2\u02ac\3\2\2\2\u02b3#\3\2\2\2\u02b4\u02bc\5&\24")
        buf.write("\2\u02b5\u02b7\7\26\2\2\u02b6\u02b8\5\6\4\2\u02b7\u02b6")
        buf.write("\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02ba\7\63\2\2\u02ba\u02bc\5$\23\2\u02bb\u02b4\3\2\2")
        buf.write("\2\u02bb\u02b5\3\2\2\2\u02bc%\3\2\2\2\u02bd\u02c2\5(\25")
        buf.write("\2\u02be\u02bf\t\6\2\2\u02bf\u02c1\5(\25\2\u02c0\u02be")
        buf.write("\3\2\2\2\u02c1\u02c4\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2")
        buf.write("\u02c3\3\2\2\2\u02c3\'\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5")
        buf.write("\u02c6\7\31\2\2\u02c6\u02d7\5(\25\2\u02c7\u02c9\7/\2\2")
        buf.write("\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca\3")
        buf.write("\2\2\2\u02ca\u02d3\5,\27\2\u02cb\u02cd\5*\26\2\u02cc\u02ce")
        buf.write("\7/\2\2\u02cd\u02cc\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d0\5,\27\2\u02d0\u02d2\3\2\2\2")
        buf.write("\u02d1\u02cb\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3")
        buf.write("\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d3")
        buf.write("\3\2\2\2\u02d6\u02c5\3\2\2\2\u02d6\u02c8\3\2\2\2\u02d7")
        buf.write(")\3\2\2\2\u02d8\u02e6\7F\2\2\u02d9\u02e6\7G\2\2\u02da")
        buf.write("\u02e6\7H\2\2\u02db\u02e6\7I\2\2\u02dc\u02e6\7J\2\2\u02dd")
        buf.write("\u02e6\7K\2\2\u02de\u02e6\7L\2\2\u02df\u02e6\7\21\2\2")
        buf.write("\u02e0\u02e1\7\31\2\2\u02e1\u02e6\7\21\2\2\u02e2\u02e6")
        buf.write("\7\32\2\2\u02e3\u02e4\7\32\2\2\u02e4\u02e6\7\31\2\2\u02e5")
        buf.write("\u02d8\3\2\2\2\u02e5\u02d9\3\2\2\2\u02e5\u02da\3\2\2\2")
        buf.write("\u02e5\u02db\3\2\2\2\u02e5\u02dc\3\2\2\2\u02e5\u02dd\3")
        buf.write("\2\2\2\u02e5\u02de\3\2\2\2\u02e5\u02df\3\2\2\2\u02e5\u02e0")
        buf.write("\3\2\2\2\u02e5\u02e2\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e6")
        buf.write("+\3\2\2\2\u02e7\u02ec\5.\30\2\u02e8\u02e9\t\7\2\2\u02e9")
        buf.write("\u02eb\5.\30\2\u02ea\u02e8\3\2\2\2\u02eb\u02ee\3\2\2\2")
        buf.write("\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed-\3\2\2")
        buf.write("\2\u02ee\u02ec\3\2\2\2\u02ef\u02f0\t\b\2\2\u02f0\u02fe")
        buf.write("\5.\30\2\u02f1\u02fe\5\60\31\2\u02f2\u02f6\5\62\32\2\u02f3")
        buf.write("\u02f5\5\66\34\2\u02f4\u02f3\3\2\2\2\u02f5\u02f8\3\2\2")
        buf.write("\2\u02f6\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02fb")
        buf.write("\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f9\u02fa\7\65\2\2\u02fa")
        buf.write("\u02fc\5.\30\2\u02fb\u02f9\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fc\u02fe\3\2\2\2\u02fd\u02ef\3\2\2\2\u02fd\u02f1\3")
        buf.write("\2\2\2\u02fd\u02f2\3\2\2\2\u02fe/\3\2\2\2\u02ff\u0300")
        buf.write("\b\31\1\2\u0300\u0301\7%\2\2\u0301\u0303\7\60\2\2\u0302")
        buf.write("\u0304\5> \2\u0303\u0302\3\2\2\2\u0303\u0304\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u0305\u0306\7\61\2\2\u0306\u030f\3\2\2")
        buf.write("\2\u0307\u0308\f\3\2\2\u0308\u030a\7\60\2\2\u0309\u030b")
        buf.write("\5> \2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030e\7\61\2\2\u030d\u0307\3\2\2\2\u030e")
        buf.write("\u0311\3\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\61\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u031a\7\60")
        buf.write("\2\2\u0313\u0317\7\37\2\2\u0314\u0315\7\6\2\2\u0315\u0318")
        buf.write("\5\"\22\2\u0316\u0318\5:\36\2\u0317\u0314\3\2\2\2\u0317")
        buf.write("\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031b\3\2\2\2")
        buf.write("\u0319\u031b\5\64\33\2\u031a\u0313\3\2\2\2\u031a\u0319")
        buf.write("\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u033a\7\61\2\2\u031d\u031f\7\67\2\2\u031e\u0320\5\64")
        buf.write("\33\2\u031f\u031e\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u033a\78\2\2\u0322\u0324\7D\2\2\u0323\u0325")
        buf.write("\5<\37\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325")
        buf.write("\u0326\3\2\2\2\u0326\u033a\7E\2\2\u0327\u0338\7%\2\2\u0328")
        buf.write("\u0338\7\'\2\2\u0329\u0338\7(\2\2\u032a\u0338\7)\2\2\u032b")
        buf.write("\u0338\7*\2\2\u032c\u0338\7+\2\2\u032d\u0338\7,\2\2\u032e")
        buf.write("\u0330\7&\2\2\u032f\u032e\3\2\2\2\u0330\u0331\3\2\2\2")
        buf.write("\u0331\u032f\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0338\3")
        buf.write("\2\2\2\u0333\u0338\7.\2\2\u0334\u0338\7\33\2\2\u0335\u0338")
        buf.write("\7\34\2\2\u0336\u0338\7\35\2\2\u0337\u0327\3\2\2\2\u0337")
        buf.write("\u0328\3\2\2\2\u0337\u0329\3\2\2\2\u0337\u032a\3\2\2\2")
        buf.write("\u0337\u032b\3\2\2\2\u0337\u032c\3\2\2\2\u0337\u032d\3")
        buf.write("\2\2\2\u0337\u032f\3\2\2\2\u0337\u0333\3\2\2\2\u0337\u0334")
        buf.write("\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0336\3\2\2\2\u0338")
        buf.write("\u033a\3\2\2\2\u0339\u0312\3\2\2\2\u0339\u031d\3\2\2\2")
        buf.write("\u0339\u0322\3\2\2\2\u0339\u0337\3\2\2\2\u033a\63\3\2")
        buf.write("\2\2\u033b\u0347\5\"\22\2\u033c\u0348\5B\"\2\u033d\u033e")
        buf.write("\7\62\2\2\u033e\u0340\5\"\22\2\u033f\u033d\3\2\2\2\u0340")
        buf.write("\u0343\3\2\2\2\u0341\u033f\3\2\2\2\u0341\u0342\3\2\2\2")
        buf.write("\u0342\u0345\3\2\2\2\u0343\u0341\3\2\2\2\u0344\u0346\7")
        buf.write("\62\2\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346")
        buf.write("\u0348\3\2\2\2\u0347\u033c\3\2\2\2\u0347\u0341\3\2\2\2")
        buf.write("\u0348\65\3\2\2\2\u0349\u034b\7\60\2\2\u034a\u034c\5>")
        buf.write(" \2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d")
        buf.write("\3\2\2\2\u034d\u035f\7\61\2\2\u034e\u034f\7\67\2\2\u034f")
        buf.write("\u0354\58\35\2\u0350\u0351\7\62\2\2\u0351\u0353\58\35")
        buf.write("\2\u0352\u0350\3\2\2\2\u0353\u0356\3\2\2\2\u0354\u0352")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0358\3\2\2\2\u0356")
        buf.write("\u0354\3\2\2\2\u0357\u0359\7\62\2\2\u0358\u0357\3\2\2")
        buf.write("\2\u0358\u0359\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b")
        buf.write("\78\2\2\u035b\u035f\3\2\2\2\u035c\u035d\7-\2\2\u035d\u035f")
        buf.write("\7%\2\2\u035e\u0349\3\2\2\2\u035e\u034e\3\2\2\2\u035e")
        buf.write("\u035c\3\2\2\2\u035f\67\3\2\2\2\u0360\u036f\5\"\22\2\u0361")
        buf.write("\u0363\5\"\22\2\u0362\u0361\3\2\2\2\u0362\u0363\3\2\2")
        buf.write("\2\u0363\u0364\3\2\2\2\u0364\u0366\7\63\2\2\u0365\u0367")
        buf.write("\5\"\22\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367")
        buf.write("\u036c\3\2\2\2\u0368\u036a\7\63\2\2\u0369\u036b\5\"\22")
        buf.write("\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d")
        buf.write("\3\2\2\2\u036c\u0368\3\2\2\2\u036c\u036d\3\2\2\2\u036d")
        buf.write("\u036f\3\2\2\2\u036e\u0360\3\2\2\2\u036e\u0362\3\2\2\2")
        buf.write("\u036f9\3\2\2\2\u0370\u0375\5\"\22\2\u0371\u0372\7\62")
        buf.write("\2\2\u0372\u0374\5\"\22\2\u0373\u0371\3\2\2\2\u0374\u0377")
        buf.write("\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u0379\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u037a\7\62\2")
        buf.write("\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a;\3\2")
        buf.write("\2\2\u037b\u039a\5\"\22\2\u037c\u037d\7\63\2\2\u037d\u037f")
        buf.write("\5\"\22\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f")
        buf.write("\u0380\3\2\2\2\u0380\u039b\5B\"\2\u0381\u0382\7\63\2\2")
        buf.write("\u0382\u038a\5\"\22\2\u0383\u0384\7\62\2\2\u0384\u0385")
        buf.write("\5\"\22\2\u0385\u0386\7\63\2\2\u0386\u0387\5\"\22\2\u0387")
        buf.write("\u0389\3\2\2\2\u0388\u0383\3\2\2\2\u0389\u038c\3\2\2\2")
        buf.write("\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038e\3")
        buf.write("\2\2\2\u038c\u038a\3\2\2\2\u038d\u038f\7\62\2\2\u038e")
        buf.write("\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u039b\3\2\2\2")
        buf.write("\u0390\u0391\7\62\2\2\u0391\u0393\5\"\22\2\u0392\u0390")
        buf.write("\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394")
        buf.write("\u0395\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394\3\2\2\2")
        buf.write("\u0397\u0399\7\62\2\2\u0398\u0397\3\2\2\2\u0398\u0399")
        buf.write("\3\2\2\2\u0399\u039b\3\2\2\2\u039a\u037e\3\2\2\2\u039a")
        buf.write("\u0381\3\2\2\2\u039a\u0394\3\2\2\2\u039b=\3\2\2\2\u039c")
        buf.write("\u03a2\5\"\22\2\u039d\u039f\5B\"\2\u039e\u039d\3\2\2\2")
        buf.write("\u039e\u039f\3\2\2\2\u039f\u03a3\3\2\2\2\u03a0\u03a1\7")
        buf.write("\66\2\2\u03a1\u03a3\5\"\22\2\u03a2\u039e\3\2\2\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\7\62\2")
        buf.write("\2\u03a5\u03a7\3\2\2\2\u03a6\u039c\3\2\2\2\u03a7\u03aa")
        buf.write("\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write("\u03cd\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab\u03b1\5\"\22")
        buf.write("\2\u03ac\u03ae\5B\"\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae")
        buf.write("\3\2\2\2\u03ae\u03b2\3\2\2\2\u03af\u03b0\7\66\2\2\u03b0")
        buf.write("\u03b2\5\"\22\2\u03b1\u03ad\3\2\2\2\u03b1\u03af\3\2\2")
        buf.write("\2\u03b2\u03b4\3\2\2\2\u03b3\u03b5\7\62\2\2\u03b4\u03b3")
        buf.write("\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03ce\3\2\2\2\u03b6")
        buf.write("\u03b7\7/\2\2\u03b7\u03c3\5\"\22\2\u03b8\u03b9\7\62\2")
        buf.write("\2\u03b9\u03bf\5\"\22\2\u03ba\u03bc\5B\"\2\u03bb\u03ba")
        buf.write("\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c0\3\2\2\2\u03bd")
        buf.write("\u03be\7\66\2\2\u03be\u03c0\5\"\22\2\u03bf\u03bb\3\2\2")
        buf.write("\2\u03bf\u03bd\3\2\2\2\u03c0\u03c2\3\2\2\2\u03c1\u03b8")
        buf.write("\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\u03c9\3\2\2\2\u03c5\u03c3\3\2\2\2")
        buf.write("\u03c6\u03c7\7\62\2\2\u03c7\u03c8\7\65\2\2\u03c8\u03ca")
        buf.write("\5\"\22\2\u03c9\u03c6\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca")
        buf.write("\u03ce\3\2\2\2\u03cb\u03cc\7\65\2\2\u03cc\u03ce\5\"\22")
        buf.write("\2\u03cd\u03ab\3\2\2\2\u03cd\u03b6\3\2\2\2\u03cd\u03cb")
        buf.write("\3\2\2\2\u03ce?\3\2\2\2\u03cf\u03d6\5B\"\2\u03d0\u03d1")
        buf.write("\7\f\2\2\u03d1\u03d3\5$\23\2\u03d2\u03d4\5@!\2\u03d3\u03d2")
        buf.write("\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6\3\2\2\2\u03d5")
        buf.write("\u03cf\3\2\2\2\u03d5\u03d0\3\2\2\2\u03d6A\3\2\2\2\u03d7")
        buf.write("\u03d9\7\20\2\2\u03d8\u03da\7/\2\2\u03d9\u03d8\3\2\2\2")
        buf.write("\u03d9\u03da\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03e3\5")
        buf.write(",\27\2\u03dc\u03de\7\62\2\2\u03dd\u03df\7/\2\2\u03de\u03dd")
        buf.write("\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0")
        buf.write("\u03e2\5,\27\2\u03e1\u03dc\3\2\2\2\u03e2\u03e5\3\2\2\2")
        buf.write("\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e7\3")
        buf.write("\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e8\7\62\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03ea\7\21\2\2\u03ea\u03ec\5&\24\2\u03eb\u03ed")
        buf.write("\5@!\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03edC")
        buf.write("\3\2\2\2\u00b9FHPTZ^bjlrvz\u0082\u0084\u008a\u008c\u008e")
        buf.write("\u0094\u0096\u009c\u00a0\u00a4\u00ac\u00ae\u00b4\u00b6")
        buf.write("\u00bb\u00c1\u00c5\u00cb\u00d1\u00d5\u00db\u00df\u00e1")
        buf.write("\u00e5\u00eb\u00ef\u00f5\u00f9\u0100\u0104\u0110\u0116")
        buf.write("\u011a\u0126\u012b\u012e\u0133\u013a\u013d\u0143\u0148")
        buf.write("\u014a\u014e\u0152\u0155\u015a\u015d\u0161\u0165\u016c")
        buf.write("\u016f\u0174\u0177\u017b\u0180\u0185\u0189\u018f\u0196")
        buf.write("\u019e\u01a3\u01ab\u01b0\u01b4\u01bb\u01c3\u01c9\u01cb")
        buf.write("\u01d3\u01d9\u01dd\u01e1\u01e7\u01ed\u01f1\u01f5\u01f7")
        buf.write("\u01ff\u0206\u0209\u0210\u0214\u0217\u021c\u021f\u0223")
        buf.write("\u0227\u0229\u0233\u0235\u0242\u0246\u0251\u0255\u025a")
        buf.write("\u025f\u0263\u026a\u0275\u0278\u027d\u0282\u0288\u028a")
        buf.write("\u0291\u0295\u029e\u02a2\u02aa\u02ae\u02b2\u02b7\u02bb")
        buf.write("\u02c2\u02c8\u02cd\u02d3\u02d6\u02e5\u02ec\u02f6\u02fb")
        buf.write("\u02fd\u0303\u030a\u030f\u0317\u031a\u031f\u0324\u0331")
        buf.write("\u0337\u0339\u0341\u0345\u0347\u034b\u0354\u0358\u035e")
        buf.write("\u0362\u0366\u036a\u036c\u036e\u0375\u0379\u037e\u038a")
        buf.write("\u038e\u0394\u0398\u039a\u039e\u03a2\u03a8\u03ad\u03b1")
        buf.write("\u03b4\u03bb\u03bf\u03c3\u03c9\u03cd\u03d3\u03d5\u03d9")
        buf.write("\u03de\u03e3\u03e7\u03ec")
        return buf.getvalue()


class Python3Parser(Parser):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'...'",
                    "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='",
                    "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'",
                    "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'",
                    "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='",
                    "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='",
                    "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='",
                    "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_BYTES_LITERAL",
                     "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER",
                     "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS",
                     "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON",
                     "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK",
                     "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT",
                     "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE",
                     "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS",
                     "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW",
                     "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN",
                     "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN",
                     "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN",
                     "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR",
                     "INDENT", "DEDENT"]

    RULE_file_input = 0
    RULE_typedargslist = 1
    RULE_varargslist = 2
    RULE_stmt = 3
    RULE_small_stmt = 4
    RULE_assign = 5
    RULE_augassign = 6
    RULE_break_stmt = 7
    RULE_raise_stmt = 8
    RULE_if_stmt = 9
    RULE_else_suite = 10
    RULE_while_stmt = 11
    RULE_for_stmt = 12
    RULE_try_stmt = 13
    RULE_except_clause = 14
    RULE_suite = 15
    RULE_test = 16
    RULE_test_nocond = 17
    RULE_or_test = 18
    RULE_not_test = 19
    RULE_comp_op = 20
    RULE_expr = 21
    RULE_factor = 22
    RULE_call = 23
    RULE_atom = 24
    RULE_testlist_comp = 25
    RULE_trailer = 26
    RULE_subscript = 27
    RULE_testlist = 28
    RULE_dictorsetmaker = 29
    RULE_arglist = 30
    RULE_comp_iter = 31
    RULE_comp_for = 32

    ruleNames = ["file_input", "typedargslist", "varargslist", "stmt",
                 "small_stmt", "assign", "augassign", "break_stmt", "raise_stmt",
                 "if_stmt", "else_suite", "while_stmt", "for_stmt", "try_stmt",
                 "except_clause", "suite", "test", "test_nocond", "or_test",
                 "not_test", "comp_op", "expr", "factor", "call", "atom",
                 "testlist_comp", "trailer", "subscript", "testlist",
                 "dictorsetmaker", "arglist", "comp_iter", "comp_for"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_BYTES_LITERAL = 36
    DECIMAL_INTEGER = 37
    OCT_INTEGER = 38
    HEX_INTEGER = 39
    BIN_INTEGER = 40
    FLOAT_NUMBER = 41
    IMAG_NUMBER = 42
    DOT = 43
    ELLIPSIS = 44
    STAR = 45
    OPEN_PAREN = 46
    CLOSE_PAREN = 47
    COMMA = 48
    COLON = 49
    SEMI_COLON = 50
    POWER = 51
    ASSIGN = 52
    OPEN_BRACK = 53
    CLOSE_BRACK = 54
    OR_OP = 55
    XOR = 56
    AND_OP = 57
    LEFT_SHIFT = 58
    RIGHT_SHIFT = 59
    ADD = 60
    MINUS = 61
    DIV = 62
    MOD = 63
    IDIV = 64
    NOT_OP = 65
    OPEN_BRACE = 66
    CLOSE_BRACE = 67
    LESS_THAN = 68
    GREATER_THAN = 69
    EQUALS = 70
    GT_EQ = 71
    LT_EQ = 72
    NOT_EQ_1 = 73
    NOT_EQ_2 = 74
    AT = 75
    ARROW = 76
    ADD_ASSIGN = 77
    SUB_ASSIGN = 78
    MULT_ASSIGN = 79
    AT_ASSIGN = 80
    DIV_ASSIGN = 81
    MOD_ASSIGN = 82
    AND_ASSIGN = 83
    OR_ASSIGN = 84
    XOR_ASSIGN = 85
    LEFT_SHIFT_ASSIGN = 86
    RIGHT_SHIFT_ASSIGN = 87
    POWER_ASSIGN = 88
    IDIV_ASSIGN = 89
    SKIP_ = 90
    UNKNOWN_CHAR = 91
    INDENT = 92
    DEDENT = 93

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 70
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                    1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                            1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (
                            1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (
                            1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                            1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (
                            1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (
                            1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                            1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                            1 << Python3Parser.STRING_BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                            1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                            1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                            1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                            1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (
                            1 << Python3Parser.SEMI_COLON) | (1 << Python3Parser.OPEN_BRACK) | (
                            1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                    1 << (Python3Parser.AT - 65)))) != 0):
                self.state = 68
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 66
                    self.match(Python3Parser.NEWLINE)
                    pass

                elif la_ == 2:
                    self.state = 67
                    self.stmt()
                    pass

                self.state = 72
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 73
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 75
                self.match(Python3Parser.NAME)
                self.state = 78
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 76
                    self.match(Python3Parser.COLON)
                    self.state = 77
                    self.test()

                self.state = 82
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 80
                    self.match(Python3Parser.ASSIGN)
                    self.state = 81
                    self.test()

                self.state = 96
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 84
                        self.match(Python3Parser.COMMA)
                        self.state = 85
                        self.match(Python3Parser.NAME)
                        self.state = 88
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 86
                            self.match(Python3Parser.COLON)
                            self.state = 87
                            self.test()

                        self.state = 92
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 90
                            self.match(Python3Parser.ASSIGN)
                            self.state = 91
                            self.test()

                    self.state = 98
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 99
                    self.match(Python3Parser.COMMA)
                    self.state = 138
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 100
                        self.match(Python3Parser.STAR)
                        self.state = 106
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 101
                            self.match(Python3Parser.NAME)
                            self.state = 104
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 102
                                self.match(Python3Parser.COLON)
                                self.state = 103
                                self.test()

                        self.state = 120
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 108
                                self.match(Python3Parser.COMMA)
                                self.state = 109
                                self.match(Python3Parser.NAME)
                                self.state = 112
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.COLON:
                                    self.state = 110
                                    self.match(Python3Parser.COLON)
                                    self.state = 111
                                    self.test()

                                self.state = 116
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 114
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 115
                                    self.test()

                            self.state = 122
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                        self.state = 130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 123
                            self.match(Python3Parser.COMMA)
                            self.state = 124
                            self.match(Python3Parser.POWER)
                            self.state = 125
                            self.match(Python3Parser.NAME)
                            self.state = 128
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 126
                                self.match(Python3Parser.COLON)
                                self.state = 127
                                self.test()

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 132
                        self.match(Python3Parser.POWER)
                        self.state = 133
                        self.match(Python3Parser.NAME)
                        self.state = 136
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 134
                            self.match(Python3Parser.COLON)
                            self.state = 135
                            self.test()

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self.match(Python3Parser.STAR)
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 143
                    self.match(Python3Parser.NAME)
                    self.state = 146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 144
                        self.match(Python3Parser.COLON)
                        self.state = 145
                        self.test()

                self.state = 162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 150
                        self.match(Python3Parser.COMMA)
                        self.state = 151
                        self.match(Python3Parser.NAME)
                        self.state = 154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 152
                            self.match(Python3Parser.COLON)
                            self.state = 153
                            self.test()

                        self.state = 158
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 156
                            self.match(Python3Parser.ASSIGN)
                            self.state = 157
                            self.test()

                    self.state = 164
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 165
                    self.match(Python3Parser.COMMA)
                    self.state = 166
                    self.match(Python3Parser.POWER)
                    self.state = 167
                    self.match(Python3Parser.NAME)
                    self.state = 170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 168
                        self.match(Python3Parser.COLON)
                        self.state = 169
                        self.test()

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 174
                self.match(Python3Parser.POWER)
                self.state = 175
                self.match(Python3Parser.NAME)
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 176
                    self.match(Python3Parser.COLON)
                    self.state = 177
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.match(Python3Parser.NAME)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 183
                    self.match(Python3Parser.ASSIGN)
                    self.state = 184
                    self.test()

                self.state = 195
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 187
                        self.match(Python3Parser.COMMA)
                        self.state = 188
                        self.match(Python3Parser.NAME)
                        self.state = 191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 189
                            self.match(Python3Parser.ASSIGN)
                            self.state = 190
                            self.test()

                    self.state = 197
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 198
                    self.match(Python3Parser.COMMA)
                    self.state = 221
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 199
                        self.match(Python3Parser.STAR)
                        self.state = 201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 200
                            self.match(Python3Parser.NAME)

                        self.state = 211
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 203
                                self.match(Python3Parser.COMMA)
                                self.state = 204
                                self.match(Python3Parser.NAME)
                                self.state = 207
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 205
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 206
                                    self.test()

                            self.state = 213
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

                        self.state = 217
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 214
                            self.match(Python3Parser.COMMA)
                            self.state = 215
                            self.match(Python3Parser.POWER)
                            self.state = 216
                            self.match(Python3Parser.NAME)

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 219
                        self.match(Python3Parser.POWER)
                        self.state = 220
                        self.match(Python3Parser.NAME)
                        pass
                    elif token == Python3Parser.COLON:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.match(Python3Parser.STAR)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 226
                    self.match(Python3Parser.NAME)

                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 229
                        self.match(Python3Parser.COMMA)
                        self.state = 230
                        self.match(Python3Parser.NAME)
                        self.state = 233
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 231
                            self.match(Python3Parser.ASSIGN)
                            self.state = 232
                            self.test()

                    self.state = 239
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 240
                    self.match(Python3Parser.COMMA)
                    self.state = 241
                    self.match(Python3Parser.POWER)
                    self.state = 242
                    self.match(Python3Parser.NAME)

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 245
                self.match(Python3Parser.POWER)
                self.state = 246
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def arglist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArglistContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArglistContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        self._la = 0  # Token type
        try:
            self.state = 332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME,
                         Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                         Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                         Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                         Python3Parser.OPEN_PAREN, Python3Parser.SEMI_COLON, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.small_stmt()
                self.state = 254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 250
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 251
                        self.small_stmt()
                    self.state = 256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 257
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 260
                self.match(Python3Parser.NEWLINE)
                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.if_stmt()
                pass
            elif token == Python3Parser.WHILE:
                self.enterOuterAlt(localctx, 3)
                self.state = 263
                self.while_stmt()
                pass
            elif token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 4)
                self.state = 264
                self.for_stmt()
                pass
            elif token == Python3Parser.TRY:
                self.enterOuterAlt(localctx, 5)
                self.state = 265
                self.try_stmt()
                pass
            elif token == Python3Parser.WITH:
                self.enterOuterAlt(localctx, 6)
                self.state = 266
                self.match(Python3Parser.WITH)
                self.state = 267
                self.test()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 268
                    self.match(Python3Parser.AS)
                    self.state = 269
                    self.expr()

                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 272
                    self.match(Python3Parser.COMMA)
                    self.state = 273
                    self.test()
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 274
                        self.match(Python3Parser.AS)
                        self.state = 275
                        self.expr()

                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 283
                self.match(Python3Parser.COLON)
                self.state = 284
                self.suite()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.AT:
                    self.state = 286
                    self.match(Python3Parser.AT)
                    self.state = 287
                    self.match(Python3Parser.NAME)
                    self.state = 292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 288
                        self.match(Python3Parser.DOT)
                        self.state = 289
                        self.match(Python3Parser.NAME)
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 295
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 297
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 296
                            self.arglist()

                        self.state = 299
                        self.match(Python3Parser.CLOSE_PAREN)

                    self.state = 302
                    self.match(Python3Parser.NEWLINE)
                    self.state = 307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 328
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.CLASS:
                    self.state = 308
                    self.match(Python3Parser.CLASS)
                    self.state = 309
                    self.match(Python3Parser.NAME)
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 310
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 312
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 311
                            self.arglist()

                        self.state = 314
                        self.match(Python3Parser.CLOSE_PAREN)

                    pass
                elif token == Python3Parser.DEF:
                    self.state = 317
                    self.match(Python3Parser.DEF)
                    self.state = 318
                    self.match(Python3Parser.NAME)
                    self.state = 319
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                        self.state = 320
                        self.typedargslist()

                    self.state = 323
                    self.match(Python3Parser.CLOSE_PAREN)
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.ARROW:
                        self.state = 324
                        self.match(Python3Parser.ARROW)
                        self.state = 325
                        self.test()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 330
                self.match(Python3Parser.COLON)
                self.state = 331
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSmall_stmt"):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_small_stmt)
        self._la = 0  # Token type
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 334
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 335
                        self.match(Python3Parser.STAR)

                    self.state = 338
                    self.expr()
                    pass

                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 341
                        self.match(Python3Parser.COMMA)
                        self.state = 347
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                        if la_ == 1:
                            self.state = 342
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 344
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 343
                                self.match(Python3Parser.STAR)

                            self.state = 346
                            self.expr()
                            pass

                    self.state = 353
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 354
                    self.match(Python3Parser.COMMA)

                self.state = 373
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                             Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                             Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                             Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN,
                             Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                    self.state = 357
                    self.augassign()
                    self.state = 365
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.YIELD:
                        self.state = 358
                        self.match(Python3Parser.YIELD)
                        self.state = 362
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == Python3Parser.FROM:
                            self.state = 359
                            self.match(Python3Parser.FROM)
                            self.state = 360
                            self.test()
                            pass
                        elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                       Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                       Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                                       Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                                       Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                                       Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                                       Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                            self.state = 361
                            self.testlist()
                            pass
                        elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                            pass
                        else:
                            pass
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 364
                        self.testlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.ASSIGN:
                        self.state = 367
                        self.assign()
                        self.state = 372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == Python3Parser.DEL:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.match(Python3Parser.DEL)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 376
                    self.match(Python3Parser.STAR)

                self.state = 379
                self.expr()
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 380
                        self.match(Python3Parser.COMMA)
                        self.state = 382
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 381
                            self.match(Python3Parser.STAR)

                        self.state = 384
                        self.expr()
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)

                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 390
                    self.match(Python3Parser.COMMA)

                pass
            elif token in [Python3Parser.PASS, Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 393
                _la = self._input.LA(1)
                if not (_la == Python3Parser.PASS or _la == Python3Parser.CONTINUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token == Python3Parser.BREAK:
                self.enterOuterAlt(localctx, 4)
                self.state = 394
                self.break_stmt()
                pass
            elif token == Python3Parser.RETURN:
                self.enterOuterAlt(localctx, 5)
                self.state = 395
                self.match(Python3Parser.RETURN)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 396
                    self.testlist()

                pass
            elif token == Python3Parser.RAISE:
                self.enterOuterAlt(localctx, 6)
                self.state = 399
                self.raise_stmt()
                pass
            elif token == Python3Parser.YIELD:
                self.enterOuterAlt(localctx, 7)
                self.state = 400
                self.match(Python3Parser.YIELD)
                self.state = 404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.FROM:
                    self.state = 401
                    self.match(Python3Parser.FROM)
                    self.state = 402
                    self.test()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 403
                    self.testlist()
                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                    pass
                else:
                    pass
                pass
            elif token == Python3Parser.IMPORT:
                self.enterOuterAlt(localctx, 8)
                self.state = 406
                self.match(Python3Parser.IMPORT)
                self.state = 407
                self.match(Python3Parser.NAME)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.DOT:
                    self.state = 408
                    self.match(Python3Parser.DOT)
                    self.state = 409
                    self.match(Python3Parser.NAME)
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 415
                    self.match(Python3Parser.AS)
                    self.state = 416
                    self.match(Python3Parser.NAME)

                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 419
                    self.match(Python3Parser.COMMA)
                    self.state = 420
                    self.match(Python3Parser.NAME)
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 421
                        self.match(Python3Parser.DOT)
                        self.state = 422
                        self.match(Python3Parser.NAME)
                        self.state = 427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 428
                        self.match(Python3Parser.AS)
                        self.state = 429
                        self.match(Python3Parser.NAME)

                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.FROM:
                self.enterOuterAlt(localctx, 9)
                self.state = 437
                self.match(Python3Parser.FROM)
                self.state = 457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
                if la_ == 1:
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                        self.state = 438
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 443
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 444
                    self.match(Python3Parser.NAME)
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 445
                        self.match(Python3Parser.DOT)
                        self.state = 446
                        self.match(Python3Parser.NAME)
                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 452
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            break

                    pass

                self.state = 459
                self.match(Python3Parser.IMPORT)
                self.state = 501
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.STAR:
                    self.state = 460
                    self.match(Python3Parser.STAR)
                    pass
                elif token == Python3Parser.OPEN_PAREN:
                    self.state = 461
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 462
                    self.match(Python3Parser.NAME)
                    self.state = 465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 463
                        self.match(Python3Parser.AS)
                        self.state = 464
                        self.match(Python3Parser.NAME)

                    self.state = 475
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 467
                            self.match(Python3Parser.COMMA)
                            self.state = 468
                            self.match(Python3Parser.NAME)
                            self.state = 471
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 469
                                self.match(Python3Parser.AS)
                                self.state = 470
                                self.match(Python3Parser.NAME)

                        self.state = 477
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 478
                        self.match(Python3Parser.COMMA)

                    self.state = 481
                    self.match(Python3Parser.CLOSE_PAREN)
                    pass
                elif token == Python3Parser.NAME:
                    self.state = 482
                    self.match(Python3Parser.NAME)
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 483
                        self.match(Python3Parser.AS)
                        self.state = 484
                        self.match(Python3Parser.NAME)

                    self.state = 495
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 487
                            self.match(Python3Parser.COMMA)
                            self.state = 488
                            self.match(Python3Parser.NAME)
                            self.state = 491
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 489
                                self.match(Python3Parser.AS)
                                self.state = 490
                                self.match(Python3Parser.NAME)

                        self.state = 497
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 498
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.GLOBAL, Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 503
                _la = self._input.LA(1)
                if not (_la == Python3Parser.GLOBAL or _la == Python3Parser.NONLOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 504
                self.match(Python3Parser.NAME)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 505
                    self.match(Python3Parser.COMMA)
                    self.state = 506
                    self.match(Python3Parser.NAME)
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.ASSERT:
                self.enterOuterAlt(localctx, 11)
                self.state = 512
                self.match(Python3Parser.ASSERT)
                self.state = 513
                self.test()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 514
                    self.match(Python3Parser.COMMA)
                    self.state = 515
                    self.test()

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                self.enterOuterAlt(localctx, 12)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(Python3Parser.ASSIGN)
            self.state = 551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.YIELD:
                self.state = 522
                self.match(Python3Parser.YIELD)
                self.state = 526
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.FROM:
                    self.state = 523
                    self.match(Python3Parser.FROM)
                    self.state = 524
                    self.test()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 525
                    self.testlist()
                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                    pass
                else:
                    pass
                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                           Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                           Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                           Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                           Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                           Python3Parser.OPEN_BRACE]:
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 529
                        self.match(Python3Parser.STAR)

                    self.state = 532
                    self.expr()
                    pass

                self.state = 545
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 535
                        self.match(Python3Parser.COMMA)
                        self.state = 541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                        if la_ == 1:
                            self.state = 536
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 538
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 537
                                self.match(Python3Parser.STAR)

                            self.state = 540
                            self.expr()
                            pass

                    self.state = 547
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 548
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            _la = self._input.LA(1)
            if not (((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & (
                    (1 << (Python3Parser.ADD_ASSIGN - 77)) | (1 << (Python3Parser.SUB_ASSIGN - 77)) | (
                    1 << (Python3Parser.MULT_ASSIGN - 77)) | (1 << (Python3Parser.AT_ASSIGN - 77)) | (
                            1 << (Python3Parser.DIV_ASSIGN - 77)) | (1 << (Python3Parser.MOD_ASSIGN - 77)) | (
                            1 << (Python3Parser.AND_ASSIGN - 77)) | (1 << (Python3Parser.OR_ASSIGN - 77)) | (
                            1 << (Python3Parser.XOR_ASSIGN - 77)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 77)) | (
                            1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 77)) | (1 << (Python3Parser.POWER_ASSIGN - 77)) | (
                            1 << (Python3Parser.IDIV_ASSIGN - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_raise_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(Python3Parser.RAISE)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 558
                self.test()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FROM:
                    self.state = 559
                    self.match(Python3Parser.FROM)
                    self.state = 560
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(Python3Parser.IF)
            self.state = 566
            self.test()
            self.state = 567
            self.match(Python3Parser.COLON)
            self.state = 568
            self.suite()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 569
                self.match(Python3Parser.ELIF)
                self.state = 570
                self.test()
                self.state = 571
                self.match(Python3Parser.COLON)
                self.state = 572
                self.suite()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 579
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(Python3Parser.ELSE)
            self.state = 583
            self.match(Python3Parser.COLON)
            self.state = 584
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(Python3Parser.WHILE)
            self.state = 587
            self.test()
            self.state = 588
            self.match(Python3Parser.COLON)
            self.state = 589
            self.suite()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 590
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(Python3Parser.FOR)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 594
                self.match(Python3Parser.STAR)

            self.state = 597
            self.expr()
            self.state = 605
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 598
                    self.match(Python3Parser.COMMA)
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 599
                        self.match(Python3Parser.STAR)

                    self.state = 602
                    self.expr()
                self.state = 607
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)

            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 608
                self.match(Python3Parser.COMMA)

            self.state = 611
            self.match(Python3Parser.IN)
            self.state = 612
            self.testlist()
            self.state = 613
            self.match(Python3Parser.COLON)
            self.state = 614
            self.suite()
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 615
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(Python3Parser.TRY)
            self.state = 619
            self.match(Python3Parser.COLON)
            self.state = 620
            self.suite()
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.EXCEPT:
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 621
                    self.except_clause()
                    self.state = 622
                    self.match(Python3Parser.COLON)
                    self.state = 623
                    self.suite()
                    self.state = 627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 629
                    self.else_suite()

                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 632
                    self.match(Python3Parser.FINALLY)
                    self.state = 633
                    self.match(Python3Parser.COLON)
                    self.state = 634
                    self.suite()

                pass
            elif token == Python3Parser.FINALLY:
                self.state = 637
                self.match(Python3Parser.FINALLY)
                self.state = 638
                self.match(Python3Parser.COLON)
                self.state = 639
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(Python3Parser.EXCEPT)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 643
                self.test()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 644
                    self.match(Python3Parser.AS)
                    self.state = 645
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.small_stmt()
                self.state = 655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 651
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 652
                        self.small_stmt()
                    self.state = 657
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)

                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 658
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 661
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(Python3Parser.NEWLINE)
                self.state = 664
                self.match(Python3Parser.INDENT)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 665
                    self.stmt()
                    self.state = 668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                            1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                                    1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                                    1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                                    1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                                    1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                                    1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                                    1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                                    1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                                    1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                                    1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                                    1 << Python3Parser.STRING_BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                                    1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                                    1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                                    1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                                    1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (
                                    1 << Python3Parser.SEMI_COLON) | (1 << Python3Parser.OPEN_BRACK) | (
                                    1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                                    1 << (Python3Parser.AT - 65)))) != 0)):
                        break

                self.state = 670
                self.match(Python3Parser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext, i)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.or_test()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF:
                    self.state = 675
                    self.match(Python3Parser.IF)
                    self.state = 676
                    self.or_test()
                    self.state = 677
                    self.match(Python3Parser.ELSE)
                    self.state = 678
                    self.test()

                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.match(Python3Parser.LAMBDA)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 683
                    self.varargslist()

                self.state = 686
                self.match(Python3Parser.COLON)
                self.state = 687
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_test_nocond)
        self._la = 0  # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.or_test()
                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(Python3Parser.LAMBDA)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 692
                    self.varargslist()

                self.state = 695
                self.match(Python3Parser.COLON)
                self.state = 696
                self.test_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.not_test()
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR or _la == Python3Parser.AND:
                self.state = 700
                _la = self._input.LA(1)
                if not (_la == Python3Parser.OR or _la == Python3Parser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self.not_test()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_not_test)
        self._la = 0  # Token type
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NOT:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.match(Python3Parser.NOT)
                self.state = 708
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 709
                    self.match(Python3Parser.STAR)

                self.state = 712
                self.expr()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & (
                        (1 << (Python3Parser.IN - 15)) | (1 << (Python3Parser.NOT - 15)) | (
                        1 << (Python3Parser.IS - 15)) | (1 << (Python3Parser.LESS_THAN - 15)) | (
                                1 << (Python3Parser.GREATER_THAN - 15)) | (1 << (Python3Parser.EQUALS - 15)) | (
                                1 << (Python3Parser.GT_EQ - 15)) | (1 << (Python3Parser.LT_EQ - 15)) | (
                                1 << (Python3Parser.NOT_EQ_1 - 15)) | (1 << (Python3Parser.NOT_EQ_2 - 15)))) != 0):
                    self.state = 713
                    self.comp_op()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 714
                        self.match(Python3Parser.STAR)

                    self.state = 717
                    self.expr()
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_comp_op)
        try:
            self.state = 739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 728
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 729
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 730
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 731
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 732
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 733
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 734
                self.match(Python3Parser.NOT)
                self.state = 735
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 736
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 737
                self.match(Python3Parser.IS)
                self.state = 738
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.factor()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & (
                    (1 << (Python3Parser.STAR - 45)) | (1 << (Python3Parser.OR_OP - 45)) | (
                    1 << (Python3Parser.XOR - 45)) | (1 << (Python3Parser.AND_OP - 45)) | (
                            1 << (Python3Parser.LEFT_SHIFT - 45)) | (1 << (Python3Parser.RIGHT_SHIFT - 45)) | (
                            1 << (Python3Parser.ADD - 45)) | (1 << (Python3Parser.MINUS - 45)) | (
                            1 << (Python3Parser.DIV - 45)) | (1 << (Python3Parser.MOD - 45)) | (
                            1 << (Python3Parser.IDIV - 45)) | (1 << (Python3Parser.AT - 45)))) != 0):
                self.state = 742
                _la = self._input.LA(1)
                if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & (
                        (1 << (Python3Parser.STAR - 45)) | (1 << (Python3Parser.OR_OP - 45)) | (
                        1 << (Python3Parser.XOR - 45)) | (1 << (Python3Parser.AND_OP - 45)) | (
                                1 << (Python3Parser.LEFT_SHIFT - 45)) | (1 << (Python3Parser.RIGHT_SHIFT - 45)) | (
                                1 << (Python3Parser.ADD - 45)) | (1 << (Python3Parser.MINUS - 45)) | (
                                1 << (Python3Parser.DIV - 45)) | (1 << (Python3Parser.MOD - 45)) | (
                                1 << (Python3Parser.IDIV - 45)) | (1 << (Python3Parser.AT - 45)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 743
                self.factor()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                _la = self._input.LA(1)
                if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                        (1 << (Python3Parser.ADD - 60)) | (1 << (Python3Parser.MINUS - 60)) | (
                        1 << (Python3Parser.NOT_OP - 60)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 750
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.call(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.atom()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (
                        1 << Python3Parser.OPEN_BRACK))) != 0):
                    self.state = 753
                    self.trailer()
                    self.state = 758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 759
                    self.match(Python3Parser.POWER)
                    self.state = 760
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(Python3Parser.NAME)

            self.state = 767
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                            1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                            1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                            1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 768
                self.arglist()

            self.state = 771
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 773
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")

                    self.state = 774
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 775
                        self.arglist()

                    self.state = 778
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def STRING_BYTES_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.STRING_BYTES_LITERAL)
            else:
                return self.getToken(Python3Parser.STRING_BYTES_LITERAL, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.YIELD:
                    self.state = 785
                    self.match(Python3Parser.YIELD)
                    self.state = 789
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FROM:
                        self.state = 786
                        self.match(Python3Parser.FROM)
                        self.state = 787
                        self.test()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 788
                        self.testlist()
                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 791
                    self.testlist_comp()
                    pass
                elif token == Python3Parser.CLOSE_PAREN:
                    pass
                else:
                    pass
                self.state = 794
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 796
                    self.testlist_comp()

                self.state = 799
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.OPEN_BRACE:
                self.enterOuterAlt(localctx, 3)
                self.state = 800
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 801
                    self.dictorsetmaker()

                self.state = 804
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NAME:
                    self.state = 805
                    self.match(Python3Parser.NAME)
                    pass
                elif token == Python3Parser.DECIMAL_INTEGER:
                    self.state = 806
                    self.match(Python3Parser.DECIMAL_INTEGER)
                    pass
                elif token == Python3Parser.OCT_INTEGER:
                    self.state = 807
                    self.match(Python3Parser.OCT_INTEGER)
                    pass
                elif token == Python3Parser.HEX_INTEGER:
                    self.state = 808
                    self.match(Python3Parser.HEX_INTEGER)
                    pass
                elif token == Python3Parser.BIN_INTEGER:
                    self.state = 809
                    self.match(Python3Parser.BIN_INTEGER)
                    pass
                elif token == Python3Parser.FLOAT_NUMBER:
                    self.state = 810
                    self.match(Python3Parser.FLOAT_NUMBER)
                    pass
                elif token == Python3Parser.IMAG_NUMBER:
                    self.state = 811
                    self.match(Python3Parser.IMAG_NUMBER)
                    pass
                elif token == Python3Parser.STRING_BYTES_LITERAL:
                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 812
                        self.match(Python3Parser.STRING_BYTES_LITERAL)
                        self.state = 815
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.STRING_BYTES_LITERAL):
                            break

                    pass
                elif token == Python3Parser.ELLIPSIS:
                    self.state = 817
                    self.match(Python3Parser.ELLIPSIS)
                    pass
                elif token == Python3Parser.NONE:
                    self.state = 818
                    self.match(Python3Parser.NONE)
                    pass
                elif token == Python3Parser.TRUE:
                    self.state = 819
                    self.match(Python3Parser.TRUE)
                    pass
                elif token == Python3Parser.FALSE:
                    self.state = 820
                    self.match(Python3Parser.FALSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_comp"):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)

    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_testlist_comp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.test()
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.FOR:
                self.state = 826
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 827
                        self.match(Python3Parser.COMMA)
                        self.state = 828
                        self.test()
                    self.state = 833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 834
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 840
                    self.arglist()

                self.state = 843
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 845
                self.subscript()
                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 846
                        self.match(Python3Parser.COMMA)
                        self.state = 847
                        self.subscript()
                    self.state = 852
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)

                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 853
                    self.match(Python3Parser.COMMA)

                self.state = 856
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.DOT:
                self.enterOuterAlt(localctx, 3)
                self.state = 858
                self.match(Python3Parser.DOT)
                self.state = 859
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 863
                    self.test()

                self.state = 866
                self.match(Python3Parser.COLON)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 867
                    self.test()

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 870
                    self.match(Python3Parser.COLON)
                    self.state = 872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 871
                        self.test()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_testlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.test()
            self.state = 883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 879
                    self.match(Python3Parser.COMMA)
                    self.state = 880
                    self.test()
                self.state = 885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)

            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 886
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.test()
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
            if la_ == 1:
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 890
                    self.match(Python3Parser.COLON)
                    self.state = 891
                    self.test()

                self.state = 894
                self.comp_for()
                pass

            elif la_ == 2:
                self.state = 895
                self.match(Python3Parser.COLON)
                self.state = 896
                self.test()
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 897
                        self.match(Python3Parser.COMMA)
                        self.state = 898
                        self.test()
                        self.state = 899
                        self.match(Python3Parser.COLON)
                        self.state = 900
                        self.test()
                    self.state = 906
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)

                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 907
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 3:
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 162, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 910
                        self.match(Python3Parser.COMMA)
                        self.state = 911
                        self.test()
                    self.state = 916
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 162, self._ctx)

                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 917
                    self.match(Python3Parser.COMMA)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_forContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_forContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 922
                    self.test()
                    self.state = 928
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FOR, Python3Parser.COMMA]:
                        self.state = 924
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.FOR:
                            self.state = 923
                            self.comp_for()

                        pass
                    elif token == Python3Parser.ASSIGN:
                        self.state = 926
                        self.match(Python3Parser.ASSIGN)
                        self.state = 927
                        self.test()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 930
                    self.match(Python3Parser.COMMA)
                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)

            self.state = 971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 175, self._ctx)
            if la_ == 1:
                self.state = 937
                self.test()
                self.state = 943
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.FOR:
                        self.state = 938
                        self.comp_for()

                    pass
                elif token == Python3Parser.ASSIGN:
                    self.state = 941
                    self.match(Python3Parser.ASSIGN)
                    self.state = 942
                    self.test()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 945
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 948
                self.match(Python3Parser.STAR)
                self.state = 949
                self.test()
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 950
                        self.match(Python3Parser.COMMA)
                        self.state = 951
                        self.test()
                        self.state = 957
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                            self.state = 953
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.FOR:
                                self.state = 952
                                self.comp_for()

                            pass
                        elif token == Python3Parser.ASSIGN:
                            self.state = 955
                            self.match(Python3Parser.ASSIGN)
                            self.state = 956
                            self.test()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 963
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)

                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 964
                    self.match(Python3Parser.COMMA)
                    self.state = 965
                    self.match(Python3Parser.POWER)
                    self.state = 966
                    self.test()

                pass

            elif la_ == 3:
                self.state = 969
                self.match(Python3Parser.POWER)
                self.state = 970
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_comp_iter)
        self._la = 0  # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.comp_for()
                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(Python3Parser.IF)
                self.state = 975
                self.test_nocond()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                    self.state = 976
                    self.comp_iter()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(Python3Parser.FOR)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 982
                self.match(Python3Parser.STAR)

            self.state = 985
            self.expr()
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 986
                    self.match(Python3Parser.COMMA)
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 987
                        self.match(Python3Parser.STAR)

                    self.state = 990
                    self.expr()
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 996
                self.match(Python3Parser.COMMA)

            self.state = 999
            self.match(Python3Parser.IN)
            self.state = 1000
            self.or_test()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1001
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
