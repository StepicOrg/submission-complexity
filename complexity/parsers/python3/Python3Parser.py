# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u043c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\3\2\3\2\3\2\5\2\u00b6\n\2\3\3\3")
        buf.write("\3\7\3\u00ba\n\3\f\3\16\3\u00bd\13\3\3\3\3\3\3\4\3\4\7")
        buf.write("\4\u00c3\n\4\f\4\16\4\u00c6\13\4\3\4\3\4\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u00ce\n\5\3\5\5\5\u00d1\n\5\3\5\3\5\3\6\6\6\u00d6")
        buf.write("\n\6\r\6\16\6\u00d7\3\7\3\7\3\7\5\7\u00dd\n\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u00e4\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u00eb")
        buf.write("\n\t\3\t\3\t\3\n\3\n\3\n\5\n\u00f2\n\n\3\n\3\n\3\n\3\n")
        buf.write("\5\n\u00f8\n\n\7\n\u00fa\n\n\f\n\16\n\u00fd\13\n\3\n\3")
        buf.write("\n\3\n\5\n\u0102\n\n\3\n\3\n\3\n\3\n\5\n\u0108\n\n\7\n")
        buf.write("\u010a\n\n\f\n\16\n\u010d\13\n\3\n\3\n\3\n\5\n\u0112\n")
        buf.write("\n\3\n\3\n\5\n\u0116\n\n\5\n\u0118\n\n\3\n\3\n\5\n\u011c")
        buf.write("\n\n\3\n\3\n\3\n\3\n\5\n\u0122\n\n\7\n\u0124\n\n\f\n\16")
        buf.write("\n\u0127\13\n\3\n\3\n\3\n\5\n\u012c\n\n\3\n\3\n\5\n\u0130")
        buf.write("\n\n\3\13\3\13\3\13\5\13\u0135\n\13\3\f\3\f\3\f\5\f\u013a")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u0140\n\f\7\f\u0142\n\f\f\f\16")
        buf.write("\f\u0145\13\f\3\f\3\f\3\f\5\f\u014a\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0150\n\f\7\f\u0152\n\f\f\f\16\f\u0155\13\f\3\f")
        buf.write("\3\f\3\f\5\f\u015a\n\f\3\f\3\f\5\f\u015e\n\f\5\f\u0160")
        buf.write("\n\f\3\f\3\f\5\f\u0164\n\f\3\f\3\f\3\f\3\f\5\f\u016a\n")
        buf.write("\f\7\f\u016c\n\f\f\f\16\f\u016f\13\f\3\f\3\f\3\f\5\f\u0174")
        buf.write("\n\f\3\f\3\f\5\f\u0178\n\f\3\r\3\r\3\16\3\16\5\16\u017e")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u0183\n\17\f\17\16\17\u0186")
        buf.write("\13\17\3\17\5\17\u0189\n\17\3\17\3\17\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\5\20\u0196\n\20\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u019c\n\21\3\21\7\21\u019f\n\21\f\21\16")
        buf.write("\21\u01a2\13\21\5\21\u01a4\n\21\3\22\3\22\3\22\5\22\u01a9")
        buf.write("\n\22\3\23\3\23\5\23\u01ad\n\23\3\23\3\23\3\23\5\23\u01b2")
        buf.write("\n\23\7\23\u01b4\n\23\f\23\16\23\u01b7\13\23\3\23\5\23")
        buf.write("\u01ba\n\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\27\3")
        buf.write("\27\3\27\3\27\3\27\5\27\u01c8\n\27\3\30\3\30\3\31\3\31")
        buf.write("\3\32\3\32\5\32\u01d0\n\32\3\33\3\33\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u01d8\n\34\5\34\u01da\n\34\3\35\3\35\5\35\u01de")
        buf.write("\n\35\3\36\3\36\3\36\3\37\3\37\7\37\u01e5\n\37\f\37\16")
        buf.write("\37\u01e8\13\37\3\37\3\37\6\37\u01ec\n\37\r\37\16\37\u01ed")
        buf.write("\5\37\u01f0\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5")
        buf.write("\37\u01f9\n\37\3 \3 \3 \5 \u01fe\n \3!\3!\3!\5!\u0203")
        buf.write("\n!\3\"\3\"\3\"\7\"\u0208\n\"\f\"\16\"\u020b\13\"\3\"")
        buf.write("\5\"\u020e\n\"\3#\3#\3#\7#\u0213\n#\f#\16#\u0216\13#\3")
        buf.write("$\3$\3$\7$\u021b\n$\f$\16$\u021e\13$\3%\3%\3%\3%\7%\u0224")
        buf.write("\n%\f%\16%\u0227\13%\3&\3&\3&\3&\7&\u022d\n&\f&\16&\u0230")
        buf.write("\13&\3\'\3\'\3\'\3\'\5\'\u0236\n\'\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u0240\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\7)\u024b\n")
        buf.write(")\f)\16)\u024e\13)\3)\5)\u0251\n)\3*\3*\3*\3*\3+\3+\3")
        buf.write("+\3+\3+\5+\u025c\n+\3,\3,\3,\3,\3,\3,\3,\5,\u0265\n,\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\6-\u026e\n-\r-\16-\u026f\3-\5-\u0273")
        buf.write("\n-\3-\3-\3-\5-\u0278\n-\3-\3-\3-\5-\u027d\n-\3.\3.\3")
        buf.write(".\3.\7.\u0283\n.\f.\16.\u0286\13.\3.\3.\3.\3/\3/\3/\5")
        buf.write("/\u028e\n/\3\60\3\60\3\60\3\60\5\60\u0294\n\60\5\60\u0296")
        buf.write("\n\60\3\61\3\61\3\61\3\61\6\61\u029c\n\61\r\61\16\61\u029d")
        buf.write("\3\61\3\61\5\61\u02a2\n\61\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\5\62\u02aa\n\62\3\62\5\62\u02ad\n\62\3\63\3\63\5\63")
        buf.write("\u02b1\n\63\3\64\3\64\5\64\u02b5\n\64\3\64\3\64\3\64\3")
        buf.write("\65\3\65\5\65\u02bc\n\65\3\65\3\65\3\65\3\66\3\66\3\66")
        buf.write("\7\66\u02c4\n\66\f\66\16\66\u02c7\13\66\3\67\3\67\3\67")
        buf.write("\7\67\u02cc\n\67\f\67\16\67\u02cf\13\67\38\38\38\58\u02d4")
        buf.write("\n8\39\39\39\39\79\u02da\n9\f9\169\u02dd\139\3:\3:\3:")
        buf.write("\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u02ec\n:\3;\5;\u02ef")
        buf.write("\n;\3;\3;\3<\3<\3<\7<\u02f6\n<\f<\16<\u02f9\13<\3=\3=")
        buf.write("\3=\7=\u02fe\n=\f=\16=\u0301\13=\3>\3>\3>\7>\u0306\n>")
        buf.write("\f>\16>\u0309\13>\3?\3?\3?\3?\3?\7?\u0310\n?\f?\16?\u0313")
        buf.write("\13?\3@\3@\3@\3@\3@\7@\u031a\n@\f@\16@\u031d\13@\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\7A\u032a\nA\fA\16A\u032d")
        buf.write("\13A\3B\3B\3B\3B\3B\3B\3B\5B\u0336\nB\3C\3C\3C\7C\u033b")
        buf.write("\nC\fC\16C\u033e\13C\3C\3C\5C\u0342\nC\5C\u0344\nC\3D")
        buf.write("\3D\3D\3D\5D\u034a\nD\3D\3D\3D\3D\3D\5D\u0351\nD\3D\7")
        buf.write("D\u0354\nD\fD\16D\u0357\13D\3E\3E\3E\5E\u035c\nE\3E\3")
        buf.write("E\3E\5E\u0361\nE\3E\3E\3E\5E\u0366\nE\3E\3E\3E\3E\6E\u036c")
        buf.write("\nE\rE\16E\u036d\3E\3E\3E\3E\5E\u0374\nE\3F\3F\3F\3F\7")
        buf.write("F\u037a\nF\fF\16F\u037d\13F\3F\5F\u0380\nF\5F\u0382\n")
        buf.write("F\3G\3G\5G\u0386\nG\3G\3G\3G\3G\3G\3G\3G\5G\u038f\nG\3")
        buf.write("H\3H\3H\7H\u0394\nH\fH\16H\u0397\13H\3H\5H\u039a\nH\3")
        buf.write("I\3I\5I\u039e\nI\3I\3I\5I\u03a2\nI\3I\5I\u03a5\nI\5I\u03a7")
        buf.write("\nI\3J\3J\5J\u03ab\nJ\3K\3K\3K\7K\u03b0\nK\fK\16K\u03b3")
        buf.write("\13K\3K\5K\u03b6\nK\3L\3L\3L\7L\u03bb\nL\fL\16L\u03be")
        buf.write("\13L\3L\5L\u03c1\nL\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u03cc")
        buf.write("\nM\fM\16M\u03cf\13M\3M\5M\u03d2\nM\5M\u03d4\nM\3M\3M")
        buf.write("\3M\3M\7M\u03da\nM\fM\16M\u03dd\13M\3M\5M\u03e0\nM\5M")
        buf.write("\u03e2\nM\5M\u03e4\nM\3N\3N\3N\3N\5N\u03ea\nN\3N\5N\u03ed")
        buf.write("\nN\3N\3N\3N\3O\3O\3O\7O\u03f5\nO\fO\16O\u03f8\13O\3O")
        buf.write("\3O\5O\u03fc\nO\3O\3O\3O\3O\7O\u0402\nO\fO\16O\u0405\13")
        buf.write("O\3O\3O\3O\5O\u040a\nO\3O\3O\5O\u040e\nO\3P\3P\5P\u0412")
        buf.write("\nP\3P\3P\3P\3P\5P\u0418\nP\3Q\3Q\5Q\u041c\nQ\3R\3R\3")
        buf.write("R\3R\3R\5R\u0423\nR\3S\3S\3S\5S\u0428\nS\3T\3T\5T\u042c")
        buf.write("\nT\3U\3U\3U\5U\u0431\nU\3V\3V\3W\3W\3W\5W\u0438\nW\3")
        buf.write("X\3X\3X\2\3\u0086Y\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\2\6\3\2P\\")
        buf.write("\3\2./\3\2&\'\3\2(+\2\u04ae\2\u00b5\3\2\2\2\4\u00bb\3")
        buf.write("\2\2\2\6\u00c0\3\2\2\2\b\u00c9\3\2\2\2\n\u00d5\3\2\2\2")
        buf.write("\f\u00d9\3\2\2\2\16\u00de\3\2\2\2\20\u00e8\3\2\2\2\22")
        buf.write("\u012f\3\2\2\2\24\u0131\3\2\2\2\26\u0177\3\2\2\2\30\u0179")
        buf.write("\3\2\2\2\32\u017d\3\2\2\2\34\u017f\3\2\2\2\36\u0195\3")
        buf.write("\2\2\2 \u0197\3\2\2\2\"\u01a5\3\2\2\2$\u01ac\3\2\2\2&")
        buf.write("\u01bb\3\2\2\2(\u01bd\3\2\2\2*\u01c0\3\2\2\2,\u01c7\3")
        buf.write("\2\2\2.\u01c9\3\2\2\2\60\u01cb\3\2\2\2\62\u01cd\3\2\2")
        buf.write("\2\64\u01d1\3\2\2\2\66\u01d3\3\2\2\28\u01dd\3\2\2\2:\u01df")
        buf.write("\3\2\2\2<\u01e2\3\2\2\2>\u01fa\3\2\2\2@\u01ff\3\2\2\2")
        buf.write("B\u0204\3\2\2\2D\u020f\3\2\2\2F\u0217\3\2\2\2H\u021f\3")
        buf.write("\2\2\2J\u0228\3\2\2\2L\u0231\3\2\2\2N\u023f\3\2\2\2P\u0241")
        buf.write("\3\2\2\2R\u0252\3\2\2\2T\u0256\3\2\2\2V\u025d\3\2\2\2")
        buf.write("X\u0266\3\2\2\2Z\u027e\3\2\2\2\\\u028a\3\2\2\2^\u028f")
        buf.write("\3\2\2\2`\u02a1\3\2\2\2b\u02ac\3\2\2\2d\u02b0\3\2\2\2")
        buf.write("f\u02b2\3\2\2\2h\u02b9\3\2\2\2j\u02c0\3\2\2\2l\u02c8\3")
        buf.write("\2\2\2n\u02d3\3\2\2\2p\u02d5\3\2\2\2r\u02eb\3\2\2\2t\u02ee")
        buf.write("\3\2\2\2v\u02f2\3\2\2\2x\u02fa\3\2\2\2z\u0302\3\2\2\2")
        buf.write("|\u030a\3\2\2\2~\u0314\3\2\2\2\u0080\u031e\3\2\2\2\u0082")
        buf.write("\u0335\3\2\2\2\u0084\u0343\3\2\2\2\u0086\u0345\3\2\2\2")
        buf.write("\u0088\u0373\3\2\2\2\u008a\u0375\3\2\2\2\u008c\u038e\3")
        buf.write("\2\2\2\u008e\u0390\3\2\2\2\u0090\u03a6\3\2\2\2\u0092\u03a8")
        buf.write("\3\2\2\2\u0094\u03ac\3\2\2\2\u0096\u03b7\3\2\2\2\u0098")
        buf.write("\u03e3\3\2\2\2\u009a\u03e5\3\2\2\2\u009c\u03f6\3\2\2\2")
        buf.write("\u009e\u0417\3\2\2\2\u00a0\u041b\3\2\2\2\u00a2\u041d\3")
        buf.write("\2\2\2\u00a4\u0424\3\2\2\2\u00a6\u0429\3\2\2\2\u00a8\u0430")
        buf.write("\3\2\2\2\u00aa\u0432\3\2\2\2\u00ac\u0437\3\2\2\2\u00ae")
        buf.write("\u0439\3\2\2\2\u00b0\u00b6\7$\2\2\u00b1\u00b6\5\34\17")
        buf.write("\2\u00b2\u00b3\5N(\2\u00b3\u00b4\7$\2\2\u00b4\u00b6\3")
        buf.write("\2\2\2\u00b5\u00b0\3\2\2\2\u00b5\u00b1\3\2\2\2\u00b5\u00b2")
        buf.write("\3\2\2\2\u00b6\3\3\2\2\2\u00b7\u00ba\7$\2\2\u00b8\u00ba")
        buf.write("\5\32\16\2\u00b9\u00b7\3\2\2\2\u00b9\u00b8\3\2\2\2\u00ba")
        buf.write("\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2")
        buf.write("\u00bc\u00be\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be\u00bf\7")
        buf.write("\2\2\3\u00bf\5\3\2\2\2\u00c0\u00c4\5\u0096L\2\u00c1\u00c3")
        buf.write("\7$\2\2\u00c2\u00c1\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4")
        buf.write("\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c7\3\2\2\2")
        buf.write("\u00c6\u00c4\3\2\2\2\u00c7\u00c8\7\2\2\3\u00c8\7\3\2\2")
        buf.write("\2\u00c9\u00ca\7N\2\2\u00ca\u00d0\5F$\2\u00cb\u00cd\7")
        buf.write("\61\2\2\u00cc\u00ce\5\u009cO\2\u00cd\u00cc\3\2\2\2\u00cd")
        buf.write("\u00ce\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d1\7\62\2")
        buf.write("\2\u00d0\u00cb\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2")
        buf.write("\3\2\2\2\u00d2\u00d3\7$\2\2\u00d3\t\3\2\2\2\u00d4\u00d6")
        buf.write("\5\b\5\2\u00d5\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7")
        buf.write("\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\13\3\2\2\2\u00d9")
        buf.write("\u00dc\5\n\6\2\u00da\u00dd\5\u009aN\2\u00db\u00dd\5\16")
        buf.write("\b\2\u00dc\u00da\3\2\2\2\u00dc\u00db\3\2\2\2\u00dd\r\3")
        buf.write("\2\2\2\u00de\u00df\7\3\2\2\u00df\u00e0\7%\2\2\u00e0\u00e3")
        buf.write("\5\20\t\2\u00e1\u00e2\7O\2\2\u00e2\u00e4\5b\62\2\u00e3")
        buf.write("\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5\u00e6\7\64\2\2\u00e6\u00e7\5`\61\2\u00e7\17\3\2")
        buf.write("\2\2\u00e8\u00ea\7\61\2\2\u00e9\u00eb\5\22\n\2\u00ea\u00e9")
        buf.write("\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u00ed\7\62\2\2\u00ed\21\3\2\2\2\u00ee\u00f1\5\24\13\2")
        buf.write("\u00ef\u00f0\7\67\2\2\u00f0\u00f2\5b\62\2\u00f1\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00fb\3\2\2\2\u00f3")
        buf.write("\u00f4\7\63\2\2\u00f4\u00f7\5\24\13\2\u00f5\u00f6\7\67")
        buf.write("\2\2\u00f6\u00f8\5b\62\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8")
        buf.write("\3\2\2\2\u00f8\u00fa\3\2\2\2\u00f9\u00f3\3\2\2\2\u00fa")
        buf.write("\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2")
        buf.write("\u00fc\u0117\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u0115\7")
        buf.write("\63\2\2\u00ff\u0101\7\60\2\2\u0100\u0102\5\24\13\2\u0101")
        buf.write("\u0100\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u010b\3\2\2\2")
        buf.write("\u0103\u0104\7\63\2\2\u0104\u0107\5\24\13\2\u0105\u0106")
        buf.write("\7\67\2\2\u0106\u0108\5b\62\2\u0107\u0105\3\2\2\2\u0107")
        buf.write("\u0108\3\2\2\2\u0108\u010a\3\2\2\2\u0109\u0103\3\2\2\2")
        buf.write("\u010a\u010d\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3")
        buf.write("\2\2\2\u010c\u0111\3\2\2\2\u010d\u010b\3\2\2\2\u010e\u010f")
        buf.write("\7\63\2\2\u010f\u0110\7\66\2\2\u0110\u0112\5\24\13\2\u0111")
        buf.write("\u010e\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0116\3\2\2\2")
        buf.write("\u0113\u0114\7\66\2\2\u0114\u0116\5\24\13\2\u0115\u00ff")
        buf.write("\3\2\2\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116")
        buf.write("\u0118\3\2\2\2\u0117\u00fe\3\2\2\2\u0117\u0118\3\2\2\2")
        buf.write("\u0118\u0130\3\2\2\2\u0119\u011b\7\60\2\2\u011a\u011c")
        buf.write("\5\24\13\2\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c")
        buf.write("\u0125\3\2\2\2\u011d\u011e\7\63\2\2\u011e\u0121\5\24\13")
        buf.write("\2\u011f\u0120\7\67\2\2\u0120\u0122\5b\62\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123")
        buf.write("\u011d\3\2\2\2\u0124\u0127\3\2\2\2\u0125\u0123\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u012b\3\2\2\2\u0127\u0125\3")
        buf.write("\2\2\2\u0128\u0129\7\63\2\2\u0129\u012a\7\66\2\2\u012a")
        buf.write("\u012c\5\24\13\2\u012b\u0128\3\2\2\2\u012b\u012c\3\2\2")
        buf.write("\2\u012c\u0130\3\2\2\2\u012d\u012e\7\66\2\2\u012e\u0130")
        buf.write("\5\24\13\2\u012f\u00ee\3\2\2\2\u012f\u0119\3\2\2\2\u012f")
        buf.write("\u012d\3\2\2\2\u0130\23\3\2\2\2\u0131\u0134\7%\2\2\u0132")
        buf.write("\u0133\7\64\2\2\u0133\u0135\5b\62\2\u0134\u0132\3\2\2")
        buf.write("\2\u0134\u0135\3\2\2\2\u0135\25\3\2\2\2\u0136\u0139\5")
        buf.write("\30\r\2\u0137\u0138\7\67\2\2\u0138\u013a\5b\62\2\u0139")
        buf.write("\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0143\3\2\2\2")
        buf.write("\u013b\u013c\7\63\2\2\u013c\u013f\5\30\r\2\u013d\u013e")
        buf.write("\7\67\2\2\u013e\u0140\5b\62\2\u013f\u013d\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u013b\3\2\2\2")
        buf.write("\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3")
        buf.write("\2\2\2\u0144\u015f\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u015d")
        buf.write("\7\63\2\2\u0147\u0149\7\60\2\2\u0148\u014a\5\30\r\2\u0149")
        buf.write("\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0153\3\2\2\2")
        buf.write("\u014b\u014c\7\63\2\2\u014c\u014f\5\30\r\2\u014d\u014e")
        buf.write("\7\67\2\2\u014e\u0150\5b\62\2\u014f\u014d\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u014b\3\2\2\2")
        buf.write("\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3")
        buf.write("\2\2\2\u0154\u0159\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u0157")
        buf.write("\7\63\2\2\u0157\u0158\7\66\2\2\u0158\u015a\5\30\r\2\u0159")
        buf.write("\u0156\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015e\3\2\2\2")
        buf.write("\u015b\u015c\7\66\2\2\u015c\u015e\5\30\r\2\u015d\u0147")
        buf.write("\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0160\3\2\2\2\u015f\u0146\3\2\2\2\u015f\u0160\3\2\2\2")
        buf.write("\u0160\u0178\3\2\2\2\u0161\u0163\7\60\2\2\u0162\u0164")
        buf.write("\5\30\r\2\u0163\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u016d\3\2\2\2\u0165\u0166\7\63\2\2\u0166\u0169\5\30\r")
        buf.write("\2\u0167\u0168\7\67\2\2\u0168\u016a\5b\62\2\u0169\u0167")
        buf.write("\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3\2\2\2\u016b")
        buf.write("\u0165\3\2\2\2\u016c\u016f\3\2\2\2\u016d\u016b\3\2\2\2")
        buf.write("\u016d\u016e\3\2\2\2\u016e\u0173\3\2\2\2\u016f\u016d\3")
        buf.write("\2\2\2\u0170\u0171\7\63\2\2\u0171\u0172\7\66\2\2\u0172")
        buf.write("\u0174\5\30\r\2\u0173\u0170\3\2\2\2\u0173\u0174\3\2\2")
        buf.write("\2\u0174\u0178\3\2\2\2\u0175\u0176\7\66\2\2\u0176\u0178")
        buf.write("\5\30\r\2\u0177\u0136\3\2\2\2\u0177\u0161\3\2\2\2\u0177")
        buf.write("\u0175\3\2\2\2\u0178\27\3\2\2\2\u0179\u017a\7%\2\2\u017a")
        buf.write("\31\3\2\2\2\u017b\u017e\5\34\17\2\u017c\u017e\5N(\2\u017d")
        buf.write("\u017b\3\2\2\2\u017d\u017c\3\2\2\2\u017e\33\3\2\2\2\u017f")
        buf.write("\u0184\5\36\20\2\u0180\u0181\7\65\2\2\u0181\u0183\5\36")
        buf.write("\20\2\u0182\u0180\3\2\2\2\u0183\u0186\3\2\2\2\u0184\u0182")
        buf.write("\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0188\3\2\2\2\u0186")
        buf.write("\u0184\3\2\2\2\u0187\u0189\7\65\2\2\u0188\u0187\3\2\2")
        buf.write("\2\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b")
        buf.write("\7$\2\2\u018b\35\3\2\2\2\u018c\u0196\5 \21\2\u018d\u0196")
        buf.write("\5(\25\2\u018e\u0196\5*\26\2\u018f\u0196\5,\27\2\u0190")
        buf.write("\u0196\58\35\2\u0191\u0196\5H%\2\u0192\u0196\5J&\2\u0193")
        buf.write("\u0196\5L\'\2\u0194\u0196\3\2\2\2\u0195\u018c\3\2\2\2")
        buf.write("\u0195\u018d\3\2\2\2\u0195\u018e\3\2\2\2\u0195\u018f\3")
        buf.write("\2\2\2\u0195\u0190\3\2\2\2\u0195\u0191\3\2\2\2\u0195\u0192")
        buf.write("\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0194\3\2\2\2\u0196")
        buf.write("\37\3\2\2\2\u0197\u01a3\5$\23\2\u0198\u019b\5&\24\2\u0199")
        buf.write("\u019c\5\u00a6T\2\u019a\u019c\5\u0096L\2\u019b\u0199\3")
        buf.write("\2\2\2\u019b\u019a\3\2\2\2\u019c\u01a4\3\2\2\2\u019d\u019f")
        buf.write("\5\"\22\2\u019e\u019d\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0")
        buf.write("\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a4\3\2\2\2")
        buf.write("\u01a2\u01a0\3\2\2\2\u01a3\u0198\3\2\2\2\u01a3\u01a0\3")
        buf.write("\2\2\2\u01a4!\3\2\2\2\u01a5\u01a8\7\67\2\2\u01a6\u01a9")
        buf.write("\5\u00a6T\2\u01a7\u01a9\5$\23\2\u01a8\u01a6\3\2\2\2\u01a8")
        buf.write("\u01a7\3\2\2\2\u01a9#\3\2\2\2\u01aa\u01ad\5b\62\2\u01ab")
        buf.write("\u01ad\5t;\2\u01ac\u01aa\3\2\2\2\u01ac\u01ab\3\2\2\2\u01ad")
        buf.write("\u01b5\3\2\2\2\u01ae\u01b1\7\63\2\2\u01af\u01b2\5b\62")
        buf.write("\2\u01b0\u01b2\5t;\2\u01b1\u01af\3\2\2\2\u01b1\u01b0\3")
        buf.write("\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01ae\3\2\2\2\u01b4\u01b7")
        buf.write("\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01ba\7\63\2")
        buf.write("\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba%\3\2")
        buf.write("\2\2\u01bb\u01bc\t\2\2\2\u01bc\'\3\2\2\2\u01bd\u01be\7")
        buf.write(" \2\2\u01be\u01bf\5\u0094K\2\u01bf)\3\2\2\2\u01c0\u01c1")
        buf.write("\7!\2\2\u01c1+\3\2\2\2\u01c2\u01c8\5.\30\2\u01c3\u01c8")
        buf.write("\5\60\31\2\u01c4\u01c8\5\62\32\2\u01c5\u01c8\5\66\34\2")
        buf.write("\u01c6\u01c8\5\64\33\2\u01c7\u01c2\3\2\2\2\u01c7\u01c3")
        buf.write("\3\2\2\2\u01c7\u01c4\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7")
        buf.write("\u01c6\3\2\2\2\u01c8-\3\2\2\2\u01c9\u01ca\7#\2\2\u01ca")
        buf.write("/\3\2\2\2\u01cb\u01cc\7\"\2\2\u01cc\61\3\2\2\2\u01cd\u01cf")
        buf.write("\7\4\2\2\u01ce\u01d0\5\u0096L\2\u01cf\u01ce\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d0\63\3\2\2\2\u01d1\u01d2\5\u00a6T\2")
        buf.write("\u01d2\65\3\2\2\2\u01d3\u01d9\7\5\2\2\u01d4\u01d7\5b\62")
        buf.write("\2\u01d5\u01d6\7\6\2\2\u01d6\u01d8\5b\62\2\u01d7\u01d5")
        buf.write("\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2\u01d9")
        buf.write("\u01d4\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\67\3\2\2\2\u01db")
        buf.write("\u01de\5:\36\2\u01dc\u01de\5<\37\2\u01dd\u01db\3\2\2\2")
        buf.write("\u01dd\u01dc\3\2\2\2\u01de9\3\2\2\2\u01df\u01e0\7\7\2")
        buf.write("\2\u01e0\u01e1\5D#\2\u01e1;\3\2\2\2\u01e2\u01ef\7\6\2")
        buf.write("\2\u01e3\u01e5\t\3\2\2\u01e4\u01e3\3\2\2\2\u01e5\u01e8")
        buf.write("\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01e9\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e9\u01f0\5F$\2\u01ea")
        buf.write("\u01ec\t\3\2\2\u01eb\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2")
        buf.write("\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3")
        buf.write("\2\2\2\u01ef\u01e6\3\2\2\2\u01ef\u01eb\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f8\7\7\2\2\u01f2\u01f9\7\60\2\2\u01f3")
        buf.write("\u01f4\7\61\2\2\u01f4\u01f5\5B\"\2\u01f5\u01f6\7\62\2")
        buf.write("\2\u01f6\u01f9\3\2\2\2\u01f7\u01f9\5B\"\2\u01f8\u01f2")
        buf.write("\3\2\2\2\u01f8\u01f3\3\2\2\2\u01f8\u01f7\3\2\2\2\u01f9")
        buf.write("=\3\2\2\2\u01fa\u01fd\7%\2\2\u01fb\u01fc\7\b\2\2\u01fc")
        buf.write("\u01fe\7%\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2")
        buf.write("\u01fe?\3\2\2\2\u01ff\u0202\5F$\2\u0200\u0201\7\b\2\2")
        buf.write("\u0201\u0203\7%\2\2\u0202\u0200\3\2\2\2\u0202\u0203\3")
        buf.write("\2\2\2\u0203A\3\2\2\2\u0204\u0209\5> \2\u0205\u0206\7")
        buf.write("\63\2\2\u0206\u0208\5> \2\u0207\u0205\3\2\2\2\u0208\u020b")
        buf.write("\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a")
        buf.write("\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u020e\7\63\2")
        buf.write("\2\u020d\u020c\3\2\2\2\u020d\u020e\3\2\2\2\u020eC\3\2")
        buf.write("\2\2\u020f\u0214\5@!\2\u0210\u0211\7\63\2\2\u0211\u0213")
        buf.write("\5@!\2\u0212\u0210\3\2\2\2\u0213\u0216\3\2\2\2\u0214\u0212")
        buf.write("\3\2\2\2\u0214\u0215\3\2\2\2\u0215E\3\2\2\2\u0216\u0214")
        buf.write("\3\2\2\2\u0217\u021c\7%\2\2\u0218\u0219\7.\2\2\u0219\u021b")
        buf.write("\7%\2\2\u021a\u0218\3\2\2\2\u021b\u021e\3\2\2\2\u021c")
        buf.write("\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021dG\3\2\2\2\u021e")
        buf.write("\u021c\3\2\2\2\u021f\u0220\7\t\2\2\u0220\u0225\7%\2\2")
        buf.write("\u0221\u0222\7\63\2\2\u0222\u0224\7%\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0224\u0227\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226")
        buf.write("\3\2\2\2\u0226I\3\2\2\2\u0227\u0225\3\2\2\2\u0228\u0229")
        buf.write("\7\n\2\2\u0229\u022e\7%\2\2\u022a\u022b\7\63\2\2\u022b")
        buf.write("\u022d\7%\2\2\u022c\u022a\3\2\2\2\u022d\u0230\3\2\2\2")
        buf.write("\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022fK\3\2\2")
        buf.write("\2\u0230\u022e\3\2\2\2\u0231\u0232\7\13\2\2\u0232\u0235")
        buf.write("\5b\62\2\u0233\u0234\7\63\2\2\u0234\u0236\5b\62\2\u0235")
        buf.write("\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236M\3\2\2\2\u0237")
        buf.write("\u0240\5P)\2\u0238\u0240\5T+\2\u0239\u0240\5V,\2\u023a")
        buf.write("\u0240\5X-\2\u023b\u0240\5Z.\2\u023c\u0240\5\16\b\2\u023d")
        buf.write("\u0240\5\u009aN\2\u023e\u0240\5\f\7\2\u023f\u0237\3\2")
        buf.write("\2\2\u023f\u0238\3\2\2\2\u023f\u0239\3\2\2\2\u023f\u023a")
        buf.write("\3\2\2\2\u023f\u023b\3\2\2\2\u023f\u023c\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u023e\3\2\2\2\u0240O\3\2\2\2\u0241")
        buf.write("\u0242\7\f\2\2\u0242\u0243\5b\62\2\u0243\u0244\7\64\2")
        buf.write("\2\u0244\u024c\5`\61\2\u0245\u0246\7\r\2\2\u0246\u0247")
        buf.write("\5b\62\2\u0247\u0248\7\64\2\2\u0248\u0249\5`\61\2\u0249")
        buf.write("\u024b\3\2\2\2\u024a\u0245\3\2\2\2\u024b\u024e\3\2\2\2")
        buf.write("\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u0250\3")
        buf.write("\2\2\2\u024e\u024c\3\2\2\2\u024f\u0251\5R*\2\u0250\u024f")
        buf.write("\3\2\2\2\u0250\u0251\3\2\2\2\u0251Q\3\2\2\2\u0252\u0253")
        buf.write("\7\16\2\2\u0253\u0254\7\64\2\2\u0254\u0255\5`\61\2\u0255")
        buf.write("S\3\2\2\2\u0256\u0257\7\17\2\2\u0257\u0258\5b\62\2\u0258")
        buf.write("\u0259\7\64\2\2\u0259\u025b\5`\61\2\u025a\u025c\5R*\2")
        buf.write("\u025b\u025a\3\2\2\2\u025b\u025c\3\2\2\2\u025cU\3\2\2")
        buf.write("\2\u025d\u025e\7\20\2\2\u025e\u025f\5\u0094K\2\u025f\u0260")
        buf.write("\7\21\2\2\u0260\u0261\5\u0096L\2\u0261\u0262\7\64\2\2")
        buf.write("\u0262\u0264\5`\61\2\u0263\u0265\5R*\2\u0264\u0263\3\2")
        buf.write("\2\2\u0264\u0265\3\2\2\2\u0265W\3\2\2\2\u0266\u0267\7")
        buf.write("\22\2\2\u0267\u0268\7\64\2\2\u0268\u027c\5`\61\2\u0269")
        buf.write("\u026a\5^\60\2\u026a\u026b\7\64\2\2\u026b\u026c\5`\61")
        buf.write("\2\u026c\u026e\3\2\2\2\u026d\u0269\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u026d\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write("\u0272\3\2\2\2\u0271\u0273\5R*\2\u0272\u0271\3\2\2\2\u0272")
        buf.write("\u0273\3\2\2\2\u0273\u0277\3\2\2\2\u0274\u0275\7\23\2")
        buf.write("\2\u0275\u0276\7\64\2\2\u0276\u0278\5`\61\2\u0277\u0274")
        buf.write("\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027d\3\2\2\2\u0279")
        buf.write("\u027a\7\23\2\2\u027a\u027b\7\64\2\2\u027b\u027d\5`\61")
        buf.write("\2\u027c\u026d\3\2\2\2\u027c\u0279\3\2\2\2\u027dY\3\2")
        buf.write("\2\2\u027e\u027f\7\24\2\2\u027f\u0284\5\\/\2\u0280\u0281")
        buf.write("\7\63\2\2\u0281\u0283\5\\/\2\u0282\u0280\3\2\2\2\u0283")
        buf.write("\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0287\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288\7")
        buf.write("\64\2\2\u0288\u0289\5`\61\2\u0289[\3\2\2\2\u028a\u028d")
        buf.write("\5b\62\2\u028b\u028c\7\b\2\2\u028c\u028e\5v<\2\u028d\u028b")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e]\3\2\2\2\u028f\u0295")
        buf.write("\7\25\2\2\u0290\u0293\5b\62\2\u0291\u0292\7\b\2\2\u0292")
        buf.write("\u0294\7%\2\2\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2")
        buf.write("\u0294\u0296\3\2\2\2\u0295\u0290\3\2\2\2\u0295\u0296\3")
        buf.write("\2\2\2\u0296_\3\2\2\2\u0297\u02a2\5\34\17\2\u0298\u0299")
        buf.write("\7$\2\2\u0299\u029b\7_\2\2\u029a\u029c\5\32\16\2\u029b")
        buf.write("\u029a\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029b\3\2\2\2")
        buf.write("\u029d\u029e\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7")
        buf.write("`\2\2\u02a0\u02a2\3\2\2\2\u02a1\u0297\3\2\2\2\u02a1\u0298")
        buf.write("\3\2\2\2\u02a2a\3\2\2\2\u02a3\u02a9\5j\66\2\u02a4\u02a5")
        buf.write("\7\f\2\2\u02a5\u02a6\5j\66\2\u02a6\u02a7\7\16\2\2\u02a7")
        buf.write("\u02a8\5b\62\2\u02a8\u02aa\3\2\2\2\u02a9\u02a4\3\2\2\2")
        buf.write("\u02a9\u02aa\3\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02ad\5")
        buf.write("f\64\2\u02ac\u02a3\3\2\2\2\u02ac\u02ab\3\2\2\2\u02adc")
        buf.write("\3\2\2\2\u02ae\u02b1\5j\66\2\u02af\u02b1\5h\65\2\u02b0")
        buf.write("\u02ae\3\2\2\2\u02b0\u02af\3\2\2\2\u02b1e\3\2\2\2\u02b2")
        buf.write("\u02b4\7\26\2\2\u02b3\u02b5\5\26\f\2\u02b4\u02b3\3\2\2")
        buf.write("\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7")
        buf.write("\7\64\2\2\u02b7\u02b8\5b\62\2\u02b8g\3\2\2\2\u02b9\u02bb")
        buf.write("\7\26\2\2\u02ba\u02bc\5\26\f\2\u02bb\u02ba\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\7\64\2")
        buf.write("\2\u02be\u02bf\5d\63\2\u02bfi\3\2\2\2\u02c0\u02c5\5l\67")
        buf.write("\2\u02c1\u02c2\7\27\2\2\u02c2\u02c4\5l\67\2\u02c3\u02c1")
        buf.write("\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6k\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8")
        buf.write("\u02cd\5n8\2\u02c9\u02ca\7\30\2\2\u02ca\u02cc\5n8\2\u02cb")
        buf.write("\u02c9\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2")
        buf.write("\u02cd\u02ce\3\2\2\2\u02cem\3\2\2\2\u02cf\u02cd\3\2\2")
        buf.write("\2\u02d0\u02d1\7\31\2\2\u02d1\u02d4\5n8\2\u02d2\u02d4")
        buf.write("\5p9\2\u02d3\u02d0\3\2\2\2\u02d3\u02d2\3\2\2\2\u02d4o")
        buf.write("\3\2\2\2\u02d5\u02db\5t;\2\u02d6\u02d7\5r:\2\u02d7\u02d8")
        buf.write("\5t;\2\u02d8\u02da\3\2\2\2\u02d9\u02d6\3\2\2\2\u02da\u02dd")
        buf.write("\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write("q\3\2\2\2\u02dd\u02db\3\2\2\2\u02de\u02ec\7G\2\2\u02df")
        buf.write("\u02ec\7H\2\2\u02e0\u02ec\7I\2\2\u02e1\u02ec\7J\2\2\u02e2")
        buf.write("\u02ec\7K\2\2\u02e3\u02ec\7L\2\2\u02e4\u02ec\7M\2\2\u02e5")
        buf.write("\u02ec\7\21\2\2\u02e6\u02e7\7\31\2\2\u02e7\u02ec\7\21")
        buf.write("\2\2\u02e8\u02ec\7\32\2\2\u02e9\u02ea\7\32\2\2\u02ea\u02ec")
        buf.write("\7\31\2\2\u02eb\u02de\3\2\2\2\u02eb\u02df\3\2\2\2\u02eb")
        buf.write("\u02e0\3\2\2\2\u02eb\u02e1\3\2\2\2\u02eb\u02e2\3\2\2\2")
        buf.write("\u02eb\u02e3\3\2\2\2\u02eb\u02e4\3\2\2\2\u02eb\u02e5\3")
        buf.write("\2\2\2\u02eb\u02e6\3\2\2\2\u02eb\u02e8\3\2\2\2\u02eb\u02e9")
        buf.write("\3\2\2\2\u02ecs\3\2\2\2\u02ed\u02ef\7\60\2\2\u02ee\u02ed")
        buf.write("\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0")
        buf.write("\u02f1\5v<\2\u02f1u\3\2\2\2\u02f2\u02f7\5x=\2\u02f3\u02f4")
        buf.write("\7:\2\2\u02f4\u02f6\5x=\2\u02f5\u02f3\3\2\2\2\u02f6\u02f9")
        buf.write("\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8")
        buf.write("w\3\2\2\2\u02f9\u02f7\3\2\2\2\u02fa\u02ff\5z>\2\u02fb")
        buf.write("\u02fc\7;\2\2\u02fc\u02fe\5z>\2\u02fd\u02fb\3\2\2\2\u02fe")
        buf.write("\u0301\3\2\2\2\u02ff\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2")
        buf.write("\u0300y\3\2\2\2\u0301\u02ff\3\2\2\2\u0302\u0307\5|?\2")
        buf.write("\u0303\u0304\7<\2\2\u0304\u0306\5|?\2\u0305\u0303\3\2")
        buf.write("\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308")
        buf.write("\3\2\2\2\u0308{\3\2\2\2\u0309\u0307\3\2\2\2\u030a\u0311")
        buf.write("\5~@\2\u030b\u030c\7=\2\2\u030c\u0310\5~@\2\u030d\u030e")
        buf.write("\7>\2\2\u030e\u0310\5~@\2\u030f\u030b\3\2\2\2\u030f\u030d")
        buf.write("\3\2\2\2\u0310\u0313\3\2\2\2\u0311\u030f\3\2\2\2\u0311")
        buf.write("\u0312\3\2\2\2\u0312}\3\2\2\2\u0313\u0311\3\2\2\2\u0314")
        buf.write("\u031b\5\u0080A\2\u0315\u0316\7?\2\2\u0316\u031a\5\u0080")
        buf.write("A\2\u0317\u0318\7@\2\2\u0318\u031a\5\u0080A\2\u0319\u0315")
        buf.write("\3\2\2\2\u0319\u0317\3\2\2\2\u031a\u031d\3\2\2\2\u031b")
        buf.write("\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c\177\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031e\u032b\5\u0082B\2\u031f\u0320\7\60")
        buf.write("\2\2\u0320\u032a\5\u0082B\2\u0321\u0322\7A\2\2\u0322\u032a")
        buf.write("\5\u0082B\2\u0323\u0324\7B\2\2\u0324\u032a\5\u0082B\2")
        buf.write("\u0325\u0326\7C\2\2\u0326\u032a\5\u0082B\2\u0327\u0328")
        buf.write("\7N\2\2\u0328\u032a\5\u0082B\2\u0329\u031f\3\2\2\2\u0329")
        buf.write("\u0321\3\2\2\2\u0329\u0323\3\2\2\2\u0329\u0325\3\2\2\2")
        buf.write("\u0329\u0327\3\2\2\2\u032a\u032d\3\2\2\2\u032b\u0329\3")
        buf.write("\2\2\2\u032b\u032c\3\2\2\2\u032c\u0081\3\2\2\2\u032d\u032b")
        buf.write("\3\2\2\2\u032e\u032f\7?\2\2\u032f\u0336\5\u0082B\2\u0330")
        buf.write("\u0331\7@\2\2\u0331\u0336\5\u0082B\2\u0332\u0333\7D\2")
        buf.write("\2\u0333\u0336\5\u0082B\2\u0334\u0336\5\u0084C\2\u0335")
        buf.write("\u032e\3\2\2\2\u0335\u0330\3\2\2\2\u0335\u0332\3\2\2\2")
        buf.write("\u0335\u0334\3\2\2\2\u0336\u0083\3\2\2\2\u0337\u0344\5")
        buf.write("\u0086D\2\u0338\u033c\5\u0088E\2\u0339\u033b\5\u008cG")
        buf.write("\2\u033a\u0339\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a")
        buf.write("\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0341\3\2\2\2\u033e")
        buf.write("\u033c\3\2\2\2\u033f\u0340\7\66\2\2\u0340\u0342\5\u0082")
        buf.write("B\2\u0341\u033f\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0344")
        buf.write("\3\2\2\2\u0343\u0337\3\2\2\2\u0343\u0338\3\2\2\2\u0344")
        buf.write("\u0085\3\2\2\2\u0345\u0346\bD\1\2\u0346\u0347\7%\2\2\u0347")
        buf.write("\u0349\7\61\2\2\u0348\u034a\5\u009cO\2\u0349\u0348\3\2")
        buf.write("\2\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c")
        buf.write("\7\62\2\2\u034c\u0355\3\2\2\2\u034d\u034e\f\3\2\2\u034e")
        buf.write("\u0350\7\61\2\2\u034f\u0351\5\u009cO\2\u0350\u034f\3\2")
        buf.write("\2\2\u0350\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354")
        buf.write("\7\62\2\2\u0353\u034d\3\2\2\2\u0354\u0357\3\2\2\2\u0355")
        buf.write("\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0087\3\2\2\2")
        buf.write("\u0357\u0355\3\2\2\2\u0358\u035b\7\61\2\2\u0359\u035c")
        buf.write("\5\u00a6T\2\u035a\u035c\5\u008aF\2\u035b\u0359\3\2\2\2")
        buf.write("\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d\3")
        buf.write("\2\2\2\u035d\u0374\7\62\2\2\u035e\u0360\78\2\2\u035f\u0361")
        buf.write("\5\u008aF\2\u0360\u035f\3\2\2\2\u0360\u0361\3\2\2\2\u0361")
        buf.write("\u0362\3\2\2\2\u0362\u0374\79\2\2\u0363\u0365\7E\2\2\u0364")
        buf.write("\u0366\5\u0098M\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2")
        buf.write("\2\2\u0366\u0367\3\2\2\2\u0367\u0374\7F\2\2\u0368\u0374")
        buf.write("\7%\2\2\u0369\u0374\5\u00acW\2\u036a\u036c\5\u00aaV\2")
        buf.write("\u036b\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036b\3")
        buf.write("\2\2\2\u036d\u036e\3\2\2\2\u036e\u0374\3\2\2\2\u036f\u0374")
        buf.write("\7/\2\2\u0370\u0374\7\33\2\2\u0371\u0374\7\34\2\2\u0372")
        buf.write("\u0374\7\35\2\2\u0373\u0358\3\2\2\2\u0373\u035e\3\2\2")
        buf.write("\2\u0373\u0363\3\2\2\2\u0373\u0368\3\2\2\2\u0373\u0369")
        buf.write("\3\2\2\2\u0373\u036b\3\2\2\2\u0373\u036f\3\2\2\2\u0373")
        buf.write("\u0370\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0372\3\2\2\2")
        buf.write("\u0374\u0089\3\2\2\2\u0375\u0381\5b\62\2\u0376\u0382\5")
        buf.write("\u00a2R\2\u0377\u0378\7\63\2\2\u0378\u037a\5b\62\2\u0379")
        buf.write("\u0377\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037b\u037c\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3")
        buf.write("\2\2\2\u037e\u0380\7\63\2\2\u037f\u037e\3\2\2\2\u037f")
        buf.write("\u0380\3\2\2\2\u0380\u0382\3\2\2\2\u0381\u0376\3\2\2\2")
        buf.write("\u0381\u037b\3\2\2\2\u0382\u008b\3\2\2\2\u0383\u0385\7")
        buf.write("\61\2\2\u0384\u0386\5\u009cO\2\u0385\u0384\3\2\2\2\u0385")
        buf.write("\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u038f\7\62\2")
        buf.write("\2\u0388\u0389\78\2\2\u0389\u038a\5\u008eH\2\u038a\u038b")
        buf.write("\79\2\2\u038b\u038f\3\2\2\2\u038c\u038d\7.\2\2\u038d\u038f")
        buf.write("\7%\2\2\u038e\u0383\3\2\2\2\u038e\u0388\3\2\2\2\u038e")
        buf.write("\u038c\3\2\2\2\u038f\u008d\3\2\2\2\u0390\u0395\5\u0090")
        buf.write("I\2\u0391\u0392\7\63\2\2\u0392\u0394\5\u0090I\2\u0393")
        buf.write("\u0391\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2")
        buf.write("\u0395\u0396\3\2\2\2\u0396\u0399\3\2\2\2\u0397\u0395\3")
        buf.write("\2\2\2\u0398\u039a\7\63\2\2\u0399\u0398\3\2\2\2\u0399")
        buf.write("\u039a\3\2\2\2\u039a\u008f\3\2\2\2\u039b\u03a7\5b\62\2")
        buf.write("\u039c\u039e\5b\62\2\u039d\u039c\3\2\2\2\u039d\u039e\3")
        buf.write("\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\7\64\2\2\u03a0")
        buf.write("\u03a2\5b\62\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2")
        buf.write("\u03a2\u03a4\3\2\2\2\u03a3\u03a5\5\u0092J\2\u03a4\u03a3")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6")
        buf.write("\u039b\3\2\2\2\u03a6\u039d\3\2\2\2\u03a7\u0091\3\2\2\2")
        buf.write("\u03a8\u03aa\7\64\2\2\u03a9\u03ab\5b\62\2\u03aa\u03a9")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u0093\3\2\2\2\u03ac")
        buf.write("\u03b1\5t;\2\u03ad\u03ae\7\63\2\2\u03ae\u03b0\5t;\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1\3")
        buf.write("\2\2\2\u03b4\u03b6\7\63\2\2\u03b5\u03b4\3\2\2\2\u03b5")
        buf.write("\u03b6\3\2\2\2\u03b6\u0095\3\2\2\2\u03b7\u03bc\5b\62\2")
        buf.write("\u03b8\u03b9\7\63\2\2\u03b9\u03bb\5b\62\2\u03ba\u03b8")
        buf.write("\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03c0\3\2\2\2\u03be\u03bc\3\2\2\2")
        buf.write("\u03bf\u03c1\7\63\2\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c1\u0097\3\2\2\2\u03c2\u03c3\5b\62\2\u03c3")
        buf.write("\u03c4\7\64\2\2\u03c4\u03d3\5b\62\2\u03c5\u03d4\5\u00a2")
        buf.write("R\2\u03c6\u03c7\7\63\2\2\u03c7\u03c8\5b\62\2\u03c8\u03c9")
        buf.write("\7\64\2\2\u03c9\u03ca\5b\62\2\u03ca\u03cc\3\2\2\2\u03cb")
        buf.write("\u03c6\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3")
        buf.write("\2\2\2\u03d0\u03d2\7\63\2\2\u03d1\u03d0\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03c5\3\2\2\2")
        buf.write("\u03d3\u03cd\3\2\2\2\u03d4\u03e4\3\2\2\2\u03d5\u03e1\5")
        buf.write("b\62\2\u03d6\u03e2\5\u00a2R\2\u03d7\u03d8\7\63\2\2\u03d8")
        buf.write("\u03da\5b\62\2\u03d9\u03d7\3\2\2\2\u03da\u03dd\3\2\2\2")
        buf.write("\u03db\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03df\3")
        buf.write("\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03e0\7\63\2\2\u03df")
        buf.write("\u03de\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e2\3\2\2\2")
        buf.write("\u03e1\u03d6\3\2\2\2\u03e1\u03db\3\2\2\2\u03e2\u03e4\3")
        buf.write("\2\2\2\u03e3\u03c2\3\2\2\2\u03e3\u03d5\3\2\2\2\u03e4\u0099")
        buf.write("\3\2\2\2\u03e5\u03e6\7\36\2\2\u03e6\u03ec\7%\2\2\u03e7")
        buf.write("\u03e9\7\61\2\2\u03e8\u03ea\5\u009cO\2\u03e9\u03e8\3\2")
        buf.write("\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed")
        buf.write("\7\62\2\2\u03ec\u03e7\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03ef\7\64\2\2\u03ef\u03f0\5`\61")
        buf.write("\2\u03f0\u009b\3\2\2\2\u03f1\u03f2\5\u009eP\2\u03f2\u03f3")
        buf.write("\7\63\2\2\u03f3\u03f5\3\2\2\2\u03f4\u03f1\3\2\2\2\u03f5")
        buf.write("\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2")
        buf.write("\u03f7\u040d\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03fb\5")
        buf.write("\u009eP\2\u03fa\u03fc\7\63\2\2\u03fb\u03fa\3\2\2\2\u03fb")
        buf.write("\u03fc\3\2\2\2\u03fc\u040e\3\2\2\2\u03fd\u03fe\7\60\2")
        buf.write("\2\u03fe\u0403\5b\62\2\u03ff\u0400\7\63\2\2\u0400\u0402")
        buf.write("\5\u009eP\2\u0401\u03ff\3\2\2\2\u0402\u0405\3\2\2\2\u0403")
        buf.write("\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0409\3\2\2\2")
        buf.write("\u0405\u0403\3\2\2\2\u0406\u0407\7\63\2\2\u0407\u0408")
        buf.write("\7\66\2\2\u0408\u040a\5b\62\2\u0409\u0406\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u040e\3\2\2\2\u040b\u040c\7\66\2")
        buf.write("\2\u040c\u040e\5b\62\2\u040d\u03f9\3\2\2\2\u040d\u03fd")
        buf.write("\3\2\2\2\u040d\u040b\3\2\2\2\u040e\u009d\3\2\2\2\u040f")
        buf.write("\u0411\5b\62\2\u0410\u0412\5\u00a2R\2\u0411\u0410\3\2")
        buf.write("\2\2\u0411\u0412\3\2\2\2\u0412\u0418\3\2\2\2\u0413\u0414")
        buf.write("\5b\62\2\u0414\u0415\7\67\2\2\u0415\u0416\5b\62\2\u0416")
        buf.write("\u0418\3\2\2\2\u0417\u040f\3\2\2\2\u0417\u0413\3\2\2\2")
        buf.write("\u0418\u009f\3\2\2\2\u0419\u041c\5\u00a2R\2\u041a\u041c")
        buf.write("\5\u00a4S\2\u041b\u0419\3\2\2\2\u041b\u041a\3\2\2\2\u041c")
        buf.write("\u00a1\3\2\2\2\u041d\u041e\7\20\2\2\u041e\u041f\5\u0094")
        buf.write("K\2\u041f\u0420\7\21\2\2\u0420\u0422\5j\66\2\u0421\u0423")
        buf.write("\5\u00a0Q\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423")
        buf.write("\u00a3\3\2\2\2\u0424\u0425\7\f\2\2\u0425\u0427\5d\63\2")
        buf.write("\u0426\u0428\5\u00a0Q\2\u0427\u0426\3\2\2\2\u0427\u0428")
        buf.write("\3\2\2\2\u0428\u00a5\3\2\2\2\u0429\u042b\7\37\2\2\u042a")
        buf.write("\u042c\5\u00a8U\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2")
        buf.write("\2\2\u042c\u00a7\3\2\2\2\u042d\u042e\7\6\2\2\u042e\u0431")
        buf.write("\5b\62\2\u042f\u0431\5\u0096L\2\u0430\u042d\3\2\2\2\u0430")
        buf.write("\u042f\3\2\2\2\u0431\u00a9\3\2\2\2\u0432\u0433\t\4\2\2")
        buf.write("\u0433\u00ab\3\2\2\2\u0434\u0438\5\u00aeX\2\u0435\u0438")
        buf.write("\7,\2\2\u0436\u0438\7-\2\2\u0437\u0434\3\2\2\2\u0437\u0435")
        buf.write("\3\2\2\2\u0437\u0436\3\2\2\2\u0438\u00ad\3\2\2\2\u0439")
        buf.write("\u043a\t\5\2\2\u043a\u00af\3\2\2\2\u009c\u00b5\u00b9\u00bb")
        buf.write("\u00c4\u00cd\u00d0\u00d7\u00dc\u00e3\u00ea\u00f1\u00f7")
        buf.write("\u00fb\u0101\u0107\u010b\u0111\u0115\u0117\u011b\u0121")
        buf.write("\u0125\u012b\u012f\u0134\u0139\u013f\u0143\u0149\u014f")
        buf.write("\u0153\u0159\u015d\u015f\u0163\u0169\u016d\u0173\u0177")
        buf.write("\u017d\u0184\u0188\u0195\u019b\u01a0\u01a3\u01a8\u01ac")
        buf.write("\u01b1\u01b5\u01b9\u01c7\u01cf\u01d7\u01d9\u01dd\u01e6")
        buf.write("\u01ed\u01ef\u01f8\u01fd\u0202\u0209\u020d\u0214\u021c")
        buf.write("\u0225\u022e\u0235\u023f\u024c\u0250\u025b\u0264\u026f")
        buf.write("\u0272\u0277\u027c\u0284\u028d\u0293\u0295\u029d\u02a1")
        buf.write("\u02a9\u02ac\u02b0\u02b4\u02bb\u02c5\u02cd\u02d3\u02db")
        buf.write("\u02eb\u02ee\u02f7\u02ff\u0307\u030f\u0311\u0319\u031b")
        buf.write("\u0329\u032b\u0335\u033c\u0341\u0343\u0349\u0350\u0355")
        buf.write("\u035b\u0360\u0365\u036d\u0373\u037b\u037f\u0381\u0385")
        buf.write("\u038e\u0395\u0399\u039d\u03a1\u03a4\u03a6\u03aa\u03b1")
        buf.write("\u03b5\u03bc\u03c0\u03cd\u03d1\u03d3\u03db\u03df\u03e1")
        buf.write("\u03e3\u03e9\u03ec\u03f6\u03fb\u0403\u0409\u040d\u0411")
        buf.write("\u0417\u041b\u0422\u0427\u042b\u0430\u0437")
        return buf.getvalue()


class Python3Parser(Parser):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "'.'", "'...'", "'*'", "'('", "')'", "','", "':'",
                    "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'",
                    "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'",
                    "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='",
                    "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='",
                    "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='",
                    "'<<='", "'>>='", "'**='", "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL",
                     "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER",
                     "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER",
                     "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN",
                     "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN",
                     "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP",
                     "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV",
                     "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE",
                     "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ",
                     "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN",
                     "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN",
                     "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN",
                     "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN",
                     "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT",
                     "DEDENT"]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_assign = 16
    RULE_testlist_star_expr = 17
    RULE_augassign = 18
    RULE_del_stmt = 19
    RULE_pass_stmt = 20
    RULE_flow_stmt = 21
    RULE_break_stmt = 22
    RULE_continue_stmt = 23
    RULE_return_stmt = 24
    RULE_yield_stmt = 25
    RULE_raise_stmt = 26
    RULE_import_stmt = 27
    RULE_import_name = 28
    RULE_import_from = 29
    RULE_import_as_name = 30
    RULE_dotted_as_name = 31
    RULE_import_as_names = 32
    RULE_dotted_as_names = 33
    RULE_dotted_name = 34
    RULE_global_stmt = 35
    RULE_nonlocal_stmt = 36
    RULE_assert_stmt = 37
    RULE_compound_stmt = 38
    RULE_if_stmt = 39
    RULE_else_suite = 40
    RULE_while_stmt = 41
    RULE_for_stmt = 42
    RULE_try_stmt = 43
    RULE_with_stmt = 44
    RULE_with_item = 45
    RULE_except_clause = 46
    RULE_suite = 47
    RULE_test = 48
    RULE_test_nocond = 49
    RULE_lambdef = 50
    RULE_lambdef_nocond = 51
    RULE_or_test = 52
    RULE_and_test = 53
    RULE_not_test = 54
    RULE_comparison = 55
    RULE_comp_op = 56
    RULE_star_expr = 57
    RULE_expr = 58
    RULE_xor_expr = 59
    RULE_and_expr = 60
    RULE_shift_expr = 61
    RULE_arith_expr = 62
    RULE_term = 63
    RULE_factor = 64
    RULE_power = 65
    RULE_call = 66
    RULE_atom = 67
    RULE_testlist_comp = 68
    RULE_trailer = 69
    RULE_subscriptlist = 70
    RULE_subscript = 71
    RULE_sliceop = 72
    RULE_exprlist = 73
    RULE_testlist = 74
    RULE_dictorsetmaker = 75
    RULE_classdef = 76
    RULE_arglist = 77
    RULE_argument = 78
    RULE_comp_iter = 79
    RULE_comp_for = 80
    RULE_comp_if = 81
    RULE_yield_expr = 82
    RULE_yield_arg = 83
    RULE_strr = 84
    RULE_number = 85
    RULE_integer = 86

    ruleNames = ["single_input", "file_input", "eval_input", "decorator",
                 "decorators", "decorated", "funcdef", "parameters", "typedargslist",
                 "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt",
                 "small_stmt", "expr_stmt", "assign", "testlist_star_expr",
                 "augassign", "del_stmt", "pass_stmt", "flow_stmt", "break_stmt",
                 "continue_stmt", "return_stmt", "yield_stmt", "raise_stmt",
                 "import_stmt", "import_name", "import_from", "import_as_name",
                 "dotted_as_name", "import_as_names", "dotted_as_names",
                 "dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt",
                 "compound_stmt", "if_stmt", "else_suite", "while_stmt",
                 "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause",
                 "suite", "test", "test_nocond", "lambdef", "lambdef_nocond",
                 "or_test", "and_test", "not_test", "comparison", "comp_op",
                 "star_expr", "expr", "xor_expr", "and_expr", "shift_expr",
                 "arith_expr", "term", "factor", "power", "call", "atom",
                 "testlist_comp", "trailer", "subscriptlist", "subscript",
                 "sliceop", "exprlist", "testlist", "dictorsetmaker",
                 "classdef", "arglist", "argument", "comp_iter", "comp_for",
                 "comp_if", "yield_expr", "yield_arg", "strr", "number",
                 "integer"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_LITERAL = 36
    BYTES_LITERAL = 37
    DECIMAL_INTEGER = 38
    OCT_INTEGER = 39
    HEX_INTEGER = 40
    BIN_INTEGER = 41
    FLOAT_NUMBER = 42
    IMAG_NUMBER = 43
    DOT = 44
    ELLIPSIS = 45
    STAR = 46
    OPEN_PAREN = 47
    CLOSE_PAREN = 48
    COMMA = 49
    COLON = 50
    SEMI_COLON = 51
    POWER = 52
    ASSIGN = 53
    OPEN_BRACK = 54
    CLOSE_BRACK = 55
    OR_OP = 56
    XOR = 57
    AND_OP = 58
    LEFT_SHIFT = 59
    RIGHT_SHIFT = 60
    ADD = 61
    MINUS = 62
    DIV = 63
    MOD = 64
    IDIV = 65
    NOT_OP = 66
    OPEN_BRACE = 67
    CLOSE_BRACE = 68
    LESS_THAN = 69
    GREATER_THAN = 70
    EQUALS = 71
    GT_EQ = 72
    LT_EQ = 73
    NOT_EQ_1 = 74
    NOT_EQ_2 = 75
    AT = 76
    ARROW = 77
    ADD_ASSIGN = 78
    SUB_ASSIGN = 79
    MULT_ASSIGN = 80
    AT_ASSIGN = 81
    DIV_ASSIGN = 82
    MOD_ASSIGN = 83
    AND_ASSIGN = 84
    OR_ASSIGN = 85
    XOR_ASSIGN = 86
    LEFT_SHIFT_ASSIGN = 87
    RIGHT_SHIFT_ASSIGN = 88
    POWER_ASSIGN = 89
    IDIV_ASSIGN = 90
    SKIP_ = 91
    UNKNOWN_CHAR = 92
    INDENT = 93
    DEDENT = 94

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext, 0)

        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSingle_input"):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)

    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.simple_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self.compound_stmt()
                self.state = 177
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (
                1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (
                1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (
                1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (
                1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (
                1 << Python3Parser.BREAK) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                1 << Python3Parser.STRING_LITERAL) | (1 << Python3Parser.BYTES_LITERAL) | (
                1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (
                1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.SEMI_COLON) | (
                1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (
                1 << (Python3Parser.AT - 66)))) != 0):
                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
                if la_ == 1:
                    self.state = 181
                    self.match(Python3Parser.NEWLINE)
                    pass

                elif la_ == 2:
                    self.state = 182
                    self.stmt()
                    pass

                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEval_input"):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)

    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.testlist()
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.NEWLINE:
                self.state = 191
                self.match(Python3Parser.NEWLINE)
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 197
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorator"):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)

    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(Python3Parser.AT)
            self.state = 200
            self.dotted_name()
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.OPEN_PAREN:
                self.state = 201
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 202
                    self.arglist()

                self.state = 205
                self.match(Python3Parser.CLOSE_PAREN)

            self.state = 208
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorators"):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)

    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 210
                self.decorator()
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext, 0)

        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecorated"):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)

    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.decorators()
            self.state = 218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 216
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 217
                self.funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFuncdef"):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)

    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(Python3Parser.DEF)
            self.state = 221
            self.match(Python3Parser.NAME)
            self.state = 222
            self.parameters()
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ARROW:
                self.state = 223
                self.match(Python3Parser.ARROW)
                self.state = 224
                self.test()

            self.state = 227
            self.match(Python3Parser.COLON)
            self.state = 228
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameters"):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)

    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 231
                self.typedargslist()

            self.state = 234
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypedargslist"):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.tfpdef()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 237
                    self.match(Python3Parser.ASSIGN)
                    self.state = 238
                    self.test()

                self.state = 249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 241
                        self.match(Python3Parser.COMMA)
                        self.state = 242
                        self.tfpdef()
                        self.state = 245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 243
                            self.match(Python3Parser.ASSIGN)
                            self.state = 244
                            self.test()

                    self.state = 251
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)

                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 252
                    self.match(Python3Parser.COMMA)
                    self.state = 275
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 253
                        self.match(Python3Parser.STAR)
                        self.state = 255
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 254
                            self.tfpdef()

                        self.state = 265
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 257
                                self.match(Python3Parser.COMMA)
                                self.state = 258
                                self.tfpdef()
                                self.state = 261
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 259
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 260
                                    self.test()

                            self.state = 267
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)

                        self.state = 271
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 268
                            self.match(Python3Parser.COMMA)
                            self.state = 269
                            self.match(Python3Parser.POWER)
                            self.state = 270
                            self.tfpdef()

                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 273
                        self.match(Python3Parser.POWER)
                        self.state = 274
                        self.tfpdef()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass

                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.match(Python3Parser.STAR)
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 280
                    self.tfpdef()

                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 283
                        self.match(Python3Parser.COMMA)
                        self.state = 284
                        self.tfpdef()
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 285
                            self.match(Python3Parser.ASSIGN)
                            self.state = 286
                            self.test()

                    self.state = 293
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 294
                    self.match(Python3Parser.COMMA)
                    self.state = 295
                    self.match(Python3Parser.POWER)
                    self.state = 296
                    self.tfpdef()

                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 299
                self.match(Python3Parser.POWER)
                self.state = 300
                self.tfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTfpdef"):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)

    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(Python3Parser.NAME)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COLON:
                self.state = 304
                self.match(Python3Parser.COLON)
                self.state = 305
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarargslist"):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.vfpdef()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 309
                    self.match(Python3Parser.ASSIGN)
                    self.state = 310
                    self.test()

                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 313
                        self.match(Python3Parser.COMMA)
                        self.state = 314
                        self.vfpdef()
                        self.state = 317
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 315
                            self.match(Python3Parser.ASSIGN)
                            self.state = 316
                            self.test()

                    self.state = 323
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 324
                    self.match(Python3Parser.COMMA)
                    self.state = 347
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 325
                        self.match(Python3Parser.STAR)
                        self.state = 327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 326
                            self.vfpdef()

                        self.state = 337
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 329
                                self.match(Python3Parser.COMMA)
                                self.state = 330
                                self.vfpdef()
                                self.state = 333
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 331
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 332
                                    self.test()

                            self.state = 339
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)

                        self.state = 343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 340
                            self.match(Python3Parser.COMMA)
                            self.state = 341
                            self.match(Python3Parser.POWER)
                            self.state = 342
                            self.vfpdef()

                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 345
                        self.match(Python3Parser.POWER)
                        self.state = 346
                        self.vfpdef()
                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass

                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.match(Python3Parser.STAR)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 352
                    self.vfpdef()

                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 355
                        self.match(Python3Parser.COMMA)
                        self.state = 356
                        self.vfpdef()
                        self.state = 359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 357
                            self.match(Python3Parser.ASSIGN)
                            self.state = 358
                            self.test()

                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)

                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 366
                    self.match(Python3Parser.COMMA)
                    self.state = 367
                    self.match(Python3Parser.POWER)
                    self.state = 368
                    self.vfpdef()

                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 371
                self.match(Python3Parser.POWER)
                self.state = 372
                self.vfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVfpdef"):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)

    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext, 0)

        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStmt"):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                         Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                         Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                         Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                         Python3Parser.OPEN_PAREN, Python3Parser.SEMI_COLON, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                self.simple_stmt()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR,
                           Python3Parser.TRY, Python3Parser.WITH, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimple_stmt"):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)

    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.small_stmt()
            self.state = 386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 382
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 383
                    self.small_stmt()
                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.SEMI_COLON:
                self.state = 389
                self.match(Python3Parser.SEMI_COLON)

            self.state = 392
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext, 0)

        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext, 0)

        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext, 0)

        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext, 0)

        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSmall_stmt"):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                         Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                         Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                         Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                         Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                         Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.expr_stmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.del_stmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 396
                self.pass_stmt()
                pass
            elif token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.YIELD, Python3Parser.CONTINUE,
                           Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                self.flow_stmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 398
                self.import_stmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 399
                self.global_stmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 400
                self.nonlocal_stmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 401
                self.assert_stmt()
                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                self.enterOuterAlt(localctx, 9)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext, 0)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr_stmt"):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)

    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.testlist_star_expr()
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                         Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                         Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                         Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN,
                         Python3Parser.IDIV_ASSIGN]:
                self.state = 406
                self.augassign()
                self.state = 409
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 407
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                               Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                               Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                               Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                               Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                               Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 408
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.ASSIGN:
                    self.state = 411
                    self.assign()
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext, 0)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(Python3Parser.ASSIGN)
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.YIELD]:
                self.state = 420
                self.yield_expr()
                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                           Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 421
                self.testlist_star_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_star_expr"):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)

    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_testlist_star_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
            if la_ == 1:
                self.state = 424
                self.test()
                pass

            elif la_ == 2:
                self.state = 425
                self.star_expr()
                pass

            self.state = 435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 49, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 428
                    self.match(Python3Parser.COMMA)
                    self.state = 431
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
                    if la_ == 1:
                        self.state = 429
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 430
                        self.star_expr()
                        pass

                self.state = 437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 49, self._ctx)

            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 438
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            _la = self._input.LA(1)
            if not (((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (Python3Parser.ADD_ASSIGN - 78)) | (
                1 << (Python3Parser.SUB_ASSIGN - 78)) | (1 << (Python3Parser.MULT_ASSIGN - 78)) | (
                1 << (Python3Parser.AT_ASSIGN - 78)) | (1 << (Python3Parser.DIV_ASSIGN - 78)) | (
                1 << (Python3Parser.MOD_ASSIGN - 78)) | (1 << (Python3Parser.AND_ASSIGN - 78)) | (
                1 << (Python3Parser.OR_ASSIGN - 78)) | (1 << (Python3Parser.XOR_ASSIGN - 78)) | (
                1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 78)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 78)) | (
                1 << (Python3Parser.POWER_ASSIGN - 78)) | (1 << (Python3Parser.IDIV_ASSIGN - 78)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDel_stmt"):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)

    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(Python3Parser.DEL)
            self.state = 444
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPass_stmt"):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)

    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFlow_stmt"):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)

    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_flow_stmt)
        try:
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 452
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinue_stmt"):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)

    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_return_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(Python3Parser.RETURN)
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 460
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_raise_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(Python3Parser.RAISE)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 466
                self.test()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FROM:
                    self.state = 467
                    self.match(Python3Parser.FROM)
                    self.state = 468
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext, 0)

        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_stmt"):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)

    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_stmt)
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_name"):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)

    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(Python3Parser.IMPORT)
            self.state = 478
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_from"):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)

    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_from)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(Python3Parser.FROM)
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
            if la_ == 1:
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                    self.state = 481
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 487
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 488
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                        break

                pass

            self.state = 495
            self.match(Python3Parser.IMPORT)
            self.state = 502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 496
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 497
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 498
                self.import_as_names()
                self.state = 499
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 501
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_as_name"):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)

    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(Python3Parser.NAME)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.AS:
                self.state = 505
                self.match(Python3Parser.AS)
                self.state = 506
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_name"):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dotted_as_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.dotted_name()
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.AS:
                self.state = 510
                self.match(Python3Parser.AS)
                self.state = 511
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImport_as_names"):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)

    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_names)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.import_as_name()
            self.state = 519
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 515
                    self.match(Python3Parser.COMMA)
                    self.state = 516
                    self.import_as_name()
                self.state = 521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 522
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_as_names"):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)

    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_names)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.dotted_as_name()
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.COMMA:
                self.state = 526
                self.match(Python3Parser.COMMA)
                self.state = 527
                self.dotted_as_name()
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDotted_name"):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)

    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(Python3Parser.NAME)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.DOT:
                self.state = 534
                self.match(Python3Parser.DOT)
                self.state = 535
                self.match(Python3Parser.NAME)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGlobal_stmt"):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_global_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(Python3Parser.GLOBAL)
            self.state = 542
            self.match(Python3Parser.NAME)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.COMMA:
                self.state = 543
                self.match(Python3Parser.COMMA)
                self.state = 544
                self.match(Python3Parser.NAME)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonlocal_stmt"):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)

    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonlocal_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(Python3Parser.NONLOCAL)
            self.state = 551
            self.match(Python3Parser.NAME)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.COMMA:
                self.state = 552
                self.match(Python3Parser.COMMA)
                self.state = 553
                self.match(Python3Parser.NAME)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(Python3Parser.ASSERT)
            self.state = 560
            self.test()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 561
                self.match(Python3Parser.COMMA)
                self.state = 562
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext, 0)

        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext, 0)

        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompound_stmt"):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)

    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compound_stmt)
        try:
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 570
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 571
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 572
                self.decorated()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(Python3Parser.IF)
            self.state = 576
            self.test()
            self.state = 577
            self.match(Python3Parser.COLON)
            self.state = 578
            self.suite()
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 579
                self.match(Python3Parser.ELIF)
                self.state = 580
                self.test()
                self.state = 581
                self.match(Python3Parser.COLON)
                self.state = 582
                self.suite()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 589
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(Python3Parser.ELSE)
            self.state = 593
            self.match(Python3Parser.COLON)
            self.state = 594
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(Python3Parser.WHILE)
            self.state = 597
            self.test()
            self.state = 598
            self.match(Python3Parser.COLON)
            self.state = 599
            self.suite()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 600
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(Python3Parser.FOR)
            self.state = 604
            self.exprlist()
            self.state = 605
            self.match(Python3Parser.IN)
            self.state = 606
            self.testlist()
            self.state = 607
            self.match(Python3Parser.COLON)
            self.state = 608
            self.suite()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 609
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(Python3Parser.TRY)
            self.state = 613
            self.match(Python3Parser.COLON)
            self.state = 614
            self.suite()
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 615
                    self.except_clause()
                    self.state = 616
                    self.match(Python3Parser.COLON)
                    self.state = 617
                    self.suite()
                    self.state = 621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 623
                    self.else_suite()

                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 626
                    self.match(Python3Parser.FINALLY)
                    self.state = 627
                    self.match(Python3Parser.COLON)
                    self.state = 628
                    self.suite()

                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 631
                self.match(Python3Parser.FINALLY)
                self.state = 632
                self.match(Python3Parser.COLON)
                self.state = 633
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_stmt"):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)

    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(Python3Parser.WITH)
            self.state = 637
            self.with_item()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.COMMA:
                self.state = 638
                self.match(Python3Parser.COMMA)
                self.state = 639
                self.with_item()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 645
            self.match(Python3Parser.COLON)
            self.state = 646
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWith_item"):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)

    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_item)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.test()
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.AS:
                self.state = 649
                self.match(Python3Parser.AS)
                self.state = 650
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(Python3Parser.EXCEPT)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 654
                self.test()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 655
                    self.match(Python3Parser.AS)
                    self.state = 656
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSuite"):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.simple_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(Python3Parser.NEWLINE)
                self.state = 663
                self.match(Python3Parser.INDENT)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 664
                    self.stmt()
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (
                        1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (
                        1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (
                        1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (
                        1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                        1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (
                        1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                        1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                        1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.NEWLINE) | (
                        1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_LITERAL) | (
                        1 << Python3Parser.BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                        1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                        1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                        1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (
                        1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.SEMI_COLON) | (
                        1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (
                        1 << Python3Parser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (
                        1 << (Python3Parser.AT - 66)))) != 0)):
                        break

                self.state = 669
                self.match(Python3Parser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext, i)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest"):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.or_test()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF:
                    self.state = 674
                    self.match(Python3Parser.IF)
                    self.state = 675
                    self.or_test()
                    self.state = 676
                    self.match(Python3Parser.ELSE)
                    self.state = 677
                    self.test()

                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_test_nocond)
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef"):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)

    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(Python3Parser.LAMBDA)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 689
                self.varargslist()

            self.state = 692
            self.match(Python3Parser.COLON)
            self.state = 693
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLambdef_nocond"):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)

    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lambdef_nocond)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(Python3Parser.LAMBDA)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 696
                self.varargslist()

            self.state = 699
            self.match(Python3Parser.COLON)
            self.state = 700
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.and_test()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR:
                self.state = 703
                self.match(Python3Parser.OR)
                self.state = 704
                self.and_test()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnd_test"):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)

    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_and_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.not_test()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.AND:
                self.state = 711
                self.match(Python3Parser.AND)
                self.state = 712
                self.not_test()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_not_test)
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.match(Python3Parser.NOT)
                self.state = 719
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                           Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                           Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                           Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                           Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparison"):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)

    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comparison)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.star_expr()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & (
                                                (1 << (Python3Parser.IN - 15)) | (1 << (Python3Parser.NOT - 15)) | (
                                            1 << (Python3Parser.IS - 15)) | (1 << (Python3Parser.LESS_THAN - 15)) | (
                                    1 << (Python3Parser.GREATER_THAN - 15)) | (1 << (Python3Parser.EQUALS - 15)) | (
                            1 << (Python3Parser.GT_EQ - 15)) | (1 << (Python3Parser.LT_EQ - 15)) | (
                    1 << (Python3Parser.NOT_EQ_1 - 15)) | (1 << (Python3Parser.NOT_EQ_2 - 15)))) != 0):
                self.state = 724
                self.comp_op()
                self.state = 725
                self.star_expr()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comp_op)
        try:
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 736
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 737
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 738
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 739
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 740
                self.match(Python3Parser.NOT)
                self.state = 741
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 742
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 743
                self.match(Python3Parser.IS)
                self.state = 744
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStar_expr"):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)

    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_star_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 747
                self.match(Python3Parser.STAR)

            self.state = 750
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.xor_expr()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR_OP:
                self.state = 753
                self.match(Python3Parser.OR_OP)
                self.state = 754
                self.xor_expr()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitXor_expr"):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)

    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_xor_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.and_expr()
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.XOR:
                self.state = 761
                self.match(Python3Parser.XOR)
                self.state = 762
                self.and_expr()
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnd_expr"):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)

    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_and_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.shift_expr()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.AND_OP:
                self.state = 769
                self.match(Python3Parser.AND_OP)
                self.state = 770
                self.shift_expr()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShift_expr"):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)

    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_shift_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.arith_expr()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.LEFT_SHIFT or _la == Python3Parser.RIGHT_SHIFT:
                self.state = 781
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.LEFT_SHIFT]:
                    self.state = 777
                    self.match(Python3Parser.LEFT_SHIFT)
                    self.state = 778
                    self.arith_expr()
                    pass
                elif token in [Python3Parser.RIGHT_SHIFT]:
                    self.state = 779
                    self.match(Python3Parser.RIGHT_SHIFT)
                    self.state = 780
                    self.arith_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArith_expr"):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)

    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arith_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.term()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ADD or _la == Python3Parser.MINUS:
                self.state = 791
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD]:
                    self.state = 787
                    self.match(Python3Parser.ADD)
                    self.state = 788
                    self.term()
                    pass
                elif token in [Python3Parser.MINUS]:
                    self.state = 789
                    self.match(Python3Parser.MINUS)
                    self.state = 790
                    self.term()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTerm"):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)

    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_term)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.factor()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & (
                            (1 << (Python3Parser.STAR - 46)) | (1 << (Python3Parser.DIV - 46)) | (
                        1 << (Python3Parser.MOD - 46)) | (1 << (Python3Parser.IDIV - 46)) | (
                1 << (Python3Parser.AT - 46)))) != 0):
                self.state = 807
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STAR]:
                    self.state = 797
                    self.match(Python3Parser.STAR)
                    self.state = 798
                    self.factor()
                    pass
                elif token in [Python3Parser.DIV]:
                    self.state = 799
                    self.match(Python3Parser.DIV)
                    self.state = 800
                    self.factor()
                    pass
                elif token in [Python3Parser.MOD]:
                    self.state = 801
                    self.match(Python3Parser.MOD)
                    self.state = 802
                    self.factor()
                    pass
                elif token in [Python3Parser.IDIV]:
                    self.state = 803
                    self.match(Python3Parser.IDIV)
                    self.state = 804
                    self.factor()
                    pass
                elif token in [Python3Parser.AT]:
                    self.state = 805
                    self.match(Python3Parser.AT)
                    self.state = 806
                    self.factor()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactor"):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_factor)
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.match(Python3Parser.ADD)
                self.state = 813
                self.factor()
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.match(Python3Parser.MINUS)
                self.state = 815
                self.factor()
                pass
            elif token in [Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.match(Python3Parser.NOT_OP)
                self.state = 817
                self.factor()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                           Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                           Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 818
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)

    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_power)
        self._la = 0  # Token type
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.call(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.atom()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (
                    1 << Python3Parser.OPEN_BRACK))) != 0):
                    self.state = 823
                    self.trailer()
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 829
                    self.match(Python3Parser.POWER)
                    self.state = 830
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(Python3Parser.NAME)

            self.state = 837
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 838
                self.arglist()

            self.state = 841
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 843
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")

                    self.state = 844
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                        1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                        1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                        1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                        1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                        1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                        1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                        1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                        1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                        1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                        1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 845
                        self.arglist()

                    self.state = 848
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext, 0)

        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(Python3Parser.NumberContext, 0)

        def strr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StrrContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StrrContext, i)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 857
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 855
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                               Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                               Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                               Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                               Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                               Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 856
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 859
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 860
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 861
                    self.testlist_comp()

                self.state = 864
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 866
                    self.dictorsetmaker()

                self.state = 869
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 870
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                           Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 871
                self.number()
                pass
            elif token in [Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 872
                    self.strr()
                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.STRING_LITERAL or _la == Python3Parser.BYTES_LITERAL):
                        break

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 877
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 878
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 879
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 880
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_comp"):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)

    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_testlist_comp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.test()
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.state = 884
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 885
                        self.match(Python3Parser.COMMA)
                        self.state = 886
                        self.test()
                    self.state = 891
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 116, self._ctx)

                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 892
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrailer"):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 898
                    self.arglist()

                self.state = 901
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 903
                self.subscriptlist()
                self.state = 904
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 906
                self.match(Python3Parser.DOT)
                self.state = 907
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubscriptlist"):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)

    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_subscriptlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.subscript()
            self.state = 915
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 911
                    self.match(Python3Parser.COMMA)
                    self.state = 912
                    self.subscript()
                self.state = 917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)

            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 918
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubscript"):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 922
                    self.test()

                self.state = 925
                self.match(Python3Parser.COLON)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 926
                    self.test()

                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 929
                    self.sliceop()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSliceop"):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)

    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_sliceop)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(Python3Parser.COLON)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 935
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExprlist"):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)

    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_exprlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.star_expr()
            self.state = 943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 128, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 939
                    self.match(Python3Parser.COMMA)
                    self.state = 940
                    self.star_expr()
                self.state = 945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 128, self._ctx)

            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 946
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist"):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)

    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_testlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.test()
            self.state = 954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 950
                    self.match(Python3Parser.COMMA)
                    self.state = 951
                    self.test()
                self.state = 956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)

            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 957
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDictorsetmaker"):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.test()
                self.state = 961
                self.match(Python3Parser.COLON)
                self.state = 962
                self.test()
                self.state = 977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR]:
                    self.state = 963
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 964
                            self.match(Python3Parser.COMMA)
                            self.state = 965
                            self.test()
                            self.state = 966
                            self.match(Python3Parser.COLON)
                            self.state = 967
                            self.test()
                        self.state = 973
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)

                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 974
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.test()
                self.state = 991
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR]:
                    self.state = 980
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 985
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 981
                            self.match(Python3Parser.COMMA)
                            self.state = 982
                            self.test()
                        self.state = 987
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)

                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 988
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitClassdef"):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)

    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_classdef)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(Python3Parser.CLASS)
            self.state = 996
            self.match(Python3Parser.NAME)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.OPEN_PAREN:
                self.state = 997
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 998
                    self.arglist()

                self.state = 1001
                self.match(Python3Parser.CLOSE_PAREN)

            self.state = 1004
            self.match(Python3Parser.COLON)
            self.state = 1005
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArglist"):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1007
                    self.argument()
                    self.state = 1008
                    self.match(Python3Parser.COMMA)
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 145, self._ctx)
            if la_ == 1:
                self.state = 1015
                self.argument()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1016
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 1019
                self.match(Python3Parser.STAR)
                self.state = 1020
                self.test()
                self.state = 1025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1021
                        self.match(Python3Parser.COMMA)
                        self.state = 1022
                        self.argument()
                    self.state = 1027
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1028
                    self.match(Python3Parser.COMMA)
                    self.state = 1029
                    self.match(Python3Parser.POWER)
                    self.state = 1030
                    self.test()

                pass

            elif la_ == 3:
                self.state = 1033
                self.match(Python3Parser.POWER)
                self.state = 1034
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)

    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_argument)
        self._la = 0  # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.test()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FOR:
                    self.state = 1038
                    self.comp_for()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.test()
                self.state = 1042
                self.match(Python3Parser.ASSIGN)
                self.state = 1043
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comp_iter)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1047
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1048
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(Python3Parser.FOR)
            self.state = 1052
            self.exprlist()
            self.state = 1053
            self.match(Python3Parser.IN)
            self.state = 1054
            self.or_test()
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1055
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_if"):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)

    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_comp_if)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(Python3Parser.IF)
            self.state = 1059
            self.test_nocond()
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1060
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_expr"):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)

    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_yield_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(Python3Parser.YIELD)
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (Python3Parser.FROM - 4)) | (
                1 << (Python3Parser.LAMBDA - 4)) | (1 << (Python3Parser.NOT - 4)) | (1 << (Python3Parser.NONE - 4)) | (
                1 << (Python3Parser.TRUE - 4)) | (1 << (Python3Parser.FALSE - 4)) | (1 << (Python3Parser.NAME - 4)) | (
                1 << (Python3Parser.STRING_LITERAL - 4)) | (1 << (Python3Parser.BYTES_LITERAL - 4)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 4)) | (1 << (Python3Parser.OCT_INTEGER - 4)) | (
                1 << (Python3Parser.HEX_INTEGER - 4)) | (1 << (Python3Parser.BIN_INTEGER - 4)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 4)) | (1 << (Python3Parser.IMAG_NUMBER - 4)) | (
                1 << (Python3Parser.ELLIPSIS - 4)) | (1 << (Python3Parser.STAR - 4)) | (
                1 << (Python3Parser.OPEN_PAREN - 4)) | (1 << (Python3Parser.OPEN_BRACK - 4)) | (
                1 << (Python3Parser.ADD - 4)) | (1 << (Python3Parser.MINUS - 4)) | (1 << (Python3Parser.NOT_OP - 4)) | (
                1 << (Python3Parser.OPEN_BRACE - 4)))) != 0):
                self.state = 1064
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_arg"):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)

    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_yield_arg)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.match(Python3Parser.FROM)
                self.state = 1068
                self.test()
                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                           Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StrrContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(Python3Parser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(Python3Parser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_strr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStrr"):
                return visitor.visitStrr(self)
            else:
                return visitor.visitChildren(self)

    def strr(self):

        localctx = Python3Parser.StrrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_strr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            _la = self._input.LA(1)
            if not (_la == Python3Parser.STRING_LITERAL or _la == Python3Parser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(Python3Parser.IntegerContext, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_number

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumber"):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)

    def number(self):

        localctx = Python3Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_number)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.integer()
                pass
            elif token in [Python3Parser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.match(Python3Parser.FLOAT_NUMBER)
                pass
            elif token in [Python3Parser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.match(Python3Parser.IMAG_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_integer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInteger"):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)

    def integer(self):

        localctx = Python3Parser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_integer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                    1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[66] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
