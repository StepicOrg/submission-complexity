# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3_")
        buf.write("\u0432\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \3\2\3\2\7\2C\n\2\f\2\16\2F\13\2\3\2\3")
        buf.write("\2\3\3\3\3\3\3\5\3M\n\3\3\3\3\3\5\3Q\n\3\3\3\3\3\3\3\3")
        buf.write("\3\5\3W\n\3\3\3\3\3\5\3[\n\3\7\3]\n\3\f\3\16\3`\13\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\5\3g\n\3\5\3i\n\3\3\3\3\3\3\3\3\3\5")
        buf.write("\3o\n\3\3\3\3\3\5\3s\n\3\7\3u\n\3\f\3\16\3x\13\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\5\3\177\n\3\5\3\u0081\n\3\3\3\3\3\3\3\3")
        buf.write("\3\5\3\u0087\n\3\5\3\u0089\n\3\5\3\u008b\n\3\3\3\3\3\3")
        buf.write("\3\3\3\5\3\u0091\n\3\5\3\u0093\n\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("\u0099\n\3\3\3\3\3\5\3\u009d\n\3\7\3\u009f\n\3\f\3\16")
        buf.write("\3\u00a2\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u00a9\n\3\5\3\u00ab")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3\u00b1\n\3\5\3\u00b3\n\3\3\4\3")
        buf.write("\4\3\4\5\4\u00b8\n\4\3\4\3\4\3\4\3\4\5\4\u00be\n\4\7\4")
        buf.write("\u00c0\n\4\f\4\16\4\u00c3\13\4\3\4\3\4\3\4\5\4\u00c8\n")
        buf.write("\4\3\4\3\4\3\4\3\4\5\4\u00ce\n\4\7\4\u00d0\n\4\f\4\16")
        buf.write("\4\u00d3\13\4\3\4\3\4\3\4\5\4\u00d8\n\4\3\4\3\4\5\4\u00dc")
        buf.write("\n\4\5\4\u00de\n\4\3\4\3\4\5\4\u00e2\n\4\3\4\3\4\3\4\3")
        buf.write("\4\5\4\u00e8\n\4\7\4\u00ea\n\4\f\4\16\4\u00ed\13\4\3\4")
        buf.write("\3\4\3\4\5\4\u00f2\n\4\3\4\3\4\5\4\u00f6\n\4\3\5\3\5\3")
        buf.write("\5\7\5\u00fb\n\5\f\5\16\5\u00fe\13\5\3\5\5\5\u0101\n\5")
        buf.write("\3\5\5\5\u0104\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5")
        buf.write("\u010e\n\5\3\5\3\5\3\5\3\5\5\5\u0114\n\5\7\5\u0116\n\5")
        buf.write("\f\5\16\5\u0119\13\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u0122")
        buf.write("\n\5\f\5\16\5\u0125\13\5\3\5\3\5\5\5\u0129\n\5\3\5\5\5")
        buf.write("\u012c\n\5\3\5\7\5\u012f\n\5\f\5\16\5\u0132\13\5\3\5\3")
        buf.write("\5\3\5\3\5\5\5\u0138\n\5\3\5\5\5\u013b\n\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u0141\n\5\3\5\3\5\3\5\5\5\u0146\n\5\5\5\u0148")
        buf.write("\n\5\3\5\3\5\5\5\u014c\n\5\3\6\3\6\5\6\u0150\n\6\3\6\5")
        buf.write("\6\u0153\n\6\3\6\3\6\3\6\5\6\u0158\n\6\3\6\5\6\u015b\n")
        buf.write("\6\7\6\u015d\n\6\f\6\16\6\u0160\13\6\3\6\5\6\u0163\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u016c\n\6\f\6\16\6\u016f")
        buf.write("\13\6\3\6\5\6\u0172\n\6\5\6\u0174\n\6\3\6\3\6\3\6\7\6")
        buf.write("\u0179\n\6\f\6\16\6\u017c\13\6\3\6\5\6\u017f\n\6\5\6\u0181")
        buf.write("\n\6\3\6\7\6\u0184\n\6\f\6\16\6\u0187\13\6\5\6\u0189\n")
        buf.write("\6\3\6\3\6\5\6\u018d\n\6\3\6\3\6\3\6\5\6\u0192\n\6\3\6")
        buf.write("\7\6\u0195\n\6\f\6\16\6\u0198\13\6\3\6\5\6\u019b\n\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\7\6\u01a3\n\6\f\6\16\6\u01a6\13")
        buf.write("\6\3\6\5\6\u01a9\n\6\5\6\u01ab\n\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\7\6\u01b4\n\6\f\6\16\6\u01b7\13\6\3\6\5\6\u01ba")
        buf.write("\n\6\5\6\u01bc\n\6\3\6\3\6\3\6\3\6\7\6\u01c2\n\6\f\6\16")
        buf.write("\6\u01c5\13\6\3\6\3\6\5\6\u01c9\n\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u01cf\n\6\f\6\16\6\u01d2\13\6\3\6\3\6\5\6\u01d6\n\6")
        buf.write("\7\6\u01d8\n\6\f\6\16\6\u01db\13\6\3\6\3\6\7\6\u01df\n")
        buf.write("\6\f\6\16\6\u01e2\13\6\3\6\3\6\3\6\7\6\u01e7\n\6\f\6\16")
        buf.write("\6\u01ea\13\6\3\6\6\6\u01ed\n\6\r\6\16\6\u01ee\5\6\u01f1")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01f9\n\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u01ff\n\6\7\6\u0201\n\6\f\6\16\6\u0204\13\6\3")
        buf.write("\6\5\6\u0207\n\6\3\6\3\6\3\6\3\6\5\6\u020d\n\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u0213\n\6\7\6\u0215\n\6\f\6\16\6\u0218\13")
        buf.write("\6\3\6\5\6\u021b\n\6\5\6\u021d\n\6\3\6\3\6\3\6\3\6\7\6")
        buf.write("\u0223\n\6\f\6\16\6\u0226\13\6\3\6\3\6\3\6\3\6\5\6\u022c")
        buf.write("\n\6\5\6\u022e\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0237")
        buf.write("\n\7\f\7\16\7\u023a\13\7\3\7\5\7\u023d\n\7\5\7\u023f\n")
        buf.write("\7\3\7\3\7\5\7\u0243\n\7\3\7\5\7\u0246\n\7\3\7\3\7\3\7")
        buf.write("\5\7\u024b\n\7\3\7\5\7\u024e\n\7\7\7\u0250\n\7\f\7\16")
        buf.write("\7\u0253\13\7\3\7\5\7\u0256\n\7\5\7\u0258\n\7\3\b\3\b")
        buf.write("\3\t\3\t\3\n\3\n\3\n\3\n\5\n\u0262\n\n\5\n\u0264\n\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u026f")
        buf.write("\n\13\f\13\16\13\u0272\13\13\3\13\5\13\u0275\n\13\3\f")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u0280\n\r\3\16\3")
        buf.write("\16\5\16\u0284\n\16\3\16\3\16\3\16\5\16\u0289\n\16\3\16")
        buf.write("\7\16\u028c\n\16\f\16\16\16\u028f\13\16\3\16\5\16\u0292")
        buf.write("\n\16\3\16\3\16\3\16\3\16\7\16\u0298\n\16\f\16\16\16\u029b")
        buf.write("\13\16\3\16\5\16\u029e\n\16\3\16\3\16\3\16\5\16\u02a3")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\6\17\u02ac\n")
        buf.write("\17\r\17\16\17\u02ad\3\17\5\17\u02b1\n\17\3\17\3\17\3")
        buf.write("\17\5\17\u02b6\n\17\3\17\3\17\3\17\5\17\u02bb\n\17\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u02c1\n\20\5\20\u02c3\n\20\3\21\3")
        buf.write("\21\3\21\7\21\u02c8\n\21\f\21\16\21\u02cb\13\21\3\21\5")
        buf.write("\21\u02ce\n\21\3\21\3\21\3\21\3\21\3\21\6\21\u02d5\n\21")
        buf.write("\r\21\16\21\u02d6\3\21\3\21\5\21\u02db\n\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\5\22\u02e3\n\22\3\22\3\22\5\22\u02e7")
        buf.write("\n\22\3\22\3\22\5\22\u02eb\n\22\3\23\3\23\3\23\5\23\u02f0")
        buf.write("\n\23\3\23\3\23\5\23\u02f4\n\23\3\24\3\24\3\24\7\24\u02f9")
        buf.write("\n\24\f\24\16\24\u02fc\13\24\3\25\3\25\3\25\5\25\u0301")
        buf.write("\n\25\3\25\3\25\3\25\5\25\u0306\n\25\3\25\3\25\7\25\u030a")
        buf.write("\n\25\f\25\16\25\u030d\13\25\5\25\u030f\n\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\5\26\u031e\n\26\3\27\3\27\3\27\7\27\u0323\n\27\f\27\16")
        buf.write("\27\u0326\13\27\3\30\3\30\3\30\3\30\3\30\7\30\u032d\n")
        buf.write("\30\f\30\16\30\u0330\13\30\3\30\3\30\5\30\u0334\n\30\5")
        buf.write("\30\u0336\n\30\3\31\3\31\3\31\3\31\5\31\u033c\n\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0343\n\31\3\31\7\31\u0346\n")
        buf.write("\31\f\31\16\31\u0349\13\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\7\32\u0352\n\32\f\32\16\32\u0355\13\32\3\32\5")
        buf.write("\32\u0358\n\32\5\32\u035a\n\32\3\32\3\32\3\32\3\32\7\32")
        buf.write("\u0360\n\32\f\32\16\32\u0363\13\32\3\32\5\32\u0366\n\32")
        buf.write("\5\32\u0368\n\32\5\32\u036a\n\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\7\32\u0372\n\32\f\32\16\32\u0375\13\32\3\32\5")
        buf.write("\32\u0378\n\32\5\32\u037a\n\32\5\32\u037c\n\32\3\32\3")
        buf.write("\32\3\32\5\32\u0381\n\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\6\32\u038c\n\32\r\32\16\32\u038d\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u0394\n\32\5\32\u0396\n\32\3\33\3")
        buf.write("\33\5\33\u039a\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u03a1")
        buf.write("\n\33\f\33\16\33\u03a4\13\33\3\33\5\33\u03a7\n\33\3\33")
        buf.write("\3\33\3\33\3\33\5\33\u03ad\n\33\3\34\3\34\5\34\u03b1\n")
        buf.write("\34\3\34\3\34\5\34\u03b5\n\34\3\34\3\34\5\34\u03b9\n\34")
        buf.write("\5\34\u03bb\n\34\5\34\u03bd\n\34\3\35\3\35\3\35\5\35\u03c2")
        buf.write("\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u03cc")
        buf.write("\n\35\f\35\16\35\u03cf\13\35\3\35\5\35\u03d2\n\35\3\35")
        buf.write("\3\35\7\35\u03d6\n\35\f\35\16\35\u03d9\13\35\3\35\5\35")
        buf.write("\u03dc\n\35\5\35\u03de\n\35\3\36\3\36\5\36\u03e2\n\36")
        buf.write("\3\36\3\36\5\36\u03e6\n\36\3\36\3\36\7\36\u03ea\n\36\f")
        buf.write("\36\16\36\u03ed\13\36\3\36\3\36\5\36\u03f1\n\36\3\36\3")
        buf.write("\36\5\36\u03f5\n\36\3\36\5\36\u03f8\n\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u03ff\n\36\3\36\3\36\5\36\u0403\n\36\7")
        buf.write("\36\u0405\n\36\f\36\16\36\u0408\13\36\3\36\3\36\3\36\5")
        buf.write("\36\u040d\n\36\3\36\3\36\5\36\u0411\n\36\3\37\3\37\3\37")
        buf.write("\3\37\5\37\u0417\n\37\5\37\u0419\n\37\3 \3 \5 \u041d\n")
        buf.write(" \3 \3 \3 \5 \u0422\n \3 \7 \u0425\n \f \16 \u0428\13")
        buf.write(" \3 \5 \u042b\n \3 \3 \3 \5 \u0430\n \3 \2\3\60!\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>\2\t\3\2!\"\3\2-.\3\2\t\n\3\2O[\3\2\27\30\5\2//9B")
        buf.write("MM\4\2>?CC\2\u050a\2D\3\2\2\2\4\u00b2\3\2\2\2\6\u00f5")
        buf.write("\3\2\2\2\b\u014b\3\2\2\2\n\u022d\3\2\2\2\f\u022f\3\2\2")
        buf.write("\2\16\u0259\3\2\2\2\20\u025b\3\2\2\2\22\u025d\3\2\2\2")
        buf.write("\24\u0265\3\2\2\2\26\u0276\3\2\2\2\30\u027a\3\2\2\2\32")
        buf.write("\u0281\3\2\2\2\34\u02a4\3\2\2\2\36\u02bc\3\2\2\2 \u02da")
        buf.write("\3\2\2\2\"\u02ea\3\2\2\2$\u02f3\3\2\2\2&\u02f5\3\2\2\2")
        buf.write("(\u030e\3\2\2\2*\u031d\3\2\2\2,\u031f\3\2\2\2.\u0335\3")
        buf.write("\2\2\2\60\u0337\3\2\2\2\62\u0395\3\2\2\2\64\u03ac\3\2")
        buf.write("\2\2\66\u03bc\3\2\2\28\u03be\3\2\2\2:\u03eb\3\2\2\2<\u0418")
        buf.write("\3\2\2\2>\u041a\3\2\2\2@C\7$\2\2AC\5\b\5\2B@\3\2\2\2B")
        buf.write("A\3\2\2\2CF\3\2\2\2DB\3\2\2\2DE\3\2\2\2EG\3\2\2\2FD\3")
        buf.write("\2\2\2GH\7\2\2\3H\3\3\2\2\2IL\7%\2\2JK\7\63\2\2KM\5\"")
        buf.write("\22\2LJ\3\2\2\2LM\3\2\2\2MP\3\2\2\2NO\7\66\2\2OQ\5\"\22")
        buf.write("\2PN\3\2\2\2PQ\3\2\2\2Q^\3\2\2\2RS\7\62\2\2SV\7%\2\2T")
        buf.write("U\7\63\2\2UW\5\"\22\2VT\3\2\2\2VW\3\2\2\2WZ\3\2\2\2XY")
        buf.write("\7\66\2\2Y[\5\"\22\2ZX\3\2\2\2Z[\3\2\2\2[]\3\2\2\2\\R")
        buf.write("\3\2\2\2]`\3\2\2\2^\\\3\2\2\2^_\3\2\2\2_\u008a\3\2\2\2")
        buf.write("`^\3\2\2\2a\u0088\7\62\2\2bh\7/\2\2cf\7%\2\2de\7\63\2")
        buf.write("\2eg\5\"\22\2fd\3\2\2\2fg\3\2\2\2gi\3\2\2\2hc\3\2\2\2")
        buf.write("hi\3\2\2\2iv\3\2\2\2jk\7\62\2\2kn\7%\2\2lm\7\63\2\2mo")
        buf.write("\5\"\22\2nl\3\2\2\2no\3\2\2\2or\3\2\2\2pq\7\66\2\2qs\5")
        buf.write("\"\22\2rp\3\2\2\2rs\3\2\2\2su\3\2\2\2tj\3\2\2\2ux\3\2")
        buf.write("\2\2vt\3\2\2\2vw\3\2\2\2w\u0080\3\2\2\2xv\3\2\2\2yz\7")
        buf.write("\62\2\2z{\7\65\2\2{~\7%\2\2|}\7\63\2\2}\177\5\"\22\2~")
        buf.write("|\3\2\2\2~\177\3\2\2\2\177\u0081\3\2\2\2\u0080y\3\2\2")
        buf.write("\2\u0080\u0081\3\2\2\2\u0081\u0089\3\2\2\2\u0082\u0083")
        buf.write("\7\65\2\2\u0083\u0086\7%\2\2\u0084\u0085\7\63\2\2\u0085")
        buf.write("\u0087\5\"\22\2\u0086\u0084\3\2\2\2\u0086\u0087\3\2\2")
        buf.write("\2\u0087\u0089\3\2\2\2\u0088b\3\2\2\2\u0088\u0082\3\2")
        buf.write("\2\2\u0088\u0089\3\2\2\2\u0089\u008b\3\2\2\2\u008aa\3")
        buf.write("\2\2\2\u008a\u008b\3\2\2\2\u008b\u00b3\3\2\2\2\u008c\u0092")
        buf.write("\7/\2\2\u008d\u0090\7%\2\2\u008e\u008f\7\63\2\2\u008f")
        buf.write("\u0091\5\"\22\2\u0090\u008e\3\2\2\2\u0090\u0091\3\2\2")
        buf.write("\2\u0091\u0093\3\2\2\2\u0092\u008d\3\2\2\2\u0092\u0093")
        buf.write("\3\2\2\2\u0093\u00a0\3\2\2\2\u0094\u0095\7\62\2\2\u0095")
        buf.write("\u0098\7%\2\2\u0096\u0097\7\63\2\2\u0097\u0099\5\"\22")
        buf.write("\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u009c")
        buf.write("\3\2\2\2\u009a\u009b\7\66\2\2\u009b\u009d\5\"\22\2\u009c")
        buf.write("\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009f\3\2\2\2")
        buf.write("\u009e\u0094\3\2\2\2\u009f\u00a2\3\2\2\2\u00a0\u009e\3")
        buf.write("\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00aa\3\2\2\2\u00a2\u00a0")
        buf.write("\3\2\2\2\u00a3\u00a4\7\62\2\2\u00a4\u00a5\7\65\2\2\u00a5")
        buf.write("\u00a8\7%\2\2\u00a6\u00a7\7\63\2\2\u00a7\u00a9\5\"\22")
        buf.write("\2\u00a8\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00ab")
        buf.write("\3\2\2\2\u00aa\u00a3\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab")
        buf.write("\u00b3\3\2\2\2\u00ac\u00ad\7\65\2\2\u00ad\u00b0\7%\2\2")
        buf.write("\u00ae\u00af\7\63\2\2\u00af\u00b1\5\"\22\2\u00b0\u00ae")
        buf.write("\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b3\3\2\2\2\u00b2")
        buf.write("I\3\2\2\2\u00b2\u008c\3\2\2\2\u00b2\u00ac\3\2\2\2\u00b3")
        buf.write("\5\3\2\2\2\u00b4\u00b7\7%\2\2\u00b5\u00b6\7\66\2\2\u00b6")
        buf.write("\u00b8\5\"\22\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2")
        buf.write("\2\u00b8\u00c1\3\2\2\2\u00b9\u00ba\7\62\2\2\u00ba\u00bd")
        buf.write("\7%\2\2\u00bb\u00bc\7\66\2\2\u00bc\u00be\5\"\22\2\u00bd")
        buf.write("\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c0\3\2\2\2")
        buf.write("\u00bf\u00b9\3\2\2\2\u00c0\u00c3\3\2\2\2\u00c1\u00bf\3")
        buf.write("\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00dd\3\2\2\2\u00c3\u00c1")
        buf.write("\3\2\2\2\u00c4\u00db\7\62\2\2\u00c5\u00c7\7/\2\2\u00c6")
        buf.write("\u00c8\7%\2\2\u00c7\u00c6\3\2\2\2\u00c7\u00c8\3\2\2\2")
        buf.write("\u00c8\u00d1\3\2\2\2\u00c9\u00ca\7\62\2\2\u00ca\u00cd")
        buf.write("\7%\2\2\u00cb\u00cc\7\66\2\2\u00cc\u00ce\5\"\22\2\u00cd")
        buf.write("\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3\2\2\2")
        buf.write("\u00cf\u00c9\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00cf\3")
        buf.write("\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d7\3\2\2\2\u00d3\u00d1")
        buf.write("\3\2\2\2\u00d4\u00d5\7\62\2\2\u00d5\u00d6\7\65\2\2\u00d6")
        buf.write("\u00d8\7%\2\2\u00d7\u00d4\3\2\2\2\u00d7\u00d8\3\2\2\2")
        buf.write("\u00d8\u00dc\3\2\2\2\u00d9\u00da\7\65\2\2\u00da\u00dc")
        buf.write("\7%\2\2\u00db\u00c5\3\2\2\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd\u00c4\3\2\2\2")
        buf.write("\u00dd\u00de\3\2\2\2\u00de\u00f6\3\2\2\2\u00df\u00e1\7")
        buf.write("/\2\2\u00e0\u00e2\7%\2\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2")
        buf.write("\3\2\2\2\u00e2\u00eb\3\2\2\2\u00e3\u00e4\7\62\2\2\u00e4")
        buf.write("\u00e7\7%\2\2\u00e5\u00e6\7\66\2\2\u00e6\u00e8\5\"\22")
        buf.write("\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00ea")
        buf.write("\3\2\2\2\u00e9\u00e3\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00f1\3\2\2\2")
        buf.write("\u00ed\u00eb\3\2\2\2\u00ee\u00ef\7\62\2\2\u00ef\u00f0")
        buf.write("\7\65\2\2\u00f0\u00f2\7%\2\2\u00f1\u00ee\3\2\2\2\u00f1")
        buf.write("\u00f2\3\2\2\2\u00f2\u00f6\3\2\2\2\u00f3\u00f4\7\65\2")
        buf.write("\2\u00f4\u00f6\7%\2\2\u00f5\u00b4\3\2\2\2\u00f5\u00df")
        buf.write("\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\7\3\2\2\2\u00f7\u00fc")
        buf.write("\5\n\6\2\u00f8\u00f9\7\64\2\2\u00f9\u00fb\5\n\6\2\u00fa")
        buf.write("\u00f8\3\2\2\2\u00fb\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2")
        buf.write("\u00fc\u00fd\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3")
        buf.write("\2\2\2\u00ff\u0101\7\64\2\2\u0100\u00ff\3\2\2\2\u0100")
        buf.write("\u0101\3\2\2\2\u0101\u0103\3\2\2\2\u0102\u0104\7$\2\2")
        buf.write("\u0103\u0102\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u014c\3")
        buf.write("\2\2\2\u0105\u014c\5\24\13\2\u0106\u014c\5\30\r\2\u0107")
        buf.write("\u014c\5\32\16\2\u0108\u014c\5\34\17\2\u0109\u010a\7\24")
        buf.write("\2\2\u010a\u010d\5\"\22\2\u010b\u010c\7\b\2\2\u010c\u010e")
        buf.write("\5,\27\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e")
        buf.write("\u0117\3\2\2\2\u010f\u0110\7\62\2\2\u0110\u0113\5\"\22")
        buf.write("\2\u0111\u0112\7\b\2\2\u0112\u0114\5,\27\2\u0113\u0111")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115")
        buf.write("\u010f\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0117\3")
        buf.write("\2\2\2\u011a\u011b\7\63\2\2\u011b\u011c\5 \21\2\u011c")
        buf.write("\u014c\3\2\2\2\u011d\u011e\7M\2\2\u011e\u0123\7%\2\2\u011f")
        buf.write("\u0120\7-\2\2\u0120\u0122\7%\2\2\u0121\u011f\3\2\2\2\u0122")
        buf.write("\u0125\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u012b\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0128\7")
        buf.write("\60\2\2\u0127\u0129\5:\36\2\u0128\u0127\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\7\61\2")
        buf.write("\2\u012b\u0126\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012f\7$\2\2\u012e\u011d\3\2\2\2\u012f")
        buf.write("\u0132\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2")
        buf.write("\u0131\u0147\3\2\2\2\u0132\u0130\3\2\2\2\u0133\u0134\7")
        buf.write("\36\2\2\u0134\u013a\7%\2\2\u0135\u0137\7\60\2\2\u0136")
        buf.write("\u0138\5:\36\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139\u013b\7\61\2\2\u013a\u0135")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0148\3\2\2\2\u013c")
        buf.write("\u013d\7\3\2\2\u013d\u013e\7%\2\2\u013e\u0140\7\60\2\2")
        buf.write("\u013f\u0141\5\4\3\2\u0140\u013f\3\2\2\2\u0140\u0141\3")
        buf.write("\2\2\2\u0141\u0142\3\2\2\2\u0142\u0145\7\61\2\2\u0143")
        buf.write("\u0144\7N\2\2\u0144\u0146\5\"\22\2\u0145\u0143\3\2\2\2")
        buf.write("\u0145\u0146\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0133\3")
        buf.write("\2\2\2\u0147\u013c\3\2\2\2\u0148\u0149\3\2\2\2\u0149\u014a")
        buf.write("\7\63\2\2\u014a\u014c\5 \21\2\u014b\u00f7\3\2\2\2\u014b")
        buf.write("\u0105\3\2\2\2\u014b\u0106\3\2\2\2\u014b\u0107\3\2\2\2")
        buf.write("\u014b\u0108\3\2\2\2\u014b\u0109\3\2\2\2\u014b\u0130\3")
        buf.write("\2\2\2\u014c\t\3\2\2\2\u014d\u0153\5\"\22\2\u014e\u0150")
        buf.write("\7/\2\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0153\5,\27\2\u0152\u014d\3\2\2\2")
        buf.write("\u0152\u014f\3\2\2\2\u0153\u015e\3\2\2\2\u0154\u015a\7")
        buf.write("\62\2\2\u0155\u015b\5\"\22\2\u0156\u0158\7/\2\2\u0157")
        buf.write("\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\3\2\2\2")
        buf.write("\u0159\u015b\5,\27\2\u015a\u0155\3\2\2\2\u015a\u0157\3")
        buf.write("\2\2\2\u015b\u015d\3\2\2\2\u015c\u0154\3\2\2\2\u015d\u0160")
        buf.write("\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u0162\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0163\7\62\2")
        buf.write("\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0188")
        buf.write("\3\2\2\2\u0164\u0180\5\16\b\2\u0165\u0173\7\37\2\2\u0166")
        buf.write("\u0167\7\6\2\2\u0167\u0174\5\"\22\2\u0168\u016d\5\"\22")
        buf.write("\2\u0169\u016a\7\62\2\2\u016a\u016c\5\"\22\2\u016b\u0169")
        buf.write("\3\2\2\2\u016c\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d")
        buf.write("\u016e\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d\3\2\2\2")
        buf.write("\u0170\u0172\7\62\2\2\u0171\u0170\3\2\2\2\u0171\u0172")
        buf.write("\3\2\2\2\u0172\u0174\3\2\2\2\u0173\u0166\3\2\2\2\u0173")
        buf.write("\u0168\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0181\3\2\2\2")
        buf.write("\u0175\u017a\5\"\22\2\u0176\u0177\7\62\2\2\u0177\u0179")
        buf.write("\5\"\22\2\u0178\u0176\3\2\2\2\u0179\u017c\3\2\2\2\u017a")
        buf.write("\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017e\3\2\2\2")
        buf.write("\u017c\u017a\3\2\2\2\u017d\u017f\7\62\2\2\u017e\u017d")
        buf.write("\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0181\3\2\2\2\u0180")
        buf.write("\u0165\3\2\2\2\u0180\u0175\3\2\2\2\u0181\u0189\3\2\2\2")
        buf.write("\u0182\u0184\5\f\7\2\u0183\u0182\3\2\2\2\u0184\u0187\3")
        buf.write("\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0189")
        buf.write("\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u0164\3\2\2\2\u0188")
        buf.write("\u0185\3\2\2\2\u0189\u022e\3\2\2\2\u018a\u018c\7 \2\2")
        buf.write("\u018b\u018d\7/\2\2\u018c\u018b\3\2\2\2\u018c\u018d\3")
        buf.write("\2\2\2\u018d\u018e\3\2\2\2\u018e\u0196\5,\27\2\u018f\u0191")
        buf.write("\7\62\2\2\u0190\u0192\7/\2\2\u0191\u0190\3\2\2\2\u0191")
        buf.write("\u0192\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0195\5,\27\2")
        buf.write("\u0194\u018f\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3")
        buf.write("\2\2\2\u0196\u0197\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196")
        buf.write("\3\2\2\2\u0199\u019b\7\62\2\2\u019a\u0199\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u022e\3\2\2\2\u019c\u022e\t\2\2\2")
        buf.write("\u019d\u022e\5\20\t\2\u019e\u01aa\7\4\2\2\u019f\u01a4")
        buf.write("\5\"\22\2\u01a0\u01a1\7\62\2\2\u01a1\u01a3\5\"\22\2\u01a2")
        buf.write("\u01a0\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2")
        buf.write("\u01a4\u01a5\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3")
        buf.write("\2\2\2\u01a7\u01a9\7\62\2\2\u01a8\u01a7\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u019f\3\2\2\2")
        buf.write("\u01aa\u01ab\3\2\2\2\u01ab\u022e\3\2\2\2\u01ac\u022e\5")
        buf.write("\22\n\2\u01ad\u01bb\7\37\2\2\u01ae\u01af\7\6\2\2\u01af")
        buf.write("\u01bc\5\"\22\2\u01b0\u01b5\5\"\22\2\u01b1\u01b2\7\62")
        buf.write("\2\2\u01b2\u01b4\5\"\22\2\u01b3\u01b1\3\2\2\2\u01b4\u01b7")
        buf.write("\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6")
        buf.write("\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01ba\7\62\2")
        buf.write("\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc")
        buf.write("\3\2\2\2\u01bb\u01ae\3\2\2\2\u01bb\u01b0\3\2\2\2\u01bb")
        buf.write("\u01bc\3\2\2\2\u01bc\u022e\3\2\2\2\u01bd\u01be\7\7\2\2")
        buf.write("\u01be\u01c3\7%\2\2\u01bf\u01c0\7-\2\2\u01c0\u01c2\7%")
        buf.write("\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c8\3\2\2\2\u01c5")
        buf.write("\u01c3\3\2\2\2\u01c6\u01c7\7\b\2\2\u01c7\u01c9\7%\2\2")
        buf.write("\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01d9\3")
        buf.write("\2\2\2\u01ca\u01cb\7\62\2\2\u01cb\u01d0\7%\2\2\u01cc\u01cd")
        buf.write("\7-\2\2\u01cd\u01cf\7%\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1")
        buf.write("\u01d5\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01d4\7\b\2\2")
        buf.write("\u01d4\u01d6\7%\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3")
        buf.write("\2\2\2\u01d6\u01d8\3\2\2\2\u01d7\u01ca\3\2\2\2\u01d8\u01db")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u022e\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01f0\7\6\2\2")
        buf.write("\u01dd\u01df\t\3\2\2\u01de\u01dd\3\2\2\2\u01df\u01e2\3")
        buf.write("\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3\u01e8\7%\2\2\u01e4")
        buf.write("\u01e5\7-\2\2\u01e5\u01e7\7%\2\2\u01e6\u01e4\3\2\2\2\u01e7")
        buf.write("\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2")
        buf.write("\u01e9\u01f1\3\2\2\2\u01ea\u01e8\3\2\2\2\u01eb\u01ed\t")
        buf.write("\3\2\2\u01ec\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ec")
        buf.write("\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1\3\2\2\2\u01f0")
        buf.write("\u01e0\3\2\2\2\u01f0\u01ec\3\2\2\2\u01f1\u01f2\3\2\2\2")
        buf.write("\u01f2\u021c\7\7\2\2\u01f3\u021d\7/\2\2\u01f4\u01f5\7")
        buf.write("\60\2\2\u01f5\u01f8\7%\2\2\u01f6\u01f7\7\b\2\2\u01f7\u01f9")
        buf.write("\7%\2\2\u01f8\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u0202\3\2\2\2\u01fa\u01fb\7\62\2\2\u01fb\u01fe\7%\2\2")
        buf.write("\u01fc\u01fd\7\b\2\2\u01fd\u01ff\7%\2\2\u01fe\u01fc\3")
        buf.write("\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2\u0200\u01fa")
        buf.write("\3\2\2\2\u0201\u0204\3\2\2\2\u0202\u0200\3\2\2\2\u0202")
        buf.write("\u0203\3\2\2\2\u0203\u0206\3\2\2\2\u0204\u0202\3\2\2\2")
        buf.write("\u0205\u0207\7\62\2\2\u0206\u0205\3\2\2\2\u0206\u0207")
        buf.write("\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u021d\7\61\2\2\u0209")
        buf.write("\u020c\7%\2\2\u020a\u020b\7\b\2\2\u020b\u020d\7%\2\2\u020c")
        buf.write("\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0216\3\2\2\2")
        buf.write("\u020e\u020f\7\62\2\2\u020f\u0212\7%\2\2\u0210\u0211\7")
        buf.write("\b\2\2\u0211\u0213\7%\2\2\u0212\u0210\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u0215\3\2\2\2\u0214\u020e\3\2\2\2\u0215")
        buf.write("\u0218\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217\3\2\2\2")
        buf.write("\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0219\u021b\7")
        buf.write("\62\2\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\u021d\3\2\2\2\u021c\u01f3\3\2\2\2\u021c\u01f4\3\2\2\2")
        buf.write("\u021c\u0209\3\2\2\2\u021d\u022e\3\2\2\2\u021e\u021f\t")
        buf.write("\4\2\2\u021f\u0224\7%\2\2\u0220\u0221\7\62\2\2\u0221\u0223")
        buf.write("\7%\2\2\u0222\u0220\3\2\2\2\u0223\u0226\3\2\2\2\u0224")
        buf.write("\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u022e\3\2\2\2")
        buf.write("\u0226\u0224\3\2\2\2\u0227\u0228\7\13\2\2\u0228\u022b")
        buf.write("\5\"\22\2\u0229\u022a\7\62\2\2\u022a\u022c\5\"\22\2\u022b")
        buf.write("\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022e\3\2\2\2")
        buf.write("\u022d\u0152\3\2\2\2\u022d\u018a\3\2\2\2\u022d\u019c\3")
        buf.write("\2\2\2\u022d\u019d\3\2\2\2\u022d\u019e\3\2\2\2\u022d\u01ac")
        buf.write("\3\2\2\2\u022d\u01ad\3\2\2\2\u022d\u01bd\3\2\2\2\u022d")
        buf.write("\u01dc\3\2\2\2\u022d\u021e\3\2\2\2\u022d\u0227\3\2\2\2")
        buf.write("\u022e\13\3\2\2\2\u022f\u0257\7\66\2\2\u0230\u023e\7\37")
        buf.write("\2\2\u0231\u0232\7\6\2\2\u0232\u023f\5\"\22\2\u0233\u0238")
        buf.write("\5\"\22\2\u0234\u0235\7\62\2\2\u0235\u0237\5\"\22\2\u0236")
        buf.write("\u0234\3\2\2\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2")
        buf.write("\u0238\u0239\3\2\2\2\u0239\u023c\3\2\2\2\u023a\u0238\3")
        buf.write("\2\2\2\u023b\u023d\7\62\2\2\u023c\u023b\3\2\2\2\u023c")
        buf.write("\u023d\3\2\2\2\u023d\u023f\3\2\2\2\u023e\u0231\3\2\2\2")
        buf.write("\u023e\u0233\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0258\3")
        buf.write("\2\2\2\u0240\u0246\5\"\22\2\u0241\u0243\7/\2\2\u0242\u0241")
        buf.write("\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244\3\2\2\2\u0244")
        buf.write("\u0246\5,\27\2\u0245\u0240\3\2\2\2\u0245\u0242\3\2\2\2")
        buf.write("\u0246\u0251\3\2\2\2\u0247\u024d\7\62\2\2\u0248\u024e")
        buf.write("\5\"\22\2\u0249\u024b\7/\2\2\u024a\u0249\3\2\2\2\u024a")
        buf.write("\u024b\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024e\5,\27\2")
        buf.write("\u024d\u0248\3\2\2\2\u024d\u024a\3\2\2\2\u024e\u0250\3")
        buf.write("\2\2\2\u024f\u0247\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0255\3\2\2\2\u0253")
        buf.write("\u0251\3\2\2\2\u0254\u0256\7\62\2\2\u0255\u0254\3\2\2")
        buf.write("\2\u0255\u0256\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0230")
        buf.write("\3\2\2\2\u0257\u0245\3\2\2\2\u0258\r\3\2\2\2\u0259\u025a")
        buf.write("\t\5\2\2\u025a\17\3\2\2\2\u025b\u025c\7#\2\2\u025c\21")
        buf.write("\3\2\2\2\u025d\u0263\7\5\2\2\u025e\u0261\5\"\22\2\u025f")
        buf.write("\u0260\7\6\2\2\u0260\u0262\5\"\22\2\u0261\u025f\3\2\2")
        buf.write("\2\u0261\u0262\3\2\2\2\u0262\u0264\3\2\2\2\u0263\u025e")
        buf.write("\3\2\2\2\u0263\u0264\3\2\2\2\u0264\23\3\2\2\2\u0265\u0266")
        buf.write("\7\f\2\2\u0266\u0267\5\"\22\2\u0267\u0268\7\63\2\2\u0268")
        buf.write("\u0270\5 \21\2\u0269\u026a\7\r\2\2\u026a\u026b\5\"\22")
        buf.write("\2\u026b\u026c\7\63\2\2\u026c\u026d\5 \21\2\u026d\u026f")
        buf.write("\3\2\2\2\u026e\u0269\3\2\2\2\u026f\u0272\3\2\2\2\u0270")
        buf.write("\u026e\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0274\3\2\2\2")
        buf.write("\u0272\u0270\3\2\2\2\u0273\u0275\5\26\f\2\u0274\u0273")
        buf.write("\3\2\2\2\u0274\u0275\3\2\2\2\u0275\25\3\2\2\2\u0276\u0277")
        buf.write("\7\16\2\2\u0277\u0278\7\63\2\2\u0278\u0279\5 \21\2\u0279")
        buf.write("\27\3\2\2\2\u027a\u027b\7\17\2\2\u027b\u027c\5\"\22\2")
        buf.write("\u027c\u027d\7\63\2\2\u027d\u027f\5 \21\2\u027e\u0280")
        buf.write("\5\26\f\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280")
        buf.write("\31\3\2\2\2\u0281\u0283\7\20\2\2\u0282\u0284\7/\2\2\u0283")
        buf.write("\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u028d\5,\27\2\u0286\u0288\7\62\2\2\u0287\u0289")
        buf.write("\7/\2\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028c\5,\27\2\u028b\u0286\3\2\2\2")
        buf.write("\u028c\u028f\3\2\2\2\u028d\u028b\3\2\2\2\u028d\u028e\3")
        buf.write("\2\2\2\u028e\u0291\3\2\2\2\u028f\u028d\3\2\2\2\u0290\u0292")
        buf.write("\7\62\2\2\u0291\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0294\7\21\2\2\u0294\u0299\5\"\22")
        buf.write("\2\u0295\u0296\7\62\2\2\u0296\u0298\5\"\22\2\u0297\u0295")
        buf.write("\3\2\2\2\u0298\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2")
        buf.write("\u029c\u029e\7\62\2\2\u029d\u029c\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\7\63\2\2\u02a0")
        buf.write("\u02a2\5 \21\2\u02a1\u02a3\5\26\f\2\u02a2\u02a1\3\2\2")
        buf.write("\2\u02a2\u02a3\3\2\2\2\u02a3\33\3\2\2\2\u02a4\u02a5\7")
        buf.write("\22\2\2\u02a5\u02a6\7\63\2\2\u02a6\u02ba\5 \21\2\u02a7")
        buf.write("\u02a8\5\36\20\2\u02a8\u02a9\7\63\2\2\u02a9\u02aa\5 \21")
        buf.write("\2\u02aa\u02ac\3\2\2\2\u02ab\u02a7\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae")
        buf.write("\u02b0\3\2\2\2\u02af\u02b1\5\26\f\2\u02b0\u02af\3\2\2")
        buf.write("\2\u02b0\u02b1\3\2\2\2\u02b1\u02b5\3\2\2\2\u02b2\u02b3")
        buf.write("\7\23\2\2\u02b3\u02b4\7\63\2\2\u02b4\u02b6\5 \21\2\u02b5")
        buf.write("\u02b2\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02bb\3\2\2\2")
        buf.write("\u02b7\u02b8\7\23\2\2\u02b8\u02b9\7\63\2\2\u02b9\u02bb")
        buf.write("\5 \21\2\u02ba\u02ab\3\2\2\2\u02ba\u02b7\3\2\2\2\u02bb")
        buf.write("\35\3\2\2\2\u02bc\u02c2\7\25\2\2\u02bd\u02c0\5\"\22\2")
        buf.write("\u02be\u02bf\7\b\2\2\u02bf\u02c1\7%\2\2\u02c0\u02be\3")
        buf.write("\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02bd")
        buf.write("\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\37\3\2\2\2\u02c4\u02c9")
        buf.write("\5\n\6\2\u02c5\u02c6\7\64\2\2\u02c6\u02c8\5\n\6\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c8\u02cb\3\2\2\2\u02c9\u02c7\3\2\2\2")
        buf.write("\u02c9\u02ca\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3")
        buf.write("\2\2\2\u02cc\u02ce\7\64\2\2\u02cd\u02cc\3\2\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\7$\2\2")
        buf.write("\u02d0\u02db\3\2\2\2\u02d1\u02d2\7$\2\2\u02d2\u02d4\7")
        buf.write("^\2\2\u02d3\u02d5\5\b\5\2\u02d4\u02d3\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8\u02d9\7_\2\2\u02d9\u02db\3\2\2\2")
        buf.write("\u02da\u02c4\3\2\2\2\u02da\u02d1\3\2\2\2\u02db!\3\2\2")
        buf.write("\2\u02dc\u02e2\5&\24\2\u02dd\u02de\7\f\2\2\u02de\u02df")
        buf.write("\5&\24\2\u02df\u02e0\7\16\2\2\u02e0\u02e1\5\"\22\2\u02e1")
        buf.write("\u02e3\3\2\2\2\u02e2\u02dd\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02eb\3\2\2\2\u02e4\u02e6\7\26\2\2\u02e5\u02e7")
        buf.write("\5\6\4\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8\u02e9\7\63\2\2\u02e9\u02eb\5\"\22")
        buf.write("\2\u02ea\u02dc\3\2\2\2\u02ea\u02e4\3\2\2\2\u02eb#\3\2")
        buf.write("\2\2\u02ec\u02f4\5&\24\2\u02ed\u02ef\7\26\2\2\u02ee\u02f0")
        buf.write("\5\6\4\2\u02ef\u02ee\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0")
        buf.write("\u02f1\3\2\2\2\u02f1\u02f2\7\63\2\2\u02f2\u02f4\5$\23")
        buf.write("\2\u02f3\u02ec\3\2\2\2\u02f3\u02ed\3\2\2\2\u02f4%\3\2")
        buf.write("\2\2\u02f5\u02fa\5(\25\2\u02f6\u02f7\t\6\2\2\u02f7\u02f9")
        buf.write("\5(\25\2\u02f8\u02f6\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa")
        buf.write("\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\'\3\2\2\2\u02fc")
        buf.write("\u02fa\3\2\2\2\u02fd\u02fe\7\31\2\2\u02fe\u030f\5(\25")
        buf.write("\2\u02ff\u0301\7/\2\2\u0300\u02ff\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u030b\5,\27\2\u0303")
        buf.write("\u0305\5*\26\2\u0304\u0306\7/\2\2\u0305\u0304\3\2\2\2")
        buf.write("\u0305\u0306\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308\5")
        buf.write(",\27\2\u0308\u030a\3\2\2\2\u0309\u0303\3\2\2\2\u030a\u030d")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c")
        buf.write("\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u02fd\3\2\2\2")
        buf.write("\u030e\u0300\3\2\2\2\u030f)\3\2\2\2\u0310\u031e\7F\2\2")
        buf.write("\u0311\u031e\7G\2\2\u0312\u031e\7H\2\2\u0313\u031e\7I")
        buf.write("\2\2\u0314\u031e\7J\2\2\u0315\u031e\7K\2\2\u0316\u031e")
        buf.write("\7L\2\2\u0317\u031e\7\21\2\2\u0318\u0319\7\31\2\2\u0319")
        buf.write("\u031e\7\21\2\2\u031a\u031e\7\32\2\2\u031b\u031c\7\32")
        buf.write("\2\2\u031c\u031e\7\31\2\2\u031d\u0310\3\2\2\2\u031d\u0311")
        buf.write("\3\2\2\2\u031d\u0312\3\2\2\2\u031d\u0313\3\2\2\2\u031d")
        buf.write("\u0314\3\2\2\2\u031d\u0315\3\2\2\2\u031d\u0316\3\2\2\2")
        buf.write("\u031d\u0317\3\2\2\2\u031d\u0318\3\2\2\2\u031d\u031a\3")
        buf.write("\2\2\2\u031d\u031b\3\2\2\2\u031e+\3\2\2\2\u031f\u0324")
        buf.write("\5.\30\2\u0320\u0321\t\7\2\2\u0321\u0323\5.\30\2\u0322")
        buf.write("\u0320\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322\3\2\2\2")
        buf.write("\u0324\u0325\3\2\2\2\u0325-\3\2\2\2\u0326\u0324\3\2\2")
        buf.write("\2\u0327\u0328\t\b\2\2\u0328\u0336\5.\30\2\u0329\u0336")
        buf.write("\5\60\31\2\u032a\u032e\5\62\32\2\u032b\u032d\5\64\33\2")
        buf.write("\u032c\u032b\3\2\2\2\u032d\u0330\3\2\2\2\u032e\u032c\3")
        buf.write("\2\2\2\u032e\u032f\3\2\2\2\u032f\u0333\3\2\2\2\u0330\u032e")
        buf.write("\3\2\2\2\u0331\u0332\7\65\2\2\u0332\u0334\5.\30\2\u0333")
        buf.write("\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2")
        buf.write("\u0335\u0327\3\2\2\2\u0335\u0329\3\2\2\2\u0335\u032a\3")
        buf.write("\2\2\2\u0336/\3\2\2\2\u0337\u0338\b\31\1\2\u0338\u0339")
        buf.write("\7%\2\2\u0339\u033b\7\60\2\2\u033a\u033c\5:\36\2\u033b")
        buf.write("\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\3\2\2\2")
        buf.write("\u033d\u033e\7\61\2\2\u033e\u0347\3\2\2\2\u033f\u0340")
        buf.write("\f\3\2\2\u0340\u0342\7\60\2\2\u0341\u0343\5:\36\2\u0342")
        buf.write("\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u0346\7\61\2\2\u0345\u033f\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\61\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u0369\7\60\2\2\u034b")
        buf.write("\u0359\7\37\2\2\u034c\u034d\7\6\2\2\u034d\u035a\5\"\22")
        buf.write("\2\u034e\u0353\5\"\22\2\u034f\u0350\7\62\2\2\u0350\u0352")
        buf.write("\5\"\22\2\u0351\u034f\3\2\2\2\u0352\u0355\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0357\3\2\2\2")
        buf.write("\u0355\u0353\3\2\2\2\u0356\u0358\7\62\2\2\u0357\u0356")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\3\2\2\2\u0359")
        buf.write("\u034c\3\2\2\2\u0359\u034e\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u036a\3\2\2\2\u035b\u0367\5\"\22\2\u035c\u0368")
        buf.write("\5> \2\u035d\u035e\7\62\2\2\u035e\u0360\5\"\22\2\u035f")
        buf.write("\u035d\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2")
        buf.write("\u0361\u0362\3\2\2\2\u0362\u0365\3\2\2\2\u0363\u0361\3")
        buf.write("\2\2\2\u0364\u0366\7\62\2\2\u0365\u0364\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u035c\3\2\2\2")
        buf.write("\u0367\u0361\3\2\2\2\u0368\u036a\3\2\2\2\u0369\u034b\3")
        buf.write("\2\2\2\u0369\u035b\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b")
        buf.write("\3\2\2\2\u036b\u0396\7\61\2\2\u036c\u037b\7\67\2\2\u036d")
        buf.write("\u0379\5\"\22\2\u036e\u037a\5> \2\u036f\u0370\7\62\2\2")
        buf.write("\u0370\u0372\5\"\22\2\u0371\u036f\3\2\2\2\u0372\u0375")
        buf.write("\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0378\7\62\2")
        buf.write("\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a")
        buf.write("\3\2\2\2\u0379\u036e\3\2\2\2\u0379\u0373\3\2\2\2\u037a")
        buf.write("\u037c\3\2\2\2\u037b\u036d\3\2\2\2\u037b\u037c\3\2\2\2")
        buf.write("\u037c\u037d\3\2\2\2\u037d\u0396\78\2\2\u037e\u0380\7")
        buf.write("D\2\2\u037f\u0381\58\35\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0396\7E\2\2\u0383")
        buf.write("\u0394\7%\2\2\u0384\u0394\7\'\2\2\u0385\u0394\7(\2\2\u0386")
        buf.write("\u0394\7)\2\2\u0387\u0394\7*\2\2\u0388\u0394\7+\2\2\u0389")
        buf.write("\u0394\7,\2\2\u038a\u038c\7&\2\2\u038b\u038a\3\2\2\2\u038c")
        buf.write("\u038d\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\u0394\3\2\2\2\u038f\u0394\7.\2\2\u0390\u0394\7")
        buf.write("\33\2\2\u0391\u0394\7\34\2\2\u0392\u0394\7\35\2\2\u0393")
        buf.write("\u0383\3\2\2\2\u0393\u0384\3\2\2\2\u0393\u0385\3\2\2\2")
        buf.write("\u0393\u0386\3\2\2\2\u0393\u0387\3\2\2\2\u0393\u0388\3")
        buf.write("\2\2\2\u0393\u0389\3\2\2\2\u0393\u038b\3\2\2\2\u0393\u038f")
        buf.write("\3\2\2\2\u0393\u0390\3\2\2\2\u0393\u0391\3\2\2\2\u0393")
        buf.write("\u0392\3\2\2\2\u0394\u0396\3\2\2\2\u0395\u034a\3\2\2\2")
        buf.write("\u0395\u036c\3\2\2\2\u0395\u037e\3\2\2\2\u0395\u0393\3")
        buf.write("\2\2\2\u0396\63\3\2\2\2\u0397\u0399\7\60\2\2\u0398\u039a")
        buf.write("\5:\36\2\u0399\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a")
        buf.write("\u039b\3\2\2\2\u039b\u03ad\7\61\2\2\u039c\u039d\7\67\2")
        buf.write("\2\u039d\u03a2\5\66\34\2\u039e\u039f\7\62\2\2\u039f\u03a1")
        buf.write("\5\66\34\2\u03a0\u039e\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2")
        buf.write("\u03a4\u03a2\3\2\2\2\u03a5\u03a7\7\62\2\2\u03a6\u03a5")
        buf.write("\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8")
        buf.write("\u03a9\78\2\2\u03a9\u03ad\3\2\2\2\u03aa\u03ab\7-\2\2\u03ab")
        buf.write("\u03ad\7%\2\2\u03ac\u0397\3\2\2\2\u03ac\u039c\3\2\2\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ad\65\3\2\2\2\u03ae\u03bd\5\"")
        buf.write("\22\2\u03af\u03b1\5\"\22\2\u03b0\u03af\3\2\2\2\u03b0\u03b1")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4\7\63\2\2\u03b3")
        buf.write("\u03b5\5\"\22\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2")
        buf.write("\2\u03b5\u03ba\3\2\2\2\u03b6\u03b8\7\63\2\2\u03b7\u03b9")
        buf.write("\5\"\22\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03bb\3\2\2\2\u03ba\u03b6\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03ae\3\2\2\2\u03bc\u03b0\3")
        buf.write("\2\2\2\u03bd\67\3\2\2\2\u03be\u03dd\5\"\22\2\u03bf\u03c0")
        buf.write("\7\63\2\2\u03c0\u03c2\5\"\22\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03de\5> \2\u03c4")
        buf.write("\u03c5\7\63\2\2\u03c5\u03cd\5\"\22\2\u03c6\u03c7\7\62")
        buf.write("\2\2\u03c7\u03c8\5\"\22\2\u03c8\u03c9\7\63\2\2\u03c9\u03ca")
        buf.write("\5\"\22\2\u03ca\u03cc\3\2\2\2\u03cb\u03c6\3\2\2\2\u03cc")
        buf.write("\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2")
        buf.write("\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d2\7")
        buf.write("\62\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("\u03de\3\2\2\2\u03d3\u03d4\7\62\2\2\u03d4\u03d6\5\"\22")
        buf.write("\2\u03d5\u03d3\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03da\u03dc\7\62\2\2\u03db\u03da\3\2\2")
        buf.write("\2\u03db\u03dc\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03c1")
        buf.write("\3\2\2\2\u03dd\u03c4\3\2\2\2\u03dd\u03d7\3\2\2\2\u03de")
        buf.write("9\3\2\2\2\u03df\u03e5\5\"\22\2\u03e0\u03e2\5> \2\u03e1")
        buf.write("\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e6\3\2\2\2")
        buf.write("\u03e3\u03e4\7\66\2\2\u03e4\u03e6\5\"\22\2\u03e5\u03e1")
        buf.write("\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u03e8\7\62\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03df\3\2\2")
        buf.write("\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u0410\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee")
        buf.write("\u03f4\5\"\22\2\u03ef\u03f1\5> \2\u03f0\u03ef\3\2\2\2")
        buf.write("\u03f0\u03f1\3\2\2\2\u03f1\u03f5\3\2\2\2\u03f2\u03f3\7")
        buf.write("\66\2\2\u03f3\u03f5\5\"\22\2\u03f4\u03f0\3\2\2\2\u03f4")
        buf.write("\u03f2\3\2\2\2\u03f5\u03f7\3\2\2\2\u03f6\u03f8\7\62\2")
        buf.write("\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u0411")
        buf.write("\3\2\2\2\u03f9\u03fa\7/\2\2\u03fa\u0406\5\"\22\2\u03fb")
        buf.write("\u03fc\7\62\2\2\u03fc\u0402\5\"\22\2\u03fd\u03ff\5> \2")
        buf.write("\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0403\3")
        buf.write("\2\2\2\u0400\u0401\7\66\2\2\u0401\u0403\5\"\22\2\u0402")
        buf.write("\u03fe\3\2\2\2\u0402\u0400\3\2\2\2\u0403\u0405\3\2\2\2")
        buf.write("\u0404\u03fb\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0404\3")
        buf.write("\2\2\2\u0406\u0407\3\2\2\2\u0407\u040c\3\2\2\2\u0408\u0406")
        buf.write("\3\2\2\2\u0409\u040a\7\62\2\2\u040a\u040b\7\65\2\2\u040b")
        buf.write("\u040d\5\"\22\2\u040c\u0409\3\2\2\2\u040c\u040d\3\2\2")
        buf.write("\2\u040d\u0411\3\2\2\2\u040e\u040f\7\65\2\2\u040f\u0411")
        buf.write("\5\"\22\2\u0410\u03ee\3\2\2\2\u0410\u03f9\3\2\2\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411;\3\2\2\2\u0412\u0419\5> \2\u0413")
        buf.write("\u0414\7\f\2\2\u0414\u0416\5$\23\2\u0415\u0417\5<\37\2")
        buf.write("\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0419\3")
        buf.write("\2\2\2\u0418\u0412\3\2\2\2\u0418\u0413\3\2\2\2\u0419=")
        buf.write("\3\2\2\2\u041a\u041c\7\20\2\2\u041b\u041d\7/\2\2\u041c")
        buf.write("\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e\3\2\2\2")
        buf.write("\u041e\u0426\5,\27\2\u041f\u0421\7\62\2\2\u0420\u0422")
        buf.write("\7/\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422")
        buf.write("\u0423\3\2\2\2\u0423\u0425\5,\27\2\u0424\u041f\3\2\2\2")
        buf.write("\u0425\u0428\3\2\2\2\u0426\u0424\3\2\2\2\u0426\u0427\3")
        buf.write("\2\2\2\u0427\u042a\3\2\2\2\u0428\u0426\3\2\2\2\u0429\u042b")
        buf.write("\7\62\2\2\u042a\u0429\3\2\2\2\u042a\u042b\3\2\2\2\u042b")
        buf.write("\u042c\3\2\2\2\u042c\u042d\7\21\2\2\u042d\u042f\5&\24")
        buf.write("\2\u042e\u0430\5<\37\2\u042f\u042e\3\2\2\2\u042f\u0430")
        buf.write("\3\2\2\2\u0430?\3\2\2\2\u00c9BDLPVZ^fhnrv~\u0080\u0086")
        buf.write("\u0088\u008a\u0090\u0092\u0098\u009c\u00a0\u00a8\u00aa")
        buf.write("\u00b0\u00b2\u00b7\u00bd\u00c1\u00c7\u00cd\u00d1\u00d7")
        buf.write("\u00db\u00dd\u00e1\u00e7\u00eb\u00f1\u00f5\u00fc\u0100")
        buf.write("\u0103\u010d\u0113\u0117\u0123\u0128\u012b\u0130\u0137")
        buf.write("\u013a\u0140\u0145\u0147\u014b\u014f\u0152\u0157\u015a")
        buf.write("\u015e\u0162\u016d\u0171\u0173\u017a\u017e\u0180\u0185")
        buf.write("\u0188\u018c\u0191\u0196\u019a\u01a4\u01a8\u01aa\u01b5")
        buf.write("\u01b9\u01bb\u01c3\u01c8\u01d0\u01d5\u01d9\u01e0\u01e8")
        buf.write("\u01ee\u01f0\u01f8\u01fe\u0202\u0206\u020c\u0212\u0216")
        buf.write("\u021a\u021c\u0224\u022b\u022d\u0238\u023c\u023e\u0242")
        buf.write("\u0245\u024a\u024d\u0251\u0255\u0257\u0261\u0263\u0270")
        buf.write("\u0274\u027f\u0283\u0288\u028d\u0291\u0299\u029d\u02a2")
        buf.write("\u02ad\u02b0\u02b5\u02ba\u02c0\u02c2\u02c9\u02cd\u02d6")
        buf.write("\u02da\u02e2\u02e6\u02ea\u02ef\u02f3\u02fa\u0300\u0305")
        buf.write("\u030b\u030e\u031d\u0324\u032e\u0333\u0335\u033b\u0342")
        buf.write("\u0347\u0353\u0357\u0359\u0361\u0365\u0367\u0369\u0373")
        buf.write("\u0377\u0379\u037b\u0380\u038d\u0393\u0395\u0399\u03a2")
        buf.write("\u03a6\u03ac\u03b0\u03b4\u03b8\u03ba\u03bc\u03c1\u03cd")
        buf.write("\u03d1\u03d7\u03db\u03dd\u03e1\u03e5\u03eb\u03f0\u03f4")
        buf.write("\u03f7\u03fe\u0402\u0406\u040c\u0410\u0416\u0418\u041c")
        buf.write("\u0421\u0426\u042a\u042f")
        return buf.getvalue()


class Python3Parser(Parser):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'...'",
                    "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='",
                    "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'",
                    "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'",
                    "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='",
                    "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='",
                    "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='",
                    "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_BYTES_LITERAL",
                     "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER",
                     "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS",
                     "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON",
                     "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK",
                     "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT",
                     "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE",
                     "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS",
                     "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW",
                     "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN",
                     "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN",
                     "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN",
                     "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR",
                     "INDENT", "DEDENT"]

    RULE_file_input = 0
    RULE_typedargslist = 1
    RULE_varargslist = 2
    RULE_stmt = 3
    RULE_small_stmt = 4
    RULE_assign = 5
    RULE_augassign = 6
    RULE_break_stmt = 7
    RULE_raise_stmt = 8
    RULE_if_stmt = 9
    RULE_else_suite = 10
    RULE_while_stmt = 11
    RULE_for_stmt = 12
    RULE_try_stmt = 13
    RULE_except_clause = 14
    RULE_suite = 15
    RULE_test = 16
    RULE_test_nocond = 17
    RULE_or_test = 18
    RULE_not_test = 19
    RULE_comp_op = 20
    RULE_expr = 21
    RULE_factor = 22
    RULE_call = 23
    RULE_atom = 24
    RULE_trailer = 25
    RULE_subscript = 26
    RULE_dictorsetmaker = 27
    RULE_arglist = 28
    RULE_comp_iter = 29
    RULE_comp_for = 30

    ruleNames = ["file_input", "typedargslist", "varargslist", "stmt",
                 "small_stmt", "assign", "augassign", "break_stmt", "raise_stmt",
                 "if_stmt", "else_suite", "while_stmt", "for_stmt", "try_stmt",
                 "except_clause", "suite", "test", "test_nocond", "or_test",
                 "not_test", "comp_op", "expr", "factor", "call", "atom",
                 "trailer", "subscript", "dictorsetmaker", "arglist",
                 "comp_iter", "comp_for"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_BYTES_LITERAL = 36
    DECIMAL_INTEGER = 37
    OCT_INTEGER = 38
    HEX_INTEGER = 39
    BIN_INTEGER = 40
    FLOAT_NUMBER = 41
    IMAG_NUMBER = 42
    DOT = 43
    ELLIPSIS = 44
    STAR = 45
    OPEN_PAREN = 46
    CLOSE_PAREN = 47
    COMMA = 48
    COLON = 49
    SEMI_COLON = 50
    POWER = 51
    ASSIGN = 52
    OPEN_BRACK = 53
    CLOSE_BRACK = 54
    OR_OP = 55
    XOR = 56
    AND_OP = 57
    LEFT_SHIFT = 58
    RIGHT_SHIFT = 59
    ADD = 60
    MINUS = 61
    DIV = 62
    MOD = 63
    IDIV = 64
    NOT_OP = 65
    OPEN_BRACE = 66
    CLOSE_BRACE = 67
    LESS_THAN = 68
    GREATER_THAN = 69
    EQUALS = 70
    GT_EQ = 71
    LT_EQ = 72
    NOT_EQ_1 = 73
    NOT_EQ_2 = 74
    AT = 75
    ARROW = 76
    ADD_ASSIGN = 77
    SUB_ASSIGN = 78
    MULT_ASSIGN = 79
    AT_ASSIGN = 80
    DIV_ASSIGN = 81
    MOD_ASSIGN = 82
    AND_ASSIGN = 83
    OR_ASSIGN = 84
    XOR_ASSIGN = 85
    LEFT_SHIFT_ASSIGN = 86
    RIGHT_SHIFT_ASSIGN = 87
    POWER_ASSIGN = 88
    IDIV_ASSIGN = 89
    SKIP_ = 90
    UNKNOWN_CHAR = 91
    INDENT = 92
    DEDENT = 93

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 66
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                    1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                            1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (
                            1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (
                            1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                            1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (
                            1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (
                            1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                            1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                            1 << Python3Parser.STRING_BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                            1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                            1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                            1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                            1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (
                            1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (
                            1 << Python3Parser.MINUS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                    1 << (Python3Parser.AT - 65)))) != 0):
                self.state = 64
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NEWLINE:
                    self.state = 62
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM,
                               Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT,
                               Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY,
                               Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE,
                               Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD,
                               Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK,
                               Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                               Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                               Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE,
                               Python3Parser.AT]:
                    self.state = 63
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 68
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 69
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 71
                self.match(Python3Parser.NAME)
                self.state = 74
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 72
                    self.match(Python3Parser.COLON)
                    self.state = 73
                    self.test()

                self.state = 78
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 76
                    self.match(Python3Parser.ASSIGN)
                    self.state = 77
                    self.test()

                self.state = 92
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 80
                        self.match(Python3Parser.COMMA)
                        self.state = 81
                        self.match(Python3Parser.NAME)
                        self.state = 84
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 82
                            self.match(Python3Parser.COLON)
                            self.state = 83
                            self.test()

                        self.state = 88
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 86
                            self.match(Python3Parser.ASSIGN)
                            self.state = 87
                            self.test()

                    self.state = 94
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 95
                    self.match(Python3Parser.COMMA)
                    self.state = 134
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 96
                        self.match(Python3Parser.STAR)
                        self.state = 102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 97
                            self.match(Python3Parser.NAME)
                            self.state = 100
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 98
                                self.match(Python3Parser.COLON)
                                self.state = 99
                                self.test()

                        self.state = 116
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 104
                                self.match(Python3Parser.COMMA)
                                self.state = 105
                                self.match(Python3Parser.NAME)
                                self.state = 108
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.COLON:
                                    self.state = 106
                                    self.match(Python3Parser.COLON)
                                    self.state = 107
                                    self.test()

                                self.state = 112
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 110
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 111
                                    self.test()

                            self.state = 118
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                        self.state = 126
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 119
                            self.match(Python3Parser.COMMA)
                            self.state = 120
                            self.match(Python3Parser.POWER)
                            self.state = 121
                            self.match(Python3Parser.NAME)
                            self.state = 124
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 122
                                self.match(Python3Parser.COLON)
                                self.state = 123
                                self.test()

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 128
                        self.match(Python3Parser.POWER)
                        self.state = 129
                        self.match(Python3Parser.NAME)
                        self.state = 132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 130
                            self.match(Python3Parser.COLON)
                            self.state = 131
                            self.test()

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.match(Python3Parser.STAR)
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 139
                    self.match(Python3Parser.NAME)
                    self.state = 142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 140
                        self.match(Python3Parser.COLON)
                        self.state = 141
                        self.test()

                self.state = 158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 146
                        self.match(Python3Parser.COMMA)
                        self.state = 147
                        self.match(Python3Parser.NAME)
                        self.state = 150
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 148
                            self.match(Python3Parser.COLON)
                            self.state = 149
                            self.test()

                        self.state = 154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 152
                            self.match(Python3Parser.ASSIGN)
                            self.state = 153
                            self.test()

                    self.state = 160
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 161
                    self.match(Python3Parser.COMMA)
                    self.state = 162
                    self.match(Python3Parser.POWER)
                    self.state = 163
                    self.match(Python3Parser.NAME)
                    self.state = 166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 164
                        self.match(Python3Parser.COLON)
                        self.state = 165
                        self.test()

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 170
                self.match(Python3Parser.POWER)
                self.state = 171
                self.match(Python3Parser.NAME)
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 172
                    self.match(Python3Parser.COLON)
                    self.state = 173
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.match(Python3Parser.NAME)
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 179
                    self.match(Python3Parser.ASSIGN)
                    self.state = 180
                    self.test()

                self.state = 191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 183
                        self.match(Python3Parser.COMMA)
                        self.state = 184
                        self.match(Python3Parser.NAME)
                        self.state = 187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 185
                            self.match(Python3Parser.ASSIGN)
                            self.state = 186
                            self.test()

                    self.state = 193
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 194
                    self.match(Python3Parser.COMMA)
                    self.state = 217
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 195
                        self.match(Python3Parser.STAR)
                        self.state = 197
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 196
                            self.match(Python3Parser.NAME)

                        self.state = 207
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 199
                                self.match(Python3Parser.COMMA)
                                self.state = 200
                                self.match(Python3Parser.NAME)
                                self.state = 203
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 201
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 202
                                    self.test()

                            self.state = 209
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

                        self.state = 213
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 210
                            self.match(Python3Parser.COMMA)
                            self.state = 211
                            self.match(Python3Parser.POWER)
                            self.state = 212
                            self.match(Python3Parser.NAME)

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 215
                        self.match(Python3Parser.POWER)
                        self.state = 216
                        self.match(Python3Parser.NAME)
                        pass
                    elif token == Python3Parser.COLON:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.match(Python3Parser.STAR)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 222
                    self.match(Python3Parser.NAME)

                self.state = 233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 225
                        self.match(Python3Parser.COMMA)
                        self.state = 226
                        self.match(Python3Parser.NAME)
                        self.state = 229
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 227
                            self.match(Python3Parser.ASSIGN)
                            self.state = 228
                            self.test()

                    self.state = 235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 236
                    self.match(Python3Parser.COMMA)
                    self.state = 237
                    self.match(Python3Parser.POWER)
                    self.state = 238
                    self.match(Python3Parser.NAME)

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.match(Python3Parser.POWER)
                self.state = 242
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def arglist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArglistContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArglistContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        self._la = 0  # Token type
        try:
            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.small_stmt()
                self.state = 250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 246
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 247
                        self.small_stmt()
                    self.state = 252
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 253
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.match(Python3Parser.NEWLINE)

                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.if_stmt()
                pass
            elif token == Python3Parser.WHILE:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.while_stmt()
                pass
            elif token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 4)
                self.state = 261
                self.for_stmt()
                pass
            elif token == Python3Parser.TRY:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.try_stmt()
                pass
            elif token == Python3Parser.WITH:
                self.enterOuterAlt(localctx, 6)
                self.state = 263
                self.match(Python3Parser.WITH)
                self.state = 264
                self.test()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 265
                    self.match(Python3Parser.AS)
                    self.state = 266
                    self.expr()

                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 269
                    self.match(Python3Parser.COMMA)
                    self.state = 270
                    self.test()
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 271
                        self.match(Python3Parser.AS)
                        self.state = 272
                        self.expr()

                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 280
                self.match(Python3Parser.COLON)
                self.state = 281
                self.suite()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.AT:
                    self.state = 283
                    self.match(Python3Parser.AT)
                    self.state = 284
                    self.match(Python3Parser.NAME)
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 285
                        self.match(Python3Parser.DOT)
                        self.state = 286
                        self.match(Python3Parser.NAME)
                        self.state = 291
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 292
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 293
                            self.arglist()

                        self.state = 296
                        self.match(Python3Parser.CLOSE_PAREN)

                    self.state = 299
                    self.match(Python3Parser.NEWLINE)
                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.CLASS:
                    self.state = 305
                    self.match(Python3Parser.CLASS)
                    self.state = 306
                    self.match(Python3Parser.NAME)
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 307
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 308
                            self.arglist()

                        self.state = 311
                        self.match(Python3Parser.CLOSE_PAREN)

                    pass
                elif token == Python3Parser.DEF:
                    self.state = 314
                    self.match(Python3Parser.DEF)
                    self.state = 315
                    self.match(Python3Parser.NAME)
                    self.state = 316
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                        self.state = 317
                        self.typedargslist()

                    self.state = 320
                    self.match(Python3Parser.CLOSE_PAREN)
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.ARROW:
                        self.state = 321
                        self.match(Python3Parser.ARROW)
                        self.state = 322
                        self.test()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 327
                self.match(Python3Parser.COLON)
                self.state = 328
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSmall_stmt"):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_small_stmt)
        self._la = 0  # Token type
        try:
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 331
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 332
                        self.match(Python3Parser.STAR)

                    self.state = 335
                    self.expr()
                    pass

                self.state = 348
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 338
                        self.match(Python3Parser.COMMA)
                        self.state = 344
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                        if la_ == 1:
                            self.state = 339
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 341
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 340
                                self.match(Python3Parser.STAR)

                            self.state = 343
                            self.expr()
                            pass

                    self.state = 350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 351
                    self.match(Python3Parser.COMMA)

                self.state = 390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                             Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                             Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                             Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN,
                             Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                    self.state = 354
                    self.augassign()
                    self.state = 382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.YIELD:
                        self.state = 355
                        self.match(Python3Parser.YIELD)
                        self.state = 369
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
                        if la_ == 1:
                            self.state = 356
                            self.match(Python3Parser.FROM)
                            self.state = 357
                            self.test()

                        elif la_ == 2:
                            self.state = 358
                            self.test()
                            self.state = 363
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 359
                                    self.match(Python3Parser.COMMA)
                                    self.state = 360
                                    self.test()
                                self.state = 365
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

                            self.state = 367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COMMA:
                                self.state = 366
                                self.match(Python3Parser.COMMA)

                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 371
                        self.test()
                        self.state = 376
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 372
                                self.match(Python3Parser.COMMA)
                                self.state = 373
                                self.test()
                            self.state = 378
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

                        self.state = 380
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 379
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Python3Parser.EOF, Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE,
                               Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL,
                               Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR,
                               Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT,
                               Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS,
                               Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                               Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME,
                               Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                               Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.SEMI_COLON,
                               Python3Parser.ASSIGN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                               Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT, Python3Parser.DEDENT]:
                    self.state = 387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.ASSIGN:
                        self.state = 384
                        self.assign()
                        self.state = 389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == Python3Parser.DEL:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.match(Python3Parser.DEL)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 393
                    self.match(Python3Parser.STAR)

                self.state = 396
                self.expr()
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 397
                        self.match(Python3Parser.COMMA)
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 398
                            self.match(Python3Parser.STAR)

                        self.state = 401
                        self.expr()
                    self.state = 406
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 407
                    self.match(Python3Parser.COMMA)

                pass
            elif token in [Python3Parser.PASS, Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 410
                _la = self._input.LA(1)
                if not (_la == Python3Parser.PASS or _la == Python3Parser.CONTINUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token == Python3Parser.BREAK:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.break_stmt()
                pass
            elif token == Python3Parser.RETURN:
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.match(Python3Parser.RETURN)
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 413
                    self.test()
                    self.state = 418
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 414
                            self.match(Python3Parser.COMMA)
                            self.state = 415
                            self.test()
                        self.state = 420
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 74, self._ctx)

                    self.state = 422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 421
                        self.match(Python3Parser.COMMA)

                pass
            elif token == Python3Parser.RAISE:
                self.enterOuterAlt(localctx, 6)
                self.state = 426
                self.raise_stmt()
                pass
            elif token == Python3Parser.YIELD:
                self.enterOuterAlt(localctx, 7)
                self.state = 427
                self.match(Python3Parser.YIELD)
                self.state = 441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
                if la_ == 1:
                    self.state = 428
                    self.match(Python3Parser.FROM)
                    self.state = 429
                    self.test()

                elif la_ == 2:
                    self.state = 430
                    self.test()
                    self.state = 435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 431
                            self.match(Python3Parser.COMMA)
                            self.state = 432
                            self.test()
                        self.state = 437
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)

                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 438
                        self.match(Python3Parser.COMMA)

                pass
            elif token == Python3Parser.IMPORT:
                self.enterOuterAlt(localctx, 8)
                self.state = 443
                self.match(Python3Parser.IMPORT)
                self.state = 444
                self.match(Python3Parser.NAME)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.DOT:
                    self.state = 445
                    self.match(Python3Parser.DOT)
                    self.state = 446
                    self.match(Python3Parser.NAME)
                    self.state = 451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 452
                    self.match(Python3Parser.AS)
                    self.state = 453
                    self.match(Python3Parser.NAME)

                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 456
                    self.match(Python3Parser.COMMA)
                    self.state = 457
                    self.match(Python3Parser.NAME)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 458
                        self.match(Python3Parser.DOT)
                        self.state = 459
                        self.match(Python3Parser.NAME)
                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 465
                        self.match(Python3Parser.AS)
                        self.state = 466
                        self.match(Python3Parser.NAME)

                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.FROM:
                self.enterOuterAlt(localctx, 9)
                self.state = 474
                self.match(Python3Parser.FROM)
                self.state = 494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
                if la_ == 1:
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                        self.state = 475
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 480
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 481
                    self.match(Python3Parser.NAME)
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 482
                        self.match(Python3Parser.DOT)
                        self.state = 483
                        self.match(Python3Parser.NAME)
                        self.state = 488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 489
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            break

                    pass

                self.state = 496
                self.match(Python3Parser.IMPORT)
                self.state = 538
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.STAR:
                    self.state = 497
                    self.match(Python3Parser.STAR)
                    pass
                elif token == Python3Parser.OPEN_PAREN:
                    self.state = 498
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 499
                    self.match(Python3Parser.NAME)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 500
                        self.match(Python3Parser.AS)
                        self.state = 501
                        self.match(Python3Parser.NAME)

                    self.state = 512
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 504
                            self.match(Python3Parser.COMMA)
                            self.state = 505
                            self.match(Python3Parser.NAME)
                            self.state = 508
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 506
                                self.match(Python3Parser.AS)
                                self.state = 507
                                self.match(Python3Parser.NAME)

                        self.state = 514
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)

                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 515
                        self.match(Python3Parser.COMMA)

                    self.state = 518
                    self.match(Python3Parser.CLOSE_PAREN)
                    pass
                elif token == Python3Parser.NAME:
                    self.state = 519
                    self.match(Python3Parser.NAME)
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 520
                        self.match(Python3Parser.AS)
                        self.state = 521
                        self.match(Python3Parser.NAME)

                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 524
                            self.match(Python3Parser.COMMA)
                            self.state = 525
                            self.match(Python3Parser.NAME)
                            self.state = 528
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 526
                                self.match(Python3Parser.AS)
                                self.state = 527
                                self.match(Python3Parser.NAME)

                        self.state = 534
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)

                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 535
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.GLOBAL, Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 540
                _la = self._input.LA(1)
                if not (_la == Python3Parser.GLOBAL or _la == Python3Parser.NONLOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 541
                self.match(Python3Parser.NAME)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 542
                    self.match(Python3Parser.COMMA)
                    self.state = 543
                    self.match(Python3Parser.NAME)
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.ASSERT:
                self.enterOuterAlt(localctx, 11)
                self.state = 549
                self.match(Python3Parser.ASSERT)
                self.state = 550
                self.test()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 551
                    self.match(Python3Parser.COMMA)
                    self.state = 552
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(Python3Parser.ASSIGN)
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.YIELD:
                self.state = 558
                self.match(Python3Parser.YIELD)
                self.state = 572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 559
                    self.match(Python3Parser.FROM)
                    self.state = 560
                    self.test()

                elif la_ == 2:
                    self.state = 561
                    self.test()
                    self.state = 566
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 562
                            self.match(Python3Parser.COMMA)
                            self.state = 563
                            self.test()
                        self.state = 568
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)

                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 569
                        self.match(Python3Parser.COMMA)

                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                           Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                           Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                           Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                           Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                           Python3Parser.OPEN_BRACE]:
                self.state = 579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 574
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 575
                        self.match(Python3Parser.STAR)

                    self.state = 578
                    self.expr()
                    pass

                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 581
                        self.match(Python3Parser.COMMA)
                        self.state = 587
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
                        if la_ == 1:
                            self.state = 582
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 584
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 583
                                self.match(Python3Parser.STAR)

                            self.state = 586
                            self.expr()
                            pass

                    self.state = 593
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)

                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 594
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            _la = self._input.LA(1)
            if not (((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & (
                    (1 << (Python3Parser.ADD_ASSIGN - 77)) | (1 << (Python3Parser.SUB_ASSIGN - 77)) | (
                    1 << (Python3Parser.MULT_ASSIGN - 77)) | (1 << (Python3Parser.AT_ASSIGN - 77)) | (
                            1 << (Python3Parser.DIV_ASSIGN - 77)) | (1 << (Python3Parser.MOD_ASSIGN - 77)) | (
                            1 << (Python3Parser.AND_ASSIGN - 77)) | (1 << (Python3Parser.OR_ASSIGN - 77)) | (
                            1 << (Python3Parser.XOR_ASSIGN - 77)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 77)) | (
                            1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 77)) | (1 << (Python3Parser.POWER_ASSIGN - 77)) | (
                            1 << (Python3Parser.IDIV_ASSIGN - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_raise_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(Python3Parser.RAISE)
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.state = 604
                self.test()
                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
                if la_ == 1:
                    self.state = 605
                    self.match(Python3Parser.FROM)
                    self.state = 606
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(Python3Parser.IF)
            self.state = 612
            self.test()
            self.state = 613
            self.match(Python3Parser.COLON)
            self.state = 614
            self.suite()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 615
                self.match(Python3Parser.ELIF)
                self.state = 616
                self.test()
                self.state = 617
                self.match(Python3Parser.COLON)
                self.state = 618
                self.suite()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 625
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(Python3Parser.ELSE)
            self.state = 629
            self.match(Python3Parser.COLON)
            self.state = 630
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(Python3Parser.WHILE)
            self.state = 633
            self.test()
            self.state = 634
            self.match(Python3Parser.COLON)
            self.state = 635
            self.suite()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 636
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(Python3Parser.FOR)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 640
                self.match(Python3Parser.STAR)

            self.state = 643
            self.expr()
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 644
                    self.match(Python3Parser.COMMA)
                    self.state = 646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 645
                        self.match(Python3Parser.STAR)

                    self.state = 648
                    self.expr()
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)

            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 654
                self.match(Python3Parser.COMMA)

            self.state = 657
            self.match(Python3Parser.IN)
            self.state = 658
            self.test()
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 659
                    self.match(Python3Parser.COMMA)
                    self.state = 660
                    self.test()
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 666
                self.match(Python3Parser.COMMA)

            self.state = 669
            self.match(Python3Parser.COLON)
            self.state = 670
            self.suite()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 671
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(Python3Parser.TRY)
            self.state = 675
            self.match(Python3Parser.COLON)
            self.state = 676
            self.suite()
            self.state = 696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.EXCEPT:
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 677
                    self.except_clause()
                    self.state = 678
                    self.match(Python3Parser.COLON)
                    self.state = 679
                    self.suite()
                    self.state = 683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 685
                    self.else_suite()

                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 688
                    self.match(Python3Parser.FINALLY)
                    self.state = 689
                    self.match(Python3Parser.COLON)
                    self.state = 690
                    self.suite()

                pass
            elif token == Python3Parser.FINALLY:
                self.state = 693
                self.match(Python3Parser.FINALLY)
                self.state = 694
                self.match(Python3Parser.COLON)
                self.state = 695
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(Python3Parser.EXCEPT)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 699
                self.test()
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 700
                    self.match(Python3Parser.AS)
                    self.state = 701
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.small_stmt()
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 707
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 708
                        self.small_stmt()
                    self.state = 713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 714
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 717
                self.match(Python3Parser.NEWLINE)
                pass
            elif token == Python3Parser.NEWLINE:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.match(Python3Parser.NEWLINE)
                self.state = 720
                self.match(Python3Parser.INDENT)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 721
                    self.stmt()
                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                            1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                                    1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                                    1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                                    1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                                    1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                                    1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                                    1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                                    1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                                    1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                                    1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_BYTES_LITERAL) | (
                                    1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                                    1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (
                                    1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (
                                    1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (
                                    1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK) | (
                                    1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                                    1 << (Python3Parser.AT - 65)))) != 0)):
                        break

                self.state = 726
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext, i)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.or_test()
                self.state = 736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
                if la_ == 1:
                    self.state = 731
                    self.match(Python3Parser.IF)
                    self.state = 732
                    self.or_test()
                    self.state = 733
                    self.match(Python3Parser.ELSE)
                    self.state = 734
                    self.test()

                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(Python3Parser.LAMBDA)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 739
                    self.varargslist()

                self.state = 742
                self.match(Python3Parser.COLON)
                self.state = 743
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_test_nocond)
        self._la = 0  # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.or_test()
                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(Python3Parser.LAMBDA)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 748
                    self.varargslist()

                self.state = 751
                self.match(Python3Parser.COLON)
                self.state = 752
                self.test_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.not_test()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR or _la == Python3Parser.AND:
                self.state = 756
                _la = self._input.LA(1)
                if not (_la == Python3Parser.OR or _la == Python3Parser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 757
                self.not_test()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_not_test)
        self._la = 0  # Token type
        try:
            self.state = 780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NOT:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.match(Python3Parser.NOT)
                self.state = 764
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 765
                    self.match(Python3Parser.STAR)

                self.state = 768
                self.expr()
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 769
                        self.comp_op()
                        self.state = 771
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 770
                            self.match(Python3Parser.STAR)

                        self.state = 773
                        self.expr()
                    self.state = 779
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_comp_op)
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 784
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 785
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 786
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 787
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 788
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 789
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 790
                self.match(Python3Parser.NOT)
                self.state = 791
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 792
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 793
                self.match(Python3Parser.IS)
                self.state = 794
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.factor()
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 798
                    _la = self._input.LA(1)
                    if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & (
                            (1 << (Python3Parser.STAR - 45)) | (1 << (Python3Parser.OR_OP - 45)) | (
                            1 << (Python3Parser.XOR - 45)) | (1 << (Python3Parser.AND_OP - 45)) | (
                                    1 << (Python3Parser.LEFT_SHIFT - 45)) | (1 << (Python3Parser.RIGHT_SHIFT - 45)) | (
                                    1 << (Python3Parser.ADD - 45)) | (1 << (Python3Parser.MINUS - 45)) | (
                                    1 << (Python3Parser.DIV - 45)) | (1 << (Python3Parser.MOD - 45)) | (
                                    1 << (Python3Parser.IDIV - 45)) | (1 << (Python3Parser.AT - 45)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 799
                    self.factor()
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                _la = self._input.LA(1)
                if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                        (1 << (Python3Parser.ADD - 60)) | (1 << (Python3Parser.MINUS - 60)) | (
                        1 << (Python3Parser.NOT_OP - 60)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 806
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.call(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 808
                self.atom()
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 809
                        self.trailer()
                    self.state = 814
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 815
                    self.match(Python3Parser.POWER)
                    self.state = 816
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(Python3Parser.NAME)

            self.state = 823
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                            1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                            1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                            1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 824
                self.arglist()

            self.state = 827
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 150, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 829
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")

                    self.state = 830
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 831
                        self.arglist()

                    self.state = 834
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 150, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def STRING_BYTES_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.STRING_BYTES_LITERAL)
            else:
                return self.getToken(Python3Parser.STRING_BYTES_LITERAL, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 915
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.YIELD:
                    self.state = 841
                    self.match(Python3Parser.YIELD)
                    self.state = 855
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FROM:
                        self.state = 842
                        self.match(Python3Parser.FROM)
                        self.state = 843
                        self.test()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 844
                        self.test()
                        self.state = 849
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 151, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 845
                                self.match(Python3Parser.COMMA)
                                self.state = 846
                                self.test()
                            self.state = 851
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 151, self._ctx)

                        self.state = 853
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 852
                            self.match(Python3Parser.COMMA)

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 857
                    self.test()
                    self.state = 869
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 858
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                        self.state = 863
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 859
                                self.match(Python3Parser.COMMA)
                                self.state = 860
                                self.test()
                            self.state = 865
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

                        self.state = 867
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 866
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token == Python3Parser.CLOSE_PAREN:
                    pass
                else:
                    pass
                self.state = 873
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 875
                    self.test()
                    self.state = 887
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 876
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                        self.state = 881
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 877
                                self.match(Python3Parser.COMMA)
                                self.state = 878
                                self.test()
                            self.state = 883
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)

                        self.state = 885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 884
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 891
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.OPEN_BRACE:
                self.enterOuterAlt(localctx, 3)
                self.state = 892
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 893
                    self.dictorsetmaker()

                self.state = 896
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 913
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NAME:
                    self.state = 897
                    self.match(Python3Parser.NAME)
                    pass
                elif token == Python3Parser.DECIMAL_INTEGER:
                    self.state = 898
                    self.match(Python3Parser.DECIMAL_INTEGER)
                    pass
                elif token == Python3Parser.OCT_INTEGER:
                    self.state = 899
                    self.match(Python3Parser.OCT_INTEGER)
                    pass
                elif token == Python3Parser.HEX_INTEGER:
                    self.state = 900
                    self.match(Python3Parser.HEX_INTEGER)
                    pass
                elif token == Python3Parser.BIN_INTEGER:
                    self.state = 901
                    self.match(Python3Parser.BIN_INTEGER)
                    pass
                elif token == Python3Parser.FLOAT_NUMBER:
                    self.state = 902
                    self.match(Python3Parser.FLOAT_NUMBER)
                    pass
                elif token == Python3Parser.IMAG_NUMBER:
                    self.state = 903
                    self.match(Python3Parser.IMAG_NUMBER)
                    pass
                elif token == Python3Parser.STRING_BYTES_LITERAL:
                    self.state = 905
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 904
                            self.match(Python3Parser.STRING_BYTES_LITERAL)

                        else:
                            raise NoViableAltException(self)
                        self.state = 907
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)

                    pass
                elif token == Python3Parser.ELLIPSIS:
                    self.state = 909
                    self.match(Python3Parser.ELLIPSIS)
                    pass
                elif token == Python3Parser.NONE:
                    self.state = 910
                    self.match(Python3Parser.NONE)
                    pass
                elif token == Python3Parser.TRUE:
                    self.state = 911
                    self.match(Python3Parser.TRUE)
                    pass
                elif token == Python3Parser.FALSE:
                    self.state = 912
                    self.match(Python3Parser.FALSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 918
                    self.arglist()

                self.state = 921
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 923
                self.subscript()
                self.state = 928
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 924
                        self.match(Python3Parser.COMMA)
                        self.state = 925
                        self.subscript()
                    self.state = 930
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)

                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 931
                    self.match(Python3Parser.COMMA)

                self.state = 934
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.DOT:
                self.enterOuterAlt(localctx, 3)
                self.state = 936
                self.match(Python3Parser.DOT)
                self.state = 937
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 941
                    self.test()

                self.state = 944
                self.match(Python3Parser.COLON)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 945
                    self.test()

                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 948
                    self.match(Python3Parser.COLON)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 949
                        self.test()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.test()
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
            if la_ == 1:
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 957
                    self.match(Python3Parser.COLON)
                    self.state = 958
                    self.test()

                self.state = 961
                self.comp_for()
                pass

            elif la_ == 2:
                self.state = 962
                self.match(Python3Parser.COLON)
                self.state = 963
                self.test()
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 964
                        self.match(Python3Parser.COMMA)
                        self.state = 965
                        self.test()
                        self.state = 966
                        self.match(Python3Parser.COLON)
                        self.state = 967
                        self.test()
                    self.state = 973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)

                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 974
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 3:
                self.state = 981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 977
                        self.match(Python3Parser.COMMA)
                        self.state = 978
                        self.test()
                    self.state = 983
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)

                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 984
                    self.match(Python3Parser.COMMA)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_forContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_forContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 989
                    self.test()
                    self.state = 995
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FOR, Python3Parser.COMMA]:
                        self.state = 991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.FOR:
                            self.state = 990
                            self.comp_for()

                        pass
                    elif token == Python3Parser.ASSIGN:
                        self.state = 993
                        self.match(Python3Parser.ASSIGN)
                        self.state = 994
                        self.test()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 997
                    self.match(Python3Parser.COMMA)
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)

            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
            if la_ == 1:
                self.state = 1004
                self.test()
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.FOR:
                        self.state = 1005
                        self.comp_for()

                    pass
                elif token == Python3Parser.ASSIGN:
                    self.state = 1008
                    self.match(Python3Parser.ASSIGN)
                    self.state = 1009
                    self.test()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1012
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 1015
                self.match(Python3Parser.STAR)
                self.state = 1016
                self.test()
                self.state = 1028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1017
                        self.match(Python3Parser.COMMA)
                        self.state = 1018
                        self.test()
                        self.state = 1024
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                            self.state = 1020
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.FOR:
                                self.state = 1019
                                self.comp_for()

                            pass
                        elif token == Python3Parser.ASSIGN:
                            self.state = 1022
                            self.match(Python3Parser.ASSIGN)
                            self.state = 1023
                            self.test()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 1030
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)

                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1031
                    self.match(Python3Parser.COMMA)
                    self.state = 1032
                    self.match(Python3Parser.POWER)
                    self.state = 1033
                    self.test()

                pass

            elif la_ == 3:
                self.state = 1036
                self.match(Python3Parser.POWER)
                self.state = 1037
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comp_iter)
        self._la = 0  # Token type
        try:
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.comp_for()
                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.match(Python3Parser.IF)
                self.state = 1042
                self.test_nocond()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                    self.state = 1043
                    self.comp_iter()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(Python3Parser.FOR)
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 1049
                self.match(Python3Parser.STAR)

            self.state = 1052
            self.expr()
            self.state = 1060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1053
                    self.match(Python3Parser.COMMA)
                    self.state = 1055
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 1054
                        self.match(Python3Parser.STAR)

                    self.state = 1057
                    self.expr()
                self.state = 1062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)

            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 1063
                self.match(Python3Parser.COMMA)

            self.state = 1066
            self.match(Python3Parser.IN)
            self.state = 1067
            self.or_test()
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1068
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
