# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

from complexity.parsers.parsers import ParserWithTimeLimit


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3_")
        buf.write("\u0456\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\3\2\3\2\7\2Q\n\2\f\2\16\2T\13\2\3\2\3\2\3\3")
        buf.write("\3\3\3\3\5\3[\n\3\3\3\3\3\5\3_\n\3\3\3\3\3\3\3\3\3\5\3")
        buf.write("e\n\3\3\3\3\3\5\3i\n\3\7\3k\n\3\f\3\16\3n\13\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3u\n\3\5\3w\n\3\3\3\3\3\3\3\3\3\5\3}\n")
        buf.write("\3\3\3\3\3\5\3\u0081\n\3\7\3\u0083\n\3\f\3\16\3\u0086")
        buf.write("\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u008d\n\3\5\3\u008f\n\3")
        buf.write("\3\3\3\3\3\3\3\3\5\3\u0095\n\3\5\3\u0097\n\3\5\3\u0099")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3\u009f\n\3\5\3\u00a1\n\3\3\3\3")
        buf.write("\3\3\3\3\3\5\3\u00a7\n\3\3\3\3\3\5\3\u00ab\n\3\7\3\u00ad")
        buf.write("\n\3\f\3\16\3\u00b0\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u00b7")
        buf.write("\n\3\5\3\u00b9\n\3\3\3\3\3\3\3\3\3\5\3\u00bf\n\3\5\3\u00c1")
        buf.write("\n\3\3\4\3\4\3\4\5\4\u00c6\n\4\3\4\3\4\3\4\3\4\5\4\u00cc")
        buf.write("\n\4\7\4\u00ce\n\4\f\4\16\4\u00d1\13\4\3\4\3\4\3\4\5\4")
        buf.write("\u00d6\n\4\3\4\3\4\3\4\3\4\5\4\u00dc\n\4\7\4\u00de\n\4")
        buf.write("\f\4\16\4\u00e1\13\4\3\4\3\4\3\4\5\4\u00e6\n\4\3\4\3\4")
        buf.write("\5\4\u00ea\n\4\5\4\u00ec\n\4\3\4\3\4\5\4\u00f0\n\4\3\4")
        buf.write("\3\4\3\4\3\4\5\4\u00f6\n\4\7\4\u00f8\n\4\f\4\16\4\u00fb")
        buf.write("\13\4\3\4\3\4\3\4\5\4\u0100\n\4\3\4\3\4\5\4\u0104\n\4")
        buf.write("\3\5\3\5\3\5\7\5\u0109\n\5\f\5\16\5\u010c\13\5\3\5\5\5")
        buf.write("\u010f\n\5\3\5\5\5\u0112\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u011c\n\5\3\5\3\5\3\5\3\5\5\5\u0122\n\5\7\5")
        buf.write("\u0124\n\5\f\5\16\5\u0127\13\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\7\5\u0130\n\5\f\5\16\5\u0133\13\5\3\5\3\5\5\5\u0137")
        buf.write("\n\5\3\5\5\5\u013a\n\5\3\5\7\5\u013d\n\5\f\5\16\5\u0140")
        buf.write("\13\5\3\5\3\5\3\5\3\5\5\5\u0146\n\5\3\5\5\5\u0149\n\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u014f\n\5\3\5\3\5\3\5\5\5\u0154\n")
        buf.write("\5\5\5\u0156\n\5\3\5\3\5\5\5\u015a\n\5\3\6\3\6\5\6\u015e")
        buf.write("\n\6\3\6\5\6\u0161\n\6\3\6\3\6\3\6\5\6\u0166\n\6\3\6\5")
        buf.write("\6\u0169\n\6\7\6\u016b\n\6\f\6\16\6\u016e\13\6\3\6\5\6")
        buf.write("\u0171\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u017a\n\6\f")
        buf.write("\6\16\6\u017d\13\6\3\6\5\6\u0180\n\6\5\6\u0182\n\6\3\6")
        buf.write("\3\6\3\6\7\6\u0187\n\6\f\6\16\6\u018a\13\6\3\6\5\6\u018d")
        buf.write("\n\6\5\6\u018f\n\6\3\6\7\6\u0192\n\6\f\6\16\6\u0195\13")
        buf.write("\6\5\6\u0197\n\6\3\6\3\6\5\6\u019b\n\6\3\6\3\6\3\6\5\6")
        buf.write("\u01a0\n\6\3\6\7\6\u01a3\n\6\f\6\16\6\u01a6\13\6\3\6\5")
        buf.write("\6\u01a9\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u01b5\n\6\f\6\16\6\u01b8\13\6\3\6\3\6\5\6\u01bc\n\6")
        buf.write("\3\6\3\6\3\6\3\6\7\6\u01c2\n\6\f\6\16\6\u01c5\13\6\3\6")
        buf.write("\3\6\5\6\u01c9\n\6\7\6\u01cb\n\6\f\6\16\6\u01ce\13\6\3")
        buf.write("\6\3\6\7\6\u01d2\n\6\f\6\16\6\u01d5\13\6\3\6\3\6\3\6\7")
        buf.write("\6\u01da\n\6\f\6\16\6\u01dd\13\6\3\6\6\6\u01e0\n\6\r\6")
        buf.write("\16\6\u01e1\5\6\u01e4\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u01ec\n\6\3\6\3\6\3\6\3\6\5\6\u01f2\n\6\7\6\u01f4\n\6")
        buf.write("\f\6\16\6\u01f7\13\6\3\6\5\6\u01fa\n\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u0200\n\6\3\6\3\6\3\6\3\6\5\6\u0206\n\6\7\6\u0208")
        buf.write("\n\6\f\6\16\6\u020b\13\6\3\6\5\6\u020e\n\6\5\6\u0210\n")
        buf.write("\6\3\6\3\6\3\6\3\6\7\6\u0216\n\6\f\6\16\6\u0219\13\6\3")
        buf.write("\6\5\6\u021c\n\6\3\7\3\7\3\7\3\7\5\7\u0222\n\7\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\7\b\u022b\n\b\f\b\16\b\u022e\13\b")
        buf.write("\3\b\5\b\u0231\n\b\5\b\u0233\n\b\3\b\3\b\5\b\u0237\n\b")
        buf.write("\3\b\5\b\u023a\n\b\3\b\3\b\3\b\5\b\u023f\n\b\3\b\5\b\u0242")
        buf.write("\n\b\7\b\u0244\n\b\f\b\16\b\u0247\13\b\3\b\5\b\u024a\n")
        buf.write("\b\5\b\u024c\n\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f")
        buf.write("\3\f\7\f\u0258\n\f\f\f\16\f\u025b\13\f\3\f\5\f\u025e\n")
        buf.write("\f\5\f\u0260\n\f\3\r\3\r\3\r\3\r\5\r\u0266\n\r\5\r\u0268")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u0270\n\16\f\16")
        buf.write("\16\16\u0273\13\16\3\16\5\16\u0276\n\16\5\16\u0278\n\16")
        buf.write("\3\17\3\17\3\17\3\17\3\17\7\17\u027f\n\17\f\17\16\17\u0282")
        buf.write("\13\17\3\17\5\17\u0285\n\17\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u0295")
        buf.write("\n\22\3\23\3\23\5\23\u0299\n\23\3\23\3\23\3\23\5\23\u029e")
        buf.write("\n\23\3\23\7\23\u02a1\n\23\f\23\16\23\u02a4\13\23\3\23")
        buf.write("\5\23\u02a7\n\23\3\23\3\23\3\23\3\23\7\23\u02ad\n\23\f")
        buf.write("\23\16\23\u02b0\13\23\3\23\5\23\u02b3\n\23\3\23\3\23\3")
        buf.write("\23\5\23\u02b8\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\6\24\u02c1\n\24\r\24\16\24\u02c2\3\24\5\24\u02c6\n\24")
        buf.write("\3\24\3\24\3\24\5\24\u02cb\n\24\3\24\3\24\3\24\5\24\u02d0")
        buf.write("\n\24\3\25\3\25\3\25\3\25\5\25\u02d6\n\25\5\25\u02d8\n")
        buf.write("\25\3\26\3\26\3\26\7\26\u02dd\n\26\f\26\16\26\u02e0\13")
        buf.write("\26\3\26\5\26\u02e3\n\26\3\26\3\26\3\26\3\26\3\26\6\26")
        buf.write("\u02ea\n\26\r\26\16\26\u02eb\3\26\3\26\5\26\u02f0\n\26")
        buf.write("\3\27\3\27\5\27\u02f4\n\27\3\27\3\27\5\27\u02f8\n\27\3")
        buf.write("\27\3\27\5\27\u02fc\n\27\3\30\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\5\32\u0308\n\32\3\32\3\32\5\32\u030c")
        buf.write("\n\32\3\33\3\33\3\33\7\33\u0311\n\33\f\33\16\33\u0314")
        buf.write("\13\33\3\34\3\34\3\34\5\34\u0319\n\34\3\34\3\34\3\34\5")
        buf.write("\34\u031e\n\34\3\34\3\34\7\34\u0322\n\34\f\34\16\34\u0325")
        buf.write("\13\34\5\34\u0327\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0336\n\35\3\36")
        buf.write("\3\36\3\36\7\36\u033b\n\36\f\36\16\36\u033e\13\36\3\37")
        buf.write("\3\37\3\37\3\37\3\37\7\37\u0345\n\37\f\37\16\37\u0348")
        buf.write("\13\37\3\37\3\37\5\37\u034c\n\37\5\37\u034e\n\37\3 \3")
        buf.write(" \3 \3 \5 \u0354\n \3 \3 \5 \u0358\n \3 \3 \3 \3 \3 \5")
        buf.write(" \u035f\n \3 \3 \5 \u0363\n \3 \7 \u0366\n \f \16 \u0369")
        buf.write("\13 \3!\3!\3!\3!\3!\3!\3!\7!\u0372\n!\f!\16!\u0375\13")
        buf.write("!\3!\5!\u0378\n!\5!\u037a\n!\3!\3!\3!\3!\7!\u0380\n!\f")
        buf.write("!\16!\u0383\13!\3!\5!\u0386\n!\5!\u0388\n!\5!\u038a\n")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0396\n!\f!\16!\u0399")
        buf.write("\13!\3!\5!\u039c\n!\5!\u039e\n!\5!\u03a0\n!\3!\3!\3!\5")
        buf.write("!\u03a5\n!\3!\3!\3!\3!\3!\3!\3!\3!\3!\6!\u03b0\n!\r!\16")
        buf.write("!\u03b1\3!\3!\3!\3!\5!\u03b8\n!\5!\u03ba\n!\3\"\3\"\5")
        buf.write("\"\u03be\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u03c5\n\"\f\"\16")
        buf.write("\"\u03c8\13\"\3\"\5\"\u03cb\n\"\3\"\3\"\3\"\3\"\5\"\u03d1")
        buf.write("\n\"\3#\3#\5#\u03d5\n#\3#\3#\5#\u03d9\n#\3#\3#\5#\u03dd")
        buf.write("\n#\5#\u03df\n#\5#\u03e1\n#\3$\3$\3$\5$\u03e6\n$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\7$\u03f0\n$\f$\16$\u03f3\13$\3$\5")
        buf.write("$\u03f6\n$\3$\3$\7$\u03fa\n$\f$\16$\u03fd\13$\3$\5$\u0400")
        buf.write("\n$\5$\u0402\n$\3%\3%\5%\u0406\n%\3%\3%\5%\u040a\n%\3")
        buf.write("%\3%\7%\u040e\n%\f%\16%\u0411\13%\3%\3%\5%\u0415\n%\3")
        buf.write("%\3%\5%\u0419\n%\3%\5%\u041c\n%\3%\3%\3%\3%\3%\5%\u0423")
        buf.write("\n%\3%\3%\5%\u0427\n%\7%\u0429\n%\f%\16%\u042c\13%\3%")
        buf.write("\3%\3%\5%\u0431\n%\3%\3%\5%\u0435\n%\3&\3&\3&\3&\5&\u043b")
        buf.write("\n&\5&\u043d\n&\3\'\3\'\5\'\u0441\n\'\3\'\3\'\3\'\5\'")
        buf.write("\u0446\n\'\3\'\7\'\u0449\n\'\f\'\16\'\u044c\13\'\3\'\5")
        buf.write("\'\u044f\n\'\3\'\3\'\3\'\5\'\u0454\n\'\3\'\2\3>(\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJL\2\b\3\2-.\3\2\t\n\3\2O[\3\2\27\30\5\2//9B")
        buf.write("MM\4\2>?CC\2\u052b\2R\3\2\2\2\4\u00c0\3\2\2\2\6\u0103")
        buf.write("\3\2\2\2\b\u0159\3\2\2\2\n\u021b\3\2\2\2\f\u021d\3\2\2")
        buf.write("\2\16\u0223\3\2\2\2\20\u024d\3\2\2\2\22\u024f\3\2\2\2")
        buf.write("\24\u0251\3\2\2\2\26\u0253\3\2\2\2\30\u0261\3\2\2\2\32")
        buf.write("\u0269\3\2\2\2\34\u0279\3\2\2\2\36\u0286\3\2\2\2 \u028b")
        buf.write("\3\2\2\2\"\u028f\3\2\2\2$\u0296\3\2\2\2&\u02b9\3\2\2\2")
        buf.write("(\u02d1\3\2\2\2*\u02ef\3\2\2\2,\u02fb\3\2\2\2.\u02fd\3")
        buf.write("\2\2\2\60\u0301\3\2\2\2\62\u030b\3\2\2\2\64\u030d\3\2")
        buf.write("\2\2\66\u0326\3\2\2\28\u0335\3\2\2\2:\u0337\3\2\2\2<\u034d")
        buf.write("\3\2\2\2>\u034f\3\2\2\2@\u03b9\3\2\2\2B\u03d0\3\2\2\2")
        buf.write("D\u03e0\3\2\2\2F\u03e2\3\2\2\2H\u040f\3\2\2\2J\u043c\3")
        buf.write("\2\2\2L\u043e\3\2\2\2NQ\7$\2\2OQ\5\b\5\2PN\3\2\2\2PO\3")
        buf.write("\2\2\2QT\3\2\2\2RP\3\2\2\2RS\3\2\2\2SU\3\2\2\2TR\3\2\2")
        buf.write("\2UV\7\2\2\3V\3\3\2\2\2WZ\7%\2\2XY\7\63\2\2Y[\5,\27\2")
        buf.write("ZX\3\2\2\2Z[\3\2\2\2[^\3\2\2\2\\]\7\66\2\2]_\5,\27\2^")
        buf.write("\\\3\2\2\2^_\3\2\2\2_l\3\2\2\2`a\7\62\2\2ad\7%\2\2bc\7")
        buf.write("\63\2\2ce\5,\27\2db\3\2\2\2de\3\2\2\2eh\3\2\2\2fg\7\66")
        buf.write("\2\2gi\5,\27\2hf\3\2\2\2hi\3\2\2\2ik\3\2\2\2j`\3\2\2\2")
        buf.write("kn\3\2\2\2lj\3\2\2\2lm\3\2\2\2m\u0098\3\2\2\2nl\3\2\2")
        buf.write("\2o\u0096\7\62\2\2pv\7/\2\2qt\7%\2\2rs\7\63\2\2su\5,\27")
        buf.write("\2tr\3\2\2\2tu\3\2\2\2uw\3\2\2\2vq\3\2\2\2vw\3\2\2\2w")
        buf.write("\u0084\3\2\2\2xy\7\62\2\2y|\7%\2\2z{\7\63\2\2{}\5,\27")
        buf.write("\2|z\3\2\2\2|}\3\2\2\2}\u0080\3\2\2\2~\177\7\66\2\2\177")
        buf.write("\u0081\5,\27\2\u0080~\3\2\2\2\u0080\u0081\3\2\2\2\u0081")
        buf.write("\u0083\3\2\2\2\u0082x\3\2\2\2\u0083\u0086\3\2\2\2\u0084")
        buf.write("\u0082\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u008e\3\2\2\2")
        buf.write("\u0086\u0084\3\2\2\2\u0087\u0088\7\62\2\2\u0088\u0089")
        buf.write("\7\65\2\2\u0089\u008c\7%\2\2\u008a\u008b\7\63\2\2\u008b")
        buf.write("\u008d\5,\27\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2")
        buf.write("\u008d\u008f\3\2\2\2\u008e\u0087\3\2\2\2\u008e\u008f\3")
        buf.write("\2\2\2\u008f\u0097\3\2\2\2\u0090\u0091\7\65\2\2\u0091")
        buf.write("\u0094\7%\2\2\u0092\u0093\7\63\2\2\u0093\u0095\5,\27\2")
        buf.write("\u0094\u0092\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097\3")
        buf.write("\2\2\2\u0096p\3\2\2\2\u0096\u0090\3\2\2\2\u0096\u0097")
        buf.write("\3\2\2\2\u0097\u0099\3\2\2\2\u0098o\3\2\2\2\u0098\u0099")
        buf.write("\3\2\2\2\u0099\u00c1\3\2\2\2\u009a\u00a0\7/\2\2\u009b")
        buf.write("\u009e\7%\2\2\u009c\u009d\7\63\2\2\u009d\u009f\5,\27\2")
        buf.write("\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a1\3")
        buf.write("\2\2\2\u00a0\u009b\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00ae")
        buf.write("\3\2\2\2\u00a2\u00a3\7\62\2\2\u00a3\u00a6\7%\2\2\u00a4")
        buf.write("\u00a5\7\63\2\2\u00a5\u00a7\5,\27\2\u00a6\u00a4\3\2\2")
        buf.write("\2\u00a6\u00a7\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a9")
        buf.write("\7\66\2\2\u00a9\u00ab\5,\27\2\u00aa\u00a8\3\2\2\2\u00aa")
        buf.write("\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac\u00a2\3\2\2\2")
        buf.write("\u00ad\u00b0\3\2\2\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3")
        buf.write("\2\2\2\u00af\u00b8\3\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b2")
        buf.write("\7\62\2\2\u00b2\u00b3\7\65\2\2\u00b3\u00b6\7%\2\2\u00b4")
        buf.write("\u00b5\7\63\2\2\u00b5\u00b7\5,\27\2\u00b6\u00b4\3\2\2")
        buf.write("\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00b1")
        buf.write("\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00c1\3\2\2\2\u00ba")
        buf.write("\u00bb\7\65\2\2\u00bb\u00be\7%\2\2\u00bc\u00bd\7\63\2")
        buf.write("\2\u00bd\u00bf\5,\27\2\u00be\u00bc\3\2\2\2\u00be\u00bf")
        buf.write("\3\2\2\2\u00bf\u00c1\3\2\2\2\u00c0W\3\2\2\2\u00c0\u009a")
        buf.write("\3\2\2\2\u00c0\u00ba\3\2\2\2\u00c1\5\3\2\2\2\u00c2\u00c5")
        buf.write("\7%\2\2\u00c3\u00c4\7\66\2\2\u00c4\u00c6\5,\27\2\u00c5")
        buf.write("\u00c3\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00cf\3\2\2\2")
        buf.write("\u00c7\u00c8\7\62\2\2\u00c8\u00cb\7%\2\2\u00c9\u00ca\7")
        buf.write("\66\2\2\u00ca\u00cc\5,\27\2\u00cb\u00c9\3\2\2\2\u00cb")
        buf.write("\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00c7\3\2\2\2")
        buf.write("\u00ce\u00d1\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3")
        buf.write("\2\2\2\u00d0\u00eb\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00e9")
        buf.write("\7\62\2\2\u00d3\u00d5\7/\2\2\u00d4\u00d6\7%\2\2\u00d5")
        buf.write("\u00d4\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00df\3\2\2\2")
        buf.write("\u00d7\u00d8\7\62\2\2\u00d8\u00db\7%\2\2\u00d9\u00da\7")
        buf.write("\66\2\2\u00da\u00dc\5,\27\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd\u00d7\3\2\2\2")
        buf.write("\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3")
        buf.write("\2\2\2\u00e0\u00e5\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e3")
        buf.write("\7\62\2\2\u00e3\u00e4\7\65\2\2\u00e4\u00e6\7%\2\2\u00e5")
        buf.write("\u00e2\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00ea\3\2\2\2")
        buf.write("\u00e7\u00e8\7\65\2\2\u00e8\u00ea\7%\2\2\u00e9\u00d3\3")
        buf.write("\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00ec")
        buf.write("\3\2\2\2\u00eb\u00d2\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u0104\3\2\2\2\u00ed\u00ef\7/\2\2\u00ee\u00f0\7%\2\2\u00ef")
        buf.write("\u00ee\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f9\3\2\2\2")
        buf.write("\u00f1\u00f2\7\62\2\2\u00f2\u00f5\7%\2\2\u00f3\u00f4\7")
        buf.write("\66\2\2\u00f4\u00f6\5,\27\2\u00f5\u00f3\3\2\2\2\u00f5")
        buf.write("\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7\u00f1\3\2\2\2")
        buf.write("\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3")
        buf.write("\2\2\2\u00fa\u00ff\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u00fd")
        buf.write("\7\62\2\2\u00fd\u00fe\7\65\2\2\u00fe\u0100\7%\2\2\u00ff")
        buf.write("\u00fc\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0104\3\2\2\2")
        buf.write("\u0101\u0102\7\65\2\2\u0102\u0104\7%\2\2\u0103\u00c2\3")
        buf.write("\2\2\2\u0103\u00ed\3\2\2\2\u0103\u0101\3\2\2\2\u0104\7")
        buf.write("\3\2\2\2\u0105\u010a\5\n\6\2\u0106\u0107\7\64\2\2\u0107")
        buf.write("\u0109\5\n\6\2\u0108\u0106\3\2\2\2\u0109\u010c\3\2\2\2")
        buf.write("\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010e\3")
        buf.write("\2\2\2\u010c\u010a\3\2\2\2\u010d\u010f\7\64\2\2\u010e")
        buf.write("\u010d\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111\3\2\2\2")
        buf.write("\u0110\u0112\7$\2\2\u0111\u0110\3\2\2\2\u0111\u0112\3")
        buf.write("\2\2\2\u0112\u015a\3\2\2\2\u0113\u015a\5\34\17\2\u0114")
        buf.write("\u015a\5\"\22\2\u0115\u015a\5$\23\2\u0116\u015a\5&\24")
        buf.write("\2\u0117\u0118\7\24\2\2\u0118\u011b\5,\27\2\u0119\u011a")
        buf.write("\7\b\2\2\u011a\u011c\5:\36\2\u011b\u0119\3\2\2\2\u011b")
        buf.write("\u011c\3\2\2\2\u011c\u0125\3\2\2\2\u011d\u011e\7\62\2")
        buf.write("\2\u011e\u0121\5,\27\2\u011f\u0120\7\b\2\2\u0120\u0122")
        buf.write("\5:\36\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write("\u0124\3\2\2\2\u0123\u011d\3\2\2\2\u0124\u0127\3\2\2\2")
        buf.write("\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0128\3")
        buf.write("\2\2\2\u0127\u0125\3\2\2\2\u0128\u0129\7\63\2\2\u0129")
        buf.write("\u012a\5*\26\2\u012a\u015a\3\2\2\2\u012b\u012c\7M\2\2")
        buf.write("\u012c\u0131\7%\2\2\u012d\u012e\7-\2\2\u012e\u0130\7%")
        buf.write("\2\2\u012f\u012d\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0139\3\2\2\2\u0133")
        buf.write("\u0131\3\2\2\2\u0134\u0136\7\60\2\2\u0135\u0137\5H%\2")
        buf.write("\u0136\u0135\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3")
        buf.write("\2\2\2\u0138\u013a\7\61\2\2\u0139\u0134\3\2\2\2\u0139")
        buf.write("\u013a\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013d\7$\2\2")
        buf.write("\u013c\u012b\3\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3")
        buf.write("\2\2\2\u013e\u013f\3\2\2\2\u013f\u0155\3\2\2\2\u0140\u013e")
        buf.write("\3\2\2\2\u0141\u0142\7\36\2\2\u0142\u0148\7%\2\2\u0143")
        buf.write("\u0145\7\60\2\2\u0144\u0146\5H%\2\u0145\u0144\3\2\2\2")
        buf.write("\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0149\7")
        buf.write("\61\2\2\u0148\u0143\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u0156\3\2\2\2\u014a\u014b\7\3\2\2\u014b\u014c\7%\2\2")
        buf.write("\u014c\u014e\7\60\2\2\u014d\u014f\5\4\3\2\u014e\u014d")
        buf.write("\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u0153\7\61\2\2\u0151\u0152\7N\2\2\u0152\u0154\5,\27\2")
        buf.write("\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3")
        buf.write("\2\2\2\u0155\u0141\3\2\2\2\u0155\u014a\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\u0158\7\63\2\2\u0158\u015a\5*\26\2\u0159")
        buf.write("\u0105\3\2\2\2\u0159\u0113\3\2\2\2\u0159\u0114\3\2\2\2")
        buf.write("\u0159\u0115\3\2\2\2\u0159\u0116\3\2\2\2\u0159\u0117\3")
        buf.write("\2\2\2\u0159\u013e\3\2\2\2\u015a\t\3\2\2\2\u015b\u0161")
        buf.write("\5,\27\2\u015c\u015e\7/\2\2\u015d\u015c\3\2\2\2\u015d")
        buf.write("\u015e\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0161\5:\36\2")
        buf.write("\u0160\u015b\3\2\2\2\u0160\u015d\3\2\2\2\u0161\u016c\3")
        buf.write("\2\2\2\u0162\u0168\7\62\2\2\u0163\u0169\5,\27\2\u0164")
        buf.write("\u0166\7/\2\2\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2")
        buf.write("\u0166\u0167\3\2\2\2\u0167\u0169\5:\36\2\u0168\u0163\3")
        buf.write("\2\2\2\u0168\u0165\3\2\2\2\u0169\u016b\3\2\2\2\u016a\u0162")
        buf.write("\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016c")
        buf.write("\u016d\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2")
        buf.write("\u016f\u0171\7\62\2\2\u0170\u016f\3\2\2\2\u0170\u0171")
        buf.write("\3\2\2\2\u0171\u0196\3\2\2\2\u0172\u018e\5\20\t\2\u0173")
        buf.write("\u0181\7\37\2\2\u0174\u0175\7\6\2\2\u0175\u0182\5,\27")
        buf.write("\2\u0176\u017b\5,\27\2\u0177\u0178\7\62\2\2\u0178\u017a")
        buf.write("\5,\27\2\u0179\u0177\3\2\2\2\u017a\u017d\3\2\2\2\u017b")
        buf.write("\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017f\3\2\2\2")
        buf.write("\u017d\u017b\3\2\2\2\u017e\u0180\7\62\2\2\u017f\u017e")
        buf.write("\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182\3\2\2\2\u0181")
        buf.write("\u0174\3\2\2\2\u0181\u0176\3\2\2\2\u0181\u0182\3\2\2\2")
        buf.write("\u0182\u018f\3\2\2\2\u0183\u0188\5,\27\2\u0184\u0185\7")
        buf.write("\62\2\2\u0185\u0187\5,\27\2\u0186\u0184\3\2\2\2\u0187")
        buf.write("\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u018d\7")
        buf.write("\62\2\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018f\3\2\2\2\u018e\u0173\3\2\2\2\u018e\u0183\3\2\2\2")
        buf.write("\u018f\u0197\3\2\2\2\u0190\u0192\5\16\b\2\u0191\u0190")
        buf.write("\3\2\2\2\u0192\u0195\3\2\2\2\u0193\u0191\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0197\3\2\2\2\u0195\u0193\3\2\2\2")
        buf.write("\u0196\u0172\3\2\2\2\u0196\u0193\3\2\2\2\u0197\u021c\3")
        buf.write("\2\2\2\u0198\u019a\7 \2\2\u0199\u019b\7/\2\2\u019a\u0199")
        buf.write("\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c\3\2\2\2\u019c")
        buf.write("\u01a4\5:\36\2\u019d\u019f\7\62\2\2\u019e\u01a0\7/\2\2")
        buf.write("\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\3")
        buf.write("\2\2\2\u01a1\u01a3\5:\36\2\u01a2\u019d\3\2\2\2\u01a3\u01a6")
        buf.write("\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write("\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01a9\7\62\2")
        buf.write("\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u021c")
        buf.write("\3\2\2\2\u01aa\u021c\7!\2\2\u01ab\u021c\5\22\n\2\u01ac")
        buf.write("\u021c\5\24\13\2\u01ad\u021c\5\26\f\2\u01ae\u021c\5\30")
        buf.write("\r\2\u01af\u021c\5\32\16\2\u01b0\u01b1\7\7\2\2\u01b1\u01b6")
        buf.write("\7%\2\2\u01b2\u01b3\7-\2\2\u01b3\u01b5\7%\2\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b7\u01bb\3\2\2\2\u01b8\u01b6\3\2\2\2")
        buf.write("\u01b9\u01ba\7\b\2\2\u01ba\u01bc\7%\2\2\u01bb\u01b9\3")
        buf.write("\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01cc\3\2\2\2\u01bd\u01be")
        buf.write("\7\62\2\2\u01be\u01c3\7%\2\2\u01bf\u01c0\7-\2\2\u01c0")
        buf.write("\u01c2\7%\2\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c8\3")
        buf.write("\2\2\2\u01c5\u01c3\3\2\2\2\u01c6\u01c7\7\b\2\2\u01c7\u01c9")
        buf.write("\7%\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9")
        buf.write("\u01cb\3\2\2\2\u01ca\u01bd\3\2\2\2\u01cb\u01ce\3\2\2\2")
        buf.write("\u01cc\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u021c\3")
        buf.write("\2\2\2\u01ce\u01cc\3\2\2\2\u01cf\u01e3\7\6\2\2\u01d0\u01d2")
        buf.write("\t\2\2\2\u01d1\u01d0\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3")
        buf.write("\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d6\3\2\2\2")
        buf.write("\u01d5\u01d3\3\2\2\2\u01d6\u01db\7%\2\2\u01d7\u01d8\7")
        buf.write("-\2\2\u01d8\u01da\7%\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dd")
        buf.write("\3\2\2\2\u01db\u01d9\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc")
        buf.write("\u01e4\3\2\2\2\u01dd\u01db\3\2\2\2\u01de\u01e0\t\2\2\2")
        buf.write("\u01df\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01df\3")
        buf.write("\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01d3")
        buf.write("\3\2\2\2\u01e3\u01df\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("\u020f\7\7\2\2\u01e6\u0210\7/\2\2\u01e7\u01e8\7\60\2\2")
        buf.write("\u01e8\u01eb\7%\2\2\u01e9\u01ea\7\b\2\2\u01ea\u01ec\7")
        buf.write("%\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01f5")
        buf.write("\3\2\2\2\u01ed\u01ee\7\62\2\2\u01ee\u01f1\7%\2\2\u01ef")
        buf.write("\u01f0\7\b\2\2\u01f0\u01f2\7%\2\2\u01f1\u01ef\3\2\2\2")
        buf.write("\u01f1\u01f2\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01ed\3")
        buf.write("\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6")
        buf.write("\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8")
        buf.write("\u01fa\7\62\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2")
        buf.write("\2\u01fa\u01fb\3\2\2\2\u01fb\u0210\7\61\2\2\u01fc\u01ff")
        buf.write("\7%\2\2\u01fd\u01fe\7\b\2\2\u01fe\u0200\7%\2\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0209\3\2\2\2\u0201")
        buf.write("\u0202\7\62\2\2\u0202\u0205\7%\2\2\u0203\u0204\7\b\2\2")
        buf.write("\u0204\u0206\7%\2\2\u0205\u0203\3\2\2\2\u0205\u0206\3")
        buf.write("\2\2\2\u0206\u0208\3\2\2\2\u0207\u0201\3\2\2\2\u0208\u020b")
        buf.write("\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a")
        buf.write("\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020c\u020e\7\62\2")
        buf.write("\2\u020d\u020c\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210")
        buf.write("\3\2\2\2\u020f\u01e6\3\2\2\2\u020f\u01e7\3\2\2\2\u020f")
        buf.write("\u01fc\3\2\2\2\u0210\u021c\3\2\2\2\u0211\u0212\t\3\2\2")
        buf.write("\u0212\u0217\7%\2\2\u0213\u0214\7\62\2\2\u0214\u0216\7")
        buf.write("%\2\2\u0215\u0213\3\2\2\2\u0216\u0219\3\2\2\2\u0217\u0215")
        buf.write("\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021c\3\2\2\2\u0219")
        buf.write("\u0217\3\2\2\2\u021a\u021c\5\f\7\2\u021b\u0160\3\2\2\2")
        buf.write("\u021b\u0198\3\2\2\2\u021b\u01aa\3\2\2\2\u021b\u01ab\3")
        buf.write("\2\2\2\u021b\u01ac\3\2\2\2\u021b\u01ad\3\2\2\2\u021b\u01ae")
        buf.write("\3\2\2\2\u021b\u01af\3\2\2\2\u021b\u01b0\3\2\2\2\u021b")
        buf.write("\u01cf\3\2\2\2\u021b\u0211\3\2\2\2\u021b\u021a\3\2\2\2")
        buf.write("\u021c\13\3\2\2\2\u021d\u021e\7\13\2\2\u021e\u0221\5,")
        buf.write("\27\2\u021f\u0220\7\62\2\2\u0220\u0222\5,\27\2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0222\3\2\2\2\u0222\r\3\2\2\2\u0223\u024b")
        buf.write("\7\66\2\2\u0224\u0232\7\37\2\2\u0225\u0226\7\6\2\2\u0226")
        buf.write("\u0233\5,\27\2\u0227\u022c\5,\27\2\u0228\u0229\7\62\2")
        buf.write("\2\u0229\u022b\5,\27\2\u022a\u0228\3\2\2\2\u022b\u022e")
        buf.write("\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0231\7\62\2")
        buf.write("\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0233")
        buf.write("\3\2\2\2\u0232\u0225\3\2\2\2\u0232\u0227\3\2\2\2\u0232")
        buf.write("\u0233\3\2\2\2\u0233\u024c\3\2\2\2\u0234\u023a\5,\27\2")
        buf.write("\u0235\u0237\7/\2\2\u0236\u0235\3\2\2\2\u0236\u0237\3")
        buf.write("\2\2\2\u0237\u0238\3\2\2\2\u0238\u023a\5:\36\2\u0239\u0234")
        buf.write("\3\2\2\2\u0239\u0236\3\2\2\2\u023a\u0245\3\2\2\2\u023b")
        buf.write("\u0241\7\62\2\2\u023c\u0242\5,\27\2\u023d\u023f\7/\2\2")
        buf.write("\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\3")
        buf.write("\2\2\2\u0240\u0242\5:\36\2\u0241\u023c\3\2\2\2\u0241\u023e")
        buf.write("\3\2\2\2\u0242\u0244\3\2\2\2\u0243\u023b\3\2\2\2\u0244")
        buf.write("\u0247\3\2\2\2\u0245\u0243\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0248\u024a\7")
        buf.write("\62\2\2\u0249\u0248\3\2\2\2\u0249\u024a\3\2\2\2\u024a")
        buf.write("\u024c\3\2\2\2\u024b\u0224\3\2\2\2\u024b\u0239\3\2\2\2")
        buf.write("\u024c\17\3\2\2\2\u024d\u024e\t\4\2\2\u024e\21\3\2\2\2")
        buf.write("\u024f\u0250\7#\2\2\u0250\23\3\2\2\2\u0251\u0252\7\"\2")
        buf.write("\2\u0252\25\3\2\2\2\u0253\u025f\7\4\2\2\u0254\u0259\5")
        buf.write(",\27\2\u0255\u0256\7\62\2\2\u0256\u0258\5,\27\2\u0257")
        buf.write("\u0255\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3")
        buf.write("\2\2\2\u025c\u025e\7\62\2\2\u025d\u025c\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u0254\3\2\2\2")
        buf.write("\u025f\u0260\3\2\2\2\u0260\27\3\2\2\2\u0261\u0267\7\5")
        buf.write("\2\2\u0262\u0265\5,\27\2\u0263\u0264\7\6\2\2\u0264\u0266")
        buf.write("\5,\27\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write("\u0268\3\2\2\2\u0267\u0262\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268\31\3\2\2\2\u0269\u0277\7\37\2\2\u026a\u026b\7\6")
        buf.write("\2\2\u026b\u0278\5,\27\2\u026c\u0271\5,\27\2\u026d\u026e")
        buf.write("\7\62\2\2\u026e\u0270\5,\27\2\u026f\u026d\3\2\2\2\u0270")
        buf.write("\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2")
        buf.write("\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u0276\7")
        buf.write("\62\2\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2\u0276")
        buf.write("\u0278\3\2\2\2\u0277\u026a\3\2\2\2\u0277\u026c\3\2\2\2")
        buf.write("\u0277\u0278\3\2\2\2\u0278\33\3\2\2\2\u0279\u027a\7\f")
        buf.write("\2\2\u027a\u027b\5,\27\2\u027b\u027c\7\63\2\2\u027c\u0280")
        buf.write("\5*\26\2\u027d\u027f\5\36\20\2\u027e\u027d\3\2\2\2\u027f")
        buf.write("\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2")
        buf.write("\u0281\u0284\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0285\5")
        buf.write(" \21\2\u0284\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\35")
        buf.write("\3\2\2\2\u0286\u0287\7\r\2\2\u0287\u0288\5,\27\2\u0288")
        buf.write("\u0289\7\63\2\2\u0289\u028a\5*\26\2\u028a\37\3\2\2\2\u028b")
        buf.write("\u028c\7\16\2\2\u028c\u028d\7\63\2\2\u028d\u028e\5*\26")
        buf.write("\2\u028e!\3\2\2\2\u028f\u0290\7\17\2\2\u0290\u0291\5,")
        buf.write("\27\2\u0291\u0292\7\63\2\2\u0292\u0294\5*\26\2\u0293\u0295")
        buf.write("\5 \21\2\u0294\u0293\3\2\2\2\u0294\u0295\3\2\2\2\u0295")
        buf.write("#\3\2\2\2\u0296\u0298\7\20\2\2\u0297\u0299\7/\2\2\u0298")
        buf.write("\u0297\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u02a2\5:\36\2\u029b\u029d\7\62\2\2\u029c\u029e")
        buf.write("\7/\2\2\u029d\u029c\3\2\2\2\u029d\u029e\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u02a1\5:\36\2\u02a0\u029b\3\2\2\2")
        buf.write("\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3\3")
        buf.write("\2\2\2\u02a3\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u02a7")
        buf.write("\7\62\2\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a8\3\2\2\2\u02a8\u02a9\7\21\2\2\u02a9\u02ae\5,\27")
        buf.write("\2\u02aa\u02ab\7\62\2\2\u02ab\u02ad\5,\27\2\u02ac\u02aa")
        buf.write("\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b1\u02b3\7\62\2\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\7\63\2\2\u02b5")
        buf.write("\u02b7\5*\26\2\u02b6\u02b8\5 \21\2\u02b7\u02b6\3\2\2\2")
        buf.write("\u02b7\u02b8\3\2\2\2\u02b8%\3\2\2\2\u02b9\u02ba\7\22\2")
        buf.write("\2\u02ba\u02bb\7\63\2\2\u02bb\u02cf\5*\26\2\u02bc\u02bd")
        buf.write("\5(\25\2\u02bd\u02be\7\63\2\2\u02be\u02bf\5*\26\2\u02bf")
        buf.write("\u02c1\3\2\2\2\u02c0\u02bc\3\2\2\2\u02c1\u02c2\3\2\2\2")
        buf.write("\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c5\3")
        buf.write("\2\2\2\u02c4\u02c6\5 \21\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u02ca\3\2\2\2\u02c7\u02c8\7\23\2\2\u02c8")
        buf.write("\u02c9\7\63\2\2\u02c9\u02cb\5*\26\2\u02ca\u02c7\3\2\2")
        buf.write("\2\u02ca\u02cb\3\2\2\2\u02cb\u02d0\3\2\2\2\u02cc\u02cd")
        buf.write("\7\23\2\2\u02cd\u02ce\7\63\2\2\u02ce\u02d0\5*\26\2\u02cf")
        buf.write("\u02c0\3\2\2\2\u02cf\u02cc\3\2\2\2\u02d0\'\3\2\2\2\u02d1")
        buf.write("\u02d7\7\25\2\2\u02d2\u02d5\5,\27\2\u02d3\u02d4\7\b\2")
        buf.write("\2\u02d4\u02d6\7%\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02d2\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8)\3\2\2\2\u02d9\u02de\5\n\6\2\u02da")
        buf.write("\u02db\7\64\2\2\u02db\u02dd\5\n\6\2\u02dc\u02da\3\2\2")
        buf.write("\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df")
        buf.write("\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1")
        buf.write("\u02e3\7\64\2\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2")
        buf.write("\2\u02e3\u02e4\3\2\2\2\u02e4\u02e5\7$\2\2\u02e5\u02f0")
        buf.write("\3\2\2\2\u02e6\u02e7\7$\2\2\u02e7\u02e9\7^\2\2\u02e8\u02ea")
        buf.write("\5\b\5\2\u02e9\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb")
        buf.write("\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2")
        buf.write("\u02ed\u02ee\7_\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02d9\3")
        buf.write("\2\2\2\u02ef\u02e6\3\2\2\2\u02f0+\3\2\2\2\u02f1\u02f3")
        buf.write("\5\64\33\2\u02f2\u02f4\5.\30\2\u02f3\u02f2\3\2\2\2\u02f3")
        buf.write("\u02f4\3\2\2\2\u02f4\u02fc\3\2\2\2\u02f5\u02f7\7\26\2")
        buf.write("\2\u02f6\u02f8\5\6\4\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\7\63\2\2\u02fa")
        buf.write("\u02fc\5,\27\2\u02fb\u02f1\3\2\2\2\u02fb\u02f5\3\2\2\2")
        buf.write("\u02fc-\3\2\2\2\u02fd\u02fe\7\f\2\2\u02fe\u02ff\5\64\33")
        buf.write("\2\u02ff\u0300\5\60\31\2\u0300/\3\2\2\2\u0301\u0302\7")
        buf.write("\16\2\2\u0302\u0303\5,\27\2\u0303\61\3\2\2\2\u0304\u030c")
        buf.write("\5\64\33\2\u0305\u0307\7\26\2\2\u0306\u0308\5\6\4\2\u0307")
        buf.write("\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2")
        buf.write("\u0309\u030a\7\63\2\2\u030a\u030c\5\62\32\2\u030b\u0304")
        buf.write("\3\2\2\2\u030b\u0305\3\2\2\2\u030c\63\3\2\2\2\u030d\u0312")
        buf.write("\5\66\34\2\u030e\u030f\t\5\2\2\u030f\u0311\5\66\34\2\u0310")
        buf.write("\u030e\3\2\2\2\u0311\u0314\3\2\2\2\u0312\u0310\3\2\2\2")
        buf.write("\u0312\u0313\3\2\2\2\u0313\65\3\2\2\2\u0314\u0312\3\2")
        buf.write("\2\2\u0315\u0316\7\31\2\2\u0316\u0327\5\66\34\2\u0317")
        buf.write("\u0319\7/\2\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031a\3\2\2\2\u031a\u0323\5:\36\2\u031b\u031d\5")
        buf.write("8\35\2\u031c\u031e\7/\2\2\u031d\u031c\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\5:\36\2\u0320")
        buf.write("\u0322\3\2\2\2\u0321\u031b\3\2\2\2\u0322\u0325\3\2\2\2")
        buf.write("\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0327\3")
        buf.write("\2\2\2\u0325\u0323\3\2\2\2\u0326\u0315\3\2\2\2\u0326\u0318")
        buf.write("\3\2\2\2\u0327\67\3\2\2\2\u0328\u0336\7F\2\2\u0329\u0336")
        buf.write("\7G\2\2\u032a\u0336\7H\2\2\u032b\u0336\7I\2\2\u032c\u0336")
        buf.write("\7J\2\2\u032d\u0336\7K\2\2\u032e\u0336\7L\2\2\u032f\u0336")
        buf.write("\7\21\2\2\u0330\u0331\7\31\2\2\u0331\u0336\7\21\2\2\u0332")
        buf.write("\u0336\7\32\2\2\u0333\u0334\7\32\2\2\u0334\u0336\7\31")
        buf.write("\2\2\u0335\u0328\3\2\2\2\u0335\u0329\3\2\2\2\u0335\u032a")
        buf.write("\3\2\2\2\u0335\u032b\3\2\2\2\u0335\u032c\3\2\2\2\u0335")
        buf.write("\u032d\3\2\2\2\u0335\u032e\3\2\2\2\u0335\u032f\3\2\2\2")
        buf.write("\u0335\u0330\3\2\2\2\u0335\u0332\3\2\2\2\u0335\u0333\3")
        buf.write("\2\2\2\u03369\3\2\2\2\u0337\u033c\5<\37\2\u0338\u0339")
        buf.write("\t\6\2\2\u0339\u033b\5<\37\2\u033a\u0338\3\2\2\2\u033b")
        buf.write("\u033e\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2")
        buf.write("\u033d;\3\2\2\2\u033e\u033c\3\2\2\2\u033f\u0340\t\7\2")
        buf.write("\2\u0340\u034e\5<\37\2\u0341\u034e\5> \2\u0342\u0346\5")
        buf.write("@!\2\u0343\u0345\5B\"\2\u0344\u0343\3\2\2\2\u0345\u0348")
        buf.write("\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u034b\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034a\7\65\2")
        buf.write("\2\u034a\u034c\5<\37\2\u034b\u0349\3\2\2\2\u034b\u034c")
        buf.write("\3\2\2\2\u034c\u034e\3\2\2\2\u034d\u033f\3\2\2\2\u034d")
        buf.write("\u0341\3\2\2\2\u034d\u0342\3\2\2\2\u034e=\3\2\2\2\u034f")
        buf.write("\u0350\b \1\2\u0350\u0353\7%\2\2\u0351\u0352\7-\2\2\u0352")
        buf.write("\u0354\7%\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0355\3\2\2\2\u0355\u0357\7\60\2\2\u0356\u0358")
        buf.write("\5H%\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u035a\7\61\2\2\u035a\u0367\3\2\2\2\u035b")
        buf.write("\u035e\f\3\2\2\u035c\u035d\7-\2\2\u035d\u035f\7%\2\2\u035e")
        buf.write("\u035c\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2")
        buf.write("\u0360\u0362\7\60\2\2\u0361\u0363\5H%\2\u0362\u0361\3")
        buf.write("\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0366")
        buf.write("\7\61\2\2\u0365\u035b\3\2\2\2\u0366\u0369\3\2\2\2\u0367")
        buf.write("\u0365\3\2\2\2\u0367\u0368\3\2\2\2\u0368?\3\2\2\2\u0369")
        buf.write("\u0367\3\2\2\2\u036a\u0389\7\60\2\2\u036b\u0379\7\37\2")
        buf.write("\2\u036c\u036d\7\6\2\2\u036d\u037a\5,\27\2\u036e\u0373")
        buf.write("\5,\27\2\u036f\u0370\7\62\2\2\u0370\u0372\5,\27\2\u0371")
        buf.write("\u036f\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3")
        buf.write("\2\2\2\u0376\u0378\7\62\2\2\u0377\u0376\3\2\2\2\u0377")
        buf.write("\u0378\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u036c\3\2\2\2")
        buf.write("\u0379\u036e\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u038a\3")
        buf.write("\2\2\2\u037b\u0387\5,\27\2\u037c\u0388\5L\'\2\u037d\u037e")
        buf.write("\7\62\2\2\u037e\u0380\5,\27\2\u037f\u037d\3\2\2\2\u0380")
        buf.write("\u0383\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0384\u0386\7")
        buf.write("\62\2\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386")
        buf.write("\u0388\3\2\2\2\u0387\u037c\3\2\2\2\u0387\u0381\3\2\2\2")
        buf.write("\u0388\u038a\3\2\2\2\u0389\u036b\3\2\2\2\u0389\u037b\3")
        buf.write("\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u03ba")
        buf.write("\7\61\2\2\u038c\u038d\7\67\2\2\u038d\u038e\5L\'\2\u038e")
        buf.write("\u038f\78\2\2\u038f\u03ba\3\2\2\2\u0390\u039f\7\67\2\2")
        buf.write("\u0391\u039d\5,\27\2\u0392\u039e\5L\'\2\u0393\u0394\7")
        buf.write("\62\2\2\u0394\u0396\5,\27\2\u0395\u0393\3\2\2\2\u0396")
        buf.write("\u0399\3\2\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2")
        buf.write("\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u039c\7")
        buf.write("\62\2\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write("\u039e\3\2\2\2\u039d\u0392\3\2\2\2\u039d\u0397\3\2\2\2")
        buf.write("\u039e\u03a0\3\2\2\2\u039f\u0391\3\2\2\2\u039f\u03a0\3")
        buf.write("\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03ba\78\2\2\u03a2\u03a4")
        buf.write("\7D\2\2\u03a3\u03a5\5F$\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5")
        buf.write("\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03ba\7E\2\2\u03a7")
        buf.write("\u03b8\7%\2\2\u03a8\u03b8\7\'\2\2\u03a9\u03b8\7(\2\2\u03aa")
        buf.write("\u03b8\7)\2\2\u03ab\u03b8\7*\2\2\u03ac\u03b8\7+\2\2\u03ad")
        buf.write("\u03b8\7,\2\2\u03ae\u03b0\7&\2\2\u03af\u03ae\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b2\3\2\2\2")
        buf.write("\u03b2\u03b8\3\2\2\2\u03b3\u03b8\7.\2\2\u03b4\u03b8\7")
        buf.write("\33\2\2\u03b5\u03b8\7\34\2\2\u03b6\u03b8\7\35\2\2\u03b7")
        buf.write("\u03a7\3\2\2\2\u03b7\u03a8\3\2\2\2\u03b7\u03a9\3\2\2\2")
        buf.write("\u03b7\u03aa\3\2\2\2\u03b7\u03ab\3\2\2\2\u03b7\u03ac\3")
        buf.write("\2\2\2\u03b7\u03ad\3\2\2\2\u03b7\u03af\3\2\2\2\u03b7\u03b3")
        buf.write("\3\2\2\2\u03b7\u03b4\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7")
        buf.write("\u03b6\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9\u036a\3\2\2\2")
        buf.write("\u03b9\u038c\3\2\2\2\u03b9\u0390\3\2\2\2\u03b9\u03a2\3")
        buf.write("\2\2\2\u03b9\u03b7\3\2\2\2\u03baA\3\2\2\2\u03bb\u03bd")
        buf.write("\7\60\2\2\u03bc\u03be\5H%\2\u03bd\u03bc\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03d1\7\61\2")
        buf.write("\2\u03c0\u03c1\7\67\2\2\u03c1\u03c6\5D#\2\u03c2\u03c3")
        buf.write("\7\62\2\2\u03c3\u03c5\5D#\2\u03c4\u03c2\3\2\2\2\u03c5")
        buf.write("\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2")
        buf.write("\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03cb\7")
        buf.write("\62\2\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb")
        buf.write("\u03cc\3\2\2\2\u03cc\u03cd\78\2\2\u03cd\u03d1\3\2\2\2")
        buf.write("\u03ce\u03cf\7-\2\2\u03cf\u03d1\7%\2\2\u03d0\u03bb\3\2")
        buf.write("\2\2\u03d0\u03c0\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1C\3")
        buf.write("\2\2\2\u03d2\u03e1\5,\27\2\u03d3\u03d5\5,\27\2\u03d4\u03d3")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6")
        buf.write("\u03d8\7\63\2\2\u03d7\u03d9\5,\27\2\u03d8\u03d7\3\2\2")
        buf.write("\2\u03d8\u03d9\3\2\2\2\u03d9\u03de\3\2\2\2\u03da\u03dc")
        buf.write("\7\63\2\2\u03db\u03dd\5,\27\2\u03dc\u03db\3\2\2\2\u03dc")
        buf.write("\u03dd\3\2\2\2\u03dd\u03df\3\2\2\2\u03de\u03da\3\2\2\2")
        buf.write("\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2\u03e0\u03d2\3")
        buf.write("\2\2\2\u03e0\u03d4\3\2\2\2\u03e1E\3\2\2\2\u03e2\u0401")
        buf.write("\5,\27\2\u03e3\u03e4\7\63\2\2\u03e4\u03e6\5,\27\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\3\2\2\2")
        buf.write("\u03e7\u0402\5L\'\2\u03e8\u03e9\7\63\2\2\u03e9\u03f1\5")
        buf.write(",\27\2\u03ea\u03eb\7\62\2\2\u03eb\u03ec\5,\27\2\u03ec")
        buf.write("\u03ed\7\63\2\2\u03ed\u03ee\5,\27\2\u03ee\u03f0\3\2\2")
        buf.write("\2\u03ef\u03ea\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef")
        buf.write("\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f4\u03f6\7\62\2\2\u03f5\u03f4\3\2\2")
        buf.write("\2\u03f5\u03f6\3\2\2\2\u03f6\u0402\3\2\2\2\u03f7\u03f8")
        buf.write("\7\62\2\2\u03f8\u03fa\5,\27\2\u03f9\u03f7\3\2\2\2\u03fa")
        buf.write("\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb\u03fc\3\2\2\2")
        buf.write("\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fe\u0400\7")
        buf.write("\62\2\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400")
        buf.write("\u0402\3\2\2\2\u0401\u03e5\3\2\2\2\u0401\u03e8\3\2\2\2")
        buf.write("\u0401\u03fb\3\2\2\2\u0402G\3\2\2\2\u0403\u0409\5,\27")
        buf.write("\2\u0404\u0406\5L\'\2\u0405\u0404\3\2\2\2\u0405\u0406")
        buf.write("\3\2\2\2\u0406\u040a\3\2\2\2\u0407\u0408\7\66\2\2\u0408")
        buf.write("\u040a\5,\27\2\u0409\u0405\3\2\2\2\u0409\u0407\3\2\2\2")
        buf.write("\u040a\u040b\3\2\2\2\u040b\u040c\7\62\2\2\u040c\u040e")
        buf.write("\3\2\2\2\u040d\u0403\3\2\2\2\u040e\u0411\3\2\2\2\u040f")
        buf.write("\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0434\3\2\2\2")
        buf.write("\u0411\u040f\3\2\2\2\u0412\u0418\5,\27\2\u0413\u0415\5")
        buf.write("L\'\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0419")
        buf.write("\3\2\2\2\u0416\u0417\7\66\2\2\u0417\u0419\5,\27\2\u0418")
        buf.write("\u0414\3\2\2\2\u0418\u0416\3\2\2\2\u0419\u041b\3\2\2\2")
        buf.write("\u041a\u041c\7\62\2\2\u041b\u041a\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u0435\3\2\2\2\u041d\u041e\7/\2\2\u041e")
        buf.write("\u042a\5,\27\2\u041f\u0420\7\62\2\2\u0420\u0426\5,\27")
        buf.write("\2\u0421\u0423\5L\'\2\u0422\u0421\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0427\3\2\2\2\u0424\u0425\7\66\2\2\u0425")
        buf.write("\u0427\5,\27\2\u0426\u0422\3\2\2\2\u0426\u0424\3\2\2\2")
        buf.write("\u0427\u0429\3\2\2\2\u0428\u041f\3\2\2\2\u0429\u042c\3")
        buf.write("\2\2\2\u042a\u0428\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0430")
        buf.write("\3\2\2\2\u042c\u042a\3\2\2\2\u042d\u042e\7\62\2\2\u042e")
        buf.write("\u042f\7\65\2\2\u042f\u0431\5,\27\2\u0430\u042d\3\2\2")
        buf.write("\2\u0430\u0431\3\2\2\2\u0431\u0435\3\2\2\2\u0432\u0433")
        buf.write("\7\65\2\2\u0433\u0435\5,\27\2\u0434\u0412\3\2\2\2\u0434")
        buf.write("\u041d\3\2\2\2\u0434\u0432\3\2\2\2\u0435I\3\2\2\2\u0436")
        buf.write("\u043d\5L\'\2\u0437\u0438\7\f\2\2\u0438\u043a\5\62\32")
        buf.write("\2\u0439\u043b\5J&\2\u043a\u0439\3\2\2\2\u043a\u043b\3")
        buf.write("\2\2\2\u043b\u043d\3\2\2\2\u043c\u0436\3\2\2\2\u043c\u0437")
        buf.write("\3\2\2\2\u043dK\3\2\2\2\u043e\u0440\7\20\2\2\u043f\u0441")
        buf.write("\7/\2\2\u0440\u043f\3\2\2\2\u0440\u0441\3\2\2\2\u0441")
        buf.write("\u0442\3\2\2\2\u0442\u044a\5:\36\2\u0443\u0445\7\62\2")
        buf.write("\2\u0444\u0446\7/\2\2\u0445\u0444\3\2\2\2\u0445\u0446")
        buf.write("\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449\5:\36\2\u0448")
        buf.write("\u0443\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448\3\2\2\2")
        buf.write("\u044a\u044b\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a\3")
        buf.write("\2\2\2\u044d\u044f\7\62\2\2\u044e\u044d\3\2\2\2\u044e")
        buf.write("\u044f\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451\7\21\2")
        buf.write("\2\u0451\u0453\5\64\33\2\u0452\u0454\5J&\2\u0453\u0452")
        buf.write("\3\2\2\2\u0453\u0454\3\2\2\2\u0454M\3\2\2\2\u00cbPRZ^")
        buf.write("dhltv|\u0080\u0084\u008c\u008e\u0094\u0096\u0098\u009e")
        buf.write("\u00a0\u00a6\u00aa\u00ae\u00b6\u00b8\u00be\u00c0\u00c5")
        buf.write("\u00cb\u00cf\u00d5\u00db\u00df\u00e5\u00e9\u00eb\u00ef")
        buf.write("\u00f5\u00f9\u00ff\u0103\u010a\u010e\u0111\u011b\u0121")
        buf.write("\u0125\u0131\u0136\u0139\u013e\u0145\u0148\u014e\u0153")
        buf.write("\u0155\u0159\u015d\u0160\u0165\u0168\u016c\u0170\u017b")
        buf.write("\u017f\u0181\u0188\u018c\u018e\u0193\u0196\u019a\u019f")
        buf.write("\u01a4\u01a8\u01b6\u01bb\u01c3\u01c8\u01cc\u01d3\u01db")
        buf.write("\u01e1\u01e3\u01eb\u01f1\u01f5\u01f9\u01ff\u0205\u0209")
        buf.write("\u020d\u020f\u0217\u021b\u0221\u022c\u0230\u0232\u0236")
        buf.write("\u0239\u023e\u0241\u0245\u0249\u024b\u0259\u025d\u025f")
        buf.write("\u0265\u0267\u0271\u0275\u0277\u0280\u0284\u0294\u0298")
        buf.write("\u029d\u02a2\u02a6\u02ae\u02b2\u02b7\u02c2\u02c5\u02ca")
        buf.write("\u02cf\u02d5\u02d7\u02de\u02e2\u02eb\u02ef\u02f3\u02f7")
        buf.write("\u02fb\u0307\u030b\u0312\u0318\u031d\u0323\u0326\u0335")
        buf.write("\u033c\u0346\u034b\u034d\u0353\u0357\u035e\u0362\u0367")
        buf.write("\u0373\u0377\u0379\u0381\u0385\u0387\u0389\u0397\u039b")
        buf.write("\u039d\u039f\u03a4\u03b1\u03b7\u03b9\u03bd\u03c6\u03ca")
        buf.write("\u03d0\u03d4\u03d8\u03dc\u03de\u03e0\u03e5\u03f1\u03f5")
        buf.write("\u03fb\u03ff\u0401\u0405\u0409\u040f\u0414\u0418\u041b")
        buf.write("\u0422\u0426\u042a\u0430\u0434\u043a\u043c\u0440\u0445")
        buf.write("\u044a\u044e\u0453")
        return buf.getvalue()


class Python3Parser(ParserWithTimeLimit):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'...'",
                    "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='",
                    "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'",
                    "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'",
                    "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='",
                    "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='",
                    "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='",
                    "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_BYTES_LITERAL",
                     "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER",
                     "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS",
                     "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON",
                     "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK",
                     "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT",
                     "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE",
                     "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS",
                     "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW",
                     "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN",
                     "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN",
                     "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN",
                     "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR",
                     "INDENT", "DEDENT"]

    RULE_file_input = 0
    RULE_typedargslist = 1
    RULE_varargslist = 2
    RULE_stmt = 3
    RULE_small_stmt = 4
    RULE_assert_stmt = 5
    RULE_assign = 6
    RULE_augassign = 7
    RULE_break_stmt = 8
    RULE_continue_stmt = 9
    RULE_return_stmt = 10
    RULE_raise_stmt = 11
    RULE_yield_stmt = 12
    RULE_if_stmt = 13
    RULE_elif_stmt = 14
    RULE_else_suite = 15
    RULE_while_stmt = 16
    RULE_for_stmt = 17
    RULE_try_stmt = 18
    RULE_except_clause = 19
    RULE_suite = 20
    RULE_test = 21
    RULE_if_stmt2 = 22
    RULE_else_stmt = 23
    RULE_test_nocond = 24
    RULE_or_test = 25
    RULE_not_test = 26
    RULE_comp_op = 27
    RULE_expr = 28
    RULE_factor = 29
    RULE_call = 30
    RULE_atom = 31
    RULE_trailer = 32
    RULE_subscript = 33
    RULE_dictorsetmaker = 34
    RULE_arglist = 35
    RULE_comp_iter = 36
    RULE_comp_for = 37

    ruleNames = ["file_input", "typedargslist", "varargslist", "stmt",
                 "small_stmt", "assert_stmt", "assign", "augassign", "break_stmt",
                 "continue_stmt", "return_stmt", "raise_stmt", "yield_stmt",
                 "if_stmt", "elif_stmt", "else_suite", "while_stmt", "for_stmt",
                 "try_stmt", "except_clause", "suite", "test", "if_stmt2",
                 "else_stmt", "test_nocond", "or_test", "not_test", "comp_op",
                 "expr", "factor", "call", "atom", "trailer", "subscript",
                 "dictorsetmaker", "arglist", "comp_iter", "comp_for"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_BYTES_LITERAL = 36
    DECIMAL_INTEGER = 37
    OCT_INTEGER = 38
    HEX_INTEGER = 39
    BIN_INTEGER = 40
    FLOAT_NUMBER = 41
    IMAG_NUMBER = 42
    DOT = 43
    ELLIPSIS = 44
    STAR = 45
    OPEN_PAREN = 46
    CLOSE_PAREN = 47
    COMMA = 48
    COLON = 49
    SEMI_COLON = 50
    POWER = 51
    ASSIGN = 52
    OPEN_BRACK = 53
    CLOSE_BRACK = 54
    OR_OP = 55
    XOR = 56
    AND_OP = 57
    LEFT_SHIFT = 58
    RIGHT_SHIFT = 59
    ADD = 60
    MINUS = 61
    DIV = 62
    MOD = 63
    IDIV = 64
    NOT_OP = 65
    OPEN_BRACE = 66
    CLOSE_BRACE = 67
    LESS_THAN = 68
    GREATER_THAN = 69
    EQUALS = 70
    GT_EQ = 71
    LT_EQ = 72
    NOT_EQ_1 = 73
    NOT_EQ_2 = 74
    AT = 75
    ARROW = 76
    ADD_ASSIGN = 77
    SUB_ASSIGN = 78
    MULT_ASSIGN = 79
    AT_ASSIGN = 80
    DIV_ASSIGN = 81
    MOD_ASSIGN = 82
    AND_ASSIGN = 83
    OR_ASSIGN = 84
    XOR_ASSIGN = 85
    LEFT_SHIFT_ASSIGN = 86
    RIGHT_SHIFT_ASSIGN = 87
    POWER_ASSIGN = 88
    IDIV_ASSIGN = 89
    SKIP_ = 90
    UNKNOWN_CHAR = 91
    INDENT = 92
    DEDENT = 93

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._predicates = None

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 80
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                    1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                            1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (
                            1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (
                            1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                            1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (
                            1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (
                            1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                            1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                            1 << Python3Parser.STRING_BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                            1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                            1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                            1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                            1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (
                            1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (
                            1 << Python3Parser.MINUS))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                    1 << (Python3Parser.AT - 65)))) != 0):
                self.state = 78
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NEWLINE:
                    self.state = 76
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM,
                               Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT,
                               Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY,
                               Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE,
                               Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD,
                               Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK,
                               Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                               Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                               Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE,
                               Python3Parser.AT]:
                    self.state = 77
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 82
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 83
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 85
                self.match(Python3Parser.NAME)
                self.state = 88
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 86
                    self.match(Python3Parser.COLON)
                    self.state = 87
                    self.test()

                self.state = 92
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 90
                    self.match(Python3Parser.ASSIGN)
                    self.state = 91
                    self.test()

                self.state = 106
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 94
                        self.match(Python3Parser.COMMA)
                        self.state = 95
                        self.match(Python3Parser.NAME)
                        self.state = 98
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 96
                            self.match(Python3Parser.COLON)
                            self.state = 97
                            self.test()

                        self.state = 102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 100
                            self.match(Python3Parser.ASSIGN)
                            self.state = 101
                            self.test()

                    self.state = 108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 109
                    self.match(Python3Parser.COMMA)
                    self.state = 148
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 110
                        self.match(Python3Parser.STAR)
                        self.state = 116
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 111
                            self.match(Python3Parser.NAME)
                            self.state = 114
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 112
                                self.match(Python3Parser.COLON)
                                self.state = 113
                                self.test()

                        self.state = 130
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 118
                                self.match(Python3Parser.COMMA)
                                self.state = 119
                                self.match(Python3Parser.NAME)
                                self.state = 122
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.COLON:
                                    self.state = 120
                                    self.match(Python3Parser.COLON)
                                    self.state = 121
                                    self.test()

                                self.state = 126
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 124
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 125
                                    self.test()

                            self.state = 132
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                        self.state = 140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 133
                            self.match(Python3Parser.COMMA)
                            self.state = 134
                            self.match(Python3Parser.POWER)
                            self.state = 135
                            self.match(Python3Parser.NAME)
                            self.state = 138
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 136
                                self.match(Python3Parser.COLON)
                                self.state = 137
                                self.test()

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 142
                        self.match(Python3Parser.POWER)
                        self.state = 143
                        self.match(Python3Parser.NAME)
                        self.state = 146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 144
                            self.match(Python3Parser.COLON)
                            self.state = 145
                            self.test()

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 152
                self.match(Python3Parser.STAR)
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 153
                    self.match(Python3Parser.NAME)
                    self.state = 156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 154
                        self.match(Python3Parser.COLON)
                        self.state = 155
                        self.test()

                self.state = 172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 160
                        self.match(Python3Parser.COMMA)
                        self.state = 161
                        self.match(Python3Parser.NAME)
                        self.state = 164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 162
                            self.match(Python3Parser.COLON)
                            self.state = 163
                            self.test()

                        self.state = 168
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 166
                            self.match(Python3Parser.ASSIGN)
                            self.state = 167
                            self.test()

                    self.state = 174
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 175
                    self.match(Python3Parser.COMMA)
                    self.state = 176
                    self.match(Python3Parser.POWER)
                    self.state = 177
                    self.match(Python3Parser.NAME)
                    self.state = 180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 178
                        self.match(Python3Parser.COLON)
                        self.state = 179
                        self.test()

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.match(Python3Parser.POWER)
                self.state = 185
                self.match(Python3Parser.NAME)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 186
                    self.match(Python3Parser.COLON)
                    self.state = 187
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NAME:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.match(Python3Parser.NAME)
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 193
                    self.match(Python3Parser.ASSIGN)
                    self.state = 194
                    self.test()

                self.state = 205
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 197
                        self.match(Python3Parser.COMMA)
                        self.state = 198
                        self.match(Python3Parser.NAME)
                        self.state = 201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 199
                            self.match(Python3Parser.ASSIGN)
                            self.state = 200
                            self.test()

                    self.state = 207
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 208
                    self.match(Python3Parser.COMMA)
                    self.state = 231
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.STAR:
                        self.state = 209
                        self.match(Python3Parser.STAR)
                        self.state = 211
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 210
                            self.match(Python3Parser.NAME)

                        self.state = 221
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 213
                                self.match(Python3Parser.COMMA)
                                self.state = 214
                                self.match(Python3Parser.NAME)
                                self.state = 217
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 215
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 216
                                    self.test()

                            self.state = 223
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

                        self.state = 227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 224
                            self.match(Python3Parser.COMMA)
                            self.state = 225
                            self.match(Python3Parser.POWER)
                            self.state = 226
                            self.match(Python3Parser.NAME)

                        pass
                    elif token == Python3Parser.POWER:
                        self.state = 229
                        self.match(Python3Parser.POWER)
                        self.state = 230
                        self.match(Python3Parser.NAME)
                        pass
                    elif token == Python3Parser.COLON:
                        pass
                    else:
                        pass

                pass
            elif token == Python3Parser.STAR:
                self.enterOuterAlt(localctx, 2)
                self.state = 235
                self.match(Python3Parser.STAR)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 236
                    self.match(Python3Parser.NAME)

                self.state = 247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 239
                        self.match(Python3Parser.COMMA)
                        self.state = 240
                        self.match(Python3Parser.NAME)
                        self.state = 243
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 241
                            self.match(Python3Parser.ASSIGN)
                            self.state = 242
                            self.test()

                    self.state = 249
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 250
                    self.match(Python3Parser.COMMA)
                    self.state = 251
                    self.match(Python3Parser.POWER)
                    self.state = 252
                    self.match(Python3Parser.NAME)

                pass
            elif token == Python3Parser.POWER:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self.match(Python3Parser.POWER)
                self.state = 256
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def arglist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArglistContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArglistContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        self._la = 0  # Token type
        try:
            self.state = 343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.small_stmt()
                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 260
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 261
                        self.small_stmt()
                    self.state = 266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 267
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
                if la_ == 1:
                    self.state = 270
                    self.match(Python3Parser.NEWLINE)

                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.if_stmt()
                pass
            elif token == Python3Parser.WHILE:
                self.enterOuterAlt(localctx, 3)
                self.state = 274
                self.while_stmt()
                pass
            elif token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 4)
                self.state = 275
                self.for_stmt()
                pass
            elif token == Python3Parser.TRY:
                self.enterOuterAlt(localctx, 5)
                self.state = 276
                self.try_stmt()
                pass
            elif token == Python3Parser.WITH:
                self.enterOuterAlt(localctx, 6)
                self.state = 277
                self.match(Python3Parser.WITH)
                self.state = 278
                self.test()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 279
                    self.match(Python3Parser.AS)
                    self.state = 280
                    self.expr()

                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 283
                    self.match(Python3Parser.COMMA)
                    self.state = 284
                    self.test()
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 285
                        self.match(Python3Parser.AS)
                        self.state = 286
                        self.expr()

                    self.state = 293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 294
                self.match(Python3Parser.COLON)
                self.state = 295
                self.suite()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.AT:
                    self.state = 297
                    self.match(Python3Parser.AT)
                    self.state = 298
                    self.match(Python3Parser.NAME)
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 299
                        self.match(Python3Parser.DOT)
                        self.state = 300
                        self.match(Python3Parser.NAME)
                        self.state = 305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 306
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 307
                            self.arglist()

                        self.state = 310
                        self.match(Python3Parser.CLOSE_PAREN)

                    self.state = 313
                    self.match(Python3Parser.NEWLINE)
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.CLASS:
                    self.state = 319
                    self.match(Python3Parser.CLASS)
                    self.state = 320
                    self.match(Python3Parser.NAME)
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 321
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                                (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                                1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                        1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                        1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                        1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                        1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                        1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                        1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                        1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                        1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                        1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 322
                            self.arglist()

                        self.state = 325
                        self.match(Python3Parser.CLOSE_PAREN)

                    pass
                elif token == Python3Parser.DEF:
                    self.state = 328
                    self.match(Python3Parser.DEF)
                    self.state = 329
                    self.match(Python3Parser.NAME)
                    self.state = 330
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                        self.state = 331
                        self.typedargslist()

                    self.state = 334
                    self.match(Python3Parser.CLOSE_PAREN)
                    self.state = 337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.ARROW:
                        self.state = 335
                        self.match(Python3Parser.ARROW)
                        self.state = 336
                        self.test()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 341
                self.match(Python3Parser.COLON)
                self.state = 342
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext, 0)

        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_small_stmt)
        self._la = 0  # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 345
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 346
                        self.match(Python3Parser.STAR)

                    self.state = 349
                    self.expr()
                    pass

                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 352
                        self.match(Python3Parser.COMMA)
                        self.state = 358
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                        if la_ == 1:
                            self.state = 353
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 355
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 354
                                self.match(Python3Parser.STAR)

                            self.state = 357
                            self.expr()
                            pass

                    self.state = 364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 365
                    self.match(Python3Parser.COMMA)

                self.state = 404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                             Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                             Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                             Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN,
                             Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                    self.state = 368
                    self.augassign()
                    self.state = 396
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.YIELD:
                        self.state = 369
                        self.match(Python3Parser.YIELD)
                        self.state = 383
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
                        if la_ == 1:
                            self.state = 370
                            self.match(Python3Parser.FROM)
                            self.state = 371
                            self.test()

                        elif la_ == 2:
                            self.state = 372
                            self.test()
                            self.state = 377
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 373
                                    self.match(Python3Parser.COMMA)
                                    self.state = 374
                                    self.test()
                                self.state = 379
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

                            self.state = 381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COMMA:
                                self.state = 380
                                self.match(Python3Parser.COMMA)

                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 385
                        self.test()
                        self.state = 390
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 386
                                self.match(Python3Parser.COMMA)
                                self.state = 387
                                self.test()
                            self.state = 392
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

                        self.state = 394
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 393
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Python3Parser.EOF, Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE,
                               Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL,
                               Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR,
                               Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT,
                               Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS,
                               Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                               Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME,
                               Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                               Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                               Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                               Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.SEMI_COLON,
                               Python3Parser.ASSIGN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                               Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT, Python3Parser.DEDENT]:
                    self.state = 401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.ASSIGN:
                        self.state = 398
                        self.assign()
                        self.state = 403
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == Python3Parser.DEL:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(Python3Parser.DEL)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 407
                    self.match(Python3Parser.STAR)

                self.state = 410
                self.expr()
                self.state = 418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 411
                        self.match(Python3Parser.COMMA)
                        self.state = 413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 412
                            self.match(Python3Parser.STAR)

                        self.state = 415
                        self.expr()
                    self.state = 420
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 72, self._ctx)

                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 421
                    self.match(Python3Parser.COMMA)

                pass
            elif token == Python3Parser.PASS:
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.match(Python3Parser.PASS)
                pass
            elif token == Python3Parser.BREAK:
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.break_stmt()
                pass
            elif token == Python3Parser.CONTINUE:
                self.enterOuterAlt(localctx, 5)
                self.state = 426
                self.continue_stmt()
                pass
            elif token == Python3Parser.RETURN:
                self.enterOuterAlt(localctx, 6)
                self.state = 427
                self.return_stmt()
                pass
            elif token == Python3Parser.RAISE:
                self.enterOuterAlt(localctx, 7)
                self.state = 428
                self.raise_stmt()
                pass
            elif token == Python3Parser.YIELD:
                self.enterOuterAlt(localctx, 8)
                self.state = 429
                self.yield_stmt()
                pass
            elif token == Python3Parser.IMPORT:
                self.enterOuterAlt(localctx, 9)
                self.state = 430
                self.match(Python3Parser.IMPORT)
                self.state = 431
                self.match(Python3Parser.NAME)
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.DOT:
                    self.state = 432
                    self.match(Python3Parser.DOT)
                    self.state = 433
                    self.match(Python3Parser.NAME)
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 439
                    self.match(Python3Parser.AS)
                    self.state = 440
                    self.match(Python3Parser.NAME)

                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 443
                    self.match(Python3Parser.COMMA)
                    self.state = 444
                    self.match(Python3Parser.NAME)
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 445
                        self.match(Python3Parser.DOT)
                        self.state = 446
                        self.match(Python3Parser.NAME)
                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 452
                        self.match(Python3Parser.AS)
                        self.state = 453
                        self.match(Python3Parser.NAME)

                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.FROM:
                self.enterOuterAlt(localctx, 10)
                self.state = 461
                self.match(Python3Parser.FROM)
                self.state = 481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
                if la_ == 1:
                    self.state = 465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                        self.state = 462
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 468
                    self.match(Python3Parser.NAME)
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 469
                        self.match(Python3Parser.DOT)
                        self.state = 470
                        self.match(Python3Parser.NAME)
                        self.state = 475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 476
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            break

                    pass

                self.state = 483
                self.match(Python3Parser.IMPORT)
                self.state = 525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.STAR:
                    self.state = 484
                    self.match(Python3Parser.STAR)
                    pass
                elif token == Python3Parser.OPEN_PAREN:
                    self.state = 485
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 486
                    self.match(Python3Parser.NAME)
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 487
                        self.match(Python3Parser.AS)
                        self.state = 488
                        self.match(Python3Parser.NAME)

                    self.state = 499
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 491
                            self.match(Python3Parser.COMMA)
                            self.state = 492
                            self.match(Python3Parser.NAME)
                            self.state = 495
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 493
                                self.match(Python3Parser.AS)
                                self.state = 494
                                self.match(Python3Parser.NAME)

                        self.state = 501
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 85, self._ctx)

                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 502
                        self.match(Python3Parser.COMMA)

                    self.state = 505
                    self.match(Python3Parser.CLOSE_PAREN)
                    pass
                elif token == Python3Parser.NAME:
                    self.state = 506
                    self.match(Python3Parser.NAME)
                    self.state = 509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 507
                        self.match(Python3Parser.AS)
                        self.state = 508
                        self.match(Python3Parser.NAME)

                    self.state = 519
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 511
                            self.match(Python3Parser.COMMA)
                            self.state = 512
                            self.match(Python3Parser.NAME)
                            self.state = 515
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 513
                                self.match(Python3Parser.AS)
                                self.state = 514
                                self.match(Python3Parser.NAME)

                        self.state = 521
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)

                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 522
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.GLOBAL, Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 11)
                self.state = 527
                _la = self._input.LA(1)
                if not (_la == Python3Parser.GLOBAL or _la == Python3Parser.NONLOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 528
                self.match(Python3Parser.NAME)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 529
                    self.match(Python3Parser.COMMA)
                    self.state = 530
                    self.match(Python3Parser.NAME)
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token == Python3Parser.ASSERT:
                self.enterOuterAlt(localctx, 12)
                self.state = 536
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssert_stmt"):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)

    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assert_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(Python3Parser.ASSERT)
            self.state = 540
            self.test()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 541
                self.match(Python3Parser.COMMA)
                self.state = 542
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(Python3Parser.ASSIGN)
            self.state = 585
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.YIELD:
                self.state = 546
                self.match(Python3Parser.YIELD)
                self.state = 560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 547
                    self.match(Python3Parser.FROM)
                    self.state = 548
                    self.test()

                elif la_ == 2:
                    self.state = 549
                    self.test()
                    self.state = 554
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 550
                            self.match(Python3Parser.COMMA)
                            self.state = 551
                            self.test()
                        self.state = 556
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)

                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 557
                        self.match(Python3Parser.COMMA)

                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                           Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                           Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                           Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                           Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                           Python3Parser.OPEN_BRACE]:
                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
                if la_ == 1:
                    self.state = 562
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 563
                        self.match(Python3Parser.STAR)

                    self.state = 566
                    self.expr()
                    pass

                self.state = 579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 569
                        self.match(Python3Parser.COMMA)
                        self.state = 575
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
                        if la_ == 1:
                            self.state = 570
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 572
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 571
                                self.match(Python3Parser.STAR)

                            self.state = 574
                            self.expr()
                            pass

                    self.state = 581
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 102, self._ctx)

                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 582
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            _la = self._input.LA(1)
            if not (((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & (
                    (1 << (Python3Parser.ADD_ASSIGN - 77)) | (1 << (Python3Parser.SUB_ASSIGN - 77)) | (
                    1 << (Python3Parser.MULT_ASSIGN - 77)) | (1 << (Python3Parser.AT_ASSIGN - 77)) | (
                            1 << (Python3Parser.DIV_ASSIGN - 77)) | (1 << (Python3Parser.MOD_ASSIGN - 77)) | (
                            1 << (Python3Parser.AND_ASSIGN - 77)) | (1 << (Python3Parser.OR_ASSIGN - 77)) | (
                            1 << (Python3Parser.XOR_ASSIGN - 77)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 77)) | (
                            1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 77)) | (1 << (Python3Parser.POWER_ASSIGN - 77)) | (
                            1 << (Python3Parser.IDIV_ASSIGN - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinue_stmt"):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)

    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_stmt"):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)

    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_return_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(Python3Parser.RETURN)
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.state = 594
                self.test()
                self.state = 599
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 595
                        self.match(Python3Parser.COMMA)
                        self.state = 596
                        self.test()
                    self.state = 601
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)

                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 602
                    self.match(Python3Parser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_raise_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(Python3Parser.RAISE)
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.state = 608
                self.test()
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.match(Python3Parser.FROM)
                    self.state = 610
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitYield_stmt"):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)

    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_yield_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(Python3Parser.YIELD)
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(Python3Parser.FROM)
                self.state = 617
                self.test()

            elif la_ == 2:
                self.state = 618
                self.test()
                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 619
                        self.match(Python3Parser.COMMA)
                        self.state = 620
                        self.test()
                    self.state = 625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 626
                    self.match(Python3Parser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def elif_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Elif_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Elif_stmtContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(Python3Parser.IF)
            self.state = 632
            self.test()
            self.state = 633
            self.match(Python3Parser.COLON)
            self.state = 634
            self.suite()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 635
                self.elif_stmt()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 641
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elif_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(Python3Parser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_elif_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElif_stmt"):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)

    def elif_stmt(self):

        localctx = Python3Parser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(Python3Parser.ELIF)
            self.state = 645
            self.test()
            self.state = 646
            self.match(Python3Parser.COLON)
            self.state = 647
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(Python3Parser.ELSE)
            self.state = 650
            self.match(Python3Parser.COLON)
            self.state = 651
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(Python3Parser.WHILE)
            self.state = 654
            self.test()
            self.state = 655
            self.match(Python3Parser.COLON)
            self.state = 656
            self.suite()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 657
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(Python3Parser.FOR)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 661
                self.match(Python3Parser.STAR)

            self.state = 664
            self.expr()
            self.state = 672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 665
                    self.match(Python3Parser.COMMA)
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 666
                        self.match(Python3Parser.STAR)

                    self.state = 669
                    self.expr()
                self.state = 674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)

            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 675
                self.match(Python3Parser.COMMA)

            self.state = 678
            self.match(Python3Parser.IN)
            self.state = 679
            self.test()
            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 680
                    self.match(Python3Parser.COMMA)
                    self.state = 681
                    self.test()
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 687
                self.match(Python3Parser.COMMA)

            self.state = 690
            self.match(Python3Parser.COLON)
            self.state = 691
            self.suite()
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 692
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(Python3Parser.TRY)
            self.state = 696
            self.match(Python3Parser.COLON)
            self.state = 697
            self.suite()
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.EXCEPT:
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 698
                    self.except_clause()
                    self.state = 699
                    self.match(Python3Parser.COLON)
                    self.state = 700
                    self.suite()
                    self.state = 704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 706
                    self.else_suite()

                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 709
                    self.match(Python3Parser.FINALLY)
                    self.state = 710
                    self.match(Python3Parser.COLON)
                    self.state = 711
                    self.suite()

                pass
            elif token == Python3Parser.FINALLY:
                self.state = 714
                self.match(Python3Parser.FINALLY)
                self.state = 715
                self.match(Python3Parser.COLON)
                self.state = 716
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(Python3Parser.EXCEPT)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 720
                self.test()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 721
                    self.match(Python3Parser.AS)
                    self.state = 722
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.small_stmt()
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 728
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 729
                        self.small_stmt()
                    self.state = 734
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 735
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 738
                self.match(Python3Parser.NEWLINE)
                pass
            elif token == Python3Parser.NEWLINE:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.match(Python3Parser.NEWLINE)
                self.state = 741
                self.match(Python3Parser.INDENT)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 742
                    self.stmt()
                    self.state = 745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (
                            1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (
                                    1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                                    1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                                    1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                                    1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (
                                    1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                                    1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                                    1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                                    1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (
                                    1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_BYTES_LITERAL) | (
                                    1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                                    1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (
                                    1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (
                                    1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (
                                    1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK) | (
                                    1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                                    (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                                    (1 << (Python3Parser.NOT_OP - 65)) | (1 << (Python3Parser.OPEN_BRACE - 65)) | (
                                    1 << (Python3Parser.AT - 65)))) != 0)):
                        break

                self.state = 747
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def if_stmt2(self):
            return self.getTypedRuleContext(Python3Parser.If_stmt2Context, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.or_test()
                self.state = 753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.if_stmt2()

                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.match(Python3Parser.LAMBDA)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 756
                    self.varargslist()

                self.state = 759
                self.match(Python3Parser.COLON)
                self.state = 760
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmt2Context(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def else_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Else_stmtContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt2

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt2"):
                return visitor.visitIf_stmt2(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt2(self):

        localctx = Python3Parser.If_stmt2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_if_stmt2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(Python3Parser.IF)
            self.state = 764
            self.or_test()
            self.state = 765
            self.else_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_stmt"):
                return visitor.visitElse_stmt(self)
            else:
                return visitor.visitChildren(self)

    def else_stmt(self):

        localctx = Python3Parser.Else_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_else_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(Python3Parser.ELSE)
            self.state = 768
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_test_nocond)
        self._la = 0  # Token type
        try:
            self.state = 777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                         Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                         Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                         Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                         Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.or_test()
                pass
            elif token == Python3Parser.LAMBDA:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(Python3Parser.LAMBDA)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 772
                    self.varargslist()

                self.state = 775
                self.match(Python3Parser.COLON)
                self.state = 776
                self.test_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.not_test()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR or _la == Python3Parser.AND:
                self.state = 780
                _la = self._input.LA(1)
                if not (_la == Python3Parser.OR or _la == Python3Parser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 781
                self.not_test()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_not_test)
        self._la = 0  # Token type
        try:
            self.state = 804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.NOT:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(Python3Parser.NOT)
                self.state = 788
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 789
                    self.match(Python3Parser.STAR)

                self.state = 792
                self.expr()
                self.state = 801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 793
                        self.comp_op()
                        self.state = 795
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.STAR:
                            self.state = 794
                            self.match(Python3Parser.STAR)

                        self.state = 797
                        self.expr()
                    self.state = 803
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_comp_op)
        try:
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 808
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 809
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 811
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 812
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 813
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 814
                self.match(Python3Parser.NOT)
                self.state = 815
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 816
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 817
                self.match(Python3Parser.IS)
                self.state = 818
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.factor()
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 822
                    _la = self._input.LA(1)
                    if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & (
                            (1 << (Python3Parser.STAR - 45)) | (1 << (Python3Parser.OR_OP - 45)) | (
                            1 << (Python3Parser.XOR - 45)) | (1 << (Python3Parser.AND_OP - 45)) | (
                                    1 << (Python3Parser.LEFT_SHIFT - 45)) | (1 << (Python3Parser.RIGHT_SHIFT - 45)) | (
                                    1 << (Python3Parser.ADD - 45)) | (1 << (Python3Parser.MINUS - 45)) | (
                                    1 << (Python3Parser.DIV - 45)) | (1 << (Python3Parser.MOD - 45)) | (
                                    1 << (Python3Parser.IDIV - 45)) | (1 << (Python3Parser.AT - 45)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 823
                    self.factor()
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 147, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                _la = self._input.LA(1)
                if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                        (1 << (Python3Parser.ADD - 60)) | (1 << (Python3Parser.MINUS - 60)) | (
                        1 << (Python3Parser.NOT_OP - 60)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 830
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.call(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.atom()
                self.state = 836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 833
                        self.trailer()
                    self.state = 838
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 839
                    self.match(Python3Parser.POWER)
                    self.state = 840
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(Python3Parser.NAME)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.DOT:
                self.state = 847
                self.match(Python3Parser.DOT)
                self.state = 848
                self.match(Python3Parser.NAME)

            self.state = 851
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                    (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                    1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                            1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                            1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                            1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                            1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                            1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                            1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                            1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                            1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                            1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                            1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 852
                self.arglist()

            self.state = 855
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 857
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.DOT:
                        self.state = 858
                        self.match(Python3Parser.DOT)
                        self.state = 859
                        self.match(Python3Parser.NAME)

                    self.state = 862
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 863
                        self.arglist()

                    self.state = 866
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def STRING_BYTES_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.STRING_BYTES_LITERAL)
            else:
                return self.getToken(Python3Parser.STRING_BYTES_LITERAL, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.YIELD:
                    self.state = 873
                    self.match(Python3Parser.YIELD)
                    self.state = 887
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FROM:
                        self.state = 874
                        self.match(Python3Parser.FROM)
                        self.state = 875
                        self.test()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                                   Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                                   Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                                   Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                                   Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                                   Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 876
                        self.test()
                        self.state = 881
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 877
                                self.match(Python3Parser.COMMA)
                                self.state = 878
                                self.test()
                            self.state = 883
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)

                        self.state = 885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 884
                            self.match(Python3Parser.COMMA)

                        pass
                    elif token == Python3Parser.CLOSE_PAREN:
                        pass
                    else:
                        pass
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_BYTES_LITERAL,
                               Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                               Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                               Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN,
                               Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                               Python3Parser.OPEN_BRACE]:
                    self.state = 889
                    self.test()
                    self.state = 901
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 890
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                        self.state = 895
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 891
                                self.match(Python3Parser.COMMA)
                                self.state = 892
                                self.test()
                            self.state = 897
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

                        self.state = 899
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 898
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token == Python3Parser.CLOSE_PAREN:
                    pass
                else:
                    pass
                self.state = 905
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 907
                self.comp_for()
                self.state = 908
                self.match(Python3Parser.CLOSE_BRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 910
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 911
                    self.test()
                    self.state = 923
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == Python3Parser.FOR:
                        self.state = 912
                        self.comp_for()
                        pass
                    elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                        self.state = 917
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 913
                                self.match(Python3Parser.COMMA)
                                self.state = 914
                                self.test()
                            self.state = 919
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 160, self._ctx)

                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 920
                            self.match(Python3Parser.COMMA)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 927
                self.match(Python3Parser.CLOSE_BRACK)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 928
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 929
                    self.dictorsetmaker()

                self.state = 932
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 949
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == Python3Parser.NAME:
                    self.state = 933
                    self.match(Python3Parser.NAME)
                    pass
                elif token == Python3Parser.DECIMAL_INTEGER:
                    self.state = 934
                    self.match(Python3Parser.DECIMAL_INTEGER)
                    pass
                elif token == Python3Parser.OCT_INTEGER:
                    self.state = 935
                    self.match(Python3Parser.OCT_INTEGER)
                    pass
                elif token == Python3Parser.HEX_INTEGER:
                    self.state = 936
                    self.match(Python3Parser.HEX_INTEGER)
                    pass
                elif token == Python3Parser.BIN_INTEGER:
                    self.state = 937
                    self.match(Python3Parser.BIN_INTEGER)
                    pass
                elif token == Python3Parser.FLOAT_NUMBER:
                    self.state = 938
                    self.match(Python3Parser.FLOAT_NUMBER)
                    pass
                elif token == Python3Parser.IMAG_NUMBER:
                    self.state = 939
                    self.match(Python3Parser.IMAG_NUMBER)
                    pass
                elif token == Python3Parser.STRING_BYTES_LITERAL:
                    self.state = 941
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 940
                            self.match(Python3Parser.STRING_BYTES_LITERAL)

                        else:
                            raise NoViableAltException(self)
                        self.state = 943
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 165, self._ctx)

                    pass
                elif token == Python3Parser.ELLIPSIS:
                    self.state = 945
                    self.match(Python3Parser.ELLIPSIS)
                    pass
                elif token == Python3Parser.NONE:
                    self.state = 946
                    self.match(Python3Parser.NONE)
                    pass
                elif token == Python3Parser.TRUE:
                    self.state = 947
                    self.match(Python3Parser.TRUE)
                    pass
                elif token == Python3Parser.FALSE:
                    self.state = 948
                    self.match(Python3Parser.FALSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.OPEN_PAREN:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 954
                    self.arglist()

                self.state = 957
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token == Python3Parser.OPEN_BRACK:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 959
                self.subscript()
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 960
                        self.match(Python3Parser.COMMA)
                        self.state = 961
                        self.subscript()
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)

                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 967
                    self.match(Python3Parser.COMMA)

                self.state = 970
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token == Python3Parser.DOT:
                self.enterOuterAlt(localctx, 3)
                self.state = 972
                self.match(Python3Parser.DOT)
                self.state = 973
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 976
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 977
                    self.test()

                self.state = 980
                self.match(Python3Parser.COLON)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                        (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                        1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 981
                    self.test()

                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 984
                    self.match(Python3Parser.COLON)
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & (
                            (1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (
                            1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                                    1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                                    1 << (Python3Parser.STRING_BYTES_LITERAL - 20)) | (
                                    1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                                    1 << (Python3Parser.BIN_INTEGER - 20)) | (
                                    1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 985
                        self.test()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.test()
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 182, self._ctx)
            if la_ == 1:
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 993
                    self.match(Python3Parser.COLON)
                    self.state = 994
                    self.test()

                self.state = 997
                self.comp_for()
                pass

            elif la_ == 2:
                self.state = 998
                self.match(Python3Parser.COLON)
                self.state = 999
                self.test()
                self.state = 1007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1000
                        self.match(Python3Parser.COMMA)
                        self.state = 1001
                        self.test()
                        self.state = 1002
                        self.match(Python3Parser.COLON)
                        self.state = 1003
                        self.test()
                    self.state = 1009
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 178, self._ctx)

                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1010
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 3:
                self.state = 1017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1013
                        self.match(Python3Parser.COMMA)
                        self.state = 1014
                        self.test()
                    self.state = 1019
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1020
                    self.match(Python3Parser.COMMA)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_forContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_forContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1025
                    self.test()
                    self.state = 1031
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FOR, Python3Parser.COMMA]:
                        self.state = 1027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.FOR:
                            self.state = 1026
                            self.comp_for()

                        pass
                    elif token == Python3Parser.ASSIGN:
                        self.state = 1029
                        self.match(Python3Parser.ASSIGN)
                        self.state = 1030
                        self.test()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1033
                    self.match(Python3Parser.COMMA)
                self.state = 1039
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)

            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.state = 1040
                self.test()
                self.state = 1046
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                    self.state = 1042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.FOR:
                        self.state = 1041
                        self.comp_for()

                    pass
                elif token == Python3Parser.ASSIGN:
                    self.state = 1044
                    self.match(Python3Parser.ASSIGN)
                    self.state = 1045
                    self.test()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1048
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 1051
                self.match(Python3Parser.STAR)
                self.state = 1052
                self.test()
                self.state = 1064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1053
                        self.match(Python3Parser.COMMA)
                        self.state = 1054
                        self.test()
                        self.state = 1060
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                            self.state = 1056
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.FOR:
                                self.state = 1055
                                self.comp_for()

                            pass
                        elif token == Python3Parser.ASSIGN:
                            self.state = 1058
                            self.match(Python3Parser.ASSIGN)
                            self.state = 1059
                            self.test()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 1066
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)

                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 1067
                    self.match(Python3Parser.COMMA)
                    self.state = 1068
                    self.match(Python3Parser.POWER)
                    self.state = 1069
                    self.test()

                pass

            elif la_ == 3:
                self.state = 1072
                self.match(Python3Parser.POWER)
                self.state = 1073
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_comp_iter)
        self._la = 0  # Token type
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == Python3Parser.FOR:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.comp_for()
                pass
            elif token == Python3Parser.IF:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.match(Python3Parser.IF)
                self.state = 1078
                self.test_nocond()
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                    self.state = 1079
                    self.comp_iter()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(Python3Parser.FOR)
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 1085
                self.match(Python3Parser.STAR)

            self.state = 1088
            self.expr()
            self.state = 1096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1089
                    self.match(Python3Parser.COMMA)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 1090
                        self.match(Python3Parser.STAR)

                    self.state = 1093
                    self.expr()
                self.state = 1098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 1099
                self.match(Python3Parser.COMMA)

            self.state = 1102
            self.match(Python3Parser.IN)
            self.state = 1103
            self.or_test()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 1104
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
