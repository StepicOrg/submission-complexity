# Generated from complexity/grammars/Python3.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u03d2\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\3\2\7\2I\n\2")
        buf.write("\f\2\16\2L\13\2\3\2\3\2\3\3\3\3\3\3\5\3S\n\3\3\3\3\3\5")
        buf.write("\3W\n\3\3\3\3\3\3\3\3\3\5\3]\n\3\3\3\3\3\5\3a\n\3\7\3")
        buf.write("c\n\3\f\3\16\3f\13\3\3\3\3\3\3\3\3\3\3\3\5\3m\n\3\5\3")
        buf.write("o\n\3\3\3\3\3\3\3\3\3\5\3u\n\3\3\3\3\3\5\3y\n\3\7\3{\n")
        buf.write("\3\f\3\16\3~\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u0085\n\3\5")
        buf.write("\3\u0087\n\3\3\3\3\3\3\3\3\3\5\3\u008d\n\3\5\3\u008f\n")
        buf.write("\3\5\3\u0091\n\3\3\3\3\3\3\3\3\3\5\3\u0097\n\3\5\3\u0099")
        buf.write("\n\3\3\3\3\3\3\3\3\3\5\3\u009f\n\3\3\3\3\3\5\3\u00a3\n")
        buf.write("\3\7\3\u00a5\n\3\f\3\16\3\u00a8\13\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\5\3\u00af\n\3\5\3\u00b1\n\3\3\3\3\3\3\3\3\3\5\3\u00b7")
        buf.write("\n\3\5\3\u00b9\n\3\3\4\3\4\3\4\5\4\u00be\n\4\3\4\3\4\3")
        buf.write("\4\3\4\5\4\u00c4\n\4\7\4\u00c6\n\4\f\4\16\4\u00c9\13\4")
        buf.write("\3\4\3\4\3\4\5\4\u00ce\n\4\3\4\3\4\3\4\3\4\5\4\u00d4\n")
        buf.write("\4\7\4\u00d6\n\4\f\4\16\4\u00d9\13\4\3\4\3\4\3\4\5\4\u00de")
        buf.write("\n\4\3\4\3\4\5\4\u00e2\n\4\5\4\u00e4\n\4\3\4\3\4\5\4\u00e8")
        buf.write("\n\4\3\4\3\4\3\4\3\4\5\4\u00ee\n\4\7\4\u00f0\n\4\f\4\16")
        buf.write("\4\u00f3\13\4\3\4\3\4\3\4\5\4\u00f8\n\4\3\4\3\4\5\4\u00fc")
        buf.write("\n\4\3\5\3\5\3\5\7\5\u0101\n\5\f\5\16\5\u0104\13\5\3\5")
        buf.write("\5\5\u0107\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u0113\n\5\3\5\3\5\3\5\3\5\5\5\u0119\n\5\7\5\u011b")
        buf.write("\n\5\f\5\16\5\u011e\13\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7")
        buf.write("\5\u0127\n\5\f\5\16\5\u012a\13\5\3\5\3\5\5\5\u012e\n\5")
        buf.write("\3\5\5\5\u0131\n\5\3\5\7\5\u0134\n\5\f\5\16\5\u0137\13")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u013d\n\5\3\5\5\5\u0140\n\5\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u0146\n\5\3\5\3\5\3\5\5\5\u014b\n\5\5")
        buf.write("\5\u014d\n\5\3\5\3\5\5\5\u0151\n\5\3\6\3\6\5\6\u0155\n")
        buf.write("\6\3\6\5\6\u0158\n\6\3\6\3\6\3\6\5\6\u015d\n\6\3\6\5\6")
        buf.write("\u0160\n\6\7\6\u0162\n\6\f\6\16\6\u0165\13\6\3\6\5\6\u0168")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u016f\n\6\3\6\5\6\u0172\n")
        buf.write("\6\3\6\7\6\u0175\n\6\f\6\16\6\u0178\13\6\5\6\u017a\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0182\n\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u0189\n\6\3\6\3\6\3\6\3\6\7\6\u018f\n\6\f\6\16")
        buf.write("\6\u0192\13\6\3\6\3\6\5\6\u0196\n\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u019c\n\6\f\6\16\6\u019f\13\6\3\6\3\6\5\6\u01a3\n\6")
        buf.write("\7\6\u01a5\n\6\f\6\16\6\u01a8\13\6\3\6\3\6\7\6\u01ac\n")
        buf.write("\6\f\6\16\6\u01af\13\6\3\6\3\6\3\6\7\6\u01b4\n\6\f\6\16")
        buf.write("\6\u01b7\13\6\3\6\6\6\u01ba\n\6\r\6\16\6\u01bb\5\6\u01be")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01c6\n\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u01cc\n\6\7\6\u01ce\n\6\f\6\16\6\u01d1\13\6\3")
        buf.write("\6\5\6\u01d4\n\6\3\6\3\6\3\6\3\6\5\6\u01da\n\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u01e0\n\6\7\6\u01e2\n\6\f\6\16\6\u01e5\13")
        buf.write("\6\3\6\5\6\u01e8\n\6\5\6\u01ea\n\6\3\6\3\6\3\6\3\6\7\6")
        buf.write("\u01f0\n\6\f\6\16\6\u01f3\13\6\3\6\3\6\3\6\3\6\5\6\u01f9")
        buf.write("\n\6\3\6\5\6\u01fc\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u0203\n")
        buf.write("\7\3\7\3\7\5\7\u0207\n\7\3\7\5\7\u020a\n\7\3\7\3\7\3\7")
        buf.write("\5\7\u020f\n\7\3\7\5\7\u0212\n\7\7\7\u0214\n\7\f\7\16")
        buf.write("\7\u0217\13\7\3\7\5\7\u021a\n\7\5\7\u021c\n\7\3\b\3\b")
        buf.write("\3\t\3\t\3\n\3\n\3\n\3\n\5\n\u0226\n\n\5\n\u0228\n\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0233")
        buf.write("\n\13\f\13\16\13\u0236\13\13\3\13\5\13\u0239\n\13\3\f")
        buf.write("\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u0244\n\r\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\5\16\u024d\n\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\6\17\u0256\n\17\r\17\16\17\u0257")
        buf.write("\3\17\5\17\u025b\n\17\3\17\3\17\3\17\5\17\u0260\n\17\3")
        buf.write("\17\3\17\3\17\5\17\u0265\n\17\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u026b\n\20\5\20\u026d\n\20\3\21\3\21\3\21\7\21\u0272")
        buf.write("\n\21\f\21\16\21\u0275\13\21\3\21\5\21\u0278\n\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\6\21\u027f\n\21\r\21\16\21\u0280")
        buf.write("\3\21\3\21\5\21\u0285\n\21\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\5\22\u028d\n\22\3\22\3\22\5\22\u0291\n\22\3\22\3\22")
        buf.write("\5\22\u0295\n\22\3\23\3\23\3\23\5\23\u029a\n\23\3\23\3")
        buf.write("\23\5\23\u029e\n\23\3\24\3\24\3\24\7\24\u02a3\n\24\f\24")
        buf.write("\16\24\u02a6\13\24\3\25\3\25\3\25\5\25\u02ab\n\25\3\25")
        buf.write("\3\25\3\25\5\25\u02b0\n\25\3\25\3\25\7\25\u02b4\n\25\f")
        buf.write("\25\16\25\u02b7\13\25\5\25\u02b9\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u02c8\n\26\3\27\3\27\3\27\7\27\u02cd\n\27\f\27\16\27")
        buf.write("\u02d0\13\27\3\30\3\30\3\30\3\30\3\30\7\30\u02d7\n\30")
        buf.write("\f\30\16\30\u02da\13\30\3\30\3\30\5\30\u02de\n\30\5\30")
        buf.write("\u02e0\n\30\3\31\3\31\3\31\3\31\5\31\u02e6\n\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u02ed\n\31\3\31\7\31\u02f0\n\31")
        buf.write("\f\31\16\31\u02f3\13\31\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u02fa\n\32\3\32\5\32\u02fd\n\32\3\32\3\32\3\32\5\32\u0302")
        buf.write("\n\32\3\32\3\32\3\32\5\32\u0307\n\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\6\32\u0312\n\32\r\32\16\32")
        buf.write("\u0313\3\32\3\32\3\32\3\32\5\32\u031a\n\32\5\32\u031c")
        buf.write("\n\32\3\33\3\33\3\33\3\33\7\33\u0322\n\33\f\33\16\33\u0325")
        buf.write("\13\33\3\33\5\33\u0328\n\33\5\33\u032a\n\33\3\34\3\34")
        buf.write("\5\34\u032e\n\34\3\34\3\34\3\34\3\34\3\34\7\34\u0335\n")
        buf.write("\34\f\34\16\34\u0338\13\34\3\34\5\34\u033b\n\34\3\34\3")
        buf.write("\34\3\34\3\34\5\34\u0341\n\34\3\35\3\35\5\35\u0345\n\35")
        buf.write("\3\35\3\35\5\35\u0349\n\35\3\35\3\35\5\35\u034d\n\35\5")
        buf.write("\35\u034f\n\35\5\35\u0351\n\35\3\36\5\36\u0354\n\36\3")
        buf.write("\36\3\36\3\36\5\36\u0359\n\36\3\36\7\36\u035c\n\36\f\36")
        buf.write("\16\36\u035f\13\36\3\36\5\36\u0362\n\36\3\37\3\37\3\37")
        buf.write("\7\37\u0367\n\37\f\37\16\37\u036a\13\37\3\37\5\37\u036d")
        buf.write("\n\37\3 \3 \3 \5 \u0372\n \3 \3 \3 \3 \3 \3 \3 \3 \7 ")
        buf.write("\u037c\n \f \16 \u037f\13 \3 \5 \u0382\n \3 \3 \7 \u0386")
        buf.write("\n \f \16 \u0389\13 \3 \5 \u038c\n \5 \u038e\n \3!\3!")
        buf.write("\5!\u0392\n!\3!\3!\5!\u0396\n!\3!\3!\7!\u039a\n!\f!\16")
        buf.write("!\u039d\13!\3!\3!\5!\u03a1\n!\3!\3!\5!\u03a5\n!\3!\5!")
        buf.write("\u03a8\n!\3!\3!\3!\3!\3!\5!\u03af\n!\3!\3!\5!\u03b3\n")
        buf.write("!\7!\u03b5\n!\f!\16!\u03b8\13!\3!\3!\3!\5!\u03bd\n!\3")
        buf.write("!\3!\5!\u03c1\n!\3\"\3\"\3\"\3\"\5\"\u03c7\n\"\5\"\u03c9")
        buf.write("\n\"\3#\3#\3#\3#\3#\5#\u03d0\n#\3#\2\3\60$\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BD\2\n\3\2!\"\3\2./\3\2\t\n\3\2P\\\3\2\27\30\5\2\60\60")
        buf.write(":CNN\4\2?@DD\3\2&\'\2\u0490\2J\3\2\2\2\4\u00b8\3\2\2\2")
        buf.write("\6\u00fb\3\2\2\2\b\u0150\3\2\2\2\n\u01fb\3\2\2\2\f\u01fd")
        buf.write("\3\2\2\2\16\u021d\3\2\2\2\20\u021f\3\2\2\2\22\u0221\3")
        buf.write("\2\2\2\24\u0229\3\2\2\2\26\u023a\3\2\2\2\30\u023e\3\2")
        buf.write("\2\2\32\u0245\3\2\2\2\34\u024e\3\2\2\2\36\u0266\3\2\2")
        buf.write("\2 \u0284\3\2\2\2\"\u0294\3\2\2\2$\u029d\3\2\2\2&\u029f")
        buf.write("\3\2\2\2(\u02b8\3\2\2\2*\u02c7\3\2\2\2,\u02c9\3\2\2\2")
        buf.write(".\u02df\3\2\2\2\60\u02e1\3\2\2\2\62\u031b\3\2\2\2\64\u031d")
        buf.write("\3\2\2\2\66\u0340\3\2\2\28\u0350\3\2\2\2:\u0353\3\2\2")
        buf.write("\2<\u0363\3\2\2\2>\u036e\3\2\2\2@\u039b\3\2\2\2B\u03c8")
        buf.write("\3\2\2\2D\u03ca\3\2\2\2FI\7$\2\2GI\5\b\5\2HF\3\2\2\2H")
        buf.write("G\3\2\2\2IL\3\2\2\2JH\3\2\2\2JK\3\2\2\2KM\3\2\2\2LJ\3")
        buf.write("\2\2\2MN\7\2\2\3N\3\3\2\2\2OR\7%\2\2PQ\7\64\2\2QS\5\"")
        buf.write("\22\2RP\3\2\2\2RS\3\2\2\2SV\3\2\2\2TU\7\67\2\2UW\5\"\22")
        buf.write("\2VT\3\2\2\2VW\3\2\2\2Wd\3\2\2\2XY\7\63\2\2Y\\\7%\2\2")
        buf.write("Z[\7\64\2\2[]\5\"\22\2\\Z\3\2\2\2\\]\3\2\2\2]`\3\2\2\2")
        buf.write("^_\7\67\2\2_a\5\"\22\2`^\3\2\2\2`a\3\2\2\2ac\3\2\2\2b")
        buf.write("X\3\2\2\2cf\3\2\2\2db\3\2\2\2de\3\2\2\2e\u0090\3\2\2\2")
        buf.write("fd\3\2\2\2g\u008e\7\63\2\2hn\7\60\2\2il\7%\2\2jk\7\64")
        buf.write("\2\2km\5\"\22\2lj\3\2\2\2lm\3\2\2\2mo\3\2\2\2ni\3\2\2")
        buf.write("\2no\3\2\2\2o|\3\2\2\2pq\7\63\2\2qt\7%\2\2rs\7\64\2\2")
        buf.write("su\5\"\22\2tr\3\2\2\2tu\3\2\2\2ux\3\2\2\2vw\7\67\2\2w")
        buf.write("y\5\"\22\2xv\3\2\2\2xy\3\2\2\2y{\3\2\2\2zp\3\2\2\2{~\3")
        buf.write("\2\2\2|z\3\2\2\2|}\3\2\2\2}\u0086\3\2\2\2~|\3\2\2\2\177")
        buf.write("\u0080\7\63\2\2\u0080\u0081\7\66\2\2\u0081\u0084\7%\2")
        buf.write("\2\u0082\u0083\7\64\2\2\u0083\u0085\5\"\22\2\u0084\u0082")
        buf.write("\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0087\3\2\2\2\u0086")
        buf.write("\177\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u008f\3\2\2\2\u0088")
        buf.write("\u0089\7\66\2\2\u0089\u008c\7%\2\2\u008a\u008b\7\64\2")
        buf.write("\2\u008b\u008d\5\"\22\2\u008c\u008a\3\2\2\2\u008c\u008d")
        buf.write("\3\2\2\2\u008d\u008f\3\2\2\2\u008eh\3\2\2\2\u008e\u0088")
        buf.write("\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0091\3\2\2\2\u0090")
        buf.write("g\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u00b9\3\2\2\2\u0092")
        buf.write("\u0098\7\60\2\2\u0093\u0096\7%\2\2\u0094\u0095\7\64\2")
        buf.write("\2\u0095\u0097\5\"\22\2\u0096\u0094\3\2\2\2\u0096\u0097")
        buf.write("\3\2\2\2\u0097\u0099\3\2\2\2\u0098\u0093\3\2\2\2\u0098")
        buf.write("\u0099\3\2\2\2\u0099\u00a6\3\2\2\2\u009a\u009b\7\63\2")
        buf.write("\2\u009b\u009e\7%\2\2\u009c\u009d\7\64\2\2\u009d\u009f")
        buf.write("\5\"\22\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f")
        buf.write("\u00a2\3\2\2\2\u00a0\u00a1\7\67\2\2\u00a1\u00a3\5\"\22")
        buf.write("\2\u00a2\u00a0\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a5")
        buf.write("\3\2\2\2\u00a4\u009a\3\2\2\2\u00a5\u00a8\3\2\2\2\u00a6")
        buf.write("\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00b0\3\2\2\2")
        buf.write("\u00a8\u00a6\3\2\2\2\u00a9\u00aa\7\63\2\2\u00aa\u00ab")
        buf.write("\7\66\2\2\u00ab\u00ae\7%\2\2\u00ac\u00ad\7\64\2\2\u00ad")
        buf.write("\u00af\5\"\22\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2")
        buf.write("\2\u00af\u00b1\3\2\2\2\u00b0\u00a9\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\u00b9\3\2\2\2\u00b2\u00b3\7\66\2\2\u00b3")
        buf.write("\u00b6\7%\2\2\u00b4\u00b5\7\64\2\2\u00b5\u00b7\5\"\22")
        buf.write("\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9")
        buf.write("\3\2\2\2\u00b8O\3\2\2\2\u00b8\u0092\3\2\2\2\u00b8\u00b2")
        buf.write("\3\2\2\2\u00b9\5\3\2\2\2\u00ba\u00bd\7%\2\2\u00bb\u00bc")
        buf.write("\7\67\2\2\u00bc\u00be\5\"\22\2\u00bd\u00bb\3\2\2\2\u00bd")
        buf.write("\u00be\3\2\2\2\u00be\u00c7\3\2\2\2\u00bf\u00c0\7\63\2")
        buf.write("\2\u00c0\u00c3\7%\2\2\u00c1\u00c2\7\67\2\2\u00c2\u00c4")
        buf.write("\5\"\22\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4")
        buf.write("\u00c6\3\2\2\2\u00c5\u00bf\3\2\2\2\u00c6\u00c9\3\2\2\2")
        buf.write("\u00c7\u00c5\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00e3\3")
        buf.write("\2\2\2\u00c9\u00c7\3\2\2\2\u00ca\u00e1\7\63\2\2\u00cb")
        buf.write("\u00cd\7\60\2\2\u00cc\u00ce\7%\2\2\u00cd\u00cc\3\2\2\2")
        buf.write("\u00cd\u00ce\3\2\2\2\u00ce\u00d7\3\2\2\2\u00cf\u00d0\7")
        buf.write("\63\2\2\u00d0\u00d3\7%\2\2\u00d1\u00d2\7\67\2\2\u00d2")
        buf.write("\u00d4\5\"\22\2\u00d3\u00d1\3\2\2\2\u00d3\u00d4\3\2\2")
        buf.write("\2\u00d4\u00d6\3\2\2\2\u00d5\u00cf\3\2\2\2\u00d6\u00d9")
        buf.write("\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8")
        buf.write("\u00dd\3\2\2\2\u00d9\u00d7\3\2\2\2\u00da\u00db\7\63\2")
        buf.write("\2\u00db\u00dc\7\66\2\2\u00dc\u00de\7%\2\2\u00dd\u00da")
        buf.write("\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e2\3\2\2\2\u00df")
        buf.write("\u00e0\7\66\2\2\u00e0\u00e2\7%\2\2\u00e1\u00cb\3\2\2\2")
        buf.write("\u00e1\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e4\3")
        buf.write("\2\2\2\u00e3\u00ca\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00fc")
        buf.write("\3\2\2\2\u00e5\u00e7\7\60\2\2\u00e6\u00e8\7%\2\2\u00e7")
        buf.write("\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00f1\3\2\2\2")
        buf.write("\u00e9\u00ea\7\63\2\2\u00ea\u00ed\7%\2\2\u00eb\u00ec\7")
        buf.write("\67\2\2\u00ec\u00ee\5\"\22\2\u00ed\u00eb\3\2\2\2\u00ed")
        buf.write("\u00ee\3\2\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00e9\3\2\2\2")
        buf.write("\u00f0\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3")
        buf.write("\2\2\2\u00f2\u00f7\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f5")
        buf.write("\7\63\2\2\u00f5\u00f6\7\66\2\2\u00f6\u00f8\7%\2\2\u00f7")
        buf.write("\u00f4\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00fc\3\2\2\2")
        buf.write("\u00f9\u00fa\7\66\2\2\u00fa\u00fc\7%\2\2\u00fb\u00ba\3")
        buf.write("\2\2\2\u00fb\u00e5\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\7")
        buf.write("\3\2\2\2\u00fd\u0102\5\n\6\2\u00fe\u00ff\7\65\2\2\u00ff")
        buf.write("\u0101\5\n\6\2\u0100\u00fe\3\2\2\2\u0101\u0104\3\2\2\2")
        buf.write("\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0106\3")
        buf.write("\2\2\2\u0104\u0102\3\2\2\2\u0105\u0107\7\65\2\2\u0106")
        buf.write("\u0105\3\2\2\2\u0106\u0107\3\2\2\2\u0107\u0108\3\2\2\2")
        buf.write("\u0108\u0109\7$\2\2\u0109\u0151\3\2\2\2\u010a\u0151\5")
        buf.write("\24\13\2\u010b\u0151\5\30\r\2\u010c\u0151\5\32\16\2\u010d")
        buf.write("\u0151\5\34\17\2\u010e\u010f\7\24\2\2\u010f\u0112\5\"")
        buf.write("\22\2\u0110\u0111\7\b\2\2\u0111\u0113\5,\27\2\u0112\u0110")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u011c\3\2\2\2\u0114")
        buf.write("\u0115\7\63\2\2\u0115\u0118\5\"\22\2\u0116\u0117\7\b\2")
        buf.write("\2\u0117\u0119\5,\27\2\u0118\u0116\3\2\2\2\u0118\u0119")
        buf.write("\3\2\2\2\u0119\u011b\3\2\2\2\u011a\u0114\3\2\2\2\u011b")
        buf.write("\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2\2\2")
        buf.write("\u011d\u011f\3\2\2\2\u011e\u011c\3\2\2\2\u011f\u0120\7")
        buf.write("\64\2\2\u0120\u0121\5 \21\2\u0121\u0151\3\2\2\2\u0122")
        buf.write("\u0123\7N\2\2\u0123\u0128\7%\2\2\u0124\u0125\7.\2\2\u0125")
        buf.write("\u0127\7%\2\2\u0126\u0124\3\2\2\2\u0127\u012a\3\2\2\2")
        buf.write("\u0128\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0130\3")
        buf.write("\2\2\2\u012a\u0128\3\2\2\2\u012b\u012d\7\61\2\2\u012c")
        buf.write("\u012e\5@!\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u0131\7\62\2\2\u0130\u012b\3\2\2")
        buf.write("\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134")
        buf.write("\7$\2\2\u0133\u0122\3\2\2\2\u0134\u0137\3\2\2\2\u0135")
        buf.write("\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u014c\3\2\2\2")
        buf.write("\u0137\u0135\3\2\2\2\u0138\u0139\7\36\2\2\u0139\u013f")
        buf.write("\7%\2\2\u013a\u013c\7\61\2\2\u013b\u013d\5@!\2\u013c\u013b")
        buf.write("\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("\u0140\7\62\2\2\u013f\u013a\3\2\2\2\u013f\u0140\3\2\2")
        buf.write("\2\u0140\u014d\3\2\2\2\u0141\u0142\7\3\2\2\u0142\u0143")
        buf.write("\7%\2\2\u0143\u0145\7\61\2\2\u0144\u0146\5\4\3\2\u0145")
        buf.write("\u0144\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u014a\7\62\2\2\u0148\u0149\7O\2\2\u0149\u014b\5")
        buf.write("\"\22\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u014d\3\2\2\2\u014c\u0138\3\2\2\2\u014c\u0141\3\2\2\2")
        buf.write("\u014d\u014e\3\2\2\2\u014e\u014f\7\64\2\2\u014f\u0151")
        buf.write("\5 \21\2\u0150\u00fd\3\2\2\2\u0150\u010a\3\2\2\2\u0150")
        buf.write("\u010b\3\2\2\2\u0150\u010c\3\2\2\2\u0150\u010d\3\2\2\2")
        buf.write("\u0150\u010e\3\2\2\2\u0150\u0135\3\2\2\2\u0151\t\3\2\2")
        buf.write("\2\u0152\u0158\5\"\22\2\u0153\u0155\7\60\2\2\u0154\u0153")
        buf.write("\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0156\3\2\2\2\u0156")
        buf.write("\u0158\5,\27\2\u0157\u0152\3\2\2\2\u0157\u0154\3\2\2\2")
        buf.write("\u0158\u0163\3\2\2\2\u0159\u015f\7\63\2\2\u015a\u0160")
        buf.write("\5\"\22\2\u015b\u015d\7\60\2\2\u015c\u015b\3\2\2\2\u015c")
        buf.write("\u015d\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\5,\27\2")
        buf.write("\u015f\u015a\3\2\2\2\u015f\u015c\3\2\2\2\u0160\u0162\3")
        buf.write("\2\2\2\u0161\u0159\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0167\3\2\2\2\u0165")
        buf.write("\u0163\3\2\2\2\u0166\u0168\7\63\2\2\u0167\u0166\3\2\2")
        buf.write("\2\u0167\u0168\3\2\2\2\u0168\u0179\3\2\2\2\u0169\u0171")
        buf.write("\5\16\b\2\u016a\u016e\7\37\2\2\u016b\u016c\7\6\2\2\u016c")
        buf.write("\u016f\5\"\22\2\u016d\u016f\5<\37\2\u016e\u016b\3\2\2")
        buf.write("\2\u016e\u016d\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0172")
        buf.write("\3\2\2\2\u0170\u0172\5<\37\2\u0171\u016a\3\2\2\2\u0171")
        buf.write("\u0170\3\2\2\2\u0172\u017a\3\2\2\2\u0173\u0175\5\f\7\2")
        buf.write("\u0174\u0173\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174\3")
        buf.write("\2\2\2\u0176\u0177\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176")
        buf.write("\3\2\2\2\u0179\u0169\3\2\2\2\u0179\u0176\3\2\2\2\u017a")
        buf.write("\u01fc\3\2\2\2\u017b\u017c\7 \2\2\u017c\u01fc\5:\36\2")
        buf.write("\u017d\u01fc\t\2\2\2\u017e\u01fc\5\20\t\2\u017f\u0181")
        buf.write("\7\4\2\2\u0180\u0182\5<\37\2\u0181\u0180\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182\u01fc\3\2\2\2\u0183\u01fc\5\22\n")
        buf.write("\2\u0184\u0188\7\37\2\2\u0185\u0186\7\6\2\2\u0186\u0189")
        buf.write("\5\"\22\2\u0187\u0189\5<\37\2\u0188\u0185\3\2\2\2\u0188")
        buf.write("\u0187\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u01fc\3\2\2\2")
        buf.write("\u018a\u018b\7\7\2\2\u018b\u0190\7%\2\2\u018c\u018d\7")
        buf.write(".\2\2\u018d\u018f\7%\2\2\u018e\u018c\3\2\2\2\u018f\u0192")
        buf.write("\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191")
        buf.write("\u0195\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0194\7\b\2\2")
        buf.write("\u0194\u0196\7%\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3")
        buf.write("\2\2\2\u0196\u01a6\3\2\2\2\u0197\u0198\7\63\2\2\u0198")
        buf.write("\u019d\7%\2\2\u0199\u019a\7.\2\2\u019a\u019c\7%\2\2\u019b")
        buf.write("\u0199\3\2\2\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2")
        buf.write("\u019d\u019e\3\2\2\2\u019e\u01a2\3\2\2\2\u019f\u019d\3")
        buf.write("\2\2\2\u01a0\u01a1\7\b\2\2\u01a1\u01a3\7%\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5\3\2\2\2\u01a4")
        buf.write("\u0197\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4\3\2\2\2")
        buf.write("\u01a6\u01a7\3\2\2\2\u01a7\u01fc\3\2\2\2\u01a8\u01a6\3")
        buf.write("\2\2\2\u01a9\u01bd\7\6\2\2\u01aa\u01ac\t\3\2\2\u01ab\u01aa")
        buf.write("\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad")
        buf.write("\u01ae\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01b0\u01b5\7%\2\2\u01b1\u01b2\7.\2\2\u01b2\u01b4\7%")
        buf.write("\2\2\u01b3\u01b1\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01be\3\2\2\2\u01b7")
        buf.write("\u01b5\3\2\2\2\u01b8\u01ba\t\3\2\2\u01b9\u01b8\3\2\2\2")
        buf.write("\u01ba\u01bb\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb\u01bc\3")
        buf.write("\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u01ad\3\2\2\2\u01bd\u01b9")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01e9\7\7\2\2\u01c0")
        buf.write("\u01ea\7\60\2\2\u01c1\u01c2\7\61\2\2\u01c2\u01c5\7%\2")
        buf.write("\2\u01c3\u01c4\7\b\2\2\u01c4\u01c6\7%\2\2\u01c5\u01c3")
        buf.write("\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01cf\3\2\2\2\u01c7")
        buf.write("\u01c8\7\63\2\2\u01c8\u01cb\7%\2\2\u01c9\u01ca\7\b\2\2")
        buf.write("\u01ca\u01cc\7%\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3")
        buf.write("\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01c7\3\2\2\2\u01ce\u01d1")
        buf.write("\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0")
        buf.write("\u01d3\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2\u01d4\7\63\2")
        buf.write("\2\u01d3\u01d2\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01ea\7\62\2\2\u01d6\u01d9\7%\2\2\u01d7")
        buf.write("\u01d8\7\b\2\2\u01d8\u01da\7%\2\2\u01d9\u01d7\3\2\2\2")
        buf.write("\u01d9\u01da\3\2\2\2\u01da\u01e3\3\2\2\2\u01db\u01dc\7")
        buf.write("\63\2\2\u01dc\u01df\7%\2\2\u01dd\u01de\7\b\2\2\u01de\u01e0")
        buf.write("\7%\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write("\u01e2\3\2\2\2\u01e1\u01db\3\2\2\2\u01e2\u01e5\3\2\2\2")
        buf.write("\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e7\3")
        buf.write("\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01e8\7\63\2\2\u01e7")
        buf.write("\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ea\3\2\2\2")
        buf.write("\u01e9\u01c0\3\2\2\2\u01e9\u01c1\3\2\2\2\u01e9\u01d6\3")
        buf.write("\2\2\2\u01ea\u01fc\3\2\2\2\u01eb\u01ec\t\4\2\2\u01ec\u01f1")
        buf.write("\7%\2\2\u01ed\u01ee\7\63\2\2\u01ee\u01f0\7%\2\2\u01ef")
        buf.write("\u01ed\3\2\2\2\u01f0\u01f3\3\2\2\2\u01f1\u01ef\3\2\2\2")
        buf.write("\u01f1\u01f2\3\2\2\2\u01f2\u01fc\3\2\2\2\u01f3\u01f1\3")
        buf.write("\2\2\2\u01f4\u01f5\7\13\2\2\u01f5\u01f8\5\"\22\2\u01f6")
        buf.write("\u01f7\7\63\2\2\u01f7\u01f9\5\"\22\2\u01f8\u01f6\3\2\2")
        buf.write("\2\u01f8\u01f9\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa\u01fc")
        buf.write("\3\2\2\2\u01fb\u0157\3\2\2\2\u01fb\u017b\3\2\2\2\u01fb")
        buf.write("\u017d\3\2\2\2\u01fb\u017e\3\2\2\2\u01fb\u017f\3\2\2\2")
        buf.write("\u01fb\u0183\3\2\2\2\u01fb\u0184\3\2\2\2\u01fb\u018a\3")
        buf.write("\2\2\2\u01fb\u01a9\3\2\2\2\u01fb\u01eb\3\2\2\2\u01fb\u01f4")
        buf.write("\3\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\13\3\2\2\2\u01fd\u021b")
        buf.write("\7\67\2\2\u01fe\u0202\7\37\2\2\u01ff\u0200\7\6\2\2\u0200")
        buf.write("\u0203\5\"\22\2\u0201\u0203\5<\37\2\u0202\u01ff\3\2\2")
        buf.write("\2\u0202\u0201\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u021c")
        buf.write("\3\2\2\2\u0204\u020a\5\"\22\2\u0205\u0207\7\60\2\2\u0206")
        buf.write("\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208\3\2\2\2")
        buf.write("\u0208\u020a\5,\27\2\u0209\u0204\3\2\2\2\u0209\u0206\3")
        buf.write("\2\2\2\u020a\u0215\3\2\2\2\u020b\u0211\7\63\2\2\u020c")
        buf.write("\u0212\5\"\22\2\u020d\u020f\7\60\2\2\u020e\u020d\3\2\2")
        buf.write("\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212")
        buf.write("\5,\27\2\u0211\u020c\3\2\2\2\u0211\u020e\3\2\2\2\u0212")
        buf.write("\u0214\3\2\2\2\u0213\u020b\3\2\2\2\u0214\u0217\3\2\2\2")
        buf.write("\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0219\3")
        buf.write("\2\2\2\u0217\u0215\3\2\2\2\u0218\u021a\7\63\2\2\u0219")
        buf.write("\u0218\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2")
        buf.write("\u021b\u01fe\3\2\2\2\u021b\u0209\3\2\2\2\u021c\r\3\2\2")
        buf.write("\2\u021d\u021e\t\5\2\2\u021e\17\3\2\2\2\u021f\u0220\7")
        buf.write("#\2\2\u0220\21\3\2\2\2\u0221\u0227\7\5\2\2\u0222\u0225")
        buf.write("\5\"\22\2\u0223\u0224\7\6\2\2\u0224\u0226\5\"\22\2\u0225")
        buf.write("\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0228\3\2\2\2")
        buf.write("\u0227\u0222\3\2\2\2\u0227\u0228\3\2\2\2\u0228\23\3\2")
        buf.write("\2\2\u0229\u022a\7\f\2\2\u022a\u022b\5\"\22\2\u022b\u022c")
        buf.write("\7\64\2\2\u022c\u0234\5 \21\2\u022d\u022e\7\r\2\2\u022e")
        buf.write("\u022f\5\"\22\2\u022f\u0230\7\64\2\2\u0230\u0231\5 \21")
        buf.write("\2\u0231\u0233\3\2\2\2\u0232\u022d\3\2\2\2\u0233\u0236")
        buf.write("\3\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("\u0238\3\2\2\2\u0236\u0234\3\2\2\2\u0237\u0239\5\26\f")
        buf.write("\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\25\3")
        buf.write("\2\2\2\u023a\u023b\7\16\2\2\u023b\u023c\7\64\2\2\u023c")
        buf.write("\u023d\5 \21\2\u023d\27\3\2\2\2\u023e\u023f\7\17\2\2\u023f")
        buf.write("\u0240\5\"\22\2\u0240\u0241\7\64\2\2\u0241\u0243\5 \21")
        buf.write("\2\u0242\u0244\5\26\f\2\u0243\u0242\3\2\2\2\u0243\u0244")
        buf.write("\3\2\2\2\u0244\31\3\2\2\2\u0245\u0246\7\20\2\2\u0246\u0247")
        buf.write("\5:\36\2\u0247\u0248\7\21\2\2\u0248\u0249\5<\37\2\u0249")
        buf.write("\u024a\7\64\2\2\u024a\u024c\5 \21\2\u024b\u024d\5\26\f")
        buf.write("\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d\33\3")
        buf.write("\2\2\2\u024e\u024f\7\22\2\2\u024f\u0250\7\64\2\2\u0250")
        buf.write("\u0264\5 \21\2\u0251\u0252\5\36\20\2\u0252\u0253\7\64")
        buf.write("\2\2\u0253\u0254\5 \21\2\u0254\u0256\3\2\2\2\u0255\u0251")
        buf.write("\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0255\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u025b\5\26\f")
        buf.write("\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025f")
        buf.write("\3\2\2\2\u025c\u025d\7\23\2\2\u025d\u025e\7\64\2\2\u025e")
        buf.write("\u0260\5 \21\2\u025f\u025c\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write("\u0260\u0265\3\2\2\2\u0261\u0262\7\23\2\2\u0262\u0263")
        buf.write("\7\64\2\2\u0263\u0265\5 \21\2\u0264\u0255\3\2\2\2\u0264")
        buf.write("\u0261\3\2\2\2\u0265\35\3\2\2\2\u0266\u026c\7\25\2\2\u0267")
        buf.write("\u026a\5\"\22\2\u0268\u0269\7\b\2\2\u0269\u026b\7%\2\2")
        buf.write("\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d\3")
        buf.write("\2\2\2\u026c\u0267\3\2\2\2\u026c\u026d\3\2\2\2\u026d\37")
        buf.write("\3\2\2\2\u026e\u0273\5\n\6\2\u026f\u0270\7\65\2\2\u0270")
        buf.write("\u0272\5\n\6\2\u0271\u026f\3\2\2\2\u0272\u0275\3\2\2\2")
        buf.write("\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0277\3")
        buf.write("\2\2\2\u0275\u0273\3\2\2\2\u0276\u0278\7\65\2\2\u0277")
        buf.write("\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2")
        buf.write("\u0279\u027a\7$\2\2\u027a\u0285\3\2\2\2\u027b\u027c\7")
        buf.write("$\2\2\u027c\u027e\7_\2\2\u027d\u027f\5\b\5\2\u027e\u027d")
        buf.write("\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\7`\2\2")
        buf.write("\u0283\u0285\3\2\2\2\u0284\u026e\3\2\2\2\u0284\u027b\3")
        buf.write("\2\2\2\u0285!\3\2\2\2\u0286\u028c\5&\24\2\u0287\u0288")
        buf.write("\7\f\2\2\u0288\u0289\5&\24\2\u0289\u028a\7\16\2\2\u028a")
        buf.write("\u028b\5\"\22\2\u028b\u028d\3\2\2\2\u028c\u0287\3\2\2")
        buf.write("\2\u028c\u028d\3\2\2\2\u028d\u0295\3\2\2\2\u028e\u0290")
        buf.write("\7\26\2\2\u028f\u0291\5\6\4\2\u0290\u028f\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\7\64\2")
        buf.write("\2\u0293\u0295\5\"\22\2\u0294\u0286\3\2\2\2\u0294\u028e")
        buf.write("\3\2\2\2\u0295#\3\2\2\2\u0296\u029e\5&\24\2\u0297\u0299")
        buf.write("\7\26\2\2\u0298\u029a\5\6\4\2\u0299\u0298\3\2\2\2\u0299")
        buf.write("\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\7\64\2")
        buf.write("\2\u029c\u029e\5$\23\2\u029d\u0296\3\2\2\2\u029d\u0297")
        buf.write("\3\2\2\2\u029e%\3\2\2\2\u029f\u02a4\5(\25\2\u02a0\u02a1")
        buf.write("\t\6\2\2\u02a1\u02a3\5(\25\2\u02a2\u02a0\3\2\2\2\u02a3")
        buf.write("\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2")
        buf.write("\u02a5\'\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a8\7\31")
        buf.write("\2\2\u02a8\u02b9\5(\25\2\u02a9\u02ab\7\60\2\2\u02aa\u02a9")
        buf.write("\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac")
        buf.write("\u02b5\5,\27\2\u02ad\u02af\5*\26\2\u02ae\u02b0\7\60\2")
        buf.write("\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1")
        buf.write("\3\2\2\2\u02b1\u02b2\5,\27\2\u02b2\u02b4\3\2\2\2\u02b3")
        buf.write("\u02ad\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3\2\2\2")
        buf.write("\u02b5\u02b6\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7\u02b5\3")
        buf.write("\2\2\2\u02b8\u02a7\3\2\2\2\u02b8\u02aa\3\2\2\2\u02b9)")
        buf.write("\3\2\2\2\u02ba\u02c8\7G\2\2\u02bb\u02c8\7H\2\2\u02bc\u02c8")
        buf.write("\7I\2\2\u02bd\u02c8\7J\2\2\u02be\u02c8\7K\2\2\u02bf\u02c8")
        buf.write("\7L\2\2\u02c0\u02c8\7M\2\2\u02c1\u02c8\7\21\2\2\u02c2")
        buf.write("\u02c3\7\31\2\2\u02c3\u02c8\7\21\2\2\u02c4\u02c8\7\32")
        buf.write("\2\2\u02c5\u02c6\7\32\2\2\u02c6\u02c8\7\31\2\2\u02c7\u02ba")
        buf.write("\3\2\2\2\u02c7\u02bb\3\2\2\2\u02c7\u02bc\3\2\2\2\u02c7")
        buf.write("\u02bd\3\2\2\2\u02c7\u02be\3\2\2\2\u02c7\u02bf\3\2\2\2")
        buf.write("\u02c7\u02c0\3\2\2\2\u02c7\u02c1\3\2\2\2\u02c7\u02c2\3")
        buf.write("\2\2\2\u02c7\u02c4\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8+")
        buf.write("\3\2\2\2\u02c9\u02ce\5.\30\2\u02ca\u02cb\t\7\2\2\u02cb")
        buf.write("\u02cd\5.\30\2\u02cc\u02ca\3\2\2\2\u02cd\u02d0\3\2\2\2")
        buf.write("\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf-\3\2\2")
        buf.write("\2\u02d0\u02ce\3\2\2\2\u02d1\u02d2\t\b\2\2\u02d2\u02e0")
        buf.write("\5.\30\2\u02d3\u02e0\5\60\31\2\u02d4\u02d8\5\62\32\2\u02d5")
        buf.write("\u02d7\5\66\34\2\u02d6\u02d5\3\2\2\2\u02d7\u02da\3\2\2")
        buf.write("\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dd")
        buf.write("\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\7\66\2\2\u02dc")
        buf.write("\u02de\5.\30\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2")
        buf.write("\u02de\u02e0\3\2\2\2\u02df\u02d1\3\2\2\2\u02df\u02d3\3")
        buf.write("\2\2\2\u02df\u02d4\3\2\2\2\u02e0/\3\2\2\2\u02e1\u02e2")
        buf.write("\b\31\1\2\u02e2\u02e3\7%\2\2\u02e3\u02e5\7\61\2\2\u02e4")
        buf.write("\u02e6\5@!\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6")
        buf.write("\u02e7\3\2\2\2\u02e7\u02e8\7\62\2\2\u02e8\u02f1\3\2\2")
        buf.write("\2\u02e9\u02ea\f\3\2\2\u02ea\u02ec\7\61\2\2\u02eb\u02ed")
        buf.write("\5@!\2\u02ec\u02eb\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee")
        buf.write("\3\2\2\2\u02ee\u02f0\7\62\2\2\u02ef\u02e9\3\2\2\2\u02f0")
        buf.write("\u02f3\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2")
        buf.write("\u02f2\61\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f4\u02fc\7\61")
        buf.write("\2\2\u02f5\u02f9\7\37\2\2\u02f6\u02f7\7\6\2\2\u02f7\u02fa")
        buf.write("\5\"\22\2\u02f8\u02fa\5<\37\2\u02f9\u02f6\3\2\2\2\u02f9")
        buf.write("\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fd\3\2\2\2")
        buf.write("\u02fb\u02fd\5\64\33\2\u02fc\u02f5\3\2\2\2\u02fc\u02fb")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe")
        buf.write("\u031c\7\62\2\2\u02ff\u0301\78\2\2\u0300\u0302\5\64\33")
        buf.write("\2\u0301\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0303")
        buf.write("\3\2\2\2\u0303\u031c\79\2\2\u0304\u0306\7E\2\2\u0305\u0307")
        buf.write("\5> \2\u0306\u0305\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308")
        buf.write("\3\2\2\2\u0308\u031c\7F\2\2\u0309\u031a\7%\2\2\u030a\u031a")
        buf.write("\7(\2\2\u030b\u031a\7)\2\2\u030c\u031a\7*\2\2\u030d\u031a")
        buf.write("\7+\2\2\u030e\u031a\7,\2\2\u030f\u031a\7-\2\2\u0310\u0312")
        buf.write("\t\t\2\2\u0311\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u031a\3\2\2\2")
        buf.write("\u0315\u031a\7/\2\2\u0316\u031a\7\33\2\2\u0317\u031a\7")
        buf.write("\34\2\2\u0318\u031a\7\35\2\2\u0319\u0309\3\2\2\2\u0319")
        buf.write("\u030a\3\2\2\2\u0319\u030b\3\2\2\2\u0319\u030c\3\2\2\2")
        buf.write("\u0319\u030d\3\2\2\2\u0319\u030e\3\2\2\2\u0319\u030f\3")
        buf.write("\2\2\2\u0319\u0311\3\2\2\2\u0319\u0315\3\2\2\2\u0319\u0316")
        buf.write("\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u0318\3\2\2\2\u031a")
        buf.write("\u031c\3\2\2\2\u031b\u02f4\3\2\2\2\u031b\u02ff\3\2\2\2")
        buf.write("\u031b\u0304\3\2\2\2\u031b\u0319\3\2\2\2\u031c\63\3\2")
        buf.write("\2\2\u031d\u0329\5\"\22\2\u031e\u032a\5D#\2\u031f\u0320")
        buf.write("\7\63\2\2\u0320\u0322\5\"\22\2\u0321\u031f\3\2\2\2\u0322")
        buf.write("\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2")
        buf.write("\u0324\u0327\3\2\2\2\u0325\u0323\3\2\2\2\u0326\u0328\7")
        buf.write("\63\2\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328")
        buf.write("\u032a\3\2\2\2\u0329\u031e\3\2\2\2\u0329\u0323\3\2\2\2")
        buf.write("\u032a\65\3\2\2\2\u032b\u032d\7\61\2\2\u032c\u032e\5@")
        buf.write("!\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0341\7\62\2\2\u0330\u0331\78\2\2\u0331")
        buf.write("\u0336\58\35\2\u0332\u0333\7\63\2\2\u0333\u0335\58\35")
        buf.write("\2\u0334\u0332\3\2\2\2\u0335\u0338\3\2\2\2\u0336\u0334")
        buf.write("\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u033a\3\2\2\2\u0338")
        buf.write("\u0336\3\2\2\2\u0339\u033b\7\63\2\2\u033a\u0339\3\2\2")
        buf.write("\2\u033a\u033b\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d")
        buf.write("\79\2\2\u033d\u0341\3\2\2\2\u033e\u033f\7.\2\2\u033f\u0341")
        buf.write("\7%\2\2\u0340\u032b\3\2\2\2\u0340\u0330\3\2\2\2\u0340")
        buf.write("\u033e\3\2\2\2\u0341\67\3\2\2\2\u0342\u0351\5\"\22\2\u0343")
        buf.write("\u0345\5\"\22\2\u0344\u0343\3\2\2\2\u0344\u0345\3\2\2")
        buf.write("\2\u0345\u0346\3\2\2\2\u0346\u0348\7\64\2\2\u0347\u0349")
        buf.write("\5\"\22\2\u0348\u0347\3\2\2\2\u0348\u0349\3\2\2\2\u0349")
        buf.write("\u034e\3\2\2\2\u034a\u034c\7\64\2\2\u034b\u034d\5\"\22")
        buf.write("\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034f")
        buf.write("\3\2\2\2\u034e\u034a\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0351\3\2\2\2\u0350\u0342\3\2\2\2\u0350\u0344\3\2\2\2")
        buf.write("\u03519\3\2\2\2\u0352\u0354\7\60\2\2\u0353\u0352\3\2\2")
        buf.write("\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u035d")
        buf.write("\5,\27\2\u0356\u0358\7\63\2\2\u0357\u0359\7\60\2\2\u0358")
        buf.write("\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u035c\5,\27\2\u035b\u0356\3\2\2\2\u035c\u035f\3")
        buf.write("\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0361")
        buf.write("\3\2\2\2\u035f\u035d\3\2\2\2\u0360\u0362\7\63\2\2\u0361")
        buf.write("\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362;\3\2\2\2\u0363")
        buf.write("\u0368\5\"\22\2\u0364\u0365\7\63\2\2\u0365\u0367\5\"\22")
        buf.write("\2\u0366\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036c\3\2\2\2\u036a")
        buf.write("\u0368\3\2\2\2\u036b\u036d\7\63\2\2\u036c\u036b\3\2\2")
        buf.write("\2\u036c\u036d\3\2\2\2\u036d=\3\2\2\2\u036e\u038d\5\"")
        buf.write("\22\2\u036f\u0370\7\64\2\2\u0370\u0372\5\"\22\2\u0371")
        buf.write("\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2")
        buf.write("\u0373\u038e\5D#\2\u0374\u0375\7\64\2\2\u0375\u037d\5")
        buf.write("\"\22\2\u0376\u0377\7\63\2\2\u0377\u0378\5\"\22\2\u0378")
        buf.write("\u0379\7\64\2\2\u0379\u037a\5\"\22\2\u037a\u037c\3\2\2")
        buf.write("\2\u037b\u0376\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b")
        buf.write("\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0381\3\2\2\2\u037f")
        buf.write("\u037d\3\2\2\2\u0380\u0382\7\63\2\2\u0381\u0380\3\2\2")
        buf.write("\2\u0381\u0382\3\2\2\2\u0382\u038e\3\2\2\2\u0383\u0384")
        buf.write("\7\63\2\2\u0384\u0386\5\"\22\2\u0385\u0383\3\2\2\2\u0386")
        buf.write("\u0389\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2")
        buf.write("\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u038a\u038c\7")
        buf.write("\63\2\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write("\u038e\3\2\2\2\u038d\u0371\3\2\2\2\u038d\u0374\3\2\2\2")
        buf.write("\u038d\u0387\3\2\2\2\u038e?\3\2\2\2\u038f\u0395\5\"\22")
        buf.write("\2\u0390\u0392\5D#\2\u0391\u0390\3\2\2\2\u0391\u0392\3")
        buf.write("\2\2\2\u0392\u0396\3\2\2\2\u0393\u0394\7\67\2\2\u0394")
        buf.write("\u0396\5\"\22\2\u0395\u0391\3\2\2\2\u0395\u0393\3\2\2")
        buf.write("\2\u0396\u0397\3\2\2\2\u0397\u0398\7\63\2\2\u0398\u039a")
        buf.write("\3\2\2\2\u0399\u038f\3\2\2\2\u039a\u039d\3\2\2\2\u039b")
        buf.write("\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03c0\3\2\2\2")
        buf.write("\u039d\u039b\3\2\2\2\u039e\u03a4\5\"\22\2\u039f\u03a1")
        buf.write("\5D#\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a5")
        buf.write("\3\2\2\2\u03a2\u03a3\7\67\2\2\u03a3\u03a5\5\"\22\2\u03a4")
        buf.write("\u03a0\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a5\u03a7\3\2\2\2")
        buf.write("\u03a6\u03a8\7\63\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8")
        buf.write("\3\2\2\2\u03a8\u03c1\3\2\2\2\u03a9\u03aa\7\60\2\2\u03aa")
        buf.write("\u03b6\5\"\22\2\u03ab\u03ac\7\63\2\2\u03ac\u03b2\5\"\22")
        buf.write("\2\u03ad\u03af\5D#\2\u03ae\u03ad\3\2\2\2\u03ae\u03af\3")
        buf.write("\2\2\2\u03af\u03b3\3\2\2\2\u03b0\u03b1\7\67\2\2\u03b1")
        buf.write("\u03b3\5\"\22\2\u03b2\u03ae\3\2\2\2\u03b2\u03b0\3\2\2")
        buf.write("\2\u03b3\u03b5\3\2\2\2\u03b4\u03ab\3\2\2\2\u03b5\u03b8")
        buf.write("\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7")
        buf.write("\u03bc\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03ba\7\63\2")
        buf.write("\2\u03ba\u03bb\7\66\2\2\u03bb\u03bd\5\"\22\2\u03bc\u03b9")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03c1\3\2\2\2\u03be")
        buf.write("\u03bf\7\66\2\2\u03bf\u03c1\5\"\22\2\u03c0\u039e\3\2\2")
        buf.write("\2\u03c0\u03a9\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1A\3\2")
        buf.write("\2\2\u03c2\u03c9\5D#\2\u03c3\u03c4\7\f\2\2\u03c4\u03c6")
        buf.write("\5$\23\2\u03c5\u03c7\5B\"\2\u03c6\u03c5\3\2\2\2\u03c6")
        buf.write("\u03c7\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c2\3\2\2\2")
        buf.write("\u03c8\u03c3\3\2\2\2\u03c9C\3\2\2\2\u03ca\u03cb\7\20\2")
        buf.write("\2\u03cb\u03cc\5:\36\2\u03cc\u03cd\7\21\2\2\u03cd\u03cf")
        buf.write("\5&\24\2\u03ce\u03d0\5B\"\2\u03cf\u03ce\3\2\2\2\u03cf")
        buf.write("\u03d0\3\2\2\2\u03d0E\3\2\2\2\u00b1HJRV\\`dlntx|\u0084")
        buf.write("\u0086\u008c\u008e\u0090\u0096\u0098\u009e\u00a2\u00a6")
        buf.write("\u00ae\u00b0\u00b6\u00b8\u00bd\u00c3\u00c7\u00cd\u00d3")
        buf.write("\u00d7\u00dd\u00e1\u00e3\u00e7\u00ed\u00f1\u00f7\u00fb")
        buf.write("\u0102\u0106\u0112\u0118\u011c\u0128\u012d\u0130\u0135")
        buf.write("\u013c\u013f\u0145\u014a\u014c\u0150\u0154\u0157\u015c")
        buf.write("\u015f\u0163\u0167\u016e\u0171\u0176\u0179\u0181\u0188")
        buf.write("\u0190\u0195\u019d\u01a2\u01a6\u01ad\u01b5\u01bb\u01bd")
        buf.write("\u01c5\u01cb\u01cf\u01d3\u01d9\u01df\u01e3\u01e7\u01e9")
        buf.write("\u01f1\u01f8\u01fb\u0202\u0206\u0209\u020e\u0211\u0215")
        buf.write("\u0219\u021b\u0225\u0227\u0234\u0238\u0243\u024c\u0257")
        buf.write("\u025a\u025f\u0264\u026a\u026c\u0273\u0277\u0280\u0284")
        buf.write("\u028c\u0290\u0294\u0299\u029d\u02a4\u02aa\u02af\u02b5")
        buf.write("\u02b8\u02c7\u02ce\u02d8\u02dd\u02df\u02e5\u02ec\u02f1")
        buf.write("\u02f9\u02fc\u0301\u0306\u0313\u0319\u031b\u0323\u0327")
        buf.write("\u0329\u032d\u0336\u033a\u0340\u0344\u0348\u034c\u034e")
        buf.write("\u0350\u0353\u0358\u035d\u0361\u0368\u036c\u0371\u037d")
        buf.write("\u0381\u0387\u038b\u038d\u0391\u0395\u039b\u03a0\u03a4")
        buf.write("\u03a7\u03ae\u03b2\u03b6\u03bc\u03c0\u03c6\u03c8\u03cf")
        return buf.getvalue()


class Python3Parser(Parser):
    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'def'", "'return'", "'raise'", "'from'",
                    "'import'", "'as'", "'global'", "'nonlocal'", "'assert'",
                    "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'",
                    "'try'", "'finally'", "'with'", "'except'", "'lambda'",
                    "'or'", "'and'", "'not'", "'is'", "'None'", "'True'",
                    "'False'", "'class'", "'yield'", "'del'", "'pass'",
                    "'continue'", "'break'", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                    "'.'", "'...'", "'*'", "'('", "')'", "','", "':'",
                    "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'",
                    "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'",
                    "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='",
                    "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='",
                    "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='",
                    "'<<='", "'>>='", "'**='", "'//='"]

    symbolicNames = ["<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT",
                     "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF",
                     "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH",
                     "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE",
                     "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS",
                     "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL",
                     "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER",
                     "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER",
                     "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN",
                     "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN",
                     "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP",
                     "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV",
                     "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE",
                     "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ",
                     "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN",
                     "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN",
                     "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN",
                     "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN",
                     "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT",
                     "DEDENT"]

    RULE_file_input = 0
    RULE_typedargslist = 1
    RULE_varargslist = 2
    RULE_stmt = 3
    RULE_small_stmt = 4
    RULE_assign = 5
    RULE_augassign = 6
    RULE_break_stmt = 7
    RULE_raise_stmt = 8
    RULE_if_stmt = 9
    RULE_else_suite = 10
    RULE_while_stmt = 11
    RULE_for_stmt = 12
    RULE_try_stmt = 13
    RULE_except_clause = 14
    RULE_suite = 15
    RULE_test = 16
    RULE_test_nocond = 17
    RULE_or_test = 18
    RULE_not_test = 19
    RULE_comp_op = 20
    RULE_expr = 21
    RULE_factor = 22
    RULE_call = 23
    RULE_atom = 24
    RULE_testlist_comp = 25
    RULE_trailer = 26
    RULE_subscript = 27
    RULE_exprlist = 28
    RULE_testlist = 29
    RULE_dictorsetmaker = 30
    RULE_arglist = 31
    RULE_comp_iter = 32
    RULE_comp_for = 33

    ruleNames = ["file_input", "typedargslist", "varargslist", "stmt",
                 "small_stmt", "assign", "augassign", "break_stmt", "raise_stmt",
                 "if_stmt", "else_suite", "while_stmt", "for_stmt", "try_stmt",
                 "except_clause", "suite", "test", "test_nocond", "or_test",
                 "not_test", "comp_op", "expr", "factor", "call", "atom",
                 "testlist_comp", "trailer", "subscript", "exprlist",
                 "testlist", "dictorsetmaker", "arglist", "comp_iter",
                 "comp_for"]

    EOF = Token.EOF
    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_LITERAL = 36
    BYTES_LITERAL = 37
    DECIMAL_INTEGER = 38
    OCT_INTEGER = 39
    HEX_INTEGER = 40
    BIN_INTEGER = 41
    FLOAT_NUMBER = 42
    IMAG_NUMBER = 43
    DOT = 44
    ELLIPSIS = 45
    STAR = 46
    OPEN_PAREN = 47
    CLOSE_PAREN = 48
    COMMA = 49
    COLON = 50
    SEMI_COLON = 51
    POWER = 52
    ASSIGN = 53
    OPEN_BRACK = 54
    CLOSE_BRACK = 55
    OR_OP = 56
    XOR = 57
    AND_OP = 58
    LEFT_SHIFT = 59
    RIGHT_SHIFT = 60
    ADD = 61
    MINUS = 62
    DIV = 63
    MOD = 64
    IDIV = 65
    NOT_OP = 66
    OPEN_BRACE = 67
    CLOSE_BRACE = 68
    LESS_THAN = 69
    GREATER_THAN = 70
    EQUALS = 71
    GT_EQ = 72
    LT_EQ = 73
    NOT_EQ_1 = 74
    NOT_EQ_2 = 75
    AT = 76
    ARROW = 77
    ADD_ASSIGN = 78
    SUB_ASSIGN = 79
    MULT_ASSIGN = 80
    AT_ASSIGN = 81
    DIV_ASSIGN = 82
    MOD_ASSIGN = 83
    AND_ASSIGN = 84
    OR_ASSIGN = 85
    XOR_ASSIGN = 86
    LEFT_SHIFT_ASSIGN = 87
    RIGHT_SHIFT_ASSIGN = 88
    POWER_ASSIGN = 89
    IDIV_ASSIGN = 90
    SKIP_ = 91
    UNKNOWN_CHAR = 92
    INDENT = 93
    DEDENT = 94

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFile_input"):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)

    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 72
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (
                1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (
                1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (
                1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (
                1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (
                1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (
                1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (
                1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (
                1 << Python3Parser.BREAK) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (
                1 << Python3Parser.STRING_LITERAL) | (1 << Python3Parser.BYTES_LITERAL) | (
                1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (
                1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (
                1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (
                1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.SEMI_COLON) | (
                1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or (
                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (
                1 << (Python3Parser.AT - 66)))) != 0):
                self.state = 70
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 68
                    self.match(Python3Parser.NEWLINE)
                    pass

                elif la_ == 2:
                    self.state = 69
                    self.stmt()
                    pass

                self.state = 74
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 75
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypedargslist"):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)

    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_typedargslist)
        self._la = 0  # Token type
        try:
            self.state = 182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 77
                self.match(Python3Parser.NAME)
                self.state = 80
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 78
                    self.match(Python3Parser.COLON)
                    self.state = 79
                    self.test()

                self.state = 84
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 82
                    self.match(Python3Parser.ASSIGN)
                    self.state = 83
                    self.test()

                self.state = 98
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 86
                        self.match(Python3Parser.COMMA)
                        self.state = 87
                        self.match(Python3Parser.NAME)
                        self.state = 90
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 88
                            self.match(Python3Parser.COLON)
                            self.state = 89
                            self.test()

                        self.state = 94
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 92
                            self.match(Python3Parser.ASSIGN)
                            self.state = 93
                            self.test()

                    self.state = 100
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                self.state = 142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 101
                    self.match(Python3Parser.COMMA)
                    self.state = 140
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 102
                        self.match(Python3Parser.STAR)
                        self.state = 108
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 103
                            self.match(Python3Parser.NAME)
                            self.state = 106
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 104
                                self.match(Python3Parser.COLON)
                                self.state = 105
                                self.test()

                        self.state = 122
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 110
                                self.match(Python3Parser.COMMA)
                                self.state = 111
                                self.match(Python3Parser.NAME)
                                self.state = 114
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.COLON:
                                    self.state = 112
                                    self.match(Python3Parser.COLON)
                                    self.state = 113
                                    self.test()

                                self.state = 118
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 116
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 117
                                    self.test()

                            self.state = 124
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

                        self.state = 132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 125
                            self.match(Python3Parser.COMMA)
                            self.state = 126
                            self.match(Python3Parser.POWER)
                            self.state = 127
                            self.match(Python3Parser.NAME)
                            self.state = 130
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.COLON:
                                self.state = 128
                                self.match(Python3Parser.COLON)
                                self.state = 129
                                self.test()

                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 134
                        self.match(Python3Parser.POWER)
                        self.state = 135
                        self.match(Python3Parser.NAME)
                        self.state = 138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 136
                            self.match(Python3Parser.COLON)
                            self.state = 137
                            self.test()

                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass

                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 144
                self.match(Python3Parser.STAR)
                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 145
                    self.match(Python3Parser.NAME)
                    self.state = 148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 146
                        self.match(Python3Parser.COLON)
                        self.state = 147
                        self.test()

                self.state = 164
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 152
                        self.match(Python3Parser.COMMA)
                        self.state = 153
                        self.match(Python3Parser.NAME)
                        self.state = 156
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COLON:
                            self.state = 154
                            self.match(Python3Parser.COLON)
                            self.state = 155
                            self.test()

                        self.state = 160
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 158
                            self.match(Python3Parser.ASSIGN)
                            self.state = 159
                            self.test()

                    self.state = 166
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 167
                    self.match(Python3Parser.COMMA)
                    self.state = 168
                    self.match(Python3Parser.POWER)
                    self.state = 169
                    self.match(Python3Parser.NAME)
                    self.state = 172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COLON:
                        self.state = 170
                        self.match(Python3Parser.COLON)
                        self.state = 171
                        self.test()

                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self.match(Python3Parser.POWER)
                self.state = 177
                self.match(Python3Parser.NAME)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 178
                    self.match(Python3Parser.COLON)
                    self.state = 179
                    self.test()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarargslist"):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)

    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_varargslist)
        self._la = 0  # Token type
        try:
            self.state = 249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.match(Python3Parser.NAME)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ASSIGN:
                    self.state = 185
                    self.match(Python3Parser.ASSIGN)
                    self.state = 186
                    self.test()

                self.state = 197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 189
                        self.match(Python3Parser.COMMA)
                        self.state = 190
                        self.match(Python3Parser.NAME)
                        self.state = 193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 191
                            self.match(Python3Parser.ASSIGN)
                            self.state = 192
                            self.test()

                    self.state = 199
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 200
                    self.match(Python3Parser.COMMA)
                    self.state = 223
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 201
                        self.match(Python3Parser.STAR)
                        self.state = 203
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.NAME:
                            self.state = 202
                            self.match(Python3Parser.NAME)

                        self.state = 213
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 205
                                self.match(Python3Parser.COMMA)
                                self.state = 206
                                self.match(Python3Parser.NAME)
                                self.state = 209
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == Python3Parser.ASSIGN:
                                    self.state = 207
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 208
                                    self.test()

                            self.state = 215
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

                        self.state = 219
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.COMMA:
                            self.state = 216
                            self.match(Python3Parser.COMMA)
                            self.state = 217
                            self.match(Python3Parser.POWER)
                            self.state = 218
                            self.match(Python3Parser.NAME)

                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 221
                        self.match(Python3Parser.POWER)
                        self.state = 222
                        self.match(Python3Parser.NAME)
                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass

                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(Python3Parser.STAR)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.NAME:
                    self.state = 228
                    self.match(Python3Parser.NAME)

                self.state = 239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 231
                        self.match(Python3Parser.COMMA)
                        self.state = 232
                        self.match(Python3Parser.NAME)
                        self.state = 235
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.ASSIGN:
                            self.state = 233
                            self.match(Python3Parser.ASSIGN)
                            self.state = 234
                            self.test()

                    self.state = 241
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 242
                    self.match(Python3Parser.COMMA)
                    self.state = 243
                    self.match(Python3Parser.POWER)
                    self.state = 244
                    self.match(Python3Parser.NAME)

                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 247
                self.match(Python3Parser.POWER)
                self.state = 248
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext, 0)

        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext, 0)

        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext, 0)

        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext, 0)

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext, 0)

        def arglist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArglistContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArglistContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStmt"):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)

    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_stmt)
        self._la = 0  # Token type
        try:
            self.state = 334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT,
                         Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA,
                         Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE,
                         Python3Parser.BREAK, Python3Parser.NEWLINE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                         Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                         Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                         Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                         Python3Parser.OPEN_PAREN, Python3Parser.SEMI_COLON, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.small_stmt()
                self.state = 256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 252
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 253
                        self.small_stmt()
                    self.state = 258
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 259
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 262
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 264
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 265
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 266
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 267
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 268
                self.match(Python3Parser.WITH)
                self.state = 269
                self.test()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 270
                    self.match(Python3Parser.AS)
                    self.state = 271
                    self.expr()

                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 274
                    self.match(Python3Parser.COMMA)
                    self.state = 275
                    self.test()
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 276
                        self.match(Python3Parser.AS)
                        self.state = 277
                        self.expr()

                    self.state = 284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 285
                self.match(Python3Parser.COLON)
                self.state = 286
                self.suite()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.AT:
                    self.state = 288
                    self.match(Python3Parser.AT)
                    self.state = 289
                    self.match(Python3Parser.NAME)
                    self.state = 294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 290
                        self.match(Python3Parser.DOT)
                        self.state = 291
                        self.match(Python3Parser.NAME)
                        self.state = 296
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 297
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                            1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                            1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                            1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                            1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                            1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                            1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                            1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                            1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                            1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 298
                            self.arglist()

                        self.state = 301
                        self.match(Python3Parser.CLOSE_PAREN)

                    self.state = 304
                    self.match(Python3Parser.NEWLINE)
                    self.state = 309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 330
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.CLASS]:
                    self.state = 310
                    self.match(Python3Parser.CLASS)
                    self.state = 311
                    self.match(Python3Parser.NAME)
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.OPEN_PAREN:
                        self.state = 312
                        self.match(Python3Parser.OPEN_PAREN)
                        self.state = 314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                            1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                            1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                            1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                            1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                            1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                            1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                            1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                            1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                            1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                            1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                            1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                            self.state = 313
                            self.arglist()

                        self.state = 316
                        self.match(Python3Parser.CLOSE_PAREN)

                    pass
                elif token in [Python3Parser.DEF]:
                    self.state = 319
                    self.match(Python3Parser.DEF)
                    self.state = 320
                    self.match(Python3Parser.NAME)
                    self.state = 321
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                        self.state = 322
                        self.typedargslist()

                    self.state = 325
                    self.match(Python3Parser.CLOSE_PAREN)
                    self.state = 328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.ARROW:
                        self.state = 326
                        self.match(Python3Parser.ARROW)
                        self.state = 327
                        self.test()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 332
                self.match(Python3Parser.COLON)
                self.state = 333
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext, 0)

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def assign(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext, 0)

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def NAME(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AS)
            else:
                return self.getToken(Python3Parser.AS, i)

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSmall_stmt"):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)

    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_small_stmt)
        self._la = 0  # Token type
        try:
            self.state = 505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                         Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                         Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                         Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                         Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                         Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                         Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 336
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 337
                        self.match(Python3Parser.STAR)

                    self.state = 340
                    self.expr()
                    pass

                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 343
                        self.match(Python3Parser.COMMA)
                        self.state = 349
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
                        if la_ == 1:
                            self.state = 344
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 346
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 345
                                self.match(Python3Parser.STAR)

                            self.state = 348
                            self.expr()
                            pass

                    self.state = 355
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 356
                    self.match(Python3Parser.COMMA)

                self.state = 375
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN,
                             Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN,
                             Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN,
                             Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN,
                             Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                    self.state = 359
                    self.augassign()
                    self.state = 367
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 360
                        self.match(Python3Parser.YIELD)
                        self.state = 364
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FROM]:
                            self.state = 361
                            self.match(Python3Parser.FROM)
                            self.state = 362
                            self.test()
                            pass
                        elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                       Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                                       Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                                       Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                                       Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                                       Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                                       Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                                       Python3Parser.OPEN_BRACE]:
                            self.state = 363
                            self.testlist()
                            pass
                        elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                            pass
                        else:
                            pass
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                                   Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                                   Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                                   Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                                   Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                                   Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                                   Python3Parser.OPEN_BRACE]:
                        self.state = 366
                        self.testlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                    self.state = 372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.ASSIGN:
                        self.state = 369
                        self.assign()
                        self.state = 374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self.match(Python3Parser.DEL)
                self.state = 378
                self.exprlist()
                pass
            elif token in [Python3Parser.PASS, Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 379
                _la = self._input.LA(1)
                if not (_la == Python3Parser.PASS or _la == Python3Parser.CONTINUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 380
                self.break_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 381
                self.match(Python3Parser.RETURN)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 382
                    self.testlist()

                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 385
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 7)
                self.state = 386
                self.match(Python3Parser.YIELD)
                self.state = 390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FROM]:
                    self.state = 387
                    self.match(Python3Parser.FROM)
                    self.state = 388
                    self.test()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                               Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                               Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                               Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                               Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                               Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 389
                    self.testlist()
                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                    pass
                else:
                    pass
                pass
            elif token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 392
                self.match(Python3Parser.IMPORT)
                self.state = 393
                self.match(Python3Parser.NAME)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.DOT:
                    self.state = 394
                    self.match(Python3Parser.DOT)
                    self.state = 395
                    self.match(Python3Parser.NAME)
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 401
                    self.match(Python3Parser.AS)
                    self.state = 402
                    self.match(Python3Parser.NAME)

                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 405
                    self.match(Python3Parser.COMMA)
                    self.state = 406
                    self.match(Python3Parser.NAME)
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 407
                        self.match(Python3Parser.DOT)
                        self.state = 408
                        self.match(Python3Parser.NAME)
                        self.state = 413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 414
                        self.match(Python3Parser.AS)
                        self.state = 415
                        self.match(Python3Parser.NAME)

                    self.state = 422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 9)
                self.state = 423
                self.match(Python3Parser.FROM)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS:
                        self.state = 424
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 430
                    self.match(Python3Parser.NAME)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == Python3Parser.DOT:
                        self.state = 431
                        self.match(Python3Parser.DOT)
                        self.state = 432
                        self.match(Python3Parser.NAME)
                        self.state = 437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 438
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.DOT or _la == Python3Parser.ELLIPSIS):
                            break

                    pass

                self.state = 445
                self.match(Python3Parser.IMPORT)
                self.state = 487
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STAR]:
                    self.state = 446
                    self.match(Python3Parser.STAR)
                    pass
                elif token in [Python3Parser.OPEN_PAREN]:
                    self.state = 447
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 448
                    self.match(Python3Parser.NAME)
                    self.state = 451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 449
                        self.match(Python3Parser.AS)
                        self.state = 450
                        self.match(Python3Parser.NAME)

                    self.state = 461
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 453
                            self.match(Python3Parser.COMMA)
                            self.state = 454
                            self.match(Python3Parser.NAME)
                            self.state = 457
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 455
                                self.match(Python3Parser.AS)
                                self.state = 456
                                self.match(Python3Parser.NAME)

                        self.state = 463
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 78, self._ctx)

                    self.state = 465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 464
                        self.match(Python3Parser.COMMA)

                    self.state = 467
                    self.match(Python3Parser.CLOSE_PAREN)
                    pass
                elif token in [Python3Parser.NAME]:
                    self.state = 468
                    self.match(Python3Parser.NAME)
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.AS:
                        self.state = 469
                        self.match(Python3Parser.AS)
                        self.state = 470
                        self.match(Python3Parser.NAME)

                    self.state = 481
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 473
                            self.match(Python3Parser.COMMA)
                            self.state = 474
                            self.match(Python3Parser.NAME)
                            self.state = 477
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.AS:
                                self.state = 475
                                self.match(Python3Parser.AS)
                                self.state = 476
                                self.match(Python3Parser.NAME)

                        self.state = 483
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.COMMA:
                        self.state = 484
                        self.match(Python3Parser.COMMA)

                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.GLOBAL, Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 10)
                self.state = 489
                _la = self._input.LA(1)
                if not (_la == Python3Parser.GLOBAL or _la == Python3Parser.NONLOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 490
                self.match(Python3Parser.NAME)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == Python3Parser.COMMA:
                    self.state = 491
                    self.match(Python3Parser.COMMA)
                    self.state = 492
                    self.match(Python3Parser.NAME)
                    self.state = 497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [Python3Parser.ASSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 498
                self.match(Python3Parser.ASSERT)
                self.state = 499
                self.test()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 500
                    self.match(Python3Parser.COMMA)
                    self.state = 501
                    self.test()

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON]:
                self.enterOuterAlt(localctx, 12)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssign"):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)

    def assign(self):

        localctx = Python3Parser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_assign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(Python3Parser.ASSIGN)
            self.state = 537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.YIELD]:
                self.state = 508
                self.match(Python3Parser.YIELD)
                self.state = 512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FROM]:
                    self.state = 509
                    self.match(Python3Parser.FROM)
                    self.state = 510
                    self.test()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                               Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                               Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                               Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                               Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                               Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 511
                    self.testlist()
                    pass
                elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                    pass
                else:
                    pass
                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                           Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                           Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                           Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                           Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                           Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS,
                           Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
                if la_ == 1:
                    self.state = 514
                    self.test()
                    pass

                elif la_ == 2:
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 515
                        self.match(Python3Parser.STAR)

                    self.state = 518
                    self.expr()
                    pass

                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 521
                        self.match(Python3Parser.COMMA)
                        self.state = 527
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                        if la_ == 1:
                            self.state = 522
                            self.test()
                            pass

                        elif la_ == 2:
                            self.state = 524
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.STAR:
                                self.state = 523
                                self.match(Python3Parser.STAR)

                            self.state = 526
                            self.expr()
                            pass

                    self.state = 533
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 534
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAugassign"):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)

    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_augassign)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not (((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (Python3Parser.ADD_ASSIGN - 78)) | (
                1 << (Python3Parser.SUB_ASSIGN - 78)) | (1 << (Python3Parser.MULT_ASSIGN - 78)) | (
                1 << (Python3Parser.AT_ASSIGN - 78)) | (1 << (Python3Parser.DIV_ASSIGN - 78)) | (
                1 << (Python3Parser.MOD_ASSIGN - 78)) | (1 << (Python3Parser.AND_ASSIGN - 78)) | (
                1 << (Python3Parser.OR_ASSIGN - 78)) | (1 << (Python3Parser.XOR_ASSIGN - 78)) | (
                1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 78)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 78)) | (
                1 << (Python3Parser.POWER_ASSIGN - 78)) | (1 << (Python3Parser.IDIV_ASSIGN - 78)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreak_stmt"):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)

    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRaise_stmt"):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)

    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_raise_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(Python3Parser.RAISE)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 544
                self.test()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FROM:
                    self.state = 545
                    self.match(Python3Parser.FROM)
                    self.state = 546
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def ELIF(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIf_stmt"):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)

    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_if_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(Python3Parser.IF)
            self.state = 552
            self.test()
            self.state = 553
            self.match(Python3Parser.COLON)
            self.state = 554
            self.suite()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.ELIF:
                self.state = 555
                self.match(Python3Parser.ELIF)
                self.state = 556
                self.test()
                self.state = 557
                self.match(Python3Parser.COLON)
                self.state = 558
                self.suite()
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 565
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_suiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_else_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_suite"):
                return visitor.visitElse_suite(self)
            else:
                return visitor.visitChildren(self)

    def else_suite(self):

        localctx = Python3Parser.Else_suiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_else_suite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(Python3Parser.ELSE)
            self.state = 569
            self.match(Python3Parser.COLON)
            self.state = 570
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhile_stmt"):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)

    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_while_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(Python3Parser.WHILE)
            self.state = 573
            self.test()
            self.state = 574
            self.match(Python3Parser.COLON)
            self.state = 575
            self.suite()
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 576
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext, 0)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFor_stmt"):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)

    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_for_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(Python3Parser.FOR)
            self.state = 580
            self.exprlist()
            self.state = 581
            self.match(Python3Parser.IN)
            self.state = 582
            self.testlist()
            self.state = 583
            self.match(Python3Parser.COLON)
            self.state = 584
            self.suite()
            self.state = 586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.ELSE:
                self.state = 585
                self.else_suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext, i)

        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext, i)

        def else_suite(self):
            return self.getTypedRuleContext(Python3Parser.Else_suiteContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTry_stmt"):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)

    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_try_stmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(Python3Parser.TRY)
            self.state = 589
            self.match(Python3Parser.COLON)
            self.state = 590
            self.suite()
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 591
                    self.except_clause()
                    self.state = 592
                    self.match(Python3Parser.COLON)
                    self.state = 593
                    self.suite()
                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == Python3Parser.EXCEPT):
                        break

                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.ELSE:
                    self.state = 599
                    self.else_suite()

                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.FINALLY:
                    self.state = 602
                    self.match(Python3Parser.FINALLY)
                    self.state = 603
                    self.match(Python3Parser.COLON)
                    self.state = 604
                    self.suite()

                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 607
                self.match(Python3Parser.FINALLY)
                self.state = 608
                self.match(Python3Parser.COLON)
                self.state = 609
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExcept_clause"):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)

    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_except_clause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(Python3Parser.EXCEPT)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 613
                self.test()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.AS:
                    self.state = 614
                    self.match(Python3Parser.AS)
                    self.state = 615
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext, i)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSuite"):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)

    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_suite)
        self._la = 0  # Token type
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 111, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 620
                self.small_stmt()
                self.state = 625
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 621
                        self.match(Python3Parser.SEMI_COLON)
                        self.state = 622
                        self.small_stmt()
                    self.state = 627
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)

                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.SEMI_COLON:
                    self.state = 628
                    self.match(Python3Parser.SEMI_COLON)

                self.state = 631
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(Python3Parser.NEWLINE)
                self.state = 634
                self.match(Python3Parser.INDENT)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 635
                    self.stmt()
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (
                        1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (
                        1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (
                        1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (
                        1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (
                        1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (
                        1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (
                        1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (
                        1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.NEWLINE) | (
                        1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_LITERAL) | (
                        1 << Python3Parser.BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (
                        1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (
                        1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (
                        1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (
                        1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.SEMI_COLON) | (
                        1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (
                        1 << Python3Parser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (
                        1 << (Python3Parser.AT - 66)))) != 0)):
                        break

                self.state = 640
                self.match(Python3Parser.DEDENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext, i)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest"):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)

    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_test)
        self._la = 0  # Token type
        try:
            self.state = 658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.or_test()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF:
                    self.state = 645
                    self.match(Python3Parser.IF)
                    self.state = 646
                    self.or_test()
                    self.state = 647
                    self.match(Python3Parser.ELSE)
                    self.state = 648
                    self.test()

                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.match(Python3Parser.LAMBDA)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 653
                    self.varargslist()

                self.state = 656
                self.match(Python3Parser.COLON)
                self.state = 657
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTest_nocond"):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)

    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_test_nocond)
        self._la = 0  # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE,
                         Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL,
                         Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER,
                         Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER,
                         Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                         Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.match(Python3Parser.LAMBDA)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                    self.state = 662
                    self.varargslist()

                self.state = 665
                self.match(Python3Parser.COLON)
                self.state = 666
                self.test_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext, i)

        def OR(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def AND(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOr_test"):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)

    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_or_test)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.not_test()
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == Python3Parser.OR or _la == Python3Parser.AND:
                self.state = 670
                _la = self._input.LA(1)
                if not (_la == Python3Parser.OR or _la == Python3Parser.AND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 671
                self.not_test()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def comp_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNot_test"):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)

    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_not_test)
        self._la = 0  # Token type
        try:
            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.match(Python3Parser.NOT)
                self.state = 678
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                           Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                           Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                           Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                           Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.STAR:
                    self.state = 679
                    self.match(Python3Parser.STAR)

                self.state = 682
                self.expr()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & (
                                                    (1 << (Python3Parser.IN - 15)) | (1 << (Python3Parser.NOT - 15)) | (
                                                1 << (Python3Parser.IS - 15)) | (
                                            1 << (Python3Parser.LESS_THAN - 15)) | (
                                        1 << (Python3Parser.GREATER_THAN - 15)) | (1 << (Python3Parser.EQUALS - 15)) | (
                                1 << (Python3Parser.GT_EQ - 15)) | (1 << (Python3Parser.LT_EQ - 15)) | (
                        1 << (Python3Parser.NOT_EQ_1 - 15)) | (1 << (Python3Parser.NOT_EQ_2 - 15)))) != 0):
                    self.state = 683
                    self.comp_op()
                    self.state = 685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 684
                        self.match(Python3Parser.STAR)

                    self.state = 687
                    self.expr()
                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_op"):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)

    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_comp_op)
        try:
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 699
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 701
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 702
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 703
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.match(Python3Parser.NOT)
                self.state = 705
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 706
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 707
                self.match(Python3Parser.IS)
                self.state = 708
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpr"):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)

    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.factor()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (Python3Parser.STAR - 46)) | (
                1 << (Python3Parser.OR_OP - 46)) | (1 << (Python3Parser.XOR - 46)) | (
                1 << (Python3Parser.AND_OP - 46)) | (1 << (Python3Parser.LEFT_SHIFT - 46)) | (
                1 << (Python3Parser.RIGHT_SHIFT - 46)) | (1 << (Python3Parser.ADD - 46)) | (
                1 << (Python3Parser.MINUS - 46)) | (1 << (Python3Parser.DIV - 46)) | (1 << (Python3Parser.MOD - 46)) | (
                1 << (Python3Parser.IDIV - 46)) | (1 << (Python3Parser.AT - 46)))) != 0):
                self.state = 712
                _la = self._input.LA(1)
                if not (((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (Python3Parser.STAR - 46)) | (
                    1 << (Python3Parser.OR_OP - 46)) | (1 << (Python3Parser.XOR - 46)) | (
                    1 << (Python3Parser.AND_OP - 46)) | (1 << (Python3Parser.LEFT_SHIFT - 46)) | (
                    1 << (Python3Parser.RIGHT_SHIFT - 46)) | (1 << (Python3Parser.ADD - 46)) | (
                    1 << (Python3Parser.MINUS - 46)) | (1 << (Python3Parser.DIV - 46)) | (
                    1 << (Python3Parser.MOD - 46)) | (1 << (Python3Parser.IDIV - 46)) | (
                    1 << (Python3Parser.AT - 46)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 713
                self.factor()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext, 0)

        def trailer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactor"):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)

    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_factor)
        self._la = 0  # Token type
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                _la = self._input.LA(1)
                if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & (
                        (1 << (Python3Parser.ADD - 61)) | (1 << (Python3Parser.MINUS - 61)) | (
                    1 << (Python3Parser.NOT_OP - 61)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 720
                self.factor()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.call(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 722
                self.atom()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (
                    1 << Python3Parser.OPEN_BRACK))) != 0):
                    self.state = 723
                    self.trailer()
                    self.state = 728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.POWER:
                    self.state = 729
                    self.match(Python3Parser.POWER)
                    self.state = 730
                    self.factor()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def call(self):
            return self.getTypedRuleContext(Python3Parser.CallContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Python3Parser.CallContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_call, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(Python3Parser.NAME)

            self.state = 737
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (
                1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (
                1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (
                1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (
                1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (
                1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (
                1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (
                1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (
                1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 738
                self.arglist()

            self.state = 741
            self.match(Python3Parser.CLOSE_PAREN)
            self._ctx.stop = self._input.LT(-1)
            self.state = 751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Python3Parser.CallContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_call)
                    self.state = 743
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")

                    self.state = 744
                    self.match(Python3Parser.OPEN_PAREN)
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                        1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                        1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                        1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                        1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                        1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                        1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                        1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                        1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                        1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                        1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 745
                        self.arglist()

                    self.state = 748
                    self.match(Python3Parser.CLOSE_PAREN)
                self.state = 753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext, 0)

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def STRING_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.STRING_LITERAL)
            else:
                return self.getToken(Python3Parser.STRING_LITERAL, i)

        def BYTES_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(Python3Parser.BYTES_LITERAL)
            else:
                return self.getToken(Python3Parser.BYTES_LITERAL, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 755
                    self.match(Python3Parser.YIELD)
                    self.state = 759
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FROM]:
                        self.state = 756
                        self.match(Python3Parser.FROM)
                        self.state = 757
                        self.test()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                                   Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                                   Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                                   Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                                   Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS,
                                   Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK,
                                   Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP,
                                   Python3Parser.OPEN_BRACE]:
                        self.state = 758
                        self.testlist()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE,
                               Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL,
                               Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER,
                               Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER,
                               Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR,
                               Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD,
                               Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 761
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 764
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 766
                    self.testlist_comp()

                self.state = 769
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 771
                    self.dictorsetmaker()

                self.state = 774
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME,
                           Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER,
                           Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER,
                           Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 791
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NAME]:
                    self.state = 775
                    self.match(Python3Parser.NAME)
                    pass
                elif token in [Python3Parser.DECIMAL_INTEGER]:
                    self.state = 776
                    self.match(Python3Parser.DECIMAL_INTEGER)
                    pass
                elif token in [Python3Parser.OCT_INTEGER]:
                    self.state = 777
                    self.match(Python3Parser.OCT_INTEGER)
                    pass
                elif token in [Python3Parser.HEX_INTEGER]:
                    self.state = 778
                    self.match(Python3Parser.HEX_INTEGER)
                    pass
                elif token in [Python3Parser.BIN_INTEGER]:
                    self.state = 779
                    self.match(Python3Parser.BIN_INTEGER)
                    pass
                elif token in [Python3Parser.FLOAT_NUMBER]:
                    self.state = 780
                    self.match(Python3Parser.FLOAT_NUMBER)
                    pass
                elif token in [Python3Parser.IMAG_NUMBER]:
                    self.state = 781
                    self.match(Python3Parser.IMAG_NUMBER)
                    pass
                elif token in [Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL]:
                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 782
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.STRING_LITERAL or _la == Python3Parser.BYTES_LITERAL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 785
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la == Python3Parser.STRING_LITERAL or _la == Python3Parser.BYTES_LITERAL):
                            break

                    pass
                elif token in [Python3Parser.ELLIPSIS]:
                    self.state = 787
                    self.match(Python3Parser.ELLIPSIS)
                    pass
                elif token in [Python3Parser.NONE]:
                    self.state = 788
                    self.match(Python3Parser.NONE)
                    pass
                elif token in [Python3Parser.TRUE]:
                    self.state = 789
                    self.match(Python3Parser.TRUE)
                    pass
                elif token in [Python3Parser.FALSE]:
                    self.state = 790
                    self.match(Python3Parser.FALSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist_comp"):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)

    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_testlist_comp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.test()
            self.state = 807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.state = 796
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 797
                        self.match(Python3Parser.COMMA)
                        self.state = 798
                        self.test()
                    self.state = 803
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)

                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 804
                    self.match(Python3Parser.COMMA)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext, 0)

        def subscript(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext, i)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTrailer"):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)

    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_trailer)
        self._la = 0  # Token type
        try:
            self.state = 830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (
                    1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (
                    1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 810
                    self.arglist()

                self.state = 813
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 814
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 815
                self.subscript()
                self.state = 820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 816
                        self.match(Python3Parser.COMMA)
                        self.state = 817
                        self.subscript()
                    self.state = 822
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 823
                    self.match(Python3Parser.COMMA)

                self.state = 826
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.match(Python3Parser.DOT)
                self.state = 829
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubscript"):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)

    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_subscript)
        self._la = 0  # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 832
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 833
                    self.test()

                self.state = 836
                self.match(Python3Parser.COLON)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                    1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                    1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                    1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                    1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                    1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                    1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                    1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                    1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                    1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                    1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                    1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 837
                    self.test()

                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 840
                    self.match(Python3Parser.COLON)
                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (
                        1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (
                        1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (
                        1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (
                        1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (
                        1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (
                        1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (
                        1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (
                        1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (
                        1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (
                        1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (
                        1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                        self.state = 841
                        self.test()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExprlist"):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)

    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_exprlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.STAR:
                self.state = 848
                self.match(Python3Parser.STAR)

            self.state = 851
            self.expr()
            self.state = 859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 151, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 852
                    self.match(Python3Parser.COMMA)
                    self.state = 854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.STAR:
                        self.state = 853
                        self.match(Python3Parser.STAR)

                    self.state = 856
                    self.expr()
                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 151, self._ctx)

            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 862
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestlist"):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)

    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_testlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.test()
            self.state = 870
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 866
                    self.match(Python3Parser.COMMA)
                    self.state = 867
                    self.test()
                self.state = 872
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)

            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.COMMA:
                self.state = 873
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDictorsetmaker"):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)

    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dictorsetmaker)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.test()
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
            if la_ == 1:
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COLON:
                    self.state = 877
                    self.match(Python3Parser.COLON)
                    self.state = 878
                    self.test()

                self.state = 881
                self.comp_for()
                pass

            elif la_ == 2:
                self.state = 882
                self.match(Python3Parser.COLON)
                self.state = 883
                self.test()
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 884
                        self.match(Python3Parser.COMMA)
                        self.state = 885
                        self.test()
                        self.state = 886
                        self.match(Python3Parser.COLON)
                        self.state = 887
                        self.test()
                    self.state = 893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 894
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 3:
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 897
                        self.match(Python3Parser.COMMA)
                        self.state = 898
                        self.test()
                    self.state = 903
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 158, self._ctx)

                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 904
                    self.match(Python3Parser.COMMA)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext, i)

        def comp_for(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_forContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_forContext, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArglist"):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)

    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_arglist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 909
                    self.test()
                    self.state = 915
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.FOR, Python3Parser.COMMA]:
                        self.state = 911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == Python3Parser.FOR:
                            self.state = 910
                            self.comp_for()

                        pass
                    elif token in [Python3Parser.ASSIGN]:
                        self.state = 913
                        self.match(Python3Parser.ASSIGN)
                        self.state = 914
                        self.test()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 917
                    self.match(Python3Parser.COMMA)
                self.state = 923
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)

            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.state = 924
                self.test()
                self.state = 930
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == Python3Parser.FOR:
                        self.state = 925
                        self.comp_for()

                    pass
                elif token in [Python3Parser.ASSIGN]:
                    self.state = 928
                    self.match(Python3Parser.ASSIGN)
                    self.state = 929
                    self.test()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 932
                    self.match(Python3Parser.COMMA)

                pass

            elif la_ == 2:
                self.state = 935
                self.match(Python3Parser.STAR)
                self.state = 936
                self.test()
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 937
                        self.match(Python3Parser.COMMA)
                        self.state = 938
                        self.test()
                        self.state = 944
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.FOR, Python3Parser.CLOSE_PAREN, Python3Parser.COMMA]:
                            self.state = 940
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == Python3Parser.FOR:
                                self.state = 939
                                self.comp_for()

                            pass
                        elif token in [Python3Parser.ASSIGN]:
                            self.state = 942
                            self.match(Python3Parser.ASSIGN)
                            self.state = 943
                            self.test()
                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 950
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)

                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.COMMA:
                    self.state = 951
                    self.match(Python3Parser.COMMA)
                    self.state = 952
                    self.match(Python3Parser.POWER)
                    self.state = 953
                    self.test()

                pass

            elif la_ == 3:
                self.state = 956
                self.match(Python3Parser.POWER)
                self.state = 957
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext, 0)

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_iter"):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)

    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_comp_iter)
        self._la = 0  # Token type
        try:
            self.state = 966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(Python3Parser.IF)
                self.state = 962
                self.test_nocond()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                    self.state = 963
                    self.comp_iter()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComp_for"):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)

    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_comp_for)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(Python3Parser.FOR)
            self.state = 969
            self.exprlist()
            self.state = 970
            self.match(Python3Parser.IN)
            self.state = 971
            self.or_test()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == Python3Parser.IF or _la == Python3Parser.FOR:
                self.state = 972
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.call_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def call_sempred(self, localctx: CallContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)
