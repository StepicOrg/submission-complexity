# Generated from complexity/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

from complexity.parsers.parsers import InterruptibleParser


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3v")
        buf.write("\u0b2c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\3\2\7")
        buf.write("\2v\n\2\f\2\16\2y\13\2\3\2\3\2\3\3\3\3\6\3\177\n\3\r\3")
        buf.write("\16\3\u0080\3\3\7\3\u0084\n\3\f\3\16\3\u0087\13\3\3\3")
        buf.write("\5\3\u008a\n\3\3\3\3\3\7\3\u008e\n\3\f\3\16\3\u0091\13")
        buf.write("\3\3\3\7\3\u0094\n\3\f\3\16\3\u0097\13\3\3\3\3\3\7\3\u009b")
        buf.write("\n\3\f\3\16\3\u009e\13\3\7\3\u00a0\n\3\f\3\16\3\u00a3")
        buf.write("\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u00aa\n\3\3\3\3\3\3\3\5")
        buf.write("\3\u00af\n\3\7\3\u00b1\n\3\f\3\16\3\u00b4\13\3\5\3\u00b6")
        buf.write("\n\3\3\3\5\3\u00b9\n\3\3\3\3\3\3\3\3\3\3\3\7\3\u00c0\n")
        buf.write("\3\f\3\16\3\u00c3\13\3\3\3\5\3\u00c6\n\3\3\3\5\3\u00c9")
        buf.write("\n\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00d1\n\3\5\3\u00d3\n")
        buf.write("\3\3\3\3\3\3\3\5\3\u00d8\n\3\3\3\3\3\3\3\5\3\u00dd\n\3")
        buf.write("\7\3\u00df\n\3\f\3\16\3\u00e2\13\3\5\3\u00e4\n\3\3\3\5")
        buf.write("\3\u00e7\n\3\5\3\u00e9\n\3\3\4\3\4\3\4\3\4\5\4\u00ef\n")
        buf.write("\4\3\4\3\4\3\4\5\4\u00f4\n\4\7\4\u00f6\n\4\f\4\16\4\u00f9")
        buf.write("\13\4\5\4\u00fb\n\4\3\4\5\4\u00fe\n\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\7\4\u0105\n\4\f\4\16\4\u0108\13\4\3\4\5\4\u010b\n")
        buf.write("\4\3\4\5\4\u010e\n\4\3\4\3\4\3\4\5\4\u0113\n\4\3\4\3\4")
        buf.write("\3\4\3\4\5\4\u0119\n\4\3\4\3\4\3\4\5\4\u011e\n\4\7\4\u0120")
        buf.write("\n\4\f\4\16\4\u0123\13\4\5\4\u0125\n\4\3\4\5\4\u0128\n")
        buf.write("\4\7\4\u012a\n\4\f\4\16\4\u012d\13\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\7\5\u0135\n\5\f\5\16\5\u0138\13\5\3\5\5\5\u013b")
        buf.write("\n\5\5\5\u013d\n\5\3\5\5\5\u0140\n\5\3\5\3\5\5\5\u0144")
        buf.write("\n\5\3\5\5\5\u0147\n\5\3\5\7\5\u014a\n\5\f\5\16\5\u014d")
        buf.write("\13\5\3\5\3\5\6\5\u0151\n\5\r\5\16\5\u0152\3\5\7\5\u0156")
        buf.write("\n\5\f\5\16\5\u0159\13\5\3\5\5\5\u015c\n\5\5\5\u015e\n")
        buf.write("\5\3\6\3\6\5\6\u0162\n\6\3\6\3\6\5\6\u0166\n\6\5\6\u0168")
        buf.write("\n\6\3\6\3\6\5\6\u016c\n\6\3\6\3\6\3\6\3\6\5\6\u0172\n")
        buf.write("\6\3\6\3\6\3\6\5\6\u0177\n\6\7\6\u0179\n\6\f\6\16\6\u017c")
        buf.write("\13\6\5\6\u017e\n\6\3\6\5\6\u0181\n\6\3\6\5\6\u0184\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u018c\n\6\3\6\3\6\3\6\5")
        buf.write("\6\u0191\n\6\7\6\u0193\n\6\f\6\16\6\u0196\13\6\5\6\u0198")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u019d\n\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u01a4\n\6\3\6\3\6\3\6\5\6\u01a9\n\6\7\6\u01ab\n\6\f\6")
        buf.write("\16\6\u01ae\13\6\5\6\u01b0\n\6\3\6\5\6\u01b3\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\7\6\u01bb\n\6\f\6\16\6\u01be\13\6\3")
        buf.write("\6\5\6\u01c1\n\6\3\6\5\6\u01c4\n\6\3\6\3\6\3\6\3\6\7\6")
        buf.write("\u01ca\n\6\f\6\16\6\u01cd\13\6\3\6\5\6\u01d0\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u01d7\n\6\3\6\5\6\u01da\n\6\3\6\3\6")
        buf.write("\3\6\5\6\u01df\n\6\3\6\5\6\u01e2\n\6\7\6\u01e4\n\6\f\6")
        buf.write("\16\6\u01e7\13\6\5\6\u01e9\n\6\3\6\5\6\u01ec\n\6\5\6\u01ee")
        buf.write("\n\6\3\7\3\7\3\7\3\7\5\7\u01f4\n\7\5\7\u01f6\n\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u01fe\n\7\3\7\5\7\u0201\n\7\3\7")
        buf.write("\3\7\5\7\u0205\n\7\3\7\5\7\u0208\n\7\3\7\5\7\u020b\n\7")
        buf.write("\3\7\3\7\5\7\u020f\n\7\3\7\3\7\5\7\u0213\n\7\3\7\5\7\u0216")
        buf.write("\n\7\3\7\5\7\u0219\n\7\7\7\u021b\n\7\f\7\16\7\u021e\13")
        buf.write("\7\5\7\u0220\n\7\3\7\3\7\5\7\u0224\n\7\3\7\3\7\7\7\u0228")
        buf.write("\n\7\f\7\16\7\u022b\13\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0233")
        buf.write("\n\7\3\7\3\7\3\7\3\7\5\7\u0239\n\7\3\7\3\7\3\7\5\7\u023e")
        buf.write("\n\7\7\7\u0240\n\7\f\7\16\7\u0243\13\7\5\7\u0245\n\7\3")
        buf.write("\7\5\7\u0248\n\7\5\7\u024a\n\7\3\7\3\7\3\7\5\7\u024f\n")
        buf.write("\7\3\7\5\7\u0252\n\7\3\7\3\7\3\7\5\7\u0257\n\7\3\7\5\7")
        buf.write("\u025a\n\7\7\7\u025c\n\7\f\7\16\7\u025f\13\7\5\7\u0261")
        buf.write("\n\7\3\7\3\7\5\7\u0265\n\7\3\7\3\7\3\7\6\7\u026a\n\7\r")
        buf.write("\7\16\7\u026b\3\7\7\7\u026f\n\7\f\7\16\7\u0272\13\7\3")
        buf.write("\7\5\7\u0275\n\7\3\7\3\7\5\7\u0279\n\7\3\7\3\7\3\7\3\7")
        buf.write("\7\7\u027f\n\7\f\7\16\7\u0282\13\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\7\7\u028b\n\7\f\7\16\7\u028e\13\7\3\7\6\7\u0291")
        buf.write("\n\7\r\7\16\7\u0292\3\7\7\7\u0296\n\7\f\7\16\7\u0299\13")
        buf.write("\7\3\7\5\7\u029c\n\7\5\7\u029e\n\7\3\7\3\7\5\7\u02a2\n")
        buf.write("\7\3\7\7\7\u02a5\n\7\f\7\16\7\u02a8\13\7\5\7\u02aa\n\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\7\b\u02b1\n\b\f\b\16\b\u02b4\13\b")
        buf.write("\5\b\u02b6\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\6\t\u02c0")
        buf.write("\n\t\r\t\16\t\u02c1\3\t\7\t\u02c5\n\t\f\t\16\t\u02c8\13")
        buf.write("\t\3\t\5\t\u02cb\n\t\3\t\3\t\7\t\u02cf\n\t\f\t\16\t\u02d2")
        buf.write("\13\t\5\t\u02d4\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\6\t\u02df\n\t\r\t\16\t\u02e0\3\t\7\t\u02e4\n\t\f\t")
        buf.write("\16\t\u02e7\13\t\3\t\5\t\u02ea\n\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\7\t\u02f3\n\t\f\t\16\t\u02f6\13\t\3\t\3\t\3\t")
        buf.write("\3\t\5\t\u02fc\n\t\3\n\3\n\3\n\6\n\u0301\n\n\r\n\16\n")
        buf.write("\u0302\3\n\7\n\u0306\n\n\f\n\16\n\u0309\13\n\3\n\5\n\u030c")
        buf.write("\n\n\3\n\3\n\7\n\u0310\n\n\f\n\16\n\u0313\13\n\3\n\3\n")
        buf.write("\5\n\u0317\n\n\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u031f")
        buf.write("\n\13\f\13\16\13\u0322\13\13\3\13\7\13\u0325\n\13\f\13")
        buf.write("\16\13\u0328\13\13\3\f\5\f\u032b\n\f\3\f\3\f\3\f\3\f\5")
        buf.write("\f\u0331\n\f\3\f\5\f\u0334\n\f\3\f\3\f\3\f\5\f\u0339\n")
        buf.write("\f\3\f\5\f\u033c\n\f\7\f\u033e\n\f\f\f\16\f\u0341\13\f")
        buf.write("\3\f\3\f\5\f\u0345\n\f\3\f\6\f\u0348\n\f\r\f\16\f\u0349")
        buf.write("\3\f\7\f\u034d\n\f\f\f\16\f\u0350\13\f\3\f\5\f\u0353\n")
        buf.write("\f\3\f\3\f\6\f\u0357\n\f\r\f\16\f\u0358\3\f\7\f\u035c")
        buf.write("\n\f\f\f\16\f\u035f\13\f\3\f\5\f\u0362\n\f\3\f\3\f\5\f")
        buf.write("\u0366\n\f\3\f\3\f\3\f\5\f\u036b\n\f\3\f\5\f\u036e\n\f")
        buf.write("\3\f\3\f\3\f\5\f\u0373\n\f\3\f\5\f\u0376\n\f\7\f\u0378")
        buf.write("\n\f\f\f\16\f\u037b\13\f\5\f\u037d\n\f\3\f\3\f\5\f\u0381")
        buf.write("\n\f\3\r\5\r\u0384\n\r\3\r\3\r\7\r\u0388\n\r\f\r\16\r")
        buf.write("\u038b\13\r\3\r\7\r\u038e\n\r\f\r\16\r\u0391\13\r\3\r")
        buf.write("\3\r\7\r\u0395\n\r\f\r\16\r\u0398\13\r\5\r\u039a\n\r\3")
        buf.write("\r\5\r\u039d\n\r\3\r\3\r\3\r\3\r\7\r\u03a3\n\r\f\r\16")
        buf.write("\r\u03a6\13\r\3\r\3\r\7\r\u03aa\n\r\f\r\16\r\u03ad\13")
        buf.write("\r\3\r\3\r\3\r\3\r\7\r\u03b3\n\r\f\r\16\r\u03b6\13\r\7")
        buf.write("\r\u03b8\n\r\f\r\16\r\u03bb\13\r\5\r\u03bd\n\r\3\16\5")
        buf.write("\16\u03c0\n\16\3\16\3\16\3\16\5\16\u03c5\n\16\3\16\3\16")
        buf.write("\6\16\u03c9\n\16\r\16\16\16\u03ca\3\16\7\16\u03ce\n\16")
        buf.write("\f\16\16\16\u03d1\13\16\3\16\5\16\u03d4\n\16\3\16\3\16")
        buf.write("\7\16\u03d8\n\16\f\16\16\16\u03db\13\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\6\17\u03e2\n\17\r\17\16\17\u03e3\3\17\7\17")
        buf.write("\u03e7\n\17\f\17\16\17\u03ea\13\17\3\17\5\17\u03ed\n\17")
        buf.write("\3\17\3\17\7\17\u03f1\n\17\f\17\16\17\u03f4\13\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0401\n\17\3\17\3\17\6\17\u0405\n\17\r\17\16\17\u0406")
        buf.write("\3\17\7\17\u040a\n\17\f\17\16\17\u040d\13\17\3\17\5\17")
        buf.write("\u0410\n\17\3\17\3\17\7\17\u0414\n\17\f\17\16\17\u0417")
        buf.write("\13\17\3\17\7\17\u041a\n\17\f\17\16\17\u041d\13\17\3\17")
        buf.write("\3\17\3\17\3\17\6\17\u0423\n\17\r\17\16\17\u0424\3\17")
        buf.write("\7\17\u0428\n\17\f\17\16\17\u042b\13\17\3\17\5\17\u042e")
        buf.write("\n\17\3\17\3\17\7\17\u0432\n\17\f\17\16\17\u0435\13\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0442\n\17\3\17\3\17\6\17\u0446\n\17\r\17\16\17")
        buf.write("\u0447\3\17\7\17\u044b\n\17\f\17\16\17\u044e\13\17\3\17")
        buf.write("\5\17\u0451\n\17\3\17\3\17\7\17\u0455\n\17\f\17\16\17")
        buf.write("\u0458\13\17\3\17\7\17\u045b\n\17\f\17\16\17\u045e\13")
        buf.write("\17\7\17\u0460\n\17\f\17\16\17\u0463\13\17\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u046b\n\20\f\20\16\20\u046e\13")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\7\21\u0475\n\21\f\21\16\21")
        buf.write("\u0478\13\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3")
        buf.write("\23\3\23\7\23\u0484\n\23\f\23\16\23\u0487\13\23\3\24\3")
        buf.write("\24\3\24\5\24\u048c\n\24\3\25\3\25\3\25\3\25\7\25\u0492")
        buf.write("\n\25\f\25\16\25\u0495\13\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\5\25\u049d\n\25\3\26\3\26\3\26\3\26\5\26\u04a3\n")
        buf.write("\26\3\27\7\27\u04a6\n\27\f\27\16\27\u04a9\13\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\5\27\u04b2\n\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u04b9\n\27\f\27\16\27\u04bc\13\27")
        buf.write("\5\27\u04be\n\27\3\27\3\27\3\27\7\27\u04c3\n\27\f\27\16")
        buf.write("\27\u04c6\13\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u04cf\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u04d8")
        buf.write("\n\27\f\27\16\27\u04db\13\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u04e5\n\27\f\27\16\27\u04e8\13\27")
        buf.write("\5\27\u04ea\n\27\3\27\3\27\5\27\u04ee\n\27\3\27\5\27\u04f1")
        buf.write("\n\27\3\27\3\27\3\27\3\27\7\27\u04f7\n\27\f\27\16\27\u04fa")
        buf.write("\13\27\5\27\u04fc\n\27\3\27\7\27\u04ff\n\27\f\27\16\27")
        buf.write("\u0502\13\27\3\27\6\27\u0505\n\27\r\27\16\27\u0506\3\27")
        buf.write("\7\27\u050a\n\27\f\27\16\27\u050d\13\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\7\27\u0514\n\27\f\27\16\27\u0517\13\27\3\27")
        buf.write("\5\27\u051a\n\27\5\27\u051c\n\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\7\27\u0525\n\27\f\27\16\27\u0528\13\27\5")
        buf.write("\27\u052a\n\27\3\27\5\27\u052d\n\27\5\27\u052f\n\27\3")
        buf.write("\27\3\27\3\27\5\27\u0534\n\27\3\27\5\27\u0537\n\27\3\30")
        buf.write("\3\30\3\30\5\30\u053c\n\30\3\30\3\30\3\30\3\31\3\31\3")
        buf.write("\31\3\32\3\32\3\32\7\32\u0547\n\32\f\32\16\32\u054a\13")
        buf.write("\32\3\32\7\32\u054d\n\32\f\32\16\32\u0550\13\32\3\32\6")
        buf.write("\32\u0553\n\32\r\32\16\32\u0554\3\32\7\32\u0558\n\32\f")
        buf.write("\32\16\32\u055b\13\32\3\32\3\32\3\32\3\32\5\32\u0561\n")
        buf.write("\32\3\32\5\32\u0564\n\32\5\32\u0566\n\32\3\33\3\33\3\33")
        buf.write("\3\33\3\34\3\34\7\34\u056e\n\34\f\34\16\34\u0571\13\34")
        buf.write("\3\34\6\34\u0574\n\34\r\34\16\34\u0575\3\34\7\34\u0579")
        buf.write("\n\34\f\34\16\34\u057c\13\34\5\34\u057e\n\34\3\34\3\34")
        buf.write("\7\34\u0582\n\34\f\34\16\34\u0585\13\34\3\34\3\34\3\34")
        buf.write("\5\34\u058a\n\34\3\34\3\34\3\34\3\34\3\34\7\34\u0591\n")
        buf.write("\34\f\34\16\34\u0594\13\34\5\34\u0596\n\34\3\34\5\34\u0599")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u05a2\n")
        buf.write("\34\3\34\3\34\5\34\u05a6\n\34\5\34\u05a8\n\34\3\34\3\34")
        buf.write("\7\34\u05ac\n\34\f\34\16\34\u05af\13\34\3\34\5\34\u05b2")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u05ba\n\35\f")
        buf.write("\35\16\35\u05bd\13\35\3\35\3\35\3\35\3\35\3\35\5\35\u05c4")
        buf.write("\n\35\3\35\5\35\u05c7\n\35\3\35\3\35\3\35\5\35\u05cc\n")
        buf.write("\35\3\35\3\35\5\35\u05d0\n\35\3\35\3\35\3\35\7\35\u05d5")
        buf.write("\n\35\f\35\16\35\u05d8\13\35\3\35\3\35\6\35\u05dc\n\35")
        buf.write("\r\35\16\35\u05dd\3\35\7\35\u05e1\n\35\f\35\16\35\u05e4")
        buf.write("\13\35\3\35\5\35\u05e7\n\35\5\35\u05e9\n\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u05f4\n\35\3")
        buf.write("\35\7\35\u05f7\n\35\f\35\16\35\u05fa\13\35\3\35\3\35\3")
        buf.write("\35\6\35\u05ff\n\35\r\35\16\35\u0600\3\35\7\35\u0604\n")
        buf.write("\35\f\35\16\35\u0607\13\35\5\35\u0609\n\35\5\35\u060b")
        buf.write("\n\35\3\35\5\35\u060e\n\35\3\36\6\36\u0611\n\36\r\36\16")
        buf.write("\36\u0612\3\36\7\36\u0616\n\36\f\36\16\36\u0619\13\36")
        buf.write("\5\36\u061b\n\36\3\36\3\36\5\36\u061f\n\36\3\36\3\36\3")
        buf.write("\36\5\36\u0624\n\36\7\36\u0626\n\36\f\36\16\36\u0629\13")
        buf.write("\36\5\36\u062b\n\36\3\36\3\36\6\36\u062f\n\36\r\36\16")
        buf.write("\36\u0630\3\36\6\36\u0634\n\36\r\36\16\36\u0635\3\36\7")
        buf.write("\36\u0639\n\36\f\36\16\36\u063c\13\36\5\36\u063e\n\36")
        buf.write("\3\36\3\36\5\36\u0642\n\36\3\36\3\36\3\36\5\36\u0647\n")
        buf.write("\36\7\36\u0649\n\36\f\36\16\36\u064c\13\36\3\36\3\36\5")
        buf.write("\36\u0650\n\36\3\37\3\37\5\37\u0654\n\37\3 \3 \3 \7 \u0659")
        buf.write("\n \f \16 \u065c\13 \3 \5 \u065f\n \3 \3 \3 \3 \5 \u0665")
        buf.write("\n \3 \3 \3 \5 \u066a\n \7 \u066c\n \f \16 \u066f\13 ")
        buf.write("\5 \u0671\n \3 \5 \u0674\n \3 \5 \u0677\n \5 \u0679\n")
        buf.write(" \3 \3 \3 \5 \u067e\n \3 \3 \3 \5 \u0683\n \7 \u0685\n")
        buf.write(" \f \16 \u0688\13 \5 \u068a\n \3 \3 \5 \u068e\n \3 \3")
        buf.write(" \3 \5 \u0693\n \3 \7 \u0696\n \f \16 \u0699\13 \3 \5")
        buf.write(" \u069c\n \3 \3 \3 \5 \u06a1\n \3 \3 \6 \u06a5\n \r \16")
        buf.write(" \u06a6\3 \7 \u06aa\n \f \16 \u06ad\13 \5 \u06af\n \3")
        buf.write(" \3 \3 \3 \5 \u06b5\n \3 \3 \3 \3 \5 \u06bb\n \7 \u06bd")
        buf.write("\n \f \16 \u06c0\13 \3 \5 \u06c3\n \5 \u06c5\n \3 \5 ")
        buf.write("\u06c8\n \3!\3!\3!\7!\u06cd\n!\f!\16!\u06d0\13!\3!\5!")
        buf.write("\u06d3\n!\3!\3!\3!\5!\u06d8\n!\5!\u06da\n!\3!\3!\3!\3")
        buf.write("!\5!\u06e0\n!\3!\3!\3!\5!\u06e5\n!\7!\u06e7\n!\f!\16!")
        buf.write("\u06ea\13!\5!\u06ec\n!\3!\5!\u06ef\n!\3!\3!\5!\u06f3\n")
        buf.write("!\3!\3!\3!\3!\3!\5!\u06fa\n!\3!\3!\3!\3!\5!\u0700\n!\3")
        buf.write("!\3!\3!\5!\u0705\n!\7!\u0707\n!\f!\16!\u070a\13!\5!\u070c")
        buf.write("\n!\3!\5!\u070f\n!\3!\5!\u0712\n!\3\"\5\"\u0715\n\"\3")
        buf.write("\"\3\"\3\"\3\"\5\"\u071b\n\"\3\"\3\"\3\"\5\"\u0720\n\"")
        buf.write("\7\"\u0722\n\"\f\"\16\"\u0725\13\"\5\"\u0727\n\"\3\"\5")
        buf.write("\"\u072a\n\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0732\n\"\3\"")
        buf.write("\3\"\3\"\5\"\u0737\n\"\7\"\u0739\n\"\f\"\16\"\u073c\13")
        buf.write("\"\5\"\u073e\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u0748")
        buf.write("\n\"\f\"\16\"\u074b\13\"\3\"\5\"\u074e\n\"\3\"\5\"\u0751")
        buf.write("\n\"\3#\3#\3#\3#\3#\5#\u0758\n#\3#\3#\7#\u075c\n#\f#\16")
        buf.write("#\u075f\13#\3#\5#\u0762\n#\3#\5#\u0765\n#\5#\u0767\n#")
        buf.write("\3#\3#\3#\3#\5#\u076d\n#\3#\3#\7#\u0771\n#\f#\16#\u0774")
        buf.write("\13#\3#\5#\u0777\n#\3#\5#\u077a\n#\5#\u077c\n#\7#\u077e")
        buf.write("\n#\f#\16#\u0781\13#\3#\3#\3#\3#\3#\6#\u0788\n#\r#\16")
        buf.write("#\u0789\3#\7#\u078d\n#\f#\16#\u0790\13#\3#\5#\u0793\n")
        buf.write("#\3#\5#\u0796\n#\3#\5#\u0799\n#\3#\3#\5#\u079d\n#\3$\3")
        buf.write("$\7$\u07a1\n$\f$\16$\u07a4\13$\3$\3$\3$\7$\u07a9\n$\f")
        buf.write("$\16$\u07ac\13$\3$\3$\3$\7$\u07b1\n$\f$\16$\u07b4\13$")
        buf.write("\3$\5$\u07b7\n$\3%\3%\5%\u07bb\n%\3%\3%\5%\u07bf\n%\5")
        buf.write("%\u07c1\n%\3%\3%\7%\u07c5\n%\f%\16%\u07c8\13%\3%\3%\3")
        buf.write("%\3%\5%\u07ce\n%\3%\3%\3%\5%\u07d3\n%\3%\3%\7%\u07d7\n")
        buf.write("%\f%\16%\u07da\13%\7%\u07dc\n%\f%\16%\u07df\13%\3%\3%")
        buf.write("\3%\6%\u07e4\n%\r%\16%\u07e5\3%\7%\u07e9\n%\f%\16%\u07ec")
        buf.write("\13%\3%\5%\u07ef\n%\5%\u07f1\n%\3&\5&\u07f4\n&\3&\3&\5")
        buf.write("&\u07f8\n&\5&\u07fa\n&\3&\3&\7&\u07fe\n&\f&\16&\u0801")
        buf.write("\13&\3&\3&\3&\3&\5&\u0807\n&\3&\3&\3&\5&\u080c\n&\3&\3")
        buf.write("&\7&\u0810\n&\f&\16&\u0813\13&\7&\u0815\n&\f&\16&\u0818")
        buf.write("\13&\3&\5&\u081b\n&\3&\3&\7&\u081f\n&\f&\16&\u0822\13")
        buf.write("&\3&\7&\u0825\n&\f&\16&\u0828\13&\3&\3&\7&\u082c\n&\f")
        buf.write("&\16&\u082f\13&\5&\u0831\n&\3&\5&\u0834\n&\3\'\3\'\3\'")
        buf.write("\3\'\7\'\u083a\n\'\f\'\16\'\u083d\13\'\3\'\5\'\u0840\n")
        buf.write("\'\5\'\u0842\n\'\3\'\5\'\u0845\n\'\3\'\3\'\7\'\u0849\n")
        buf.write("\'\f\'\16\'\u084c\13\'\3\'\5\'\u084f\n\'\3\'\5\'\u0852")
        buf.write("\n\'\3\'\7\'\u0855\n\'\f\'\16\'\u0858\13\'\3(\3(\5(\u085c")
        buf.write("\n(\3(\3(\3(\6(\u0861\n(\r(\16(\u0862\3(\7(\u0866\n(\f")
        buf.write("(\16(\u0869\13(\3(\5(\u086c\n(\3(\5(\u086f\n(\3(\3(\7")
        buf.write("(\u0873\n(\f(\16(\u0876\13(\3(\7(\u0879\n(\f(\16(\u087c")
        buf.write("\13(\3(\3(\7(\u0880\n(\f(\16(\u0883\13(\7(\u0885\n(\f")
        buf.write("(\16(\u0888\13(\3(\3(\3(\3(\5(\u088e\n(\3(\3(\7(\u0892")
        buf.write("\n(\f(\16(\u0895\13(\7(\u0897\n(\f(\16(\u089a\13(\5(\u089c")
        buf.write("\n(\3)\3)\5)\u08a0\n)\3)\3)\7)\u08a4\n)\f)\16)\u08a7\13")
        buf.write(")\3)\7)\u08aa\n)\f)\16)\u08ad\13)\3)\3)\7)\u08b1\n)\f")
        buf.write(")\16)\u08b4\13)\5)\u08b6\n)\3)\5)\u08b9\n)\5)\u08bb\n")
        buf.write(")\3*\3*\3*\3*\5*\u08c1\n*\3*\3*\7*\u08c5\n*\f*\16*\u08c8")
        buf.write("\13*\3*\3*\3*\3*\5*\u08ce\n*\3*\3*\3*\3*\5*\u08d4\n*\3")
        buf.write("*\3*\7*\u08d8\n*\f*\16*\u08db\13*\5*\u08dd\n*\7*\u08df")
        buf.write("\n*\f*\16*\u08e2\13*\3+\7+\u08e5\n+\f+\16+\u08e8\13+\3")
        buf.write("+\6+\u08eb\n+\r+\16+\u08ec\3+\7+\u08f0\n+\f+\16+\u08f3")
        buf.write("\13+\3+\3+\5+\u08f7\n+\3+\3+\3+\5+\u08fc\n+\5+\u08fe\n")
        buf.write("+\3,\3,\3,\5,\u0903\n,\3,\3,\3,\5,\u0908\n,\7,\u090a\n")
        buf.write(",\f,\16,\u090d\13,\5,\u090f\n,\3,\3,\7,\u0913\n,\f,\16")
        buf.write(",\u0916\13,\3,\3,\3,\3,\3,\5,\u091d\n,\3,\3,\3,\5,\u0922")
        buf.write("\n,\7,\u0924\n,\f,\16,\u0927\13,\5,\u0929\n,\3,\3,\7,")
        buf.write("\u092d\n,\f,\16,\u0930\13,\3,\3,\6,\u0934\n,\r,\16,\u0935")
        buf.write("\3,\3,\3,\5,\u093b\n,\3-\3-\3-\5-\u0940\n-\3-\3-\3-\3")
        buf.write("-\5-\u0946\n-\3-\5-\u0949\n-\3-\3-\3-\5-\u094e\n-\3-\5")
        buf.write("-\u0951\n-\7-\u0953\n-\f-\16-\u0956\13-\3-\3-\5-\u095a")
        buf.write("\n-\3.\3.\3.\5.\u095f\n.\3.\5.\u0962\n.\3.\3.\3.\5.\u0967")
        buf.write("\n.\3.\5.\u096a\n.\7.\u096c\n.\f.\16.\u096f\13.\3.\5.")
        buf.write("\u0972\n.\5.\u0974\n.\3.\3.\3/\7/\u0979\n/\f/\16/\u097c")
        buf.write("\13/\3/\6/\u097f\n/\r/\16/\u0980\3/\7/\u0984\n/\f/\16")
        buf.write("/\u0987\13/\5/\u0989\n/\3/\3/\3/\3/\5/\u098f\n/\3/\3/")
        buf.write("\3/\7/\u0994\n/\f/\16/\u0997\13/\3/\3/\5/\u099b\n/\3/")
        buf.write("\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u09aa\n/\f/\16")
        buf.write("/\u09ad\13/\3/\3/\3/\3/\3/\5/\u09b4\n/\3/\3/\5/\u09b8")
        buf.write("\n/\3/\3/\3/\7/\u09bd\n/\f/\16/\u09c0\13/\3/\3/\6/\u09c4")
        buf.write("\n/\r/\16/\u09c5\3/\7/\u09c9\n/\f/\16/\u09cc\13/\3/\5")
        buf.write("/\u09cf\n/\5/\u09d1\n/\3/\3/\3/\3/\3/\5/\u09d8\n/\3/\5")
        buf.write("/\u09db\n/\3\60\3\60\7\60\u09df\n\60\f\60\16\60\u09e2")
        buf.write("\13\60\3\60\5\60\u09e5\n\60\3\60\3\60\3\60\5\60\u09ea")
        buf.write("\n\60\3\60\5\60\u09ed\n\60\5\60\u09ef\n\60\3\60\5\60\u09f2")
        buf.write("\n\60\3\60\7\60\u09f5\n\60\f\60\16\60\u09f8\13\60\3\60")
        buf.write("\3\60\5\60\u09fc\n\60\3\61\3\61\3\61\3\61\3\62\7\62\u0a03")
        buf.write("\n\62\f\62\16\62\u0a06\13\62\3\62\3\62\5\62\u0a0a\n\62")
        buf.write("\3\62\3\62\5\62\u0a0e\n\62\5\62\u0a10\n\62\3\62\3\62\3")
        buf.write("\63\5\63\u0a15\n\63\3\63\3\63\3\63\3\63\5\63\u0a1b\n\63")
        buf.write("\3\63\3\63\3\63\5\63\u0a20\n\63\7\63\u0a22\n\63\f\63\16")
        buf.write("\63\u0a25\13\63\5\63\u0a27\n\63\3\63\5\63\u0a2a\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\7\63\u0a31\n\63\f\63\16\63\u0a34")
        buf.write("\13\63\3\63\5\63\u0a37\n\63\3\63\5\63\u0a3a\n\63\3\64")
        buf.write("\3\64\5\64\u0a3e\n\64\3\64\3\64\3\64\5\64\u0a43\n\64\3")
        buf.write("\64\5\64\u0a46\n\64\3\64\3\64\3\64\5\64\u0a4b\n\64\3\64")
        buf.write("\5\64\u0a4e\n\64\7\64\u0a50\n\64\f\64\16\64\u0a53\13\64")
        buf.write("\5\64\u0a55\n\64\3\64\3\64\5\64\u0a59\n\64\3\65\3\65\5")
        buf.write("\65\u0a5d\n\65\3\65\5\65\u0a60\n\65\3\65\5\65\u0a63\n")
        buf.write("\65\3\65\3\65\6\65\u0a67\n\65\r\65\16\65\u0a68\3\65\7")
        buf.write("\65\u0a6c\n\65\f\65\16\65\u0a6f\13\65\3\65\5\65\u0a72")
        buf.write("\n\65\5\65\u0a74\n\65\3\65\3\65\3\65\3\65\3\65\7\65\u0a7b")
        buf.write("\n\65\f\65\16\65\u0a7e\13\65\3\65\3\65\3\65\5\65\u0a83")
        buf.write("\n\65\3\65\5\65\u0a86\n\65\3\65\5\65\u0a89\n\65\3\65\3")
        buf.write("\65\3\65\5\65\u0a8e\n\65\5\65\u0a90\n\65\3\65\5\65\u0a93")
        buf.write("\n\65\3\65\5\65\u0a96\n\65\3\66\6\66\u0a99\n\66\r\66\16")
        buf.write("\66\u0a9a\3\66\7\66\u0a9e\n\66\f\66\16\66\u0aa1\13\66")
        buf.write("\3\66\5\66\u0aa4\n\66\3\66\3\66\3\66\5\66\u0aa9\n\66\5")
        buf.write("\66\u0aab\n\66\3\66\5\66\u0aae\n\66\3\67\3\67\3\67\7\67")
        buf.write("\u0ab3\n\67\f\67\16\67\u0ab6\13\67\3\67\3\67\6\67\u0aba")
        buf.write("\n\67\r\67\16\67\u0abb\38\38\38\78\u0ac1\n8\f8\168\u0ac4")
        buf.write("\138\38\68\u0ac7\n8\r8\168\u0ac8\38\78\u0acc\n8\f8\16")
        buf.write("8\u0acf\138\38\38\58\u0ad3\n8\58\u0ad5\n8\38\58\u0ad8")
        buf.write("\n8\38\38\38\78\u0add\n8\f8\168\u0ae0\138\38\38\39\39")
        buf.write("\39\69\u0ae7\n9\r9\169\u0ae8\39\79\u0aec\n9\f9\169\u0aef")
        buf.write("\139\39\59\u0af2\n9\39\59\u0af5\n9\39\39\69\u0af9\n9\r")
        buf.write("9\169\u0afa\39\79\u0afe\n9\f9\169\u0b01\139\39\59\u0b04")
        buf.write("\n9\39\59\u0b07\n9\79\u0b09\n9\f9\169\u0b0c\139\59\u0b0e")
        buf.write("\n9\39\39\39\39\39\39\59\u0b16\n9\59\u0b18\n9\3:\3:\3")
        buf.write(":\3:\3:\3:\3:\3:\3:\3:\5:\u0b24\n:\3:\3:\3:\3:\5:\u0b2a")
        buf.write("\n:\3:\2\6\24\34\36R;\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnpr\2\30\4\2DDYY\4\2``ee\7\2\30\30##//iior\4\2DDHH\4")
        buf.write("\2>@DG\4\2\6\6**\3\2[\\\4\2IJWX\3\2UV\4\2CEYZ\5\2HHKR")
        buf.write("TT\4\2--\67\67\4\2\t\t\17\17\4\2\31\31%%\4\2..pp\4\2\f")
        buf.write("\f,,\7\2\27\27\35\35\37\37\'\'\66\66\5\2\f\f,,\64\64\5")
        buf.write("\2\b\b\36\36))\3\2\21\22\4\2\f\f\63\63\5\2\22\22!!>`\2")
        buf.write("\u0d65\2w\3\2\2\2\4\u00e8\3\2\2\2\6\u010d\3\2\2\2\b\u0130")
        buf.write("\3\2\2\2\n\u01ed\3\2\2\2\f\u02a9\3\2\2\2\16\u02ab\3\2")
        buf.write("\2\2\20\u02fb\3\2\2\2\22\u0316\3\2\2\2\24\u0318\3\2\2")
        buf.write("\2\26\u032a\3\2\2\2\30\u03bc\3\2\2\2\32\u03bf\3\2\2\2")
        buf.write("\34\u03de\3\2\2\2\36\u0464\3\2\2\2 \u046f\3\2\2\2\"\u047c")
        buf.write("\3\2\2\2$\u0480\3\2\2\2&\u048b\3\2\2\2(\u0493\3\2\2\2")
        buf.write("*\u04a2\3\2\2\2,\u0536\3\2\2\2.\u0538\3\2\2\2\60\u0540")
        buf.write("\3\2\2\2\62\u0565\3\2\2\2\64\u0567\3\2\2\2\66\u05b1\3")
        buf.write("\2\2\28\u060d\3\2\2\2:\u064f\3\2\2\2<\u0653\3\2\2\2>\u06c7")
        buf.write("\3\2\2\2@\u0711\3\2\2\2B\u0750\3\2\2\2D\u079c\3\2\2\2")
        buf.write("F\u07b6\3\2\2\2H\u07f0\3\2\2\2J\u0833\3\2\2\2L\u0835\3")
        buf.write("\2\2\2N\u089b\3\2\2\2P\u08ba\3\2\2\2R\u08cd\3\2\2\2T\u08e6")
        buf.write("\3\2\2\2V\u093a\3\2\2\2X\u0959\3\2\2\2Z\u095b\3\2\2\2")
        buf.write("\\\u09d7\3\2\2\2^\u09fb\3\2\2\2`\u09fd\3\2\2\2b\u0a04")
        buf.write("\3\2\2\2d\u0a39\3\2\2\2f\u0a3d\3\2\2\2h\u0a95\3\2\2\2")
        buf.write("j\u0aad\3\2\2\2l\u0aaf\3\2\2\2n\u0abd\3\2\2\2p\u0b17\3")
        buf.write("\2\2\2r\u0b29\3\2\2\2tv\5\66\34\2ut\3\2\2\2vy\3\2\2\2")
        buf.write("wu\3\2\2\2wx\3\2\2\2xz\3\2\2\2yw\3\2\2\2z{\7\2\2\3{\3")
        buf.write("\3\2\2\2|~\7$\2\2}\177\5> \2~}\3\2\2\2\177\u0080\3\2\2")
        buf.write("\2\u0080~\3\2\2\2\u0080\u0081\3\2\2\2\u0081\u0085\3\2")
        buf.write("\2\2\u0082\u0084\5D#\2\u0083\u0082\3\2\2\2\u0084\u0087")
        buf.write("\3\2\2\2\u0085\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086")
        buf.write("\u00a1\3\2\2\2\u0087\u0085\3\2\2\2\u0088\u008a\5\6\4\2")
        buf.write("\u0089\u0088\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u008b\3")
        buf.write("\2\2\2\u008b\u008f\7@\2\2\u008c\u008e\5D#\2\u008d\u008c")
        buf.write("\3\2\2\2\u008e\u0091\3\2\2\2\u008f\u008d\3\2\2\2\u008f")
        buf.write("\u0090\3\2\2\2\u0090\u0095\3\2\2\2\u0091\u008f\3\2\2\2")
        buf.write("\u0092\u0094\7\r\2\2\u0093\u0092\3\2\2\2\u0094\u0097\3")
        buf.write("\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u00a0")
        buf.write("\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u009c\t\2\2\2\u0099")
        buf.write("\u009b\5D#\2\u009a\u0099\3\2\2\2\u009b\u009e\3\2\2\2\u009c")
        buf.write("\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u00a0\3\2\2\2")
        buf.write("\u009e\u009c\3\2\2\2\u009f\u0089\3\2\2\2\u009f\u0098\3")
        buf.write("\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2")
        buf.write("\3\2\2\2\u00a2\u00e9\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4")
        buf.write("\u00c8\7F\2\2\u00a5\u00b8\7h\2\2\u00a6\u00b5\7I\2\2\u00a7")
        buf.write("\u00a9\5j\66\2\u00a8\u00aa\7g\2\2\u00a9\u00a8\3\2\2\2")
        buf.write("\u00a9\u00aa\3\2\2\2\u00aa\u00b2\3\2\2\2\u00ab\u00ac\7")
        buf.write("^\2\2\u00ac\u00ae\5j\66\2\u00ad\u00af\7g\2\2\u00ae\u00ad")
        buf.write("\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b1\3\2\2\2\u00b0")
        buf.write("\u00ab\3\2\2\2\u00b1\u00b4\3\2\2\2\u00b2\u00b0\3\2\2\2")
        buf.write("\u00b2\u00b3\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2\3")
        buf.write("\2\2\2\u00b5\u00a7\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7")
        buf.write("\3\2\2\2\u00b7\u00b9\7J\2\2\u00b8\u00a6\3\2\2\2\u00b8")
        buf.write("\u00b9\3\2\2\2\u00b9\u00c9\3\2\2\2\u00ba\u00bb\7\20\2")
        buf.write("\2\u00bb\u00c5\78\2\2\u00bc\u00c1\5(\25\2\u00bd\u00be")
        buf.write("\7^\2\2\u00be\u00c0\5(\25\2\u00bf\u00bd\3\2\2\2\u00c0")
        buf.write("\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2")
        buf.write("\u00c2\u00c6\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\u00c6\7")
        buf.write("\b\2\2\u00c5\u00bc\3\2\2\2\u00c5\u00c4\3\2\2\2\u00c6\u00c7")
        buf.write("\3\2\2\2\u00c7\u00c9\79\2\2\u00c8\u00a5\3\2\2\2\u00c8")
        buf.write("\u00ba\3\2\2\2\u00c9\u00e9\3\2\2\2\u00ca\u00d3\7h\2\2")
        buf.write("\u00cb\u00d0\7$\2\2\u00cc\u00d1\5r:\2\u00cd\u00ce\7p\2")
        buf.write("\2\u00ce\u00d1\7h\2\2\u00cf\u00d1\7r\2\2\u00d0\u00cc\3")
        buf.write("\2\2\2\u00d0\u00cd\3\2\2\2\u00d0\u00cf\3\2\2\2\u00d1\u00d3")
        buf.write("\3\2\2\2\u00d2\u00ca\3\2\2\2\u00d2\u00cb\3\2\2\2\u00d3")
        buf.write("\u00e6\3\2\2\2\u00d4\u00e3\7I\2\2\u00d5\u00d7\5j\66\2")
        buf.write("\u00d6\u00d8\7g\2\2\u00d7\u00d6\3\2\2\2\u00d7\u00d8\3")
        buf.write("\2\2\2\u00d8\u00e0\3\2\2\2\u00d9\u00da\7^\2\2\u00da\u00dc")
        buf.write("\5j\66\2\u00db\u00dd\7g\2\2\u00dc\u00db\3\2\2\2\u00dc")
        buf.write("\u00dd\3\2\2\2\u00dd\u00df\3\2\2\2\u00de\u00d9\3\2\2\2")
        buf.write("\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3")
        buf.write("\2\2\2\u00e1\u00e4\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e3\u00d5")
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5")
        buf.write("\u00e7\7J\2\2\u00e6\u00d4\3\2\2\2\u00e6\u00e7\3\2\2\2")
        buf.write("\u00e7\u00e9\3\2\2\2\u00e8|\3\2\2\2\u00e8\u00a4\3\2\2")
        buf.write("\2\u00e8\u00d2\3\2\2\2\u00e9\5\3\2\2\2\u00ea\u00fd\7h")
        buf.write("\2\2\u00eb\u00fa\7I\2\2\u00ec\u00ee\5j\66\2\u00ed\u00ef")
        buf.write("\7g\2\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f7\3\2\2\2\u00f0\u00f1\7^\2\2\u00f1\u00f3\5j\66\2")
        buf.write("\u00f2\u00f4\7g\2\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3")
        buf.write("\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f0\3\2\2\2\u00f6\u00f9")
        buf.write("\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8")
        buf.write("\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00ec\3\2\2\2")
        buf.write("\u00fa\u00fb\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\7")
        buf.write("J\2\2\u00fd\u00eb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u010e")
        buf.write("\3\2\2\2\u00ff\u0100\7\20\2\2\u0100\u010a\78\2\2\u0101")
        buf.write("\u0106\5(\25\2\u0102\u0103\7^\2\2\u0103\u0105\5(\25\2")
        buf.write("\u0104\u0102\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3")
        buf.write("\2\2\2\u0106\u0107\3\2\2\2\u0107\u010b\3\2\2\2\u0108\u0106")
        buf.write("\3\2\2\2\u0109\u010b\7\b\2\2\u010a\u0101\3\2\2\2\u010a")
        buf.write("\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e\79\2\2")
        buf.write("\u010d\u00ea\3\2\2\2\u010d\u00ff\3\2\2\2\u010d\u010e\3")
        buf.write("\2\2\2\u010e\u012b\3\2\2\2\u010f\u0127\7c\2\2\u0110\u0128")
        buf.write("\7h\2\2\u0111\u0113\7.\2\2\u0112\u0111\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\7h\2\2\u0115")
        buf.write("\u0124\7I\2\2\u0116\u0118\5j\66\2\u0117\u0119\7g\2\2\u0118")
        buf.write("\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0121\3\2\2\2")
        buf.write("\u011a\u011b\7^\2\2\u011b\u011d\5j\66\2\u011c\u011e\7")
        buf.write("g\2\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0120")
        buf.write("\3\2\2\2\u011f\u011a\3\2\2\2\u0120\u0123\3\2\2\2\u0121")
        buf.write("\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0125\3\2\2\2")
        buf.write("\u0123\u0121\3\2\2\2\u0124\u0116\3\2\2\2\u0124\u0125\3")
        buf.write("\2\2\2\u0125\u0126\3\2\2\2\u0126\u0128\7J\2\2\u0127\u0110")
        buf.write("\3\2\2\2\u0127\u0112\3\2\2\2\u0128\u012a\3\2\2\2\u0129")
        buf.write("\u010f\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2\2")
        buf.write("\u012b\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012b\3")
        buf.write("\2\2\2\u012e\u012f\7c\2\2\u012f\7\3\2\2\2\u0130\u013c")
        buf.write("\78\2\2\u0131\u0136\5T+\2\u0132\u0133\7^\2\2\u0133\u0135")
        buf.write("\5T+\2\u0134\u0132\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134")
        buf.write("\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u013a\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0139\u013b\7^\2\2\u013a\u0139\3\2\2\2")
        buf.write("\u013a\u013b\3\2\2\2\u013b\u013d\3\2\2\2\u013c\u0131\3")
        buf.write("\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\3\2\2\2\u013e\u0140")
        buf.write("\7g\2\2\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140")
        buf.write("\u0141\3\2\2\2\u0141\u0143\79\2\2\u0142\u0144\7\37\2\2")
        buf.write("\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146\3")
        buf.write("\2\2\2\u0145\u0147\5p9\2\u0146\u0145\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u014b\3\2\2\2\u0148\u014a\5D#\2\u0149\u0148")
        buf.write("\3\2\2\2\u014a\u014d\3\2\2\2\u014b\u0149\3\2\2\2\u014b")
        buf.write("\u014c\3\2\2\2\u014c\u015d\3\2\2\2\u014d\u014b\3\2\2\2")
        buf.write("\u014e\u0150\7`\2\2\u014f\u0151\5@!\2\u0150\u014f\3\2")
        buf.write("\2\2\u0151\u0152\3\2\2\2\u0152\u0150\3\2\2\2\u0152\u0153")
        buf.write("\3\2\2\2\u0153\u0157\3\2\2\2\u0154\u0156\5D#\2\u0155\u0154")
        buf.write("\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0157")
        buf.write("\u0158\3\2\2\2\u0158\u015b\3\2\2\2\u0159\u0157\3\2\2\2")
        buf.write("\u015a\u015c\5N(\2\u015b\u015a\3\2\2\2\u015b\u015c\3\2")
        buf.write("\2\2\u015c\u015e\3\2\2\2\u015d\u014e\3\2\2\2\u015d\u015e")
        buf.write("\3\2\2\2\u015e\t\3\2\2\2\u015f\u01c3\t\3\2\2\u0160\u0162")
        buf.write("\7.\2\2\u0161\u0160\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
        buf.write("\u0167\3\2\2\2\u0163\u0165\5\6\4\2\u0164\u0166\7.\2\2")
        buf.write("\u0165\u0164\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3")
        buf.write("\2\2\2\u0167\u0163\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u01c4\5\4\3\2\u016a\u016c\5\6\4\2\u016b")
        buf.write("\u016a\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u0183\3\2\2\2")
        buf.write("\u016d\u0180\7h\2\2\u016e\u017d\7I\2\2\u016f\u0171\5j")
        buf.write("\66\2\u0170\u0172\7g\2\2\u0171\u0170\3\2\2\2\u0171\u0172")
        buf.write("\3\2\2\2\u0172\u017a\3\2\2\2\u0173\u0174\7^\2\2\u0174")
        buf.write("\u0176\5j\66\2\u0175\u0177\7g\2\2\u0176\u0175\3\2\2\2")
        buf.write("\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178\u0173\3")
        buf.write("\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u017b")
        buf.write("\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2\u017d")
        buf.write("\u016f\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f\3\2\2\2")
        buf.write("\u017f\u0181\7J\2\2\u0180\u016e\3\2\2\2\u0180\u0181\3")
        buf.write("\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\7c\2\2\u0183\u016d")
        buf.write("\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u019d\3\2\2\2\u0185")
        buf.write("\u0186\5\6\4\2\u0186\u0187\7.\2\2\u0187\u0188\7h\2\2\u0188")
        buf.write("\u0197\7I\2\2\u0189\u018b\5j\66\2\u018a\u018c\7g\2\2\u018b")
        buf.write("\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u0194\3\2\2\2")
        buf.write("\u018d\u018e\7^\2\2\u018e\u0190\5j\66\2\u018f\u0191\7")
        buf.write("g\2\2\u0190\u018f\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193")
        buf.write("\3\2\2\2\u0192\u018d\3\2\2\2\u0193\u0196\3\2\2\2\u0194")
        buf.write("\u0192\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0198\3\2\2\2")
        buf.write("\u0196\u0194\3\2\2\2\u0197\u0189\3\2\2\2\u0197\u0198\3")
        buf.write("\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\7J\2\2\u019a\u019b")
        buf.write("\7c\2\2\u019b\u019d\3\2\2\2\u019c\u016b\3\2\2\2\u019c")
        buf.write("\u0185\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\7F\2\2")
        buf.write("\u019f\u01b2\7h\2\2\u01a0\u01af\7I\2\2\u01a1\u01a3\5j")
        buf.write("\66\2\u01a2\u01a4\7g\2\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01ac\3\2\2\2\u01a5\u01a6\7^\2\2\u01a6")
        buf.write("\u01a8\5j\66\2\u01a7\u01a9\7g\2\2\u01a8\u01a7\3\2\2\2")
        buf.write("\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01a5\3")
        buf.write("\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad")
        buf.write("\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af")
        buf.write("\u01a1\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01b1\3\2\2\2")
        buf.write("\u01b1\u01b3\7J\2\2\u01b2\u01a0\3\2\2\2\u01b2\u01b3\3")
        buf.write("\2\2\2\u01b3\u01c4\3\2\2\2\u01b4\u01b5\7F\2\2\u01b5\u01b6")
        buf.write("\7\20\2\2\u01b6\u01c0\78\2\2\u01b7\u01bc\5(\25\2\u01b8")
        buf.write("\u01b9\7^\2\2\u01b9\u01bb\5(\25\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3")
        buf.write("\2\2\2\u01bd\u01c1\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01c1")
        buf.write("\7\b\2\2\u01c0\u01b7\3\2\2\2\u01c0\u01bf\3\2\2\2\u01c1")
        buf.write("\u01c2\3\2\2\2\u01c2\u01c4\79\2\2\u01c3\u0161\3\2\2\2")
        buf.write("\u01c3\u019c\3\2\2\2\u01c3\u01b4\3\2\2\2\u01c4\u01ee\3")
        buf.write("\2\2\2\u01c5\u01cf\7:\2\2\u01c6\u01cb\5(\25\2\u01c7\u01c8")
        buf.write("\7^\2\2\u01c8\u01ca\5(\25\2\u01c9\u01c7\3\2\2\2\u01ca")
        buf.write("\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01d0\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce\u01d0\5")
        buf.write("Z.\2\u01cf\u01c6\3\2\2\2\u01cf\u01ce\3\2\2\2\u01d0\u01d1")
        buf.write("\3\2\2\2\u01d1\u01d2\7;\2\2\u01d2\u01ec\3\2\2\2\u01d3")
        buf.write("\u01e8\78\2\2\u01d4\u01d7\5(\25\2\u01d5\u01d7\5Z.\2\u01d6")
        buf.write("\u01d4\3\2\2\2\u01d6\u01d5\3\2\2\2\u01d7\u01d9\3\2\2\2")
        buf.write("\u01d8\u01da\7g\2\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3")
        buf.write("\2\2\2\u01da\u01e5\3\2\2\2\u01db\u01de\7^\2\2\u01dc\u01df")
        buf.write("\5(\25\2\u01dd\u01df\5Z.\2\u01de\u01dc\3\2\2\2\u01de\u01dd")
        buf.write("\3\2\2\2\u01df\u01e1\3\2\2\2\u01e0\u01e2\7g\2\2\u01e1")
        buf.write("\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2")
        buf.write("\u01e3\u01db\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7\u01e5")
        buf.write("\3\2\2\2\u01e8\u01d6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9")
        buf.write("\u01ea\3\2\2\2\u01ea\u01ec\79\2\2\u01eb\u01c5\3\2\2\2")
        buf.write("\u01eb\u01d3\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u015f\3")
        buf.write("\2\2\2\u01ed\u01eb\3\2\2\2\u01ee\13\3\2\2\2\u01ef\u02aa")
        buf.write("\5\16\b\2\u01f0\u02a2\t\4\2\2\u01f1\u01f3\5\6\4\2\u01f2")
        buf.write("\u01f4\7.\2\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f6\3\2\2\2\u01f5\u01f1\3\2\2\2\u01f5\u01f6\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u02a2\5\4\3\2\u01f8\u021f")
        buf.write("\7:\2\2\u01f9\u0220\7D\2\2\u01fa\u0220\7H\2\2\u01fb\u01fc")
        buf.write("\t\5\2\2\u01fc\u01fe\7^\2\2\u01fd\u01fb\3\2\2\2\u01fd")
        buf.write("\u01fe\3\2\2\2\u01fe\u0207\3\2\2\2\u01ff\u0201\7D\2\2")
        buf.write("\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202\3")
        buf.write("\2\2\2\u0202\u0204\7h\2\2\u0203\u0205\5X-\2\u0204\u0203")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0208\3\2\2\2\u0206")
        buf.write("\u0208\7/\2\2\u0207\u0200\3\2\2\2\u0207\u0206\3\2\2\2")
        buf.write("\u0208\u020a\3\2\2\2\u0209\u020b\7g\2\2\u020a\u0209\3")
        buf.write("\2\2\2\u020a\u020b\3\2\2\2\u020b\u021c\3\2\2\2\u020c\u0215")
        buf.write("\7^\2\2\u020d\u020f\7D\2\2\u020e\u020d\3\2\2\2\u020e\u020f")
        buf.write("\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\7h\2\2\u0211")
        buf.write("\u0213\5X-\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0216\3\2\2\2\u0214\u0216\7/\2\2\u0215\u020e\3\2\2\2")
        buf.write("\u0215\u0214\3\2\2\2\u0216\u0218\3\2\2\2\u0217\u0219\7")
        buf.write("g\2\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b")
        buf.write("\3\2\2\2\u021a\u020c\3\2\2\2\u021b\u021e\3\2\2\2\u021c")
        buf.write("\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u0220\3\2\2\2")
        buf.write("\u021e\u021c\3\2\2\2\u021f\u01f9\3\2\2\2\u021f\u01fa\3")
        buf.write("\2\2\2\u021f\u01fd\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u0223\7;\2\2\u0222\u0224\5\b\5\2\u0223")
        buf.write("\u0222\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2")
        buf.write("\u0225\u0229\7<\2\2\u0226\u0228\5,\27\2\u0227\u0226\3")
        buf.write("\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a")
        buf.write("\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u0229\3\2\2\2\u022c")
        buf.write("\u02a2\7=\2\2\u022d\u024a\5B\"\2\u022e\u022f\7\63\2\2")
        buf.write("\u022f\u0247\5\6\4\2\u0230\u0248\7h\2\2\u0231\u0233\7")
        buf.write(".\2\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0235\7h\2\2\u0235\u0244\7I\2\2\u0236\u0238")
        buf.write("\5j\66\2\u0237\u0239\7g\2\2\u0238\u0237\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\u0241\3\2\2\2\u023a\u023b\7^\2\2")
        buf.write("\u023b\u023d\5j\66\2\u023c\u023e\7g\2\2\u023d\u023c\3")
        buf.write("\2\2\2\u023d\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f\u023a")
        buf.write("\3\2\2\2\u0240\u0243\3\2\2\2\u0241\u023f\3\2\2\2\u0241")
        buf.write("\u0242\3\2\2\2\u0242\u0245\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0244\u0236\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3")
        buf.write("\2\2\2\u0246\u0248\7J\2\2\u0247\u0230\3\2\2\2\u0247\u0232")
        buf.write("\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u022d\3\2\2\2\u0249")
        buf.write("\u022e\3\2\2\2\u024a\u0264\3\2\2\2\u024b\u0260\78\2\2")
        buf.write("\u024c\u024f\5(\25\2\u024d\u024f\5Z.\2\u024e\u024c\3\2")
        buf.write("\2\2\u024e\u024d\3\2\2\2\u024f\u0251\3\2\2\2\u0250\u0252")
        buf.write("\7g\2\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write("\u025d\3\2\2\2\u0253\u0256\7^\2\2\u0254\u0257\5(\25\2")
        buf.write("\u0255\u0257\5Z.\2\u0256\u0254\3\2\2\2\u0256\u0255\3\2")
        buf.write("\2\2\u0257\u0259\3\2\2\2\u0258\u025a\7g\2\2\u0259\u0258")
        buf.write("\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c\3\2\2\2\u025b")
        buf.write("\u0253\3\2\2\2\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2")
        buf.write("\u025d\u025e\3\2\2\2\u025e\u0261\3\2\2\2\u025f\u025d\3")
        buf.write("\2\2\2\u0260\u024e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262")
        buf.write("\3\2\2\2\u0262\u0265\79\2\2\u0263\u0265\5Z.\2\u0264\u024b")
        buf.write("\3\2\2\2\u0264\u0263\3\2\2\2\u0265\u02a2\3\2\2\2\u0266")
        buf.write("\u0267\7\16\2\2\u0267\u0269\7I\2\2\u0268\u026a\5> \2\u0269")
        buf.write("\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u0269\3\2\2\2")
        buf.write("\u026b\u026c\3\2\2\2\u026c\u0270\3\2\2\2\u026d\u026f\5")
        buf.write("D#\2\u026e\u026d\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e")
        buf.write("\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0274\3\2\2\2\u0272")
        buf.write("\u0270\3\2\2\2\u0273\u0275\5N(\2\u0274\u0273\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\7J\2\2")
        buf.write("\u0277\u0279\3\2\2\2\u0278\u0266\3\2\2\2\u0278\u0279\3")
        buf.write("\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\78\2\2\u027b\u0280")
        buf.write("\5(\25\2\u027c\u027d\7^\2\2\u027d\u027f\5(\25\2\u027e")
        buf.write("\u027c\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2")
        buf.write("\u0280\u0281\3\2\2\2\u0281\u0283\3\2\2\2\u0282\u0280\3")
        buf.write("\2\2\2\u0283\u0284\79\2\2\u0284\u02a2\3\2\2\2\u0285\u0286")
        buf.write("\7\62\2\2\u0286\u029d\78\2\2\u0287\u028c\5(\25\2\u0288")
        buf.write("\u0289\7^\2\2\u0289\u028b\5(\25\2\u028a\u0288\3\2\2\2")
        buf.write("\u028b\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028c\u028d\3")
        buf.write("\2\2\2\u028d\u029e\3\2\2\2\u028e\u028c\3\2\2\2\u028f\u0291")
        buf.write("\5> \2\u0290\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0290")
        buf.write("\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0297\3\2\2\2\u0294")
        buf.write("\u0296\5D#\2\u0295\u0294\3\2\2\2\u0296\u0299\3\2\2\2\u0297")
        buf.write("\u0295\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029b\3\2\2\2")
        buf.write("\u0299\u0297\3\2\2\2\u029a\u029c\5N(\2\u029b\u029a\3\2")
        buf.write("\2\2\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2\u029d\u0287")
        buf.write("\3\2\2\2\u029d\u0290\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a0\79\2\2\u02a0\u02a2\3\2\2\2\u02a1\u01f0\3\2\2\2")
        buf.write("\u02a1\u01f5\3\2\2\2\u02a1\u01f8\3\2\2\2\u02a1\u0249\3")
        buf.write("\2\2\2\u02a1\u0278\3\2\2\2\u02a1\u0285\3\2\2\2\u02a2\u02a6")
        buf.write("\3\2\2\2\u02a3\u02a5\5\n\6\2\u02a4\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a8\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2")
        buf.write("\u02a7\u02aa\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u01ef\3")
        buf.write("\2\2\2\u02a9\u02a1\3\2\2\2\u02aa\r\3\2\2\2\u02ab\u02ac")
        buf.write("\5\4\3\2\u02ac\u02b5\78\2\2\u02ad\u02b2\5(\25\2\u02ae")
        buf.write("\u02af\7^\2\2\u02af\u02b1\5(\25\2\u02b0\u02ae\3\2\2\2")
        buf.write("\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3")
        buf.write("\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02ad")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b8\79\2\2\u02b8\17\3\2\2\2\u02b9\u02fc\5\f\7\2\u02ba")
        buf.write("\u02fc\5\22\n\2\u02bb\u02d4\7*\2\2\u02bc\u02d0\t\6\2\2")
        buf.write("\u02bd\u02bf\78\2\2\u02be\u02c0\5> \2\u02bf\u02be\3\2")
        buf.write("\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c6\3\2\2\2\u02c3\u02c5\5D#\2\u02c4\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6")
        buf.write("\u02c7\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2")
        buf.write("\u02c9\u02cb\5N(\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2")
        buf.write("\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\79\2\2\u02cd\u02cf")
        buf.write("\3\2\2\2\u02ce\u02bd\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0")
        buf.write("\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d4\3\2\2\2")
        buf.write("\u02d2\u02d0\3\2\2\2\u02d3\u02bb\3\2\2\2\u02d3\u02bc\3")
        buf.write("\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02fc\5\20\t\2\u02d6")
        buf.write("\u02d7\7*\2\2\u02d7\u02d8\7g\2\2\u02d8\u02d9\78\2\2\u02d9")
        buf.write("\u02da\7h\2\2\u02da\u02fc\79\2\2\u02db\u02dc\t\7\2\2\u02dc")
        buf.write("\u02de\78\2\2\u02dd\u02df\5> \2\u02de\u02dd\3\2\2\2\u02df")
        buf.write("\u02e0\3\2\2\2\u02e0\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2")
        buf.write("\u02e1\u02e5\3\2\2\2\u02e2\u02e4\5D#\2\u02e3\u02e2\3\2")
        buf.write("\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6")
        buf.write("\3\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8")
        buf.write("\u02ea\5N(\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u02eb\3\2\2\2\u02eb\u02ec\79\2\2\u02ec\u02fc\3\2\2\2")
        buf.write("\u02ed\u02ee\7\"\2\2\u02ee\u02ef\78\2\2\u02ef\u02f4\5")
        buf.write("(\25\2\u02f0\u02f1\7^\2\2\u02f1\u02f3\5(\25\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2\u02f6\u02f4\3\2\2\2")
        buf.write("\u02f7\u02f8\79\2\2\u02f8\u02fc\3\2\2\2\u02f9\u02fc\5")
        buf.write("\26\f\2\u02fa\u02fc\5\32\16\2\u02fb\u02b9\3\2\2\2\u02fb")
        buf.write("\u02ba\3\2\2\2\u02fb\u02d3\3\2\2\2\u02fb\u02d6\3\2\2\2")
        buf.write("\u02fb\u02db\3\2\2\2\u02fb\u02ed\3\2\2\2\u02fb\u02f9\3")
        buf.write("\2\2\2\u02fb\u02fa\3\2\2\2\u02fc\21\3\2\2\2\u02fd\u0311")
        buf.write("\t\b\2\2\u02fe\u0300\78\2\2\u02ff\u0301\5> \2\u0300\u02ff")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0300\3\2\2\2\u0302")
        buf.write("\u0303\3\2\2\2\u0303\u0307\3\2\2\2\u0304\u0306\5D#\2\u0305")
        buf.write("\u0304\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2")
        buf.write("\u0307\u0308\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u0307\3")
        buf.write("\2\2\2\u030a\u030c\5N(\2\u030b\u030a\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030e\79\2\2\u030e")
        buf.write("\u0310\3\2\2\2\u030f\u02fe\3\2\2\2\u0310\u0313\3\2\2\2")
        buf.write("\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0314\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0314\u0317\5\20\t\2\u0315")
        buf.write("\u0317\5\24\13\2\u0316\u02fd\3\2\2\2\u0316\u0315\3\2\2")
        buf.write("\2\u0317\23\3\2\2\2\u0318\u0319\b\13\1\2\u0319\u031a\5")
        buf.write("\f\7\2\u031a\u031b\t\b\2\2\u031b\u0326\3\2\2\2\u031c\u0320")
        buf.write("\f\3\2\2\u031d\u031f\5\n\6\2\u031e\u031d\3\2\2\2\u031f")
        buf.write("\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2")
        buf.write("\u0321\u0323\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0325\t")
        buf.write("\b\2\2\u0324\u031c\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\25\3\2\2\2\u0328\u0326")
        buf.write("\3\2\2\2\u0329\u032b\7c\2\2\u032a\u0329\3\2\2\2\u032a")
        buf.write("\u032b\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u0344\7!\2\2")
        buf.write("\u032d\u0330\78\2\2\u032e\u0331\5(\25\2\u032f\u0331\5")
        buf.write("Z.\2\u0330\u032e\3\2\2\2\u0330\u032f\3\2\2\2\u0331\u0333")
        buf.write("\3\2\2\2\u0332\u0334\7g\2\2\u0333\u0332\3\2\2\2\u0333")
        buf.write("\u0334\3\2\2\2\u0334\u033f\3\2\2\2\u0335\u0338\7^\2\2")
        buf.write("\u0336\u0339\5(\25\2\u0337\u0339\5Z.\2\u0338\u0336\3\2")
        buf.write("\2\2\u0338\u0337\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u033c")
        buf.write("\7g\2\2\u033b\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c")
        buf.write("\u033e\3\2\2\2\u033d\u0335\3\2\2\2\u033e\u0341\3\2\2\2")
        buf.write("\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0342\3")
        buf.write("\2\2\2\u0341\u033f\3\2\2\2\u0342\u0343\79\2\2\u0343\u0345")
        buf.write("\3\2\2\2\u0344\u032d\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0365\3\2\2\2\u0346\u0348\5> \2\u0347\u0346\3\2\2\2\u0348")
        buf.write("\u0349\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2")
        buf.write("\u034a\u034e\3\2\2\2\u034b\u034d\5D#\2\u034c\u034b\3\2")
        buf.write("\2\2\u034d\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f")
        buf.write("\3\2\2\2\u034f\u0352\3\2\2\2\u0350\u034e\3\2\2\2\u0351")
        buf.write("\u0353\5\30\r\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2\2")
        buf.write("\2\u0353\u0366\3\2\2\2\u0354\u0356\78\2\2\u0355\u0357")
        buf.write("\5> \2\u0356\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0356")
        buf.write("\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035d\3\2\2\2\u035a")
        buf.write("\u035c\5D#\2\u035b\u035a\3\2\2\2\u035c\u035f\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0361\3\2\2\2")
        buf.write("\u035f\u035d\3\2\2\2\u0360\u0362\5N(\2\u0361\u0360\3\2")
        buf.write("\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364")
        buf.write("\79\2\2\u0364\u0366\3\2\2\2\u0365\u0347\3\2\2\2\u0365")
        buf.write("\u0354\3\2\2\2\u0366\u0380\3\2\2\2\u0367\u037c\78\2\2")
        buf.write("\u0368\u036b\5(\25\2\u0369\u036b\5Z.\2\u036a\u0368\3\2")
        buf.write("\2\2\u036a\u0369\3\2\2\2\u036b\u036d\3\2\2\2\u036c\u036e")
        buf.write("\7g\2\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e")
        buf.write("\u0379\3\2\2\2\u036f\u0372\7^\2\2\u0370\u0373\5(\25\2")
        buf.write("\u0371\u0373\5Z.\2\u0372\u0370\3\2\2\2\u0372\u0371\3\2")
        buf.write("\2\2\u0373\u0375\3\2\2\2\u0374\u0376\7g\2\2\u0375\u0374")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377")
        buf.write("\u036f\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2")
        buf.write("\u0379\u037a\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3")
        buf.write("\2\2\2\u037c\u036a\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u0381\79\2\2\u037f\u0381\5Z.\2\u0380\u0367")
        buf.write("\3\2\2\2\u0380\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381")
        buf.write("\27\3\2\2\2\u0382\u0384\5\6\4\2\u0383\u0382\3\2\2\2\u0383")
        buf.write("\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0389\7@\2\2")
        buf.write("\u0386\u0388\5D#\2\u0387\u0386\3\2\2\2\u0388\u038b\3\2")
        buf.write("\2\2\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038f")
        buf.write("\3\2\2\2\u038b\u0389\3\2\2\2\u038c\u038e\7\r\2\2\u038d")
        buf.write("\u038c\3\2\2\2\u038e\u0391\3\2\2\2\u038f\u038d\3\2\2\2")
        buf.write("\u038f\u0390\3\2\2\2\u0390\u039a\3\2\2\2\u0391\u038f\3")
        buf.write("\2\2\2\u0392\u0396\t\2\2\2\u0393\u0395\5D#\2\u0394\u0393")
        buf.write("\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394\3\2\2\2\u0396")
        buf.write("\u0397\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2")
        buf.write("\u0399\u0383\3\2\2\2\u0399\u0392\3\2\2\2\u039a\u039c\3")
        buf.write("\2\2\2\u039b\u039d\5\30\r\2\u039c\u039b\3\2\2\2\u039c")
        buf.write("\u039d\3\2\2\2\u039d\u03bd\3\2\2\2\u039e\u039f\7:\2\2")
        buf.write("\u039f\u03a4\5(\25\2\u03a0\u03a1\7^\2\2\u03a1\u03a3\5")
        buf.write("(\25\2\u03a2\u03a0\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a2")
        buf.write("\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6")
        buf.write("\u03a4\3\2\2\2\u03a7\u03ab\7;\2\2\u03a8\u03aa\5D#\2\u03a9")
        buf.write("\u03a8\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2")
        buf.write("\u03ab\u03ac\3\2\2\2\u03ac\u03b9\3\2\2\2\u03ad\u03ab\3")
        buf.write("\2\2\2\u03ae\u03af\7:\2\2\u03af\u03b0\5&\24\2\u03b0\u03b4")
        buf.write("\7;\2\2\u03b1\u03b3\5D#\2\u03b2\u03b1\3\2\2\2\u03b3\u03b6")
        buf.write("\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7\u03ae\3\2\2\2")
        buf.write("\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3")
        buf.write("\2\2\2\u03ba\u03bd\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc\u0399")
        buf.write("\3\2\2\2\u03bc\u039e\3\2\2\2\u03bd\31\3\2\2\2\u03be\u03c0")
        buf.write("\7c\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c1\3\2\2\2\u03c1\u03c4\7\22\2\2\u03c2\u03c3\7:\2\2")
        buf.write("\u03c3\u03c5\7;\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c5\3")
        buf.write("\2\2\2\u03c5\u03d9\3\2\2\2\u03c6\u03c8\78\2\2\u03c7\u03c9")
        buf.write("\5> \2\u03c8\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03c8")
        buf.write("\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cf\3\2\2\2\u03cc")
        buf.write("\u03ce\5D#\2\u03cd\u03cc\3\2\2\2\u03ce\u03d1\3\2\2\2\u03cf")
        buf.write("\u03cd\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d3\3\2\2\2")
        buf.write("\u03d1\u03cf\3\2\2\2\u03d2\u03d4\5N(\2\u03d3\u03d2\3\2")
        buf.write("\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6")
        buf.write("\79\2\2\u03d6\u03d8\3\2\2\2\u03d7\u03c6\3\2\2\2\u03d8")
        buf.write("\u03db\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2")
        buf.write("\u03da\u03dc\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc\u03dd\5")
        buf.write("\20\t\2\u03dd\33\3\2\2\2\u03de\u03f2\b\17\1\2\u03df\u03e1")
        buf.write("\78\2\2\u03e0\u03e2\5> \2\u03e1\u03e0\3\2\2\2\u03e2\u03e3")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e8\3\2\2\2\u03e5\u03e7\5D#\2\u03e6\u03e5\3\2\2\2\u03e7")
        buf.write("\u03ea\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ed\5")
        buf.write("N(\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee")
        buf.write("\3\2\2\2\u03ee\u03ef\79\2\2\u03ef\u03f1\3\2\2\2\u03f0")
        buf.write("\u03df\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2")
        buf.write("\u03f2\u03f3\3\2\2\2\u03f3\u03f5\3\2\2\2\u03f4\u03f2\3")
        buf.write("\2\2\2\u03f5\u041b\5\20\t\2\u03f6\u0401\7f\2\2\u03f7\u0401")
        buf.write("\7_\2\2\u03f8\u0401\7@\2\2\u03f9\u0401\7A\2\2\u03fa\u0401")
        buf.write("\7B\2\2\u03fb\u0401\7>\2\2\u03fc\u0401\7?\2\2\u03fd\u0401")
        buf.write("\7S\2\2\u03fe\u03ff\7J\2\2\u03ff\u0401\7J\2\2\u0400\u03f6")
        buf.write("\3\2\2\2\u0400\u03f7\3\2\2\2\u0400\u03f8\3\2\2\2\u0400")
        buf.write("\u03f9\3\2\2\2\u0400\u03fa\3\2\2\2\u0400\u03fb\3\2\2\2")
        buf.write("\u0400\u03fc\3\2\2\2\u0400\u03fd\3\2\2\2\u0400\u03fe\3")
        buf.write("\2\2\2\u0401\u0415\3\2\2\2\u0402\u0404\78\2\2\u0403\u0405")
        buf.write("\5> \2\u0404\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0404")
        buf.write("\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u040b\3\2\2\2\u0408")
        buf.write("\u040a\5D#\2\u0409\u0408\3\2\2\2\u040a\u040d\3\2\2\2\u040b")
        buf.write("\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040f\3\2\2\2")
        buf.write("\u040d\u040b\3\2\2\2\u040e\u0410\5N(\2\u040f\u040e\3\2")
        buf.write("\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412")
        buf.write("\79\2\2\u0412\u0414\3\2\2\2\u0413\u0402\3\2\2\2\u0414")
        buf.write("\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u0418\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u041a\5")
        buf.write("\20\t\2\u0419\u0400\3\2\2\2\u041a\u041d\3\2\2\2\u041b")
        buf.write("\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u0461\3\2\2\2")
        buf.write("\u041d\u041b\3\2\2\2\u041e\u041f\f\3\2\2\u041f\u0433\t")
        buf.write("\t\2\2\u0420\u0422\78\2\2\u0421\u0423\5> \2\u0422\u0421")
        buf.write("\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0422\3\2\2\2\u0424")
        buf.write("\u0425\3\2\2\2\u0425\u0429\3\2\2\2\u0426\u0428\5D#\2\u0427")
        buf.write("\u0426\3\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427\3\2\2\2")
        buf.write("\u0429\u042a\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429\3")
        buf.write("\2\2\2\u042c\u042e\5N(\2\u042d\u042c\3\2\2\2\u042d\u042e")
        buf.write("\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\79\2\2\u0430")
        buf.write("\u0432\3\2\2\2\u0431\u0420\3\2\2\2\u0432\u0435\3\2\2\2")
        buf.write("\u0433\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436\3")
        buf.write("\2\2\2\u0435\u0433\3\2\2\2\u0436\u045c\5\20\t\2\u0437")
        buf.write("\u0442\7f\2\2\u0438\u0442\7_\2\2\u0439\u0442\7@\2\2\u043a")
        buf.write("\u0442\7A\2\2\u043b\u0442\7B\2\2\u043c\u0442\7>\2\2\u043d")
        buf.write("\u0442\7?\2\2\u043e\u0442\7S\2\2\u043f\u0440\7J\2\2\u0440")
        buf.write("\u0442\7J\2\2\u0441\u0437\3\2\2\2\u0441\u0438\3\2\2\2")
        buf.write("\u0441\u0439\3\2\2\2\u0441\u043a\3\2\2\2\u0441\u043b\3")
        buf.write("\2\2\2\u0441\u043c\3\2\2\2\u0441\u043d\3\2\2\2\u0441\u043e")
        buf.write("\3\2\2\2\u0441\u043f\3\2\2\2\u0442\u0456\3\2\2\2\u0443")
        buf.write("\u0445\78\2\2\u0444\u0446\5> \2\u0445\u0444\3\2\2\2\u0446")
        buf.write("\u0447\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0448\3\2\2\2")
        buf.write("\u0448\u044c\3\2\2\2\u0449\u044b\5D#\2\u044a\u0449\3\2")
        buf.write("\2\2\u044b\u044e\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d")
        buf.write("\3\2\2\2\u044d\u0450\3\2\2\2\u044e\u044c\3\2\2\2\u044f")
        buf.write("\u0451\5N(\2\u0450\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451")
        buf.write("\u0452\3\2\2\2\u0452\u0453\79\2\2\u0453\u0455\3\2\2\2")
        buf.write("\u0454\u0443\3\2\2\2\u0455\u0458\3\2\2\2\u0456\u0454\3")
        buf.write("\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459\3\2\2\2\u0458\u0456")
        buf.write("\3\2\2\2\u0459\u045b\5\20\t\2\u045a\u0441\3\2\2\2\u045b")
        buf.write("\u045e\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2")
        buf.write("\u045d\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u041e\3")
        buf.write("\2\2\2\u0460\u0463\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462")
        buf.write("\3\2\2\2\u0462\35\3\2\2\2\u0463\u0461\3\2\2\2\u0464\u0465")
        buf.write("\b\20\1\2\u0465\u0466\5\34\17\2\u0466\u046c\3\2\2\2\u0467")
        buf.write("\u0468\f\3\2\2\u0468\u0469\t\n\2\2\u0469\u046b\5\34\17")
        buf.write("\2\u046a\u0467\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a")
        buf.write("\3\2\2\2\u046c\u046d\3\2\2\2\u046d\37\3\2\2\2\u046e\u046c")
        buf.write("\3\2\2\2\u046f\u0470\5$\23\2\u0470\u0471\7a\2\2\u0471")
        buf.write("\u0476\5(\25\2\u0472\u0473\7^\2\2\u0473\u0475\5(\25\2")
        buf.write("\u0474\u0472\3\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474\3")
        buf.write("\2\2\2\u0476\u0477\3\2\2\2\u0477\u0479\3\2\2\2\u0478\u0476")
        buf.write("\3\2\2\2\u0479\u047a\7b\2\2\u047a\u047b\5(\25\2\u047b")
        buf.write("!\3\2\2\2\u047c\u047d\5$\23\2\u047d\u047e\7]\2\2\u047e")
        buf.write("\u047f\5(\25\2\u047f#\3\2\2\2\u0480\u0485\5\36\20\2\u0481")
        buf.write("\u0482\t\13\2\2\u0482\u0484\5\36\20\2\u0483\u0481\3\2")
        buf.write("\2\2\u0484\u0487\3\2\2\2\u0485\u0483\3\2\2\2\u0485\u0486")
        buf.write("\3\2\2\2\u0486%\3\2\2\2\u0487\u0485\3\2\2\2\u0488\u048c")
        buf.write("\5$\23\2\u0489\u048c\5 \21\2\u048a\u048c\5\"\22\2\u048b")
        buf.write("\u0488\3\2\2\2\u048b\u0489\3\2\2\2\u048b\u048a\3\2\2\2")
        buf.write("\u048c\'\3\2\2\2\u048d\u0492\7\60\2\2\u048e\u048f\5$\23")
        buf.write("\2\u048f\u0490\5*\26\2\u0490\u0492\3\2\2\2\u0491\u048d")
        buf.write("\3\2\2\2\u0491\u048e\3\2\2\2\u0492\u0495\3\2\2\2\u0493")
        buf.write("\u0491\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u049c\3\2\2\2")
        buf.write("\u0495\u0493\3\2\2\2\u0496\u049d\5&\24\2\u0497\u0498\5")
        buf.write("$\23\2\u0498\u0499\5*\26\2\u0499\u049a\5Z.\2\u049a\u049d")
        buf.write("\3\2\2\2\u049b\u049d\7\60\2\2\u049c\u0496\3\2\2\2\u049c")
        buf.write("\u0497\3\2\2\2\u049c\u049b\3\2\2\2\u049d)\3\2\2\2\u049e")
        buf.write("\u04a3\t\f\2\2\u049f\u04a0\7J\2\2\u04a0\u04a1\7J\2\2\u04a1")
        buf.write("\u04a3\7H\2\2\u04a2\u049e\3\2\2\2\u04a2\u049f\3\2\2\2")
        buf.write("\u04a3+\3\2\2\2\u04a4\u04a6\5D#\2\u04a5\u04a4\3\2\2\2")
        buf.write("\u04a6\u04a9\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a8\3")
        buf.write("\2\2\2\u04a8\u0533\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa\u04ab")
        buf.write("\7h\2\2\u04ab\u04b2\7b\2\2\u04ac\u04ad\t\r\2\2\u04ad\u04ae")
        buf.write("\78\2\2\u04ae\u04af\5\62\32\2\u04af\u04b0\79\2\2\u04b0")
        buf.write("\u04b2\3\2\2\2\u04b1\u04aa\3\2\2\2\u04b1\u04ac\3\2\2\2")
        buf.write("\u04b2\u04b3\3\2\2\2\u04b3\u0534\5,\27\2\u04b4\u0534\5")
        buf.write(".\30\2\u04b5\u04ba\5(\25\2\u04b6\u04b7\7^\2\2\u04b7\u04b9")
        buf.write("\5(\25\2\u04b8\u04b6\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba")
        buf.write("\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04be\3\2\2\2")
        buf.write("\u04bc\u04ba\3\2\2\2\u04bd\u04b5\3\2\2\2\u04bd\u04be\3")
        buf.write("\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u0534\7d\2\2\u04c0\u04c4")
        buf.write("\7<\2\2\u04c1\u04c3\5,\27\2\u04c2\u04c1\3\2\2\2\u04c3")
        buf.write("\u04c6\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2")
        buf.write("\u04c5\u04c7\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c7\u0534\7")
        buf.write("=\2\2\u04c8\u04c9\7\34\2\2\u04c9\u04ca\78\2\2\u04ca\u04cb")
        buf.write("\5\62\32\2\u04cb\u04cc\79\2\2\u04cc\u04ce\5,\27\2\u04cd")
        buf.write("\u04cf\5\60\31\2\u04ce\u04cd\3\2\2\2\u04ce\u04cf\3\2\2")
        buf.write("\2\u04cf\u0534\3\2\2\2\u04d0\u04d1\7\23\2\2\u04d1\u04d2")
        buf.write("\5,\27\2\u04d2\u04d3\7\67\2\2\u04d3\u04d4\78\2\2\u04d4")
        buf.write("\u04d9\5(\25\2\u04d5\u04d6\7^\2\2\u04d6\u04d8\5(\25\2")
        buf.write("\u04d7\u04d5\3\2\2\2\u04d8\u04db\3\2\2\2\u04d9\u04d7\3")
        buf.write("\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db\u04d9")
        buf.write("\3\2\2\2\u04dc\u04dd\79\2\2\u04dd\u04de\7d\2\2\u04de\u0534")
        buf.write("\3\2\2\2\u04df\u04e0\7\32\2\2\u04e0\u051b\78\2\2\u04e1")
        buf.write("\u04e6\5(\25\2\u04e2\u04e3\7^\2\2\u04e3\u04e5\5(\25\2")
        buf.write("\u04e4\u04e2\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3")
        buf.write("\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6")
        buf.write("\3\2\2\2\u04e9\u04e1\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea")
        buf.write("\u04eb\3\2\2\2\u04eb\u04ee\7d\2\2\u04ec\u04ee\5:\36\2")
        buf.write("\u04ed\u04e9\3\2\2\2\u04ed\u04ec\3\2\2\2\u04ee\u04f0\3")
        buf.write("\2\2\2\u04ef\u04f1\5\62\32\2\u04f0\u04ef\3\2\2\2\u04f0")
        buf.write("\u04f1\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04fb\7d\2\2")
        buf.write("\u04f3\u04f8\5(\25\2\u04f4\u04f5\7^\2\2\u04f5\u04f7\5")
        buf.write("(\25\2\u04f6\u04f4\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6")
        buf.write("\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fb\u04f3\3\2\2\2\u04fb\u04fc\3\2\2\2")
        buf.write("\u04fc\u051c\3\2\2\2\u04fd\u04ff\5D#\2\u04fe\u04fd\3\2")
        buf.write("\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501")
        buf.write("\3\2\2\2\u0501\u0504\3\2\2\2\u0502\u0500\3\2\2\2\u0503")
        buf.write("\u0505\5<\37\2\u0504\u0503\3\2\2\2\u0505\u0506\3\2\2\2")
        buf.write("\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u050b\3")
        buf.write("\2\2\2\u0508\u050a\5D#\2\u0509\u0508\3\2\2\2\u050a\u050d")
        buf.write("\3\2\2\2\u050b\u0509\3\2\2\2\u050b\u050c\3\2\2\2\u050c")
        buf.write("\u050e\3\2\2\2\u050d\u050b\3\2\2\2\u050e\u050f\5H%\2\u050f")
        buf.write("\u0519\7b\2\2\u0510\u0515\5(\25\2\u0511\u0512\7^\2\2\u0512")
        buf.write("\u0514\5(\25\2\u0513\u0511\3\2\2\2\u0514\u0517\3\2\2\2")
        buf.write("\u0515\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u051a\3")
        buf.write("\2\2\2\u0517\u0515\3\2\2\2\u0518\u051a\5Z.\2\u0519\u0510")
        buf.write("\3\2\2\2\u0519\u0518\3\2\2\2\u051a\u051c\3\2\2\2\u051b")
        buf.write("\u04ed\3\2\2\2\u051b\u0500\3\2\2\2\u051c\u051d\3\2\2\2")
        buf.write("\u051d\u051e\79\2\2\u051e\u0534\5,\27\2\u051f\u052f\t")
        buf.write("\16\2\2\u0520\u052c\7(\2\2\u0521\u0526\5(\25\2\u0522\u0523")
        buf.write("\7^\2\2\u0523\u0525\5(\25\2\u0524\u0522\3\2\2\2\u0525")
        buf.write("\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0526\u0527\3\2\2\2")
        buf.write("\u0527\u052a\3\2\2\2\u0528\u0526\3\2\2\2\u0529\u0521\3")
        buf.write("\2\2\2\u0529\u052a\3\2\2\2\u052a\u052d\3\2\2\2\u052b\u052d")
        buf.write("\5Z.\2\u052c\u0529\3\2\2\2\u052c\u052b\3\2\2\2\u052d\u052f")
        buf.write("\3\2\2\2\u052e\u051f\3\2\2\2\u052e\u0520\3\2\2\2\u052f")
        buf.write("\u0530\3\2\2\2\u0530\u0534\7d\2\2\u0531\u0534\5\64\33")
        buf.write("\2\u0532\u0534\5l\67\2\u0533\u04b1\3\2\2\2\u0533\u04b4")
        buf.write("\3\2\2\2\u0533\u04bd\3\2\2\2\u0533\u04c0\3\2\2\2\u0533")
        buf.write("\u04c8\3\2\2\2\u0533\u04d0\3\2\2\2\u0533\u04df\3\2\2\2")
        buf.write("\u0533\u052e\3\2\2\2\u0533\u0531\3\2\2\2\u0533\u0532\3")
        buf.write("\2\2\2\u0534\u0537\3\2\2\2\u0535\u0537\58\35\2\u0536\u04a7")
        buf.write("\3\2\2\2\u0536\u0535\3\2\2\2\u0537-\3\2\2\2\u0538\u053b")
        buf.write("\7\n\2\2\u0539\u053c\5&\24\2\u053a\u053c\7\21\2\2\u053b")
        buf.write("\u0539\3\2\2\2\u053b\u053a\3\2\2\2\u053c\u053d\3\2\2\2")
        buf.write("\u053d\u053e\7b\2\2\u053e\u053f\5,\27\2\u053f/\3\2\2\2")
        buf.write("\u0540\u0541\7\24\2\2\u0541\u0542\5,\27\2\u0542\61\3\2")
        buf.write("\2\2\u0543\u0548\5(\25\2\u0544\u0545\7^\2\2\u0545\u0547")
        buf.write("\5(\25\2\u0546\u0544\3\2\2\2\u0547\u054a\3\2\2\2\u0548")
        buf.write("\u0546\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u0566\3\2\2\2")
        buf.write("\u054a\u0548\3\2\2\2\u054b\u054d\5D#\2\u054c\u054b\3\2")
        buf.write("\2\2\u054d\u0550\3\2\2\2\u054e\u054c\3\2\2\2\u054e\u054f")
        buf.write("\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e\3\2\2\2\u0551")
        buf.write("\u0553\5<\37\2\u0552\u0551\3\2\2\2\u0553\u0554\3\2\2\2")
        buf.write("\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0559\3")
        buf.write("\2\2\2\u0556\u0558\5D#\2\u0557\u0556\3\2\2\2\u0558\u055b")
        buf.write("\3\2\2\2\u0559\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a")
        buf.write("\u055c\3\2\2\2\u055b\u0559\3\2\2\2\u055c\u0563\5H%\2\u055d")
        buf.write("\u055e\7H\2\2\u055e\u0564\5(\25\2\u055f\u0561\7H\2\2\u0560")
        buf.write("\u055f\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2")
        buf.write("\u0562\u0564\5Z.\2\u0563\u055d\3\2\2\2\u0563\u0560\3\2")
        buf.write("\2\2\u0564\u0566\3\2\2\2\u0565\u0543\3\2\2\2\u0565\u054e")
        buf.write("\3\2\2\2\u0566\63\3\2\2\2\u0567\u0568\7\33\2\2\u0568\u0569")
        buf.write("\7h\2\2\u0569\u056a\7d\2\2\u056a\65\3\2\2\2\u056b\u05b2")
        buf.write("\58\35\2\u056c\u056e\5D#\2\u056d\u056c\3\2\2\2\u056e\u0571")
        buf.write("\3\2\2\2\u056f\u056d\3\2\2\2\u056f\u0570\3\2\2\2\u0570")
        buf.write("\u0589\3\2\2\2\u0571\u056f\3\2\2\2\u0572\u0574\5<\37\2")
        buf.write("\u0573\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0573\3")
        buf.write("\2\2\2\u0575\u0576\3\2\2\2\u0576\u057a\3\2\2\2\u0577\u0579")
        buf.write("\5D#\2\u0578\u0577\3\2\2\2\u0579\u057c\3\2\2\2\u057a\u0578")
        buf.write("\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u057e\3\2\2\2\u057c")
        buf.write("\u057a\3\2\2\2\u057d\u0573\3\2\2\2\u057d\u057e\3\2\2\2")
        buf.write("\u057e\u057f\3\2\2\2\u057f\u0583\5H%\2\u0580\u0582\t\17")
        buf.write("\2\2\u0581\u0580\3\2\2\2\u0582\u0585\3\2\2\2\u0583\u0581")
        buf.write("\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0586\3\2\2\2\u0585")
        buf.write("\u0583\3\2\2\2\u0586\u0587\5V,\2\u0587\u058a\3\2\2\2\u0588")
        buf.write("\u058a\7d\2\2\u0589\u057d\3\2\2\2\u0589\u0588\3\2\2\2")
        buf.write("\u058a\u05b2\3\2\2\2\u058b\u0598\7.\2\2\u058c\u0595\7")
        buf.write("I\2\2\u058d\u0592\5h\65\2\u058e\u058f\7^\2\2\u058f\u0591")
        buf.write("\5h\65\2\u0590\u058e\3\2\2\2\u0591\u0594\3\2\2\2\u0592")
        buf.write("\u0590\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0596\3\2\2\2")
        buf.write("\u0594\u0592\3\2\2\2\u0595\u058d\3\2\2\2\u0595\u0596\3")
        buf.write("\2\2\2\u0596\u0597\3\2\2\2\u0597\u0599\7J\2\2\u0598\u058c")
        buf.write("\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write("\u05b2\5\66\34\2\u059b\u059c\7\27\2\2\u059c\u059d\t\20")
        buf.write("\2\2\u059d\u05b2\5\66\34\2\u059e\u059f\7\27\2\2\u059f")
        buf.write("\u05a8\7p\2\2\u05a0\u05a2\7\35\2\2\u05a1\u05a0\3\2\2\2")
        buf.write("\u05a1\u05a2\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a5\7")
        buf.write(" \2\2\u05a4\u05a6\7h\2\2\u05a5\u05a4\3\2\2\2\u05a5\u05a6")
        buf.write("\3\2\2\2\u05a6\u05a8\3\2\2\2\u05a7\u059e\3\2\2\2\u05a7")
        buf.write("\u05a1\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ad\7<\2\2")
        buf.write("\u05aa\u05ac\5\66\34\2\u05ab\u05aa\3\2\2\2\u05ac\u05af")
        buf.write("\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae")
        buf.write("\u05b0\3\2\2\2\u05af\u05ad\3\2\2\2\u05b0\u05b2\7=\2\2")
        buf.write("\u05b1\u056b\3\2\2\2\u05b1\u056f\3\2\2\2\u05b1\u058b\3")
        buf.write("\2\2\2\u05b1\u059b\3\2\2\2\u05b1\u05a7\3\2\2\2\u05b2\67")
        buf.write("\3\2\2\2\u05b3\u060e\5:\36\2\u05b4\u05b5\7\7\2\2\u05b5")
        buf.write("\u05b6\78\2\2\u05b6\u05b7\7p\2\2\u05b7\u060b\79\2\2\u05b8")
        buf.write("\u05ba\5D#\2\u05b9\u05b8\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb")
        buf.write("\u05b9\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05be\3\2\2\2")
        buf.write("\u05bd\u05bb\3\2\2\2\u05be\u05bf\7\65\2\2\u05bf\u05c4")
        buf.write("\7 \2\2\u05c0\u05c1\7 \2\2\u05c1\u05c2\7h\2\2\u05c2\u05c4")
        buf.write("\7H\2\2\u05c3\u05bb\3\2\2\2\u05c3\u05c0\3\2\2\2\u05c4")
        buf.write("\u05c6\3\2\2\2\u05c5\u05c7\5\6\4\2\u05c6\u05c5\3\2\2\2")
        buf.write("\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u060b\7")
        buf.write("h\2\2\u05c9\u05e8\7\65\2\2\u05ca\u05cc\7\63\2\2\u05cb")
        buf.write("\u05ca\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2")
        buf.write("\u05cd\u05d0\5\6\4\2\u05ce\u05d0\7c\2\2\u05cf\u05cb\3")
        buf.write("\2\2\2\u05cf\u05ce\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05e9")
        buf.write("\5\4\3\2\u05d2\u05d6\7h\2\2\u05d3\u05d5\5D#\2\u05d4\u05d3")
        buf.write("\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6")
        buf.write("\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05d6\3\2\2\2")
        buf.write("\u05d9\u05db\7H\2\2\u05da\u05dc\5> \2\u05db\u05da\3\2")
        buf.write("\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de")
        buf.write("\3\2\2\2\u05de\u05e2\3\2\2\2\u05df\u05e1\5D#\2\u05e0\u05df")
        buf.write("\3\2\2\2\u05e1\u05e4\3\2\2\2\u05e2\u05e0\3\2\2\2\u05e2")
        buf.write("\u05e3\3\2\2\2\u05e3\u05e6\3\2\2\2\u05e4\u05e2\3\2\2\2")
        buf.write("\u05e5\u05e7\5N(\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2")
        buf.write("\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05cf\3\2\2\2\u05e8\u05d2")
        buf.write("\3\2\2\2\u05e9\u060b\3\2\2\2\u05ea\u05eb\7+\2\2\u05eb")
        buf.write("\u05ec\78\2\2\u05ec\u05ed\5&\24\2\u05ed\u05ee\7^\2\2\u05ee")
        buf.write("\u05ef\7p\2\2\u05ef\u05f0\79\2\2\u05f0\u060b\3\2\2\2\u05f1")
        buf.write("\u05f3\7\25\2\2\u05f2\u05f4\t\21\2\2\u05f3\u05f2\3\2\2")
        buf.write("\2\u05f3\u05f4\3\2\2\2\u05f4\u05f8\3\2\2\2\u05f5\u05f7")
        buf.write("\5D#\2\u05f6\u05f5\3\2\2\2\u05f7\u05fa\3\2\2\2\u05f8\u05f6")
        buf.write("\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\3\2\2\2\u05fa")
        buf.write("\u05f8\3\2\2\2\u05fb\u0608\7h\2\2\u05fc\u05fe\7b\2\2\u05fd")
        buf.write("\u05ff\5> \2\u05fe\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600")
        buf.write("\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0605\3\2\2\2")
        buf.write("\u0602\u0604\5D#\2\u0603\u0602\3\2\2\2\u0604\u0607\3\2")
        buf.write("\2\2\u0605\u0603\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0609")
        buf.write("\3\2\2\2\u0607\u0605\3\2\2\2\u0608\u05fc\3\2\2\2\u0608")
        buf.write("\u0609\3\2\2\2\u0609\u060b\3\2\2\2\u060a\u05b4\3\2\2\2")
        buf.write("\u060a\u05c3\3\2\2\2\u060a\u05c9\3\2\2\2\u060a\u05ea\3")
        buf.write("\2\2\2\u060a\u05f1\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e")
        buf.write("\7d\2\2\u060d\u05b3\3\2\2\2\u060d\u060a\3\2\2\2\u060e")
        buf.write("9\3\2\2\2\u060f\u0611\5<\37\2\u0610\u060f\3\2\2\2\u0611")
        buf.write("\u0612\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2")
        buf.write("\u0613\u0617\3\2\2\2\u0614\u0616\5D#\2\u0615\u0614\3\2")
        buf.write("\2\2\u0616\u0619\3\2\2\2\u0617\u0615\3\2\2\2\u0617\u0618")
        buf.write("\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2\2\u061a")
        buf.write("\u0610\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u062a\3\2\2\2")
        buf.write("\u061c\u061e\5H%\2\u061d\u061f\5X-\2\u061e\u061d\3\2\2")
        buf.write("\2\u061e\u061f\3\2\2\2\u061f\u0627\3\2\2\2\u0620\u0621")
        buf.write("\7^\2\2\u0621\u0623\5H%\2\u0622\u0624\5X-\2\u0623\u0622")
        buf.write("\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0626\3\2\2\2\u0625")
        buf.write("\u0620\3\2\2\2\u0626\u0629\3\2\2\2\u0627\u0625\3\2\2\2")
        buf.write("\u0627\u0628\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u0627\3")
        buf.write("\2\2\2\u062a\u061c\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c")
        buf.write("\3\2\2\2\u062c\u0650\7d\2\2\u062d\u062f\5D#\2\u062e\u062d")
        buf.write("\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u062e\3\2\2\2\u0630")
        buf.write("\u0631\3\2\2\2\u0631\u063d\3\2\2\2\u0632\u0634\5<\37\2")
        buf.write("\u0633\u0632\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0633\3")
        buf.write("\2\2\2\u0635\u0636\3\2\2\2\u0636\u063a\3\2\2\2\u0637\u0639")
        buf.write("\5D#\2\u0638\u0637\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638")
        buf.write("\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063e\3\2\2\2\u063c")
        buf.write("\u063a\3\2\2\2\u063d\u0633\3\2\2\2\u063d\u063e\3\2\2\2")
        buf.write("\u063e\u063f\3\2\2\2\u063f\u0641\5H%\2\u0640\u0642\5X")
        buf.write("-\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u064a")
        buf.write("\3\2\2\2\u0643\u0644\7^\2\2\u0644\u0646\5H%\2\u0645\u0647")
        buf.write("\5X-\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649")
        buf.write("\3\2\2\2\u0648\u0643\3\2\2\2\u0649\u064c\3\2\2\2\u064a")
        buf.write("\u0648\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064d\3\2\2\2")
        buf.write("\u064c\u064a\3\2\2\2\u064d\u064e\7d\2\2\u064e\u0650\3")
        buf.write("\2\2\2\u064f\u061a\3\2\2\2\u064f\u062e\3\2\2\2\u0650;")
        buf.write("\3\2\2\2\u0651\u0654\t\22\2\2\u0652\u0654\5> \2\u0653")
        buf.write("\u0651\3\2\2\2\u0653\u0652\3\2\2\2\u0654=\3\2\2\2\u0655")
        buf.write("\u06c8\5@!\2\u0656\u065a\t\23\2\2\u0657\u0659\5D#\2\u0658")
        buf.write("\u0657\3\2\2\2\u0659\u065c\3\2\2\2\u065a\u0658\3\2\2\2")
        buf.write("\u065a\u065b\3\2\2\2\u065b\u0678\3\2\2\2\u065c\u065a\3")
        buf.write("\2\2\2\u065d\u065f\5\6\4\2\u065e\u065d\3\2\2\2\u065e\u065f")
        buf.write("\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0673\7h\2\2\u0661")
        buf.write("\u0670\7I\2\2\u0662\u0664\5j\66\2\u0663\u0665\7g\2\2\u0664")
        buf.write("\u0663\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u066d\3\2\2\2")
        buf.write("\u0666\u0667\7^\2\2\u0667\u0669\5j\66\2\u0668\u066a\7")
        buf.write("g\2\2\u0669\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066c")
        buf.write("\3\2\2\2\u066b\u0666\3\2\2\2\u066c\u066f\3\2\2\2\u066d")
        buf.write("\u066b\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0671\3\2\2\2")
        buf.write("\u066f\u066d\3\2\2\2\u0670\u0662\3\2\2\2\u0670\u0671\3")
        buf.write("\2\2\2\u0671\u0672\3\2\2\2\u0672\u0674\7J\2\2\u0673\u0661")
        buf.write("\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0676\3\2\2\2\u0675")
        buf.write("\u0677\7\31\2\2\u0676\u0675\3\2\2\2\u0676\u0677\3\2\2")
        buf.write("\2\u0677\u0679\3\2\2\2\u0678\u065e\3\2\2\2\u0678\u0679")
        buf.write("\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u0689\7b\2\2\u067b")
        buf.write("\u067d\5b\62\2\u067c\u067e\7g\2\2\u067d\u067c\3\2\2\2")
        buf.write("\u067d\u067e\3\2\2\2\u067e\u0686\3\2\2\2\u067f\u0680\7")
        buf.write("^\2\2\u0680\u0682\5b\62\2\u0681\u0683\7g\2\2\u0682\u0681")
        buf.write("\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0685\3\2\2\2\u0684")
        buf.write("\u067f\3\2\2\2\u0685\u0688\3\2\2\2\u0686\u0684\3\2\2\2")
        buf.write("\u0686\u0687\3\2\2\2\u0687\u068a\3\2\2\2\u0688\u0686\3")
        buf.write("\2\2\2\u0689\u067b\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b")
        buf.write("\3\2\2\2\u068b\u068d\7<\2\2\u068c\u068e\5\\/\2\u068d\u068c")
        buf.write("\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f")
        buf.write("\u06c8\7=\2\2\u0690\u0692\7\25\2\2\u0691\u0693\t\21\2")
        buf.write("\2\u0692\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0697")
        buf.write("\3\2\2\2\u0694\u0696\5D#\2\u0695\u0694\3\2\2\2\u0696\u0699")
        buf.write("\3\2\2\2\u0697\u0695\3\2\2\2\u0697\u0698\3\2\2\2\u0698")
        buf.write("\u06a0\3\2\2\2\u0699\u0697\3\2\2\2\u069a\u069c\7h\2\2")
        buf.write("\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u06a1\3")
        buf.write("\2\2\2\u069d\u069e\5\6\4\2\u069e\u069f\7h\2\2\u069f\u06a1")
        buf.write("\3\2\2\2\u06a0\u069b\3\2\2\2\u06a0\u069d\3\2\2\2\u06a1")
        buf.write("\u06ae\3\2\2\2\u06a2\u06a4\7b\2\2\u06a3\u06a5\5> \2\u06a4")
        buf.write("\u06a3\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a4\3\2\2\2")
        buf.write("\u06a6\u06a7\3\2\2\2\u06a7\u06ab\3\2\2\2\u06a8\u06aa\5")
        buf.write("D#\2\u06a9\u06a8\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab\u06a9")
        buf.write("\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06af\3\2\2\2\u06ad")
        buf.write("\u06ab\3\2\2\2\u06ae\u06a2\3\2\2\2\u06ae\u06af\3\2\2\2")
        buf.write("\u06af\u06b0\3\2\2\2\u06b0\u06c4\7<\2\2\u06b1\u06b4\7")
        buf.write("h\2\2\u06b2\u06b3\7H\2\2\u06b3\u06b5\5&\24\2\u06b4\u06b2")
        buf.write("\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06be\3\2\2\2\u06b6")
        buf.write("\u06b7\7^\2\2\u06b7\u06ba\7h\2\2\u06b8\u06b9\7H\2\2\u06b9")
        buf.write("\u06bb\5&\24\2\u06ba\u06b8\3\2\2\2\u06ba\u06bb\3\2\2\2")
        buf.write("\u06bb\u06bd\3\2\2\2\u06bc\u06b6\3\2\2\2\u06bd\u06c0\3")
        buf.write("\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c2")
        buf.write("\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06c3\7^\2\2\u06c2")
        buf.write("\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5\3\2\2\2")
        buf.write("\u06c4\u06b1\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3")
        buf.write("\2\2\2\u06c6\u06c8\7=\2\2\u06c7\u0655\3\2\2\2\u06c7\u0656")
        buf.write("\3\2\2\2\u06c7\u0690\3\2\2\2\u06c8?\3\2\2\2\u06c9\u0712")
        buf.write("\5B\"\2\u06ca\u06ee\t\23\2\2\u06cb\u06cd\5D#\2\u06cc\u06cb")
        buf.write("\3\2\2\2\u06cd\u06d0\3\2\2\2\u06ce\u06cc\3\2\2\2\u06ce")
        buf.write("\u06cf\3\2\2\2\u06cf\u06d2\3\2\2\2\u06d0\u06ce\3\2\2\2")
        buf.write("\u06d1\u06d3\5\6\4\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3")
        buf.write("\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06ef\7h\2\2\u06d5\u06d7")
        buf.write("\5\6\4\2\u06d6\u06d8\7.\2\2\u06d7\u06d6\3\2\2\2\u06d7")
        buf.write("\u06d8\3\2\2\2\u06d8\u06da\3\2\2\2\u06d9\u06d5\3\2\2\2")
        buf.write("\u06d9\u06da\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\7")
        buf.write("h\2\2\u06dc\u06eb\7I\2\2\u06dd\u06df\5j\66\2\u06de\u06e0")
        buf.write("\7g\2\2\u06df\u06de\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0")
        buf.write("\u06e8\3\2\2\2\u06e1\u06e2\7^\2\2\u06e2\u06e4\5j\66\2")
        buf.write("\u06e3\u06e5\7g\2\2\u06e4\u06e3\3\2\2\2\u06e4\u06e5\3")
        buf.write("\2\2\2\u06e5\u06e7\3\2\2\2\u06e6\u06e1\3\2\2\2\u06e7\u06ea")
        buf.write("\3\2\2\2\u06e8\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9")
        buf.write("\u06ec\3\2\2\2\u06ea\u06e8\3\2\2\2\u06eb\u06dd\3\2\2\2")
        buf.write("\u06eb\u06ec\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ef\7")
        buf.write("J\2\2\u06ee\u06ce\3\2\2\2\u06ee\u06d9\3\2\2\2\u06ef\u0712")
        buf.write("\3\2\2\2\u06f0\u06f2\7\25\2\2\u06f1\u06f3\5\6\4\2\u06f2")
        buf.write("\u06f1\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f4\3\2\2\2")
        buf.write("\u06f4\u0712\7h\2\2\u06f5\u06f6\7\63\2\2\u06f6\u070e\5")
        buf.write("\6\4\2\u06f7\u070f\7h\2\2\u06f8\u06fa\7.\2\2\u06f9\u06f8")
        buf.write("\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb")
        buf.write("\u06fc\7h\2\2\u06fc\u070b\7I\2\2\u06fd\u06ff\5j\66\2\u06fe")
        buf.write("\u0700\7g\2\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2")
        buf.write("\u0700\u0708\3\2\2\2\u0701\u0702\7^\2\2\u0702\u0704\5")
        buf.write("j\66\2\u0703\u0705\7g\2\2\u0704\u0703\3\2\2\2\u0704\u0705")
        buf.write("\3\2\2\2\u0705\u0707\3\2\2\2\u0706\u0701\3\2\2\2\u0707")
        buf.write("\u070a\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2")
        buf.write("\u0709\u070c\3\2\2\2\u070a\u0708\3\2\2\2\u070b\u06fd\3")
        buf.write("\2\2\2\u070b\u070c\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070f")
        buf.write("\7J\2\2\u070e\u06f7\3\2\2\2\u070e\u06f9\3\2\2\2\u070f")
        buf.write("\u0712\3\2\2\2\u0710\u0712\7\r\2\2\u0711\u06c9\3\2\2\2")
        buf.write("\u0711\u06ca\3\2\2\2\u0711\u06f0\3\2\2\2\u0711\u06f5\3")
        buf.write("\2\2\2\u0711\u0710\3\2\2\2\u0712A\3\2\2\2\u0713\u0715")
        buf.write("\5\6\4\2\u0714\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715")
        buf.write("\u0716\3\2\2\2\u0716\u0729\7h\2\2\u0717\u0726\7I\2\2\u0718")
        buf.write("\u071a\5j\66\2\u0719\u071b\7g\2\2\u071a\u0719\3\2\2\2")
        buf.write("\u071a\u071b\3\2\2\2\u071b\u0723\3\2\2\2\u071c\u071d\7")
        buf.write("^\2\2\u071d\u071f\5j\66\2\u071e\u0720\7g\2\2\u071f\u071e")
        buf.write("\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0722\3\2\2\2\u0721")
        buf.write("\u071c\3\2\2\2\u0722\u0725\3\2\2\2\u0723\u0721\3\2\2\2")
        buf.write("\u0723\u0724\3\2\2\2\u0724\u0727\3\2\2\2\u0725\u0723\3")
        buf.write("\2\2\2\u0726\u0718\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0728")
        buf.write("\3\2\2\2\u0728\u072a\7J\2\2\u0729\u0717\3\2\2\2\u0729")
        buf.write("\u072a\3\2\2\2\u072a\u0751\3\2\2\2\u072b\u072c\5\6\4\2")
        buf.write("\u072c\u072d\7.\2\2\u072d\u072e\7h\2\2\u072e\u073d\7I")
        buf.write("\2\2\u072f\u0731\5j\66\2\u0730\u0732\7g\2\2\u0731\u0730")
        buf.write("\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u073a\3\2\2\2\u0733")
        buf.write("\u0734\7^\2\2\u0734\u0736\5j\66\2\u0735\u0737\7g\2\2\u0736")
        buf.write("\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0739\3\2\2\2")
        buf.write("\u0738\u0733\3\2\2\2\u0739\u073c\3\2\2\2\u073a\u0738\3")
        buf.write("\2\2\2\u073a\u073b\3\2\2\2\u073b\u073e\3\2\2\2\u073c\u073a")
        buf.write("\3\2\2\2\u073d\u072f\3\2\2\2\u073d\u073e\3\2\2\2\u073e")
        buf.write("\u073f\3\2\2\2\u073f\u0740\7J\2\2\u0740\u0751\3\2\2\2")
        buf.write("\u0741\u0751\t\24\2\2\u0742\u0743\7\20\2\2\u0743\u074d")
        buf.write("\78\2\2\u0744\u0749\5(\25\2\u0745\u0746\7^\2\2\u0746\u0748")
        buf.write("\5(\25\2\u0747\u0745\3\2\2\2\u0748\u074b\3\2\2\2\u0749")
        buf.write("\u0747\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074e\3\2\2\2")
        buf.write("\u074b\u0749\3\2\2\2\u074c\u074e\7\b\2\2\u074d\u0744\3")
        buf.write("\2\2\2\u074d\u074c\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0751")
        buf.write("\79\2\2\u0750\u0714\3\2\2\2\u0750\u072b\3\2\2\2\u0750")
        buf.write("\u0741\3\2\2\2\u0750\u0742\3\2\2\2\u0751C\3\2\2\2\u0752")
        buf.write("\u0753\7:\2\2\u0753\u0766\7:\2\2\u0754\u0757\7h\2\2\u0755")
        buf.write("\u0756\7c\2\2\u0756\u0758\7h\2\2\u0757\u0755\3\2\2\2\u0757")
        buf.write("\u0758\3\2\2\2\u0758\u0761\3\2\2\2\u0759\u075d\78\2\2")
        buf.write("\u075a\u075c\5F$\2\u075b\u075a\3\2\2\2\u075c\u075f\3\2")
        buf.write("\2\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0760")
        buf.write("\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0762\79\2\2\u0761")
        buf.write("\u0759\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764\3\2\2\2")
        buf.write("\u0763\u0765\7g\2\2\u0764\u0763\3\2\2\2\u0764\u0765\3")
        buf.write("\2\2\2\u0765\u0767\3\2\2\2\u0766\u0754\3\2\2\2\u0766\u0767")
        buf.write("\3\2\2\2\u0767\u077f\3\2\2\2\u0768\u077b\7^\2\2\u0769")
        buf.write("\u076c\7h\2\2\u076a\u076b\7c\2\2\u076b\u076d\7h\2\2\u076c")
        buf.write("\u076a\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u0776\3\2\2\2")
        buf.write("\u076e\u0772\78\2\2\u076f\u0771\5F$\2\u0770\u076f\3\2")
        buf.write("\2\2\u0771\u0774\3\2\2\2\u0772\u0770\3\2\2\2\u0772\u0773")
        buf.write("\3\2\2\2\u0773\u0775\3\2\2\2\u0774\u0772\3\2\2\2\u0775")
        buf.write("\u0777\79\2\2\u0776\u076e\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write("\u0777\u0779\3\2\2\2\u0778\u077a\7g\2\2\u0779\u0778\3")
        buf.write("\2\2\2\u0779\u077a\3\2\2\2\u077a\u077c\3\2\2\2\u077b\u0769")
        buf.write("\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077e\3\2\2\2\u077d")
        buf.write("\u0768\3\2\2\2\u077e\u0781\3\2\2\2\u077f\u077d\3\2\2\2")
        buf.write("\u077f\u0780\3\2\2\2\u0780\u0782\3\2\2\2\u0781\u077f\3")
        buf.write("\2\2\2\u0782\u0783\7;\2\2\u0783\u079d\7;\2\2\u0784\u0785")
        buf.write("\7\5\2\2\u0785\u0795\78\2\2\u0786\u0788\5> \2\u0787\u0786")
        buf.write("\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u0787\3\2\2\2\u0789")
        buf.write("\u078a\3\2\2\2\u078a\u078e\3\2\2\2\u078b\u078d\5D#\2\u078c")
        buf.write("\u078b\3\2\2\2\u078d\u0790\3\2\2\2\u078e\u078c\3\2\2\2")
        buf.write("\u078e\u078f\3\2\2\2\u078f\u0792\3\2\2\2\u0790\u078e\3")
        buf.write("\2\2\2\u0791\u0793\5N(\2\u0792\u0791\3\2\2\2\u0792\u0793")
        buf.write("\3\2\2\2\u0793\u0796\3\2\2\2\u0794\u0796\5&\24\2\u0795")
        buf.write("\u0787\3\2\2\2\u0795\u0794\3\2\2\2\u0796\u0798\3\2\2\2")
        buf.write("\u0797\u0799\7g\2\2\u0798\u0797\3\2\2\2\u0798\u0799\3")
        buf.write("\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\79\2\2\u079b\u079d")
        buf.write("\3\2\2\2\u079c\u0752\3\2\2\2\u079c\u0784\3\2\2\2\u079d")
        buf.write("E\3\2\2\2\u079e\u07a2\78\2\2\u079f\u07a1\5F$\2\u07a0\u079f")
        buf.write("\3\2\2\2\u07a1\u07a4\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a2")
        buf.write("\u07a3\3\2\2\2\u07a3\u07a5\3\2\2\2\u07a4\u07a2\3\2\2\2")
        buf.write("\u07a5\u07b7\79\2\2\u07a6\u07aa\7:\2\2\u07a7\u07a9\5F")
        buf.write("$\2\u07a8\u07a7\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8")
        buf.write("\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ad\3\2\2\2\u07ac")
        buf.write("\u07aa\3\2\2\2\u07ad\u07b7\7;\2\2\u07ae\u07b2\7<\2\2\u07af")
        buf.write("\u07b1\5F$\2\u07b0\u07af\3\2\2\2\u07b1\u07b4\3\2\2\2\u07b2")
        buf.write("\u07b0\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2")
        buf.write("\u07b4\u07b2\3\2\2\2\u07b5\u07b7\7=\2\2\u07b6\u079e\3")
        buf.write("\2\2\2\u07b6\u07a6\3\2\2\2\u07b6\u07ae\3\2\2\2\u07b7G")
        buf.write("\3\2\2\2\u07b8\u07f1\5J&\2\u07b9\u07bb\7g\2\2\u07ba\u07b9")
        buf.write("\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb\u07c0\3\2\2\2\u07bc")
        buf.write("\u07be\5\6\4\2\u07bd\u07bf\7.\2\2\u07be\u07bd\3\2\2\2")
        buf.write("\u07be\u07bf\3\2\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07bc\3")
        buf.write("\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c6")
        buf.write("\5\4\3\2\u07c3\u07c5\5D#\2\u07c4\u07c3\3\2\2\2\u07c5\u07c8")
        buf.write("\3\2\2\2\u07c6\u07c4\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7")
        buf.write("\u07ce\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c9\u07ca\78\2\2")
        buf.write("\u07ca\u07cb\5J&\2\u07cb\u07cc\79\2\2\u07cc\u07ce\3\2")
        buf.write("\2\2\u07cd\u07ba\3\2\2\2\u07cd\u07c9\3\2\2\2\u07ce\u07dd")
        buf.write("\3\2\2\2\u07cf\u07dc\5L\'\2\u07d0\u07d2\7:\2\2\u07d1\u07d3")
        buf.write("\5&\24\2\u07d2\u07d1\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3")
        buf.write("\u07d4\3\2\2\2\u07d4\u07d8\7;\2\2\u07d5\u07d7\5D#\2\u07d6")
        buf.write("\u07d5\3\2\2\2\u07d7\u07da\3\2\2\2\u07d8\u07d6\3\2\2\2")
        buf.write("\u07d8\u07d9\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da\u07d8\3")
        buf.write("\2\2\2\u07db\u07cf\3\2\2\2\u07db\u07d0\3\2\2\2\u07dc\u07df")
        buf.write("\3\2\2\2\u07dd\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07de")
        buf.write("\u07e0\3\2\2\2\u07df\u07dd\3\2\2\2\u07e0\u07e1\5L\'\2")
        buf.write("\u07e1\u07e3\7`\2\2\u07e2\u07e4\5@!\2\u07e3\u07e2\3\2")
        buf.write("\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6")
        buf.write("\3\2\2\2\u07e6\u07ea\3\2\2\2\u07e7\u07e9\5D#\2\u07e8\u07e7")
        buf.write("\3\2\2\2\u07e9\u07ec\3\2\2\2\u07ea\u07e8\3\2\2\2\u07ea")
        buf.write("\u07eb\3\2\2\2\u07eb\u07ee\3\2\2\2\u07ec\u07ea\3\2\2\2")
        buf.write("\u07ed\u07ef\5N(\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef\3\2")
        buf.write("\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07b8\3\2\2\2\u07f0\u07cd")
        buf.write("\3\2\2\2\u07f1I\3\2\2\2\u07f2\u07f4\7g\2\2\u07f3\u07f2")
        buf.write("\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f9\3\2\2\2\u07f5")
        buf.write("\u07f7\5\6\4\2\u07f6\u07f8\7.\2\2\u07f7\u07f6\3\2\2\2")
        buf.write("\u07f7\u07f8\3\2\2\2\u07f8\u07fa\3\2\2\2\u07f9\u07f5\3")
        buf.write("\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07ff")
        buf.write("\5\4\3\2\u07fc\u07fe\5D#\2\u07fd\u07fc\3\2\2\2\u07fe\u0801")
        buf.write("\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2\2\u0800")
        buf.write("\u0807\3\2\2\2\u0801\u07ff\3\2\2\2\u0802\u0803\78\2\2")
        buf.write("\u0803\u0804\5J&\2\u0804\u0805\79\2\2\u0805\u0807\3\2")
        buf.write("\2\2\u0806\u07f3\3\2\2\2\u0806\u0802\3\2\2\2\u0807\u0816")
        buf.write("\3\2\2\2\u0808\u0815\5L\'\2\u0809\u080b\7:\2\2\u080a\u080c")
        buf.write("\5&\24\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c")
        buf.write("\u080d\3\2\2\2\u080d\u0811\7;\2\2\u080e\u0810\5D#\2\u080f")
        buf.write("\u080e\3\2\2\2\u0810\u0813\3\2\2\2\u0811\u080f\3\2\2\2")
        buf.write("\u0811\u0812\3\2\2\2\u0812\u0815\3\2\2\2\u0813\u0811\3")
        buf.write("\2\2\2\u0814\u0808\3\2\2\2\u0814\u0809\3\2\2\2\u0815\u0818")
        buf.write("\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2\u0817")
        buf.write("\u0834\3\2\2\2\u0818\u0816\3\2\2\2\u0819\u081b\5\6\4\2")
        buf.write("\u081a\u0819\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c\3")
        buf.write("\2\2\2\u081c\u0820\7@\2\2\u081d\u081f\5D#\2\u081e\u081d")
        buf.write("\3\2\2\2\u081f\u0822\3\2\2\2\u0820\u081e\3\2\2\2\u0820")
        buf.write("\u0821\3\2\2\2\u0821\u0826\3\2\2\2\u0822\u0820\3\2\2\2")
        buf.write("\u0823\u0825\7\r\2\2\u0824\u0823\3\2\2\2\u0825\u0828\3")
        buf.write("\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0831")
        buf.write("\3\2\2\2\u0828\u0826\3\2\2\2\u0829\u082d\t\2\2\2\u082a")
        buf.write("\u082c\5D#\2\u082b\u082a\3\2\2\2\u082c\u082f\3\2\2\2\u082d")
        buf.write("\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0831\3\2\2\2")
        buf.write("\u082f\u082d\3\2\2\2\u0830\u081a\3\2\2\2\u0830\u0829\3")
        buf.write("\2\2\2\u0831\u0832\3\2\2\2\u0832\u0834\5J&\2\u0833\u0806")
        buf.write("\3\2\2\2\u0833\u0830\3\2\2\2\u0834K\3\2\2\2\u0835\u0841")
        buf.write("\78\2\2\u0836\u083b\5T+\2\u0837\u0838\7^\2\2\u0838\u083a")
        buf.write("\5T+\2\u0839\u0837\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839")
        buf.write("\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u083f\3\2\2\2\u083d")
        buf.write("\u083b\3\2\2\2\u083e\u0840\7^\2\2\u083f\u083e\3\2\2\2")
        buf.write("\u083f\u0840\3\2\2\2\u0840\u0842\3\2\2\2\u0841\u0836\3")
        buf.write("\2\2\2\u0841\u0842\3\2\2\2\u0842\u0844\3\2\2\2\u0843\u0845")
        buf.write("\7g\2\2\u0844\u0843\3\2\2\2\u0844\u0845\3\2\2\2\u0845")
        buf.write("\u0846\3\2\2\2\u0846\u084a\79\2\2\u0847\u0849\7\r\2\2")
        buf.write("\u0848\u0847\3\2\2\2\u0849\u084c\3\2\2\2\u084a\u0848\3")
        buf.write("\2\2\2\u084a\u084b\3\2\2\2\u084b\u084e\3\2\2\2\u084c\u084a")
        buf.write("\3\2\2\2\u084d\u084f\t\2\2\2\u084e\u084d\3\2\2\2\u084e")
        buf.write("\u084f\3\2\2\2\u084f\u0851\3\2\2\2\u0850\u0852\5p9\2\u0851")
        buf.write("\u0850\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0856\3\2\2\2")
        buf.write("\u0853\u0855\5D#\2\u0854\u0853\3\2\2\2\u0855\u0858\3\2")
        buf.write("\2\2\u0856\u0854\3\2\2\2\u0856\u0857\3\2\2\2\u0857M\3")
        buf.write("\2\2\2\u0858\u0856\3\2\2\2\u0859\u089c\5P)\2\u085a\u085c")
        buf.write("\5R*\2\u085b\u085a\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085d")
        buf.write("\3\2\2\2\u085d\u085e\5L\'\2\u085e\u0860\7`\2\2\u085f\u0861")
        buf.write("\5@!\2\u0860\u085f\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0860")
        buf.write("\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0867\3\2\2\2\u0864")
        buf.write("\u0866\5D#\2\u0865\u0864\3\2\2\2\u0866\u0869\3\2\2\2\u0867")
        buf.write("\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u086b\3\2\2\2")
        buf.write("\u0869\u0867\3\2\2\2\u086a\u086c\5N(\2\u086b\u086a\3\2")
        buf.write("\2\2\u086b\u086c\3\2\2\2\u086c\u089c\3\2\2\2\u086d\u086f")
        buf.write("\5\6\4\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086f")
        buf.write("\u0870\3\2\2\2\u0870\u0874\7@\2\2\u0871\u0873\5D#\2\u0872")
        buf.write("\u0871\3\2\2\2\u0873\u0876\3\2\2\2\u0874\u0872\3\2\2\2")
        buf.write("\u0874\u0875\3\2\2\2\u0875\u087a\3\2\2\2\u0876\u0874\3")
        buf.write("\2\2\2\u0877\u0879\7\r\2\2\u0878\u0877\3\2\2\2\u0879\u087c")
        buf.write("\3\2\2\2\u087a\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b")
        buf.write("\u0885\3\2\2\2\u087c\u087a\3\2\2\2\u087d\u0881\t\2\2\2")
        buf.write("\u087e\u0880\5D#\2\u087f\u087e\3\2\2\2\u0880\u0883\3\2")
        buf.write("\2\2\u0881\u087f\3\2\2\2\u0881\u0882\3\2\2\2\u0882\u0885")
        buf.write("\3\2\2\2\u0883\u0881\3\2\2\2\u0884\u086e\3\2\2\2\u0884")
        buf.write("\u087d\3\2\2\2\u0885\u0888\3\2\2\2\u0886\u0884\3\2\2\2")
        buf.write("\u0886\u0887\3\2\2\2\u0887\u0889\3\2\2\2\u0888\u0886\3")
        buf.write("\2\2\2\u0889\u0898\7g\2\2\u088a\u0897\5L\'\2\u088b\u088d")
        buf.write("\7:\2\2\u088c\u088e\5&\24\2\u088d\u088c\3\2\2\2\u088d")
        buf.write("\u088e\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0893\7;\2\2")
        buf.write("\u0890\u0892\5D#\2\u0891\u0890\3\2\2\2\u0892\u0895\3\2")
        buf.write("\2\2\u0893\u0891\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0897")
        buf.write("\3\2\2\2\u0895\u0893\3\2\2\2\u0896\u088a\3\2\2\2\u0896")
        buf.write("\u088b\3\2\2\2\u0897\u089a\3\2\2\2\u0898\u0896\3\2\2\2")
        buf.write("\u0898\u0899\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3")
        buf.write("\2\2\2\u089b\u0859\3\2\2\2\u089b\u085b\3\2\2\2\u089b\u0886")
        buf.write("\3\2\2\2\u089cO\3\2\2\2\u089d\u08bb\5R*\2\u089e\u08a0")
        buf.write("\5\6\4\2\u089f\u089e\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0")
        buf.write("\u08a1\3\2\2\2\u08a1\u08a5\7@\2\2\u08a2\u08a4\5D#\2\u08a3")
        buf.write("\u08a2\3\2\2\2\u08a4\u08a7\3\2\2\2\u08a5\u08a3\3\2\2\2")
        buf.write("\u08a5\u08a6\3\2\2\2\u08a6\u08ab\3\2\2\2\u08a7\u08a5\3")
        buf.write("\2\2\2\u08a8\u08aa\7\r\2\2\u08a9\u08a8\3\2\2\2\u08aa\u08ad")
        buf.write("\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac")
        buf.write("\u08b6\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ae\u08b2\t\2\2\2")
        buf.write("\u08af\u08b1\5D#\2\u08b0\u08af\3\2\2\2\u08b1\u08b4\3\2")
        buf.write("\2\2\u08b2\u08b0\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b6")
        buf.write("\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b5\u089f\3\2\2\2\u08b5")
        buf.write("\u08ae\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7\u08b9\5P)\2\u08b8")
        buf.write("\u08b7\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08bb\3\2\2\2")
        buf.write("\u08ba\u089d\3\2\2\2\u08ba\u08b5\3\2\2\2\u08bbQ\3\2\2")
        buf.write("\2\u08bc\u08bd\b*\1\2\u08bd\u08ce\5L\'\2\u08be\u08c0\7")
        buf.write(":\2\2\u08bf\u08c1\5&\24\2\u08c0\u08bf\3\2\2\2\u08c0\u08c1")
        buf.write("\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c6\7;\2\2\u08c3")
        buf.write("\u08c5\5D#\2\u08c4\u08c3\3\2\2\2\u08c5\u08c8\3\2\2\2\u08c6")
        buf.write("\u08c4\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08ce\3\2\2\2")
        buf.write("\u08c8\u08c6\3\2\2\2\u08c9\u08ca\78\2\2\u08ca\u08cb\5")
        buf.write("P)\2\u08cb\u08cc\79\2\2\u08cc\u08ce\3\2\2\2\u08cd\u08bc")
        buf.write("\3\2\2\2\u08cd\u08be\3\2\2\2\u08cd\u08c9\3\2\2\2\u08ce")
        buf.write("\u08e0\3\2\2\2\u08cf\u08dc\f\6\2\2\u08d0\u08dd\5L\'\2")
        buf.write("\u08d1\u08d3\7:\2\2\u08d2\u08d4\5&\24\2\u08d3\u08d2\3")
        buf.write("\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d9")
        buf.write("\7;\2\2\u08d6\u08d8\5D#\2\u08d7\u08d6\3\2\2\2\u08d8\u08db")
        buf.write("\3\2\2\2\u08d9\u08d7\3\2\2\2\u08d9\u08da\3\2\2\2\u08da")
        buf.write("\u08dd\3\2\2\2\u08db\u08d9\3\2\2\2\u08dc\u08d0\3\2\2\2")
        buf.write("\u08dc\u08d1\3\2\2\2\u08dd\u08df\3\2\2\2\u08de\u08cf\3")
        buf.write("\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08e1")
        buf.write("\3\2\2\2\u08e1S\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3\u08e5")
        buf.write("\5D#\2\u08e4\u08e3\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6\u08e4")
        buf.write("\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08ea\3\2\2\2\u08e8")
        buf.write("\u08e6\3\2\2\2\u08e9\u08eb\5<\37\2\u08ea\u08e9\3\2\2\2")
        buf.write("\u08eb\u08ec\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3")
        buf.write("\2\2\2\u08ed\u08f1\3\2\2\2\u08ee\u08f0\5D#\2\u08ef\u08ee")
        buf.write("\3\2\2\2\u08f0\u08f3\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1")
        buf.write("\u08f2\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3\u08f1\3\2\2\2")
        buf.write("\u08f4\u08f6\5H%\2\u08f5\u08f7\5N(\2\u08f6\u08f5\3\2\2")
        buf.write("\2\u08f6\u08f7\3\2\2\2\u08f7\u08fd\3\2\2\2\u08f8\u08fb")
        buf.write("\7H\2\2\u08f9\u08fc\5(\25\2\u08fa\u08fc\5Z.\2\u08fb\u08f9")
        buf.write("\3\2\2\2\u08fb\u08fa\3\2\2\2\u08fc\u08fe\3\2\2\2\u08fd")
        buf.write("\u08f8\3\2\2\2\u08fd\u08fe\3\2\2\2\u08feU\3\2\2\2\u08ff")
        buf.write("\u0900\7b\2\2\u0900\u0902\5f\64\2\u0901\u0903\7g\2\2\u0902")
        buf.write("\u0901\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u090b\3\2\2\2")
        buf.write("\u0904\u0905\7^\2\2\u0905\u0907\5f\64\2\u0906\u0908\7")
        buf.write("g\2\2\u0907\u0906\3\2\2\2\u0907\u0908\3\2\2\2\u0908\u090a")
        buf.write("\3\2\2\2\u0909\u0904\3\2\2\2\u090a\u090d\3\2\2\2\u090b")
        buf.write("\u0909\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u090f\3\2\2\2")
        buf.write("\u090d\u090b\3\2\2\2\u090e\u08ff\3\2\2\2\u090e\u090f\3")
        buf.write("\2\2\2\u090f\u0910\3\2\2\2\u0910\u0914\7<\2\2\u0911\u0913")
        buf.write("\5,\27\2\u0912\u0911\3\2\2\2\u0913\u0916\3\2\2\2\u0914")
        buf.write("\u0912\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u0917\3\2\2\2")
        buf.write("\u0916\u0914\3\2\2\2\u0917\u093b\7=\2\2\u0918\u0928\7")
        buf.write("\61\2\2\u0919\u091a\7b\2\2\u091a\u091c\5f\64\2\u091b\u091d")
        buf.write("\7g\2\2\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d")
        buf.write("\u0925\3\2\2\2\u091e\u091f\7^\2\2\u091f\u0921\5f\64\2")
        buf.write("\u0920\u0922\7g\2\2\u0921\u0920\3\2\2\2\u0921\u0922\3")
        buf.write("\2\2\2\u0922\u0924\3\2\2\2\u0923\u091e\3\2\2\2\u0924\u0927")
        buf.write("\3\2\2\2\u0925\u0923\3\2\2\2\u0925\u0926\3\2\2\2\u0926")
        buf.write("\u0929\3\2\2\2\u0927\u0925\3\2\2\2\u0928\u0919\3\2\2\2")
        buf.write("\u0928\u0929\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092e\7")
        buf.write("<\2\2\u092b\u092d\5,\27\2\u092c\u092b\3\2\2\2\u092d\u0930")
        buf.write("\3\2\2\2\u092e\u092c\3\2\2\2\u092e\u092f\3\2\2\2\u092f")
        buf.write("\u0931\3\2\2\2\u0930\u092e\3\2\2\2\u0931\u0933\7=\2\2")
        buf.write("\u0932\u0934\5n8\2\u0933\u0932\3\2\2\2\u0934\u0935\3\2")
        buf.write("\2\2\u0935\u0933\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u093b")
        buf.write("\3\2\2\2\u0937\u0938\7H\2\2\u0938\u0939\t\25\2\2\u0939")
        buf.write("\u093b\7d\2\2\u093a\u090e\3\2\2\2\u093a\u0918\3\2\2\2")
        buf.write("\u093a\u0937\3\2\2\2\u093bW\3\2\2\2\u093c\u093d\7H\2\2")
        buf.write("\u093d\u095a\5(\25\2\u093e\u0940\7H\2\2\u093f\u093e\3")
        buf.write("\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u095a")
        buf.write("\5Z.\2\u0942\u0945\78\2\2\u0943\u0946\5(\25\2\u0944\u0946")
        buf.write("\5Z.\2\u0945\u0943\3\2\2\2\u0945\u0944\3\2\2\2\u0946\u0948")
        buf.write("\3\2\2\2\u0947\u0949\7g\2\2\u0948\u0947\3\2\2\2\u0948")
        buf.write("\u0949\3\2\2\2\u0949\u0954\3\2\2\2\u094a\u094d\7^\2\2")
        buf.write("\u094b\u094e\5(\25\2\u094c\u094e\5Z.\2\u094d\u094b\3\2")
        buf.write("\2\2\u094d\u094c\3\2\2\2\u094e\u0950\3\2\2\2\u094f\u0951")
        buf.write("\7g\2\2\u0950\u094f\3\2\2\2\u0950\u0951\3\2\2\2\u0951")
        buf.write("\u0953\3\2\2\2\u0952\u094a\3\2\2\2\u0953\u0956\3\2\2\2")
        buf.write("\u0954\u0952\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0957\3")
        buf.write("\2\2\2\u0956\u0954\3\2\2\2\u0957\u0958\79\2\2\u0958\u095a")
        buf.write("\3\2\2\2\u0959\u093c\3\2\2\2\u0959\u093f\3\2\2\2\u0959")
        buf.write("\u0942\3\2\2\2\u095aY\3\2\2\2\u095b\u0973\7<\2\2\u095c")
        buf.write("\u095f\5(\25\2\u095d\u095f\5Z.\2\u095e\u095c\3\2\2\2\u095e")
        buf.write("\u095d\3\2\2\2\u095f\u0961\3\2\2\2\u0960\u0962\7g\2\2")
        buf.write("\u0961\u0960\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u096d\3")
        buf.write("\2\2\2\u0963\u0966\7^\2\2\u0964\u0967\5(\25\2\u0965\u0967")
        buf.write("\5Z.\2\u0966\u0964\3\2\2\2\u0966\u0965\3\2\2\2\u0967\u0969")
        buf.write("\3\2\2\2\u0968\u096a\7g\2\2\u0969\u0968\3\2\2\2\u0969")
        buf.write("\u096a\3\2\2\2\u096a\u096c\3\2\2\2\u096b\u0963\3\2\2\2")
        buf.write("\u096c\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e\3")
        buf.write("\2\2\2\u096e\u0971\3\2\2\2\u096f\u096d\3\2\2\2\u0970\u0972")
        buf.write("\7^\2\2\u0971\u0970\3\2\2\2\u0971\u0972\3\2\2\2\u0972")
        buf.write("\u0974\3\2\2\2\u0973\u095e\3\2\2\2\u0973\u0974\3\2\2\2")
        buf.write("\u0974\u0975\3\2\2\2\u0975\u0976\7=\2\2\u0976[\3\2\2\2")
        buf.write("\u0977\u0979\5D#\2\u0978\u0977\3\2\2\2\u0979\u097c\3\2")
        buf.write("\2\2\u097a\u0978\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u0988")
        buf.write("\3\2\2\2\u097c\u097a\3\2\2\2\u097d\u097f\5<\37\2\u097e")
        buf.write("\u097d\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u097e\3\2\2\2")
        buf.write("\u0980\u0981\3\2\2\2\u0981\u0985\3\2\2\2\u0982\u0984\5")
        buf.write("D#\2\u0983\u0982\3\2\2\2\u0984\u0987\3\2\2\2\u0985\u0983")
        buf.write("\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0989\3\2\2\2\u0987")
        buf.write("\u0985\3\2\2\2\u0988\u097e\3\2\2\2\u0988\u0989\3\2\2\2")
        buf.write("\u0989\u099a\3\2\2\2\u098a\u098b\5^\60\2\u098b\u098c\7")
        buf.write("^\2\2\u098c\u098d\5^\60\2\u098d\u098f\3\2\2\2\u098e\u098a")
        buf.write("\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0990\3\2\2\2\u0990")
        buf.write("\u099b\7d\2\2\u0991\u0995\5H%\2\u0992\u0994\t\17\2\2\u0993")
        buf.write("\u0992\3\2\2\2\u0994\u0997\3\2\2\2\u0995\u0993\3\2\2\2")
        buf.write("\u0995\u0996\3\2\2\2\u0996\u0998\3\2\2\2\u0997\u0995\3")
        buf.write("\2\2\2\u0998\u0999\5V,\2\u0999\u099b\3\2\2\2\u099a\u098e")
        buf.write("\3\2\2\2\u099a\u0991\3\2\2\2\u099b\u09d8\3\2\2\2\u099c")
        buf.write("\u099d\7+\2\2\u099d\u099e\78\2\2\u099e\u099f\5&\24\2\u099f")
        buf.write("\u09a0\7^\2\2\u09a0\u09a1\7p\2\2\u09a1\u09a2\79\2\2\u09a2")
        buf.write("\u09a3\7d\2\2\u09a3\u09d8\3\2\2\2\u09a4\u09a5\7.\2\2\u09a5")
        buf.write("\u09a6\7I\2\2\u09a6\u09ab\5h\65\2\u09a7\u09a8\7^\2\2\u09a8")
        buf.write("\u09aa\5h\65\2\u09a9\u09a7\3\2\2\2\u09aa\u09ad\3\2\2\2")
        buf.write("\u09ab\u09a9\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09ae\3")
        buf.write("\2\2\2\u09ad\u09ab\3\2\2\2\u09ae\u09af\7J\2\2\u09af\u09b0")
        buf.write("\5\66\34\2\u09b0\u09d8\3\2\2\2\u09b1\u09d0\7\65\2\2\u09b2")
        buf.write("\u09b4\7\63\2\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2")
        buf.write("\2\u09b4\u09b5\3\2\2\2\u09b5\u09b8\5\6\4\2\u09b6\u09b8")
        buf.write("\7c\2\2\u09b7\u09b3\3\2\2\2\u09b7\u09b6\3\2\2\2\u09b8")
        buf.write("\u09b9\3\2\2\2\u09b9\u09d1\5\4\3\2\u09ba\u09be\7h\2\2")
        buf.write("\u09bb\u09bd\5D#\2\u09bc\u09bb\3\2\2\2\u09bd\u09c0\3\2")
        buf.write("\2\2\u09be\u09bc\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c1")
        buf.write("\3\2\2\2\u09c0\u09be\3\2\2\2\u09c1\u09c3\7H\2\2\u09c2")
        buf.write("\u09c4\5> \2\u09c3\u09c2\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5")
        buf.write("\u09c3\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09ca\3\2\2\2")
        buf.write("\u09c7\u09c9\5D#\2\u09c8\u09c7\3\2\2\2\u09c9\u09cc\3\2")
        buf.write("\2\2\u09ca\u09c8\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb\u09ce")
        buf.write("\3\2\2\2\u09cc\u09ca\3\2\2\2\u09cd\u09cf\5N(\2\u09ce\u09cd")
        buf.write("\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d1\3\2\2\2\u09d0")
        buf.write("\u09b7\3\2\2\2\u09d0\u09ba\3\2\2\2\u09d1\u09d2\3\2\2\2")
        buf.write("\u09d2\u09d3\7d\2\2\u09d3\u09d8\3\2\2\2\u09d4\u09d8\7")
        buf.write("d\2\2\u09d5\u09d6\7&\2\2\u09d6\u09d8\7b\2\2\u09d7\u097a")
        buf.write("\3\2\2\2\u09d7\u099c\3\2\2\2\u09d7\u09a4\3\2\2\2\u09d7")
        buf.write("\u09b1\3\2\2\2\u09d7\u09d4\3\2\2\2\u09d7\u09d5\3\2\2\2")
        buf.write("\u09d8\u09da\3\2\2\2\u09d9\u09db\5\\/\2\u09da\u09d9\3")
        buf.write("\2\2\2\u09da\u09db\3\2\2\2\u09db]\3\2\2\2\u09dc\u09ee")
        buf.write("\5H%\2\u09dd\u09df\t\17\2\2\u09de\u09dd\3\2\2\2\u09df")
        buf.write("\u09e2\3\2\2\2\u09e0\u09de\3\2\2\2\u09e0\u09e1\3\2\2\2")
        buf.write("\u09e1\u09e4\3\2\2\2\u09e2\u09e0\3\2\2\2\u09e3\u09e5\5")
        buf.write("`\61\2\u09e4\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09ef")
        buf.write("\3\2\2\2\u09e6\u09e7\7H\2\2\u09e7\u09ed\5(\25\2\u09e8")
        buf.write("\u09ea\7H\2\2\u09e9\u09e8\3\2\2\2\u09e9\u09ea\3\2\2\2")
        buf.write("\u09ea\u09eb\3\2\2\2\u09eb\u09ed\5Z.\2\u09ec\u09e6\3\2")
        buf.write("\2\2\u09ec\u09e9\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ef")
        buf.write("\3\2\2\2\u09ee\u09e0\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ef")
        buf.write("\u09fc\3\2\2\2\u09f0\u09f2\7h\2\2\u09f1\u09f0\3\2\2\2")
        buf.write("\u09f1\u09f2\3\2\2\2\u09f2\u09f6\3\2\2\2\u09f3\u09f5\5")
        buf.write("D#\2\u09f4\u09f3\3\2\2\2\u09f5\u09f8\3\2\2\2\u09f6\u09f4")
        buf.write("\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f9\3\2\2\2\u09f8")
        buf.write("\u09f6\3\2\2\2\u09f9\u09fa\7b\2\2\u09fa\u09fc\5&\24\2")
        buf.write("\u09fb\u09dc\3\2\2\2\u09fb\u09f1\3\2\2\2\u09fc_\3\2\2")
        buf.write("\2\u09fd\u09fe\7H\2\2\u09fe\u09ff\7k\2\2\u09ff\u0a00\b")
        buf.write("\61\1\2\u0a00a\3\2\2\2\u0a01\u0a03\5D#\2\u0a02\u0a01\3")
        buf.write("\2\2\2\u0a03\u0a06\3\2\2\2\u0a04\u0a02\3\2\2\2\u0a04\u0a05")
        buf.write("\3\2\2\2\u0a05\u0a0f\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a07")
        buf.write("\u0a09\7\66\2\2\u0a08\u0a0a\7&\2\2\u0a09\u0a08\3\2\2\2")
        buf.write("\u0a09\u0a0a\3\2\2\2\u0a0a\u0a10\3\2\2\2\u0a0b\u0a0d\7")
        buf.write("&\2\2\u0a0c\u0a0e\7\66\2\2\u0a0d\u0a0c\3\2\2\2\u0a0d\u0a0e")
        buf.write("\3\2\2\2\u0a0e\u0a10\3\2\2\2\u0a0f\u0a07\3\2\2\2\u0a0f")
        buf.write("\u0a0b\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2")
        buf.write("\u0a11\u0a12\5d\63\2\u0a12c\3\2\2\2\u0a13\u0a15\5\6\4")
        buf.write("\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16")
        buf.write("\3\2\2\2\u0a16\u0a29\7h\2\2\u0a17\u0a26\7I\2\2\u0a18\u0a1a")
        buf.write("\5j\66\2\u0a19\u0a1b\7g\2\2\u0a1a\u0a19\3\2\2\2\u0a1a")
        buf.write("\u0a1b\3\2\2\2\u0a1b\u0a23\3\2\2\2\u0a1c\u0a1d\7^\2\2")
        buf.write("\u0a1d\u0a1f\5j\66\2\u0a1e\u0a20\7g\2\2\u0a1f\u0a1e\3")
        buf.write("\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a22\3\2\2\2\u0a21\u0a1c")
        buf.write("\3\2\2\2\u0a22\u0a25\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a23")
        buf.write("\u0a24\3\2\2\2\u0a24\u0a27\3\2\2\2\u0a25\u0a23\3\2\2\2")
        buf.write("\u0a26\u0a18\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27\u0a28\3")
        buf.write("\2\2\2\u0a28\u0a2a\7J\2\2\u0a29\u0a17\3\2\2\2\u0a29\u0a2a")
        buf.write("\3\2\2\2\u0a2a\u0a3a\3\2\2\2\u0a2b\u0a2c\7\20\2\2\u0a2c")
        buf.write("\u0a36\78\2\2\u0a2d\u0a32\5(\25\2\u0a2e\u0a2f\7^\2\2\u0a2f")
        buf.write("\u0a31\5(\25\2\u0a30\u0a2e\3\2\2\2\u0a31\u0a34\3\2\2\2")
        buf.write("\u0a32\u0a30\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a37\3")
        buf.write("\2\2\2\u0a34\u0a32\3\2\2\2\u0a35\u0a37\7\b\2\2\u0a36\u0a2d")
        buf.write("\3\2\2\2\u0a36\u0a35\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38")
        buf.write("\u0a3a\79\2\2\u0a39\u0a14\3\2\2\2\u0a39\u0a2b\3\2\2\2")
        buf.write("\u0a3ae\3\2\2\2\u0a3b\u0a3e\5d\63\2\u0a3c\u0a3e\7h\2\2")
        buf.write("\u0a3d\u0a3b\3\2\2\2\u0a3d\u0a3c\3\2\2\2\u0a3e\u0a58\3")
        buf.write("\2\2\2\u0a3f\u0a54\78\2\2\u0a40\u0a43\5(\25\2\u0a41\u0a43")
        buf.write("\5Z.\2\u0a42\u0a40\3\2\2\2\u0a42\u0a41\3\2\2\2\u0a43\u0a45")
        buf.write("\3\2\2\2\u0a44\u0a46\7g\2\2\u0a45\u0a44\3\2\2\2\u0a45")
        buf.write("\u0a46\3\2\2\2\u0a46\u0a51\3\2\2\2\u0a47\u0a4a\7^\2\2")
        buf.write("\u0a48\u0a4b\5(\25\2\u0a49\u0a4b\5Z.\2\u0a4a\u0a48\3\2")
        buf.write("\2\2\u0a4a\u0a49\3\2\2\2\u0a4b\u0a4d\3\2\2\2\u0a4c\u0a4e")
        buf.write("\7g\2\2\u0a4d\u0a4c\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e")
        buf.write("\u0a50\3\2\2\2\u0a4f\u0a47\3\2\2\2\u0a50\u0a53\3\2\2\2")
        buf.write("\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a55\3")
        buf.write("\2\2\2\u0a53\u0a51\3\2\2\2\u0a54\u0a42\3\2\2\2\u0a54\u0a55")
        buf.write("\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56\u0a59\79\2\2\u0a57")
        buf.write("\u0a59\5Z.\2\u0a58\u0a3f\3\2\2\2\u0a58\u0a57\3\2\2\2\u0a59")
        buf.write("g\3\2\2\2\u0a5a\u0a73\t\26\2\2\u0a5b\u0a5d\7g\2\2\u0a5c")
        buf.write("\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5f\3\2\2\2")
        buf.write("\u0a5e\u0a60\7h\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3")
        buf.write("\2\2\2\u0a60\u0a74\3\2\2\2\u0a61\u0a63\7h\2\2\u0a62\u0a61")
        buf.write("\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64")
        buf.write("\u0a66\7H\2\2\u0a65\u0a67\5> \2\u0a66\u0a65\3\2\2\2\u0a67")
        buf.write("\u0a68\3\2\2\2\u0a68\u0a66\3\2\2\2\u0a68\u0a69\3\2\2\2")
        buf.write("\u0a69\u0a6d\3\2\2\2\u0a6a\u0a6c\5D#\2\u0a6b\u0a6a\3\2")
        buf.write("\2\2\u0a6c\u0a6f\3\2\2\2\u0a6d\u0a6b\3\2\2\2\u0a6d\u0a6e")
        buf.write("\3\2\2\2\u0a6e\u0a71\3\2\2\2\u0a6f\u0a6d\3\2\2\2\u0a70")
        buf.write("\u0a72\5N(\2\u0a71\u0a70\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72")
        buf.write("\u0a74\3\2\2\2\u0a73\u0a5c\3\2\2\2\u0a73\u0a62\3\2\2\2")
        buf.write("\u0a74\u0a96\3\2\2\2\u0a75\u0a76\7.\2\2\u0a76\u0a77\7")
        buf.write("I\2\2\u0a77\u0a7c\5h\65\2\u0a78\u0a79\7^\2\2\u0a79\u0a7b")
        buf.write("\5h\65\2\u0a7a\u0a78\3\2\2\2\u0a7b\u0a7e\3\2\2\2\u0a7c")
        buf.write("\u0a7a\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7f\3\2\2\2")
        buf.write("\u0a7e\u0a7c\3\2\2\2\u0a7f\u0a80\7J\2\2\u0a80\u0a92\7")
        buf.write("\f\2\2\u0a81\u0a83\7g\2\2\u0a82\u0a81\3\2\2\2\u0a82\u0a83")
        buf.write("\3\2\2\2\u0a83\u0a85\3\2\2\2\u0a84\u0a86\7h\2\2\u0a85")
        buf.write("\u0a84\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a93\3\2\2\2")
        buf.write("\u0a87\u0a89\7h\2\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3")
        buf.write("\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8f\7H\2\2\u0a8b\u0a8d")
        buf.write("\5\6\4\2\u0a8c\u0a8e\7.\2\2\u0a8d\u0a8c\3\2\2\2\u0a8d")
        buf.write("\u0a8e\3\2\2\2\u0a8e\u0a90\3\2\2\2\u0a8f\u0a8b\3\2\2\2")
        buf.write("\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a93\5")
        buf.write("\4\3\2\u0a92\u0a82\3\2\2\2\u0a92\u0a88\3\2\2\2\u0a93\u0a96")
        buf.write("\3\2\2\2\u0a94\u0a96\5T+\2\u0a95\u0a5a\3\2\2\2\u0a95\u0a75")
        buf.write("\3\2\2\2\u0a95\u0a94\3\2\2\2\u0a96i\3\2\2\2\u0a97\u0a99")
        buf.write("\5> \2\u0a98\u0a97\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a98")
        buf.write("\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9f\3\2\2\2\u0a9c")
        buf.write("\u0a9e\5D#\2\u0a9d\u0a9c\3\2\2\2\u0a9e\u0aa1\3\2\2\2\u0a9f")
        buf.write("\u0a9d\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa3\3\2\2\2")
        buf.write("\u0aa1\u0a9f\3\2\2\2\u0aa2\u0aa4\5N(\2\u0aa3\u0aa2\3\2")
        buf.write("\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aae\3\2\2\2\u0aa5\u0aae")
        buf.write("\5&\24\2\u0aa6\u0aa8\5\6\4\2\u0aa7\u0aa9\7.\2\2\u0aa8")
        buf.write("\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aab\3\2\2\2")
        buf.write("\u0aaa\u0aa6\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aac\3")
        buf.write("\2\2\2\u0aac\u0aae\5\4\3\2\u0aad\u0a98\3\2\2\2\u0aad\u0aa5")
        buf.write("\3\2\2\2\u0aad\u0aaa\3\2\2\2\u0aaek\3\2\2\2\u0aaf\u0ab0")
        buf.write("\7\61\2\2\u0ab0\u0ab4\7<\2\2\u0ab1\u0ab3\5,\27\2\u0ab2")
        buf.write("\u0ab1\3\2\2\2\u0ab3\u0ab6\3\2\2\2\u0ab4\u0ab2\3\2\2\2")
        buf.write("\u0ab4\u0ab5\3\2\2\2\u0ab5\u0ab7\3\2\2\2\u0ab6\u0ab4\3")
        buf.write("\2\2\2\u0ab7\u0ab9\7=\2\2\u0ab8\u0aba\5n8\2\u0ab9\u0ab8")
        buf.write("\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0ab9\3\2\2\2\u0abb")
        buf.write("\u0abc\3\2\2\2\u0abcm\3\2\2\2\u0abd\u0abe\7\13\2\2\u0abe")
        buf.write("\u0ad7\78\2\2\u0abf\u0ac1\5D#\2\u0ac0\u0abf\3\2\2\2\u0ac1")
        buf.write("\u0ac4\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2\2\2")
        buf.write("\u0ac3\u0ac6\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac5\u0ac7\5")
        buf.write("> \2\u0ac6\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac6")
        buf.write("\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0acd\3\2\2\2\u0aca")
        buf.write("\u0acc\5D#\2\u0acb\u0aca\3\2\2\2\u0acc\u0acf\3\2\2\2\u0acd")
        buf.write("\u0acb\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0ad4\3\2\2\2")
        buf.write("\u0acf\u0acd\3\2\2\2\u0ad0\u0ad5\5H%\2\u0ad1\u0ad3\5N")
        buf.write("(\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad5")
        buf.write("\3\2\2\2\u0ad4\u0ad0\3\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad5")
        buf.write("\u0ad8\3\2\2\2\u0ad6\u0ad8\7g\2\2\u0ad7\u0ac2\3\2\2\2")
        buf.write("\u0ad7\u0ad6\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0ada\7")
        buf.write("9\2\2\u0ada\u0ade\7<\2\2\u0adb\u0add\5,\27\2\u0adc\u0adb")
        buf.write("\3\2\2\2\u0add\u0ae0\3\2\2\2\u0ade\u0adc\3\2\2\2\u0ade")
        buf.write("\u0adf\3\2\2\2\u0adf\u0ae1\3\2\2\2\u0ae0\u0ade\3\2\2\2")
        buf.write("\u0ae1\u0ae2\7=\2\2\u0ae2o\3\2\2\2\u0ae3\u0ae4\7\60\2")
        buf.write("\2\u0ae4\u0b0d\78\2\2\u0ae5\u0ae7\5> \2\u0ae6\u0ae5\3")
        buf.write("\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0ae6\3\2\2\2\u0ae8\u0ae9")
        buf.write("\3\2\2\2\u0ae9\u0aed\3\2\2\2\u0aea\u0aec\5D#\2\u0aeb\u0aea")
        buf.write("\3\2\2\2\u0aec\u0aef\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aed")
        buf.write("\u0aee\3\2\2\2\u0aee\u0af1\3\2\2\2\u0aef\u0aed\3\2\2\2")
        buf.write("\u0af0\u0af2\5N(\2\u0af1\u0af0\3\2\2\2\u0af1\u0af2\3\2")
        buf.write("\2\2\u0af2\u0af4\3\2\2\2\u0af3\u0af5\7g\2\2\u0af4\u0af3")
        buf.write("\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0b0a\3\2\2\2\u0af6")
        buf.write("\u0af8\7^\2\2\u0af7\u0af9\5> \2\u0af8\u0af7\3\2\2\2\u0af9")
        buf.write("\u0afa\3\2\2\2\u0afa\u0af8\3\2\2\2\u0afa\u0afb\3\2\2\2")
        buf.write("\u0afb\u0aff\3\2\2\2\u0afc\u0afe\5D#\2\u0afd\u0afc\3\2")
        buf.write("\2\2\u0afe\u0b01\3\2\2\2\u0aff\u0afd\3\2\2\2\u0aff\u0b00")
        buf.write("\3\2\2\2\u0b00\u0b03\3\2\2\2\u0b01\u0aff\3\2\2\2\u0b02")
        buf.write("\u0b04\5N(\2\u0b03\u0b02\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04")
        buf.write("\u0b06\3\2\2\2\u0b05\u0b07\7g\2\2\u0b06\u0b05\3\2\2\2")
        buf.write("\u0b06\u0b07\3\2\2\2\u0b07\u0b09\3\2\2\2\u0b08\u0af6\3")
        buf.write("\2\2\2\u0b09\u0b0c\3\2\2\2\u0b0a\u0b08\3\2\2\2\u0b0a\u0b0b")
        buf.write("\3\2\2\2\u0b0b\u0b0e\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0d")
        buf.write("\u0ae6\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b0f\3\2\2\2")
        buf.write("\u0b0f\u0b18\79\2\2\u0b10\u0b15\7\"\2\2\u0b11\u0b12\7")
        buf.write("8\2\2\u0b12\u0b13\5&\24\2\u0b13\u0b14\79\2\2\u0b14\u0b16")
        buf.write("\3\2\2\2\u0b15\u0b11\3\2\2\2\u0b15\u0b16\3\2\2\2\u0b16")
        buf.write("\u0b18\3\2\2\2\u0b17\u0ae3\3\2\2\2\u0b17\u0b10\3\2\2\2")
        buf.write("\u0b18q\3\2\2\2\u0b19\u0b2a\t\27\2\2\u0b1a\u0b1b\7!\2")
        buf.write("\2\u0b1b\u0b1c\7:\2\2\u0b1c\u0b2a\7;\2\2\u0b1d\u0b1e\7")
        buf.write("\22\2\2\u0b1e\u0b1f\7:\2\2\u0b1f\u0b2a\7;\2\2\u0b20\u0b21")
        buf.write("\7J\2\2\u0b21\u0b23\7J\2\2\u0b22\u0b24\7H\2\2\u0b23\u0b22")
        buf.write("\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b2a\3\2\2\2\u0b25")
        buf.write("\u0b26\78\2\2\u0b26\u0b2a\79\2\2\u0b27\u0b28\7:\2\2\u0b28")
        buf.write("\u0b2a\7;\2\2\u0b29\u0b19\3\2\2\2\u0b29\u0b1a\3\2\2\2")
        buf.write("\u0b29\u0b1d\3\2\2\2\u0b29\u0b20\3\2\2\2\u0b29\u0b25\3")
        buf.write("\2\2\2\u0b29\u0b27\3\2\2\2\u0b2as\3\2\2\2\u022fw\u0080")
        buf.write("\u0085\u0089\u008f\u0095\u009c\u009f\u00a1\u00a9\u00ae")
        buf.write("\u00b2\u00b5\u00b8\u00c1\u00c5\u00c8\u00d0\u00d2\u00d7")
        buf.write("\u00dc\u00e0\u00e3\u00e6\u00e8\u00ee\u00f3\u00f7\u00fa")
        buf.write("\u00fd\u0106\u010a\u010d\u0112\u0118\u011d\u0121\u0124")
        buf.write("\u0127\u012b\u0136\u013a\u013c\u013f\u0143\u0146\u014b")
        buf.write("\u0152\u0157\u015b\u015d\u0161\u0165\u0167\u016b\u0171")
        buf.write("\u0176\u017a\u017d\u0180\u0183\u018b\u0190\u0194\u0197")
        buf.write("\u019c\u01a3\u01a8\u01ac\u01af\u01b2\u01bc\u01c0\u01c3")
        buf.write("\u01cb\u01cf\u01d6\u01d9\u01de\u01e1\u01e5\u01e8\u01eb")
        buf.write("\u01ed\u01f3\u01f5\u01fd\u0200\u0204\u0207\u020a\u020e")
        buf.write("\u0212\u0215\u0218\u021c\u021f\u0223\u0229\u0232\u0238")
        buf.write("\u023d\u0241\u0244\u0247\u0249\u024e\u0251\u0256\u0259")
        buf.write("\u025d\u0260\u0264\u026b\u0270\u0274\u0278\u0280\u028c")
        buf.write("\u0292\u0297\u029b\u029d\u02a1\u02a6\u02a9\u02b2\u02b5")
        buf.write("\u02c1\u02c6\u02ca\u02d0\u02d3\u02e0\u02e5\u02e9\u02f4")
        buf.write("\u02fb\u0302\u0307\u030b\u0311\u0316\u0320\u0326\u032a")
        buf.write("\u0330\u0333\u0338\u033b\u033f\u0344\u0349\u034e\u0352")
        buf.write("\u0358\u035d\u0361\u0365\u036a\u036d\u0372\u0375\u0379")
        buf.write("\u037c\u0380\u0383\u0389\u038f\u0396\u0399\u039c\u03a4")
        buf.write("\u03ab\u03b4\u03b9\u03bc\u03bf\u03c4\u03ca\u03cf\u03d3")
        buf.write("\u03d9\u03e3\u03e8\u03ec\u03f2\u0400\u0406\u040b\u040f")
        buf.write("\u0415\u041b\u0424\u0429\u042d\u0433\u0441\u0447\u044c")
        buf.write("\u0450\u0456\u045c\u0461\u046c\u0476\u0485\u048b\u0491")
        buf.write("\u0493\u049c\u04a2\u04a7\u04b1\u04ba\u04bd\u04c4\u04ce")
        buf.write("\u04d9\u04e6\u04e9\u04ed\u04f0\u04f8\u04fb\u0500\u0506")
        buf.write("\u050b\u0515\u0519\u051b\u0526\u0529\u052c\u052e\u0533")
        buf.write("\u0536\u053b\u0548\u054e\u0554\u0559\u0560\u0563\u0565")
        buf.write("\u056f\u0575\u057a\u057d\u0583\u0589\u0592\u0595\u0598")
        buf.write("\u05a1\u05a5\u05a7\u05ad\u05b1\u05bb\u05c3\u05c6\u05cb")
        buf.write("\u05cf\u05d6\u05dd\u05e2\u05e6\u05e8\u05f3\u05f8\u0600")
        buf.write("\u0605\u0608\u060a\u060d\u0612\u0617\u061a\u061e\u0623")
        buf.write("\u0627\u062a\u0630\u0635\u063a\u063d\u0641\u0646\u064a")
        buf.write("\u064f\u0653\u065a\u065e\u0664\u0669\u066d\u0670\u0673")
        buf.write("\u0676\u0678\u067d\u0682\u0686\u0689\u068d\u0692\u0697")
        buf.write("\u069b\u06a0\u06a6\u06ab\u06ae\u06b4\u06ba\u06be\u06c2")
        buf.write("\u06c4\u06c7\u06ce\u06d2\u06d7\u06d9\u06df\u06e4\u06e8")
        buf.write("\u06eb\u06ee\u06f2\u06f9\u06ff\u0704\u0708\u070b\u070e")
        buf.write("\u0711\u0714\u071a\u071f\u0723\u0726\u0729\u0731\u0736")
        buf.write("\u073a\u073d\u0749\u074d\u0750\u0757\u075d\u0761\u0764")
        buf.write("\u0766\u076c\u0772\u0776\u0779\u077b\u077f\u0789\u078e")
        buf.write("\u0792\u0795\u0798\u079c\u07a2\u07aa\u07b2\u07b6\u07ba")
        buf.write("\u07be\u07c0\u07c6\u07cd\u07d2\u07d8\u07db\u07dd\u07e5")
        buf.write("\u07ea\u07ee\u07f0\u07f3\u07f7\u07f9\u07ff\u0806\u080b")
        buf.write("\u0811\u0814\u0816\u081a\u0820\u0826\u082d\u0830\u0833")
        buf.write("\u083b\u083f\u0841\u0844\u084a\u084e\u0851\u0856\u085b")
        buf.write("\u0862\u0867\u086b\u086e\u0874\u087a\u0881\u0884\u0886")
        buf.write("\u088d\u0893\u0896\u0898\u089b\u089f\u08a5\u08ab\u08b2")
        buf.write("\u08b5\u08b8\u08ba\u08c0\u08c6\u08cd\u08d3\u08d9\u08dc")
        buf.write("\u08e0\u08e6\u08ec\u08f1\u08f6\u08fb\u08fd\u0902\u0907")
        buf.write("\u090b\u090e\u0914\u091c\u0921\u0925\u0928\u092e\u0935")
        buf.write("\u093a\u093f\u0945\u0948\u094d\u0950\u0954\u0959\u095e")
        buf.write("\u0961\u0966\u0969\u096d\u0971\u0973\u097a\u0980\u0985")
        buf.write("\u0988\u098e\u0995\u099a\u09ab\u09b3\u09b7\u09be\u09c5")
        buf.write("\u09ca\u09ce\u09d0\u09d7\u09da\u09e0\u09e4\u09e9\u09ec")
        buf.write("\u09ee\u09f1\u09f6\u09fb\u0a04\u0a09\u0a0d\u0a0f\u0a14")
        buf.write("\u0a1a\u0a1f\u0a23\u0a26\u0a29\u0a32\u0a36\u0a39\u0a3d")
        buf.write("\u0a42\u0a45\u0a4a\u0a4d\u0a51\u0a54\u0a58\u0a5c\u0a5f")
        buf.write("\u0a62\u0a68\u0a6d\u0a71\u0a73\u0a7c\u0a82\u0a85\u0a88")
        buf.write("\u0a8d\u0a8f\u0a92\u0a95\u0a9a\u0a9f\u0aa3\u0aa8\u0aaa")
        buf.write("\u0aad\u0ab4\u0abb\u0ac2\u0ac8\u0acd\u0ad2\u0ad4\u0ad7")
        buf.write("\u0ade\u0ae8\u0aed\u0af1\u0af4\u0afa\u0aff\u0b03\u0b06")
        buf.write("\u0b0a\u0b0d\u0b15\u0b17\u0b23\u0b29")
        return buf.getvalue()


class CPP14Parser(InterruptibleParser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'break'", "'case'",
                    "'catch'", "'class'", "<INVALID>", "<INVALID>", "'continue'",
                    "'decltype'", "'default'", "'delete'", "'do'", "'else'",
                    "'enum'", "'export'", "'extern'", "<INVALID>", "'final'",
                    "'for'", "'goto'", "'if'", "'inline'", "<INVALID>",
                    "'mutable'", "'namespace'", "'new'", "'noexcept'",
                    "'nullptr'", "'operator'", "'override'", "<INVALID>",
                    "<INVALID>", "'return'", "<INVALID>", "'sizeof'", "'static_assert'",
                    "'struct'", "'switch'", "'template'", "'this'", "'throw'",
                    "'try'", "'typeid'", "'typename'", "'union'", "'using'",
                    "'virtual'", "'while'", "'('", "')'", "'['", "']'",
                    "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
                    "'&'", "'|'", "'~'", "'!'", "'='", "'<'", "'>'", "'+='",
                    "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='",
                    "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'",
                    "'||'", "'++'", "'--'", "'?:'", "','", "'->*'", "'->'",
                    "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Break", "Case", "Catch",
                     "Class", "ConstOrVolatile", "Cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Else", "Enum", "Export",
                     "Extern", "TrueFalse", "Final", "For", "Goto", "If",
                     "Inline", "Types", "Mutable", "Namespace", "New",
                     "Noexcept", "Nullptr", "Operator", "Override", "PrivateProtectedPublic",
                     "Specifier", "Return", "SignedUnsigned", "Sizeof",
                     "Static_assert", "Struct", "Switch", "Template", "This",
                     "Throw", "Try", "Typeid", "Typename", "Union", "Using",
                     "Virtual", "While", "LeftParen", "RightParen", "LeftBracket",
                     "RightBracket", "LeftBrace", "RightBrace", "Plus",
                     "Minus", "Star", "Div", "Mod", "Caret", "And", "Or",
                     "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign",
                     "MinusAssign", "StarAssign", "DivAssign", "ModAssign",
                     "XorAssign", "AndAssign", "OrAssign", "LeftShift",
                     "LeftShiftAssign", "Equal", "NotEqual", "LessEqual",
                     "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus",
                     "UnaryCondition", "Comma", "ArrowStar", "Arrow", "Question",
                     "Colon", "Doublecolon", "Semi", "Dot", "DotStar",
                     "Ellipsis", "Identifier", "Numberliteral", "Decimalliteral",
                     "Octalliteral", "Hexadecimalliteral", "Binaryliteral",
                     "Integersuffix", "Characterliteral", "Stringliteral",
                     "Userdefinedliteral", "Userdefinedstringliteral",
                     "Whitespace", "Newline", "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_unqualifiedid = 1
    RULE_nestednamespecifier = 2
    RULE_lambdadeclarator = 3
    RULE_postoperation = 4
    RULE_postfixexpression = 5
    RULE_call = 6
    RULE_unaryexpression = 7
    RULE_unaryincdecexpression = 8
    RULE_postfixunaryincdecexpression = 9
    RULE_newexpression = 10
    RULE_newdeclarator = 11
    RULE_deleteexpression = 12
    RULE_relationalexpression = 13
    RULE_equalityexpression = 14
    RULE_ternaryconditionalexpression = 15
    RULE_unaryconditionalexpression = 16
    RULE_logicalorexpression = 17
    RULE_conditionalexpression = 18
    RULE_assignmentexpression = 19
    RULE_assignmentoperator = 20
    RULE_statement = 21
    RULE_casestatement = 22
    RULE_elsestatement = 23
    RULE_condition = 24
    RULE_gotostatement = 25
    RULE_declaration = 26
    RULE_blockdeclaration = 27
    RULE_simpledeclaration = 28
    RULE_declspecifier = 29
    RULE_typespecifier = 30
    RULE_trailingtypespecifier = 31
    RULE_simpletypespecifier = 32
    RULE_attributespecifier = 33
    RULE_balancedtoken = 34
    RULE_declarator = 35
    RULE_ptrdeclarator = 36
    RULE_parametersandqualifiers = 37
    RULE_abstractdeclarator = 38
    RULE_ptrabstractdeclarator = 39
    RULE_noptrabstractdeclarator = 40
    RULE_parameterdeclaration = 41
    RULE_functionbody = 42
    RULE_initializer = 43
    RULE_bracedinitlist = 44
    RULE_memberspecification = 45
    RULE_memberdeclarator = 46
    RULE_purespecifier = 47
    RULE_basespecifier = 48
    RULE_classordecltype = 49
    RULE_meminitializer = 50
    RULE_templateparameter = 51
    RULE_templateargument = 52
    RULE_tryblock = 53
    RULE_handler = 54
    RULE_exceptionspecification = 55
    RULE_theoperator = 56

    ruleNames = ["translationunit", "unqualifiedid", "nestednamespecifier",
                 "lambdadeclarator", "postoperation", "postfixexpression",
                 "call", "unaryexpression", "unaryincdecexpression", "postfixunaryincdecexpression",
                 "newexpression", "newdeclarator", "deleteexpression",
                 "relationalexpression", "equalityexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "logicalorexpression",
                 "conditionalexpression", "assignmentexpression", "assignmentoperator",
                 "statement", "casestatement", "elsestatement", "condition",
                 "gotostatement", "declaration", "blockdeclaration", "simpledeclaration",
                 "declspecifier", "typespecifier", "trailingtypespecifier",
                 "simpletypespecifier", "attributespecifier", "balancedtoken",
                 "declarator", "ptrdeclarator", "parametersandqualifiers",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "parameterdeclaration", "functionbody", "initializer",
                 "bracedinitlist", "memberspecification", "memberdeclarator",
                 "purespecifier", "basespecifier", "classordecltype",
                 "meminitializer", "templateparameter", "templateargument",
                 "tryblock", "handler", "exceptionspecification", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Break = 7
    Case = 8
    Catch = 9
    Class = 10
    ConstOrVolatile = 11
    Cast = 12
    Continue = 13
    Decltype = 14
    Default = 15
    Delete = 16
    Do = 17
    Else = 18
    Enum = 19
    Export = 20
    Extern = 21
    TrueFalse = 22
    Final = 23
    For = 24
    Goto = 25
    If = 26
    Inline = 27
    Types = 28
    Mutable = 29
    Namespace = 30
    New = 31
    Noexcept = 32
    Nullptr = 33
    Operator = 34
    Override = 35
    PrivateProtectedPublic = 36
    Specifier = 37
    Return = 38
    SignedUnsigned = 39
    Sizeof = 40
    Static_assert = 41
    Struct = 42
    Switch = 43
    Template = 44
    This = 45
    Throw = 46
    Try = 47
    Typeid = 48
    Typename = 49
    Union = 50
    Using = 51
    Virtual = 52
    While = 53
    LeftParen = 54
    RightParen = 55
    LeftBracket = 56
    RightBracket = 57
    LeftBrace = 58
    RightBrace = 59
    Plus = 60
    Minus = 61
    Star = 62
    Div = 63
    Mod = 64
    Caret = 65
    And = 66
    Or = 67
    Tilde = 68
    Not = 69
    Assign = 70
    Less = 71
    Greater = 72
    PlusAssign = 73
    MinusAssign = 74
    StarAssign = 75
    DivAssign = 76
    ModAssign = 77
    XorAssign = 78
    AndAssign = 79
    OrAssign = 80
    LeftShift = 81
    LeftShiftAssign = 82
    Equal = 83
    NotEqual = 84
    LessEqual = 85
    GreaterEqual = 86
    AndAnd = 87
    OrOr = 88
    PlusPlus = 89
    MinusMinus = 90
    UnaryCondition = 91
    Comma = 92
    ArrowStar = 93
    Arrow = 94
    Question = 95
    Colon = 96
    Doublecolon = 97
    Semi = 98
    Dot = 99
    DotStar = 100
    Ellipsis = 101
    Identifier = 102
    Numberliteral = 103
    Decimalliteral = 104
    Octalliteral = 105
    Hexadecimalliteral = 106
    Binaryliteral = 107
    Integersuffix = 108
    Characterliteral = 109
    Stringliteral = 110
    Userdefinedliteral = 111
    Userdefinedstringliteral = 112
    Whitespace = 113
    Newline = 114
    BlockComment = 115
    LineComment = 116

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                self.state = 114
                self.declaration()
                self.state = 119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 120
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 122
                self.match(CPP14Parser.Operator)
                self.state = 124
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 123
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 126
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)

                self.state = 131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 128
                        self.attributespecifier()
                    self.state = 133
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

                self.state = 159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 157
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier]:
                            self.state = 135
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                                self.state = 134
                                self.nestednamespecifier()

                            self.state = 137
                            self.match(CPP14Parser.Star)
                            self.state = 141
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 138
                                    self.attributespecifier()
                                self.state = 143
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

                            self.state = 147
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 144
                                    self.match(CPP14Parser.ConstOrVolatile)
                                self.state = 149
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

                            pass
                        elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                            self.state = 150
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 154
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 151
                                    self.attributespecifier()
                                self.state = 156
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 161
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.match(CPP14Parser.Tilde)
                self.state = 198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Identifier:
                    self.state = 163
                    self.match(CPP14Parser.Identifier)
                    self.state = 182
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                    if la_ == 1:
                        self.state = 164
                        self.match(CPP14Parser.Less)
                        self.state = 179
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 165
                            self.templateargument()
                            self.state = 167
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 166
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 176
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 169
                                self.match(CPP14Parser.Comma)
                                self.state = 170
                                self.templateargument()
                                self.state = 172
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 171
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 178
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 181
                        self.match(CPP14Parser.Greater)

                    pass
                elif token == CPP14Parser.Decltype:
                    self.state = 184
                    self.match(CPP14Parser.Decltype)
                    self.state = 185
                    self.match(CPP14Parser.LeftParen)
                    self.state = 195
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                    if la_ == 1:
                        self.state = 186
                        self.assignmentexpression()
                        self.state = 191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 187
                            self.match(CPP14Parser.Comma)
                            self.state = 188
                            self.assignmentexpression()
                            self.state = 193
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 194
                        self.match(CPP14Parser.Auto)
                        pass

                    self.state = 197
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 208
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Identifier:
                    self.state = 200
                    self.match(CPP14Parser.Identifier)
                    pass
                elif token == CPP14Parser.Operator:
                    self.state = 201
                    self.match(CPP14Parser.Operator)
                    self.state = 206
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div,
                                 CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                 CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater,
                                 CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                                 CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign,
                                 CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShift,
                                 CPP14Parser.LeftShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual,
                                 CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                                 CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                        self.state = 202
                        self.theoperator()
                        pass
                    elif token == CPP14Parser.Stringliteral:
                        self.state = 203
                        self.match(CPP14Parser.Stringliteral)
                        self.state = 204
                        self.match(CPP14Parser.Identifier)
                        pass
                    elif token == CPP14Parser.Userdefinedstringliteral:
                        self.state = 205
                        self.match(CPP14Parser.Userdefinedstringliteral)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 210
                    self.match(CPP14Parser.Less)
                    self.state = 225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 211
                        self.templateargument()
                        self.state = 213
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 212
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 222
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 215
                            self.match(CPP14Parser.Comma)
                            self.state = 216
                            self.templateargument()
                            self.state = 218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 217
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 224
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 227
                    self.match(CPP14Parser.Greater)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def nestednamespecifier(self):

        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nestednamespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Identifier:
                self.state = 232
                self.match(CPP14Parser.Identifier)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 233
                    self.match(CPP14Parser.Less)
                    self.state = 248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 234
                        self.templateargument()
                        self.state = 236
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 235
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 238
                            self.match(CPP14Parser.Comma)
                            self.state = 239
                            self.templateargument()
                            self.state = 241
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 240
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 247
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 250
                    self.match(CPP14Parser.Greater)

                pass
            elif token == CPP14Parser.Decltype:
                self.state = 253
                self.match(CPP14Parser.Decltype)
                self.state = 254
                self.match(CPP14Parser.LeftParen)
                self.state = 264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
                if la_ == 1:
                    self.state = 255
                    self.assignmentexpression()
                    self.state = 260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 256
                        self.match(CPP14Parser.Comma)
                        self.state = 257
                        self.assignmentexpression()
                        self.state = 262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 263
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 266
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.Doublecolon:
                pass
            else:
                pass
            self.state = 297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 269
                    self.match(CPP14Parser.Doublecolon)
                    self.state = 293
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                    if la_ == 1:
                        self.state = 270
                        self.match(CPP14Parser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 272
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 271
                            self.match(CPP14Parser.Template)

                        self.state = 274
                        self.match(CPP14Parser.Identifier)
                        self.state = 275
                        self.match(CPP14Parser.Less)
                        self.state = 290
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 276
                            self.templateargument()
                            self.state = 278
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 277
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 287
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 280
                                self.match(CPP14Parser.Comma)
                                self.state = 281
                                self.templateargument()
                                self.state = 283
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 282
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 289
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 292
                        self.match(CPP14Parser.Greater)
                        pass

                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)

            self.state = 300
            self.match(CPP14Parser.Doublecolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(CPP14Parser.LeftParen)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                self.state = 303
                self.parameterdeclaration()
                self.state = 308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 304
                        self.match(CPP14Parser.Comma)
                        self.state = 305
                        self.parameterdeclaration()
                    self.state = 310
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 311
                    self.match(CPP14Parser.Comma)

            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 316
                self.match(CPP14Parser.Ellipsis)

            self.state = 319
            self.match(CPP14Parser.RightParen)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 320
                self.match(CPP14Parser.Mutable)

            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 323
                self.exceptionspecification()

            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 326
                self.attributespecifier()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 332
                self.match(CPP14Parser.Arrow)
                self.state = 334
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 333
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)

                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 338
                        self.attributespecifier()
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)

                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 344
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostoperationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postoperation

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postoperation(self):

        localctx = CPP14Parser.PostoperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postoperation)
        self._la = 0  # Token type
        try:
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Arrow, CPP14Parser.Dot]:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
                if la_ == 1:
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 350
                        self.match(CPP14Parser.Template)

                    self.state = 357
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                    if la_ == 1:
                        self.state = 353
                        self.nestednamespecifier()
                        self.state = 355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 354
                            self.match(CPP14Parser.Template)

                    self.state = 359
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 65, self._ctx)
                    if la_ == 1:
                        self.state = 361
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                        if la_ == 1:
                            self.state = 360
                            self.nestednamespecifier()

                        self.state = 385
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 363
                            self.match(CPP14Parser.Identifier)
                            self.state = 382
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Less:
                                self.state = 364
                                self.match(CPP14Parser.Less)
                                self.state = 379
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                                1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                1 << (CPP14Parser.PlusPlus - 66)) | (
                                                1 << (CPP14Parser.MinusMinus - 66)) | (
                                                1 << (CPP14Parser.Doublecolon - 66)) | (
                                                1 << (CPP14Parser.Identifier - 66)) | (
                                                1 << (CPP14Parser.Numberliteral - 66)) | (
                                                1 << (CPP14Parser.Characterliteral - 66)) | (
                                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                    self.state = 365
                                    self.templateargument()
                                    self.state = 367
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la == CPP14Parser.Ellipsis:
                                        self.state = 366
                                        self.match(CPP14Parser.Ellipsis)

                                    self.state = 376
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la == CPP14Parser.Comma:
                                        self.state = 369
                                        self.match(CPP14Parser.Comma)
                                        self.state = 370
                                        self.templateargument()
                                        self.state = 372
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)
                                        if _la == CPP14Parser.Ellipsis:
                                            self.state = 371
                                            self.match(CPP14Parser.Ellipsis)

                                        self.state = 378
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                self.state = 381
                                self.match(CPP14Parser.Greater)

                            self.state = 384
                            self.match(CPP14Parser.Doublecolon)

                        pass

                    elif la_ == 2:
                        self.state = 387
                        self.nestednamespecifier()
                        self.state = 388
                        self.match(CPP14Parser.Template)
                        self.state = 389
                        self.match(CPP14Parser.Identifier)
                        self.state = 390
                        self.match(CPP14Parser.Less)
                        self.state = 405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 391
                            self.templateargument()
                            self.state = 393
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 392
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 402
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 395
                                self.match(CPP14Parser.Comma)
                                self.state = 396
                                self.templateargument()
                                self.state = 398
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 397
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 404
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 407
                        self.match(CPP14Parser.Greater)
                        self.state = 408
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    self.state = 412
                    self.match(CPP14Parser.Tilde)
                    self.state = 413
                    self.match(CPP14Parser.Identifier)
                    self.state = 432
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
                    if la_ == 1:
                        self.state = 414
                        self.match(CPP14Parser.Less)
                        self.state = 429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 415
                            self.templateargument()
                            self.state = 417
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 416
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 426
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 419
                                self.match(CPP14Parser.Comma)
                                self.state = 420
                                self.templateargument()
                                self.state = 422
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 421
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 428
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 431
                        self.match(CPP14Parser.Greater)

                    pass

                elif la_ == 3:
                    self.state = 434
                    self.match(CPP14Parser.Tilde)
                    self.state = 435
                    self.match(CPP14Parser.Decltype)
                    self.state = 436
                    self.match(CPP14Parser.LeftParen)
                    self.state = 446
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                    if la_ == 1:
                        self.state = 437
                        self.assignmentexpression()
                        self.state = 442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 438
                            self.match(CPP14Parser.Comma)
                            self.state = 439
                            self.assignmentexpression()
                            self.state = 444
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 445
                        self.match(CPP14Parser.Auto)
                        pass

                    self.state = 448
                    self.match(CPP14Parser.RightParen)
                    pass

                pass
            elif token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 489
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.LeftBracket:
                    self.state = 451
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 461
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 452
                        self.assignmentexpression()
                        self.state = 457
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 453
                            self.match(CPP14Parser.Comma)
                            self.state = 454
                            self.assignmentexpression()
                            self.state = 459
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 460
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 463
                    self.match(CPP14Parser.RightBracket)
                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 465
                    self.match(CPP14Parser.LeftParen)
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                            (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                         1 << (CPP14Parser.PlusPlus - 66)) | (
                                                         1 << (CPP14Parser.MinusMinus - 66)) | (
                                                         1 << (CPP14Parser.Doublecolon - 66)) | (
                                                         1 << (CPP14Parser.Identifier - 66)) | (
                                                         1 << (CPP14Parser.Numberliteral - 66)) | (
                                                         1 << (CPP14Parser.Characterliteral - 66)) | (
                                                         1 << (CPP14Parser.Stringliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 468
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 466
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 467
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 471
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 470
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 473
                            self.match(CPP14Parser.Comma)
                            self.state = 476
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                         CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                         CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                         CPP14Parser.Userdefinedstringliteral]:
                                self.state = 474
                                self.assignmentexpression()
                                pass
                            elif token == CPP14Parser.LeftBrace:
                                self.state = 475
                                self.bracedinitlist()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 479
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 478
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 485
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 488
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def call(self):
            return self.getTypedRuleContext(CPP14Parser.CallContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def Numberliteral(self):
            return self.getToken(CPP14Parser.Numberliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def TrueFalse(self):
            return self.getToken(CPP14Parser.TrueFalse, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedliteral(self):
            return self.getToken(CPP14Parser.Userdefinedliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def This(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.This)
            else:
                return self.getToken(CPP14Parser.This, i)

        def postoperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostoperationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostoperationContext, i)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Cast(self):
            return self.getToken(CPP14Parser.Cast, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postfixexpression(self):

        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixexpression)
        self._la = 0  # Token type
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 123, self._ctx)
                if la_ == 1:
                    self.state = 494
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.This))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & (
                            (1 << (CPP14Parser.Numberliteral - 103)) | (1 << (CPP14Parser.Characterliteral - 103)) | (
                            1 << (CPP14Parser.Stringliteral - 103)) | (1 << (CPP14Parser.Userdefinedliteral - 103)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 103)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 499
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
                    if la_ == 1:
                        self.state = 495
                        self.nestednamespecifier()
                        self.state = 497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 496
                            self.match(CPP14Parser.Template)

                    self.state = 501
                    self.unqualifiedid()
                    pass

                elif la_ == 3:
                    self.state = 502
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 541
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                    if la_ == 1:
                        self.state = 503
                        self.match(CPP14Parser.And)

                    elif la_ == 2:
                        self.state = 504
                        self.match(CPP14Parser.Assign)

                    elif la_ == 3:
                        self.state = 507
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                        if la_ == 1:
                            self.state = 505
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 506
                            self.match(CPP14Parser.Comma)

                        self.state = 517
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 510
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 509
                                self.match(CPP14Parser.And)

                            self.state = 512
                            self.match(CPP14Parser.Identifier)
                            self.state = 514
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                    (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                                    1 << (CPP14Parser.Assign - 54)))) != 0):
                                self.state = 513
                                self.initializer()

                            pass
                        elif token == CPP14Parser.This:
                            self.state = 516
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 520
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 519
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 538
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 522
                            self.match(CPP14Parser.Comma)
                            self.state = 531
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                                self.state = 524
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.And:
                                    self.state = 523
                                    self.match(CPP14Parser.And)

                                self.state = 526
                                self.match(CPP14Parser.Identifier)
                                self.state = 528
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                        (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                                        1 << (CPP14Parser.Assign - 54)))) != 0):
                                    self.state = 527
                                    self.initializer()

                                pass
                            elif token == CPP14Parser.This:
                                self.state = 530
                                self.match(CPP14Parser.This)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 534
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 533
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 540
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 543
                    self.match(CPP14Parser.RightBracket)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 544
                        self.lambdadeclarator()

                    self.state = 547
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                    1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                                    1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                            (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                         1 << (CPP14Parser.AndAnd - 66)) | (
                                                         1 << (CPP14Parser.PlusPlus - 66)) | (
                                                         1 << (CPP14Parser.MinusMinus - 66)) | (
                                                         1 << (CPP14Parser.Doublecolon - 66)) | (
                                                         1 << (CPP14Parser.Semi - 66)) | (
                                                         1 << (CPP14Parser.Ellipsis - 66)) | (
                                                         1 << (CPP14Parser.Identifier - 66)) | (
                                                         1 << (CPP14Parser.Numberliteral - 66)) | (
                                                         1 << (CPP14Parser.Characterliteral - 66)) | (
                                                         1 << (CPP14Parser.Stringliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 548
                        self.statement()
                        self.state = 553
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 554
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 4:
                    self.state = 583
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                        self.state = 555
                        self.simpletypespecifier()
                        pass
                    elif token == CPP14Parser.Typename:
                        self.state = 556
                        self.match(CPP14Parser.Typename)
                        self.state = 557
                        self.nestednamespecifier()
                        self.state = 581
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                        if la_ == 1:
                            self.state = 558
                            self.match(CPP14Parser.Identifier)
                            pass

                        elif la_ == 2:
                            self.state = 560
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 559
                                self.match(CPP14Parser.Template)

                            self.state = 562
                            self.match(CPP14Parser.Identifier)
                            self.state = 563
                            self.match(CPP14Parser.Less)
                            self.state = 578
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                            1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                    (1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 564
                                self.templateargument()
                                self.state = 566
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 565
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 575
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 568
                                    self.match(CPP14Parser.Comma)
                                    self.state = 569
                                    self.templateargument()
                                    self.state = 571
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la == CPP14Parser.Ellipsis:
                                        self.state = 570
                                        self.match(CPP14Parser.Ellipsis)

                                    self.state = 577
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 580
                            self.match(CPP14Parser.Greater)
                            pass

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 610
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.LeftParen:
                        self.state = 585
                        self.match(CPP14Parser.LeftParen)
                        self.state = 606
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                        1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 588
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                         CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                         CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                         CPP14Parser.Userdefinedstringliteral]:
                                self.state = 586
                                self.assignmentexpression()
                                pass
                            elif token == CPP14Parser.LeftBrace:
                                self.state = 587
                                self.bracedinitlist()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 591
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 590
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 603
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 593
                                self.match(CPP14Parser.Comma)
                                self.state = 596
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast,
                                             CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.TrueFalse,
                                             CPP14Parser.Types, CPP14Parser.New, CPP14Parser.Noexcept,
                                             CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                                             CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                             CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus,
                                             CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                             CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                                    self.state = 594
                                    self.assignmentexpression()
                                    pass
                                elif token == CPP14Parser.LeftBrace:
                                    self.state = 595
                                    self.bracedinitlist()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 599
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 598
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 605
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 608
                        self.match(CPP14Parser.RightParen)
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 609
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Cast:
                        self.state = 612
                        self.match(CPP14Parser.Cast)
                        self.state = 613
                        self.match(CPP14Parser.Less)
                        self.state = 615
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 614
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 617
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

                        self.state = 622
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 619
                                self.attributespecifier()
                            self.state = 624
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)

                        self.state = 626
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 625
                            self.abstractdeclarator()

                        self.state = 628
                        self.match(CPP14Parser.Greater)

                    self.state = 632
                    self.match(CPP14Parser.LeftParen)
                    self.state = 633
                    self.assignmentexpression()
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 634
                        self.match(CPP14Parser.Comma)
                        self.state = 635
                        self.assignmentexpression()
                        self.state = 640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 641
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 6:
                    self.state = 643
                    self.match(CPP14Parser.Typeid)
                    self.state = 644
                    self.match(CPP14Parser.LeftParen)
                    self.state = 667
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
                    if la_ == 1:
                        self.state = 645
                        self.assignmentexpression()
                        self.state = 650
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 646
                            self.match(CPP14Parser.Comma)
                            self.state = 647
                            self.assignmentexpression()
                            self.state = 652
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 654
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 653
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 656
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 119, self._ctx)

                        self.state = 661
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 658
                                self.attributespecifier()
                            self.state = 663
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

                        self.state = 665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 664
                            self.abstractdeclarator()

                        pass

                    self.state = 669
                    self.match(CPP14Parser.RightParen)
                    pass

                self.state = 676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 673
                        self.postoperation()
                    self.state = 678
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self):

        localctx = CPP14Parser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.unqualifiedid()
            self.state = 682
            self.match(CPP14Parser.LeftParen)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 683
                self.assignmentexpression()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 684
                    self.match(CPP14Parser.Comma)
                    self.state = 685
                    self.assignmentexpression()
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 693
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.postfixexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Sizeof:
                    self.state = 697
                    self.match(CPP14Parser.Sizeof)
                    pass
                elif token in [CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                               CPP14Parser.Tilde, CPP14Parser.Not]:
                    self.state = 698
                    _la = self._input.LA(1)
                    if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                            (1 << (CPP14Parser.Plus - 60)) | (1 << (CPP14Parser.Minus - 60)) | (
                            1 << (CPP14Parser.Star - 60)) | (1 << (CPP14Parser.And - 60)) | (
                                    1 << (CPP14Parser.Or - 60)) | (1 << (CPP14Parser.Tilde - 60)) | (
                                    1 << (CPP14Parser.Not - 60)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 718
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 131, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 699
                            self.match(CPP14Parser.LeftParen)
                            self.state = 701
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 700
                                    self.typespecifier()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 703
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 128, self._ctx)

                            self.state = 708
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 705
                                    self.attributespecifier()
                                self.state = 710
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

                            self.state = 712
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                                self.state = 711
                                self.abstractdeclarator()

                            self.state = 714
                            self.match(CPP14Parser.RightParen)
                        self.state = 720
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 131, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 723
                self.unaryexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 724
                self.match(CPP14Parser.Sizeof)
                self.state = 725
                self.match(CPP14Parser.Ellipsis)
                self.state = 726
                self.match(CPP14Parser.LeftParen)
                self.state = 727
                self.match(CPP14Parser.Identifier)
                self.state = 728
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 729
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Alignof or _la == CPP14Parser.Sizeof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 730
                self.match(CPP14Parser.LeftParen)
                self.state = 732
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 731
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 734
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 133, self._ctx)

                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 736
                        self.attributespecifier()
                    self.state = 741
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)

                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 742
                    self.abstractdeclarator()

                self.state = 745
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 747
                self.match(CPP14Parser.Noexcept)
                self.state = 748
                self.match(CPP14Parser.LeftParen)
                self.state = 749
                self.assignmentexpression()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 750
                    self.match(CPP14Parser.Comma)
                    self.state = 751
                    self.assignmentexpression()
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 759
                self.newexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 760
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryincdecexpression"):
                return visitor.visitUnaryincdecexpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus, CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 764
                        self.match(CPP14Parser.LeftParen)
                        self.state = 766
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 765
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 768
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 138, self._ctx)

                        self.state = 773
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 139, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 770
                                self.attributespecifier()
                            self.state = 775
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 139, self._ctx)

                        self.state = 777
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 776
                            self.abstractdeclarator()

                        self.state = 779
                        self.match(CPP14Parser.RightParen)
                    self.state = 785
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

                self.state = 786
                self.unaryexpression()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype, CPP14Parser.TrueFalse,
                           CPP14Parser.Types, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                           CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                           CPP14Parser.LeftBracket, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                           CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                           CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.postfixunaryincdecexpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixunaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def postoperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostoperationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostoperationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixunaryincdecexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postfixunaryincdecexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixunaryincdecexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.postfixexpression()
            self.state = 792
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixunaryincdecexpression)
                    self.state = 794
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                            (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBracket - 54)) | (
                            1 << (CPP14Parser.Arrow - 54)) | (1 << (CPP14Parser.Dot - 54)))) != 0):
                        self.state = 795
                        self.postoperation()
                        self.state = 800
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 801
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 144, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNewexpression"):
                return visitor.visitNewexpression(self)
            else:
                return visitor.visitChildren(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 807
                self.match(CPP14Parser.Doublecolon)

            self.state = 810
            self.match(CPP14Parser.New)
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 151, self._ctx)
            if la_ == 1:
                self.state = 811
                self.match(CPP14Parser.LeftParen)
                self.state = 814
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 812
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 813
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 816
                    self.match(CPP14Parser.Ellipsis)

                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 819
                    self.match(CPP14Parser.Comma)
                    self.state = 822
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 820
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 821
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 824
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 832
                self.match(CPP14Parser.RightParen)

            self.state = 867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 837
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 836
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 839
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 152, self._ctx)

                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 841
                        self.attributespecifier()
                    self.state = 846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)

                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 154, self._ctx)
                if la_ == 1:
                    self.state = 847
                    self.newdeclarator()

                pass
            elif token == CPP14Parser.LeftParen:
                self.state = 850
                self.match(CPP14Parser.LeftParen)
                self.state = 852
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 851
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 854
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 155, self._ctx)

                self.state = 859
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 856
                        self.attributespecifier()
                    self.state = 861
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 862
                    self.abstractdeclarator()

                self.state = 865
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
            if la_ == 1:
                self.state = 869
                self.match(CPP14Parser.LeftParen)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 872
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 870
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 871
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 874
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 877
                        self.match(CPP14Parser.Comma)
                        self.state = 880
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 878
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 879
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 882
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 892
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 893
                self.bracedinitlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_newdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 896
                        self.nestednamespecifier()

                    self.state = 899
                    self.match(CPP14Parser.Star)
                    self.state = 903
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 900
                            self.attributespecifier()
                        self.state = 905
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 167, self._ctx)

                    self.state = 909
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 906
                            self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 911
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 912
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 916
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 913
                            self.attributespecifier()
                        self.state = 918
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.newdeclarator()

                pass
            elif token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.match(CPP14Parser.LeftBracket)
                self.state = 925
                self.assignmentexpression()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 926
                    self.match(CPP14Parser.Comma)
                    self.state = 927
                    self.assignmentexpression()
                    self.state = 932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 933
                self.match(CPP14Parser.RightBracket)
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 934
                        self.attributespecifier()
                    self.state = 939
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)

                self.state = 951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 940
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 941
                        self.conditionalexpression()
                        self.state = 942
                        self.match(CPP14Parser.RightBracket)
                        self.state = 946
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 174, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 943
                                self.attributespecifier()
                            self.state = 948
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 174, self._ctx)

                    self.state = 953
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeleteexpression"):
                return visitor.visitDeleteexpression(self)
            else:
                return visitor.visitChildren(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 956
                self.match(CPP14Parser.Doublecolon)

            self.state = 959
            self.match(CPP14Parser.Delete)
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
            if la_ == 1:
                self.state = 960
                self.match(CPP14Parser.LeftBracket)
                self.state = 961
                self.match(CPP14Parser.RightBracket)

            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 182, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 964
                    self.match(CPP14Parser.LeftParen)
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 965
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 968
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 179, self._ctx)

                    self.state = 973
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 970
                            self.attributespecifier()
                        self.state = 975
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

                    self.state = 977
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 976
                        self.abstractdeclarator()

                    self.state = 979
                    self.match(CPP14Parser.RightParen)
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 182, self._ctx)

            self.state = 986
            self.unaryexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnaryexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, i)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalexpression"):
                return visitor.visitRelationalexpression(self)
            else:
                return visitor.visitChildren(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 989
                    self.match(CPP14Parser.LeftParen)
                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 990
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 993
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)

                    self.state = 998
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 995
                            self.attributespecifier()
                        self.state = 1000
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)

                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 1001
                        self.abstractdeclarator()

                    self.state = 1004
                    self.match(CPP14Parser.RightParen)
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)

            self.state = 1011
            self.unaryexpression()
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 192, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1022
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.DotStar:
                        self.state = 1012
                        self.match(CPP14Parser.DotStar)
                        pass
                    elif token == CPP14Parser.ArrowStar:
                        self.state = 1013
                        self.match(CPP14Parser.ArrowStar)
                        pass
                    elif token == CPP14Parser.Star:
                        self.state = 1014
                        self.match(CPP14Parser.Star)
                        pass
                    elif token == CPP14Parser.Div:
                        self.state = 1015
                        self.match(CPP14Parser.Div)
                        pass
                    elif token == CPP14Parser.Mod:
                        self.state = 1016
                        self.match(CPP14Parser.Mod)
                        pass
                    elif token == CPP14Parser.Plus:
                        self.state = 1017
                        self.match(CPP14Parser.Plus)
                        pass
                    elif token == CPP14Parser.Minus:
                        self.state = 1018
                        self.match(CPP14Parser.Minus)
                        pass
                    elif token == CPP14Parser.LeftShift:
                        self.state = 1019
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token == CPP14Parser.Greater:
                        self.state = 1020
                        self.match(CPP14Parser.Greater)
                        self.state = 1021
                        self.match(CPP14Parser.Greater)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1043
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1024
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1026
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1025
                                    self.typespecifier()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1028
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)

                            self.state = 1033
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1030
                                    self.attributespecifier()
                                self.state = 1035
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)

                            self.state = 1037
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                                self.state = 1036
                                self.abstractdeclarator()

                            self.state = 1039
                            self.match(CPP14Parser.RightParen)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 191, self._ctx)

                    self.state = 1046
                    self.unaryexpression()
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 192, self._ctx)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 1052
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1053
                    _la = self._input.LA(1)
                    if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                            (1 << (CPP14Parser.Less - 71)) | (1 << (CPP14Parser.Greater - 71)) | (
                            1 << (CPP14Parser.LessEqual - 71)) | (1 << (CPP14Parser.GreaterEqual - 71)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1073
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1054
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1056
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1055
                                    self.typespecifier()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1058
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 193, self._ctx)

                            self.state = 1063
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1060
                                    self.attributespecifier()
                                self.state = 1065
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)

                            self.state = 1067
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                                self.state = 1066
                                self.abstractdeclarator()

                            self.state = 1069
                            self.match(CPP14Parser.RightParen)
                        self.state = 1075
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 196, self._ctx)

                    self.state = 1076
                    self.unaryexpression()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 202, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1087
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token == CPP14Parser.DotStar:
                                self.state = 1077
                                self.match(CPP14Parser.DotStar)
                                pass
                            elif token == CPP14Parser.ArrowStar:
                                self.state = 1078
                                self.match(CPP14Parser.ArrowStar)
                                pass
                            elif token == CPP14Parser.Star:
                                self.state = 1079
                                self.match(CPP14Parser.Star)
                                pass
                            elif token == CPP14Parser.Div:
                                self.state = 1080
                                self.match(CPP14Parser.Div)
                                pass
                            elif token == CPP14Parser.Mod:
                                self.state = 1081
                                self.match(CPP14Parser.Mod)
                                pass
                            elif token == CPP14Parser.Plus:
                                self.state = 1082
                                self.match(CPP14Parser.Plus)
                                pass
                            elif token == CPP14Parser.Minus:
                                self.state = 1083
                                self.match(CPP14Parser.Minus)
                                pass
                            elif token == CPP14Parser.LeftShift:
                                self.state = 1084
                                self.match(CPP14Parser.LeftShift)
                                pass
                            elif token == CPP14Parser.Greater:
                                self.state = 1085
                                self.match(CPP14Parser.Greater)
                                self.state = 1086
                                self.match(CPP14Parser.Greater)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 1108
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1089
                                    self.match(CPP14Parser.LeftParen)
                                    self.state = 1091
                                    self._errHandler.sync(self)
                                    _alt = 1
                                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                        if _alt == 1:
                                            self.state = 1090
                                            self.typespecifier()

                                        else:
                                            raise NoViableAltException(self)
                                        self.state = 1093
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

                                    self.state = 1098
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)
                                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                        if _alt == 1:
                                            self.state = 1095
                                            self.attributespecifier()
                                        self.state = 1100
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input, 199, self._ctx)

                                    self.state = 1102
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                                    1 << (CPP14Parser.Ellipsis - 66)) | (
                                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                                        self.state = 1101
                                        self.abstractdeclarator()

                                    self.state = 1104
                                    self.match(CPP14Parser.RightParen)
                                self.state = 1110
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)

                            self.state = 1111
                            self.unaryexpression()
                        self.state = 1116
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 202, self._ctx)

                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqualityexpression"):
                return visitor.visitEqualityexpression(self)
            else:
                return visitor.visitChildren(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 1125
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1126
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1127
                    self.relationalexpression(0)
                self.state = 1132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 204, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTernaryconditionalexpression"):
                return visitor.visitTernaryconditionalexpression(self)
            else:
                return visitor.visitChildren(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_ternaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.logicalorexpression()
            self.state = 1134
            self.match(CPP14Parser.Question)
            self.state = 1135
            self.assignmentexpression()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 1136
                self.match(CPP14Parser.Comma)
                self.state = 1137
                self.assignmentexpression()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1143
            self.match(CPP14Parser.Colon)
            self.state = 1144
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryconditionalexpression"):
                return visitor.visitUnaryconditionalexpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.logicalorexpression()
            self.state = 1147
            self.match(CPP14Parser.UnaryCondition)
            self.state = 1148
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def logicalorexpression(self):

        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_logicalorexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.equalityexpression(0)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                    (1 << (CPP14Parser.Caret - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Or - 65)) | (
                    1 << (CPP14Parser.AndAnd - 65)) | (1 << (CPP14Parser.OrOr - 65)))) != 0):
                self.state = 1151
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                        (1 << (CPP14Parser.Caret - 65)) | (1 << (CPP14Parser.And - 65)) | (
                        1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.AndAnd - 65)) | (
                                1 << (CPP14Parser.OrOr - 65)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1152
                self.equalityexpression(0)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_conditionalexpression)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.logicalorexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1160
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def logicalorexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.LogicalorexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, i)

        def assignmentoperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentoperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, i)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Throw(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Throw)
            else:
                return self.getToken(CPP14Parser.Throw, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignmentexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 209, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1167
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.Throw:
                        self.state = 1163
                        self.match(CPP14Parser.Throw)
                        pass
                    elif token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                   CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                   CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                   CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Typeid,
                                   CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                   CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And,
                                   CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                   CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                   CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                   CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                        self.state = 1164
                        self.logicalorexpression()
                        self.state = 1165
                        self.assignmentoperator()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1171
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 209, self._ctx)

            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 210, self._ctx)
            if la_ == 1:
                self.state = 1172
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.state = 1173
                self.logicalorexpression()
                self.state = 1174
                self.assignmentoperator()
                self.state = 1175
                self.bracedinitlist()
                pass

            elif la_ == 3:
                self.state = 1177
                self.match(CPP14Parser.Throw)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentoperator"):
                return visitor.visitAssignmentoperator(self)
            else:
                return visitor.visitChildren(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentoperator)
        self._la = 0  # Token type
        try:
            self.state = 1184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign, CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                         CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign,
                         CPP14Parser.OrAssign, CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & (
                        (1 << (CPP14Parser.Assign - 70)) | (1 << (CPP14Parser.PlusAssign - 70)) | (
                        1 << (CPP14Parser.MinusAssign - 70)) | (1 << (CPP14Parser.StarAssign - 70)) | (
                                1 << (CPP14Parser.DivAssign - 70)) | (1 << (CPP14Parser.ModAssign - 70)) | (
                                1 << (CPP14Parser.XorAssign - 70)) | (1 << (CPP14Parser.AndAssign - 70)) | (
                                1 << (CPP14Parser.OrAssign - 70)) | (1 << (CPP14Parser.LeftShiftAssign - 70)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token == CPP14Parser.Greater:
                self.enterOuterAlt(localctx, 2)
                self.state = 1181
                self.match(CPP14Parser.Greater)
                self.state = 1182
                self.match(CPP14Parser.Greater)
                self.state = 1183
                self.match(CPP14Parser.Assign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 212, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1186
                        self.attributespecifier()
                    self.state = 1191
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 212, self._ctx)

                self.state = 1329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
                if la_ == 1:
                    self.state = 1199
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.Identifier:
                        self.state = 1192
                        self.match(CPP14Parser.Identifier)
                        self.state = 1193
                        self.match(CPP14Parser.Colon)
                        pass
                    elif token in [CPP14Parser.Switch, CPP14Parser.While]:
                        self.state = 1194
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Switch or _la == CPP14Parser.While):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1195
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1196
                        self.condition()
                        self.state = 1197
                        self.match(CPP14Parser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1201
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 1202
                    self.casestatement()
                    pass

                elif la_ == 3:
                    self.state = 1211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1203
                        self.assignmentexpression()
                        self.state = 1208
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1204
                            self.match(CPP14Parser.Comma)
                            self.state = 1205
                            self.assignmentexpression()
                            self.state = 1210
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1213
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 4:
                    self.state = 1214
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                                    1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                    1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                                    1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                            (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                         1 << (CPP14Parser.AndAnd - 66)) | (
                                                         1 << (CPP14Parser.PlusPlus - 66)) | (
                                                         1 << (CPP14Parser.MinusMinus - 66)) | (
                                                         1 << (CPP14Parser.Doublecolon - 66)) | (
                                                         1 << (CPP14Parser.Semi - 66)) | (
                                                         1 << (CPP14Parser.Ellipsis - 66)) | (
                                                         1 << (CPP14Parser.Identifier - 66)) | (
                                                         1 << (CPP14Parser.Numberliteral - 66)) | (
                                                         1 << (CPP14Parser.Characterliteral - 66)) | (
                                                         1 << (CPP14Parser.Stringliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                         1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1215
                        self.statement()
                        self.state = 1220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1221
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 5:
                    self.state = 1222
                    self.match(CPP14Parser.If)
                    self.state = 1223
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1224
                    self.condition()
                    self.state = 1225
                    self.match(CPP14Parser.RightParen)
                    self.state = 1226
                    self.statement()
                    self.state = 1228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
                    if la_ == 1:
                        self.state = 1227
                        self.elsestatement()

                    pass

                elif la_ == 6:
                    self.state = 1230
                    self.match(CPP14Parser.Do)
                    self.state = 1231
                    self.statement()
                    self.state = 1232
                    self.match(CPP14Parser.While)
                    self.state = 1233
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1234
                    self.assignmentexpression()
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1235
                        self.match(CPP14Parser.Comma)
                        self.state = 1236
                        self.assignmentexpression()
                        self.state = 1241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1242
                    self.match(CPP14Parser.RightParen)
                    self.state = 1243
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 7:
                    self.state = 1245
                    self.match(CPP14Parser.For)
                    self.state = 1246
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
                    if la_ == 1:
                        self.state = 1259
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                        if la_ == 1:
                            self.state = 1255
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                    (1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1247
                                self.assignmentexpression()
                                self.state = 1252
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 1248
                                    self.match(CPP14Parser.Comma)
                                    self.state = 1249
                                    self.assignmentexpression()
                                    self.state = 1254
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 1257
                            self.match(CPP14Parser.Semi)
                            pass

                        elif la_ == 2:
                            self.state = 1258
                            self.simpledeclaration()
                            pass

                        self.state = 1262
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                        1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                        1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1261
                            self.condition()

                        self.state = 1264
                        self.match(CPP14Parser.Semi)
                        self.state = 1273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1265
                            self.assignmentexpression()
                            self.state = 1270
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1266
                                self.match(CPP14Parser.Comma)
                                self.state = 1267
                                self.assignmentexpression()
                                self.state = 1272
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1275
                            self.attributespecifier()
                            self.state = 1280
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1282
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1281
                                self.declspecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1284
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 226, self._ctx)

                        self.state = 1289
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1286
                            self.attributespecifier()
                            self.state = 1291
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1292
                        self.declarator()
                        self.state = 1293
                        self.match(CPP14Parser.Colon)
                        self.state = 1303
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1294
                            self.assignmentexpression()
                            self.state = 1299
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1295
                                self.match(CPP14Parser.Comma)
                                self.state = 1296
                                self.assignmentexpression()
                                self.state = 1301
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 1302
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    self.state = 1307
                    self.match(CPP14Parser.RightParen)
                    self.state = 1308
                    self.statement()
                    pass

                elif la_ == 8:
                    self.state = 1324
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Break, CPP14Parser.Continue]:
                        self.state = 1309
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token == CPP14Parser.Return:
                        self.state = 1310
                        self.match(CPP14Parser.Return)
                        self.state = 1322
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Semi, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                     CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                     CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1319
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                    (1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1311
                                self.assignmentexpression()
                                self.state = 1316
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 1312
                                    self.match(CPP14Parser.Comma)
                                    self.state = 1313
                                    self.assignmentexpression()
                                    self.state = 1318
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 1321
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1326
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 9:
                    self.state = 1327
                    self.gotostatement()
                    pass

                elif la_ == 10:
                    self.state = 1328
                    self.tryblock()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.blockdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCasestatement"):
                return visitor.visitCasestatement(self)
            else:
                return visitor.visitChildren(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.match(CPP14Parser.Case)
            self.state = 1337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename,
                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus,
                         CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                         CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.state = 1335
                self.conditionalexpression()
                pass
            elif token == CPP14Parser.Default:
                self.state = 1336
                self.match(CPP14Parser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1339
            self.match(CPP14Parser.Colon)
            self.state = 1340
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElsestatement"):
                return visitor.visitElsestatement(self)
            else:
                return visitor.visitChildren(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(CPP14Parser.Else)
            self.state = 1343
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 244, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1345
                self.assignmentexpression()
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1346
                    self.match(CPP14Parser.Comma)
                    self.state = 1347
                    self.assignmentexpression()
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1353
                    self.attributespecifier()
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1360
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1359
                        self.declspecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 240, self._ctx)

                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1364
                    self.attributespecifier()
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1370
                self.declarator()
                self.state = 1377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
                if la_ == 1:
                    self.state = 1371
                    self.match(CPP14Parser.Assign)
                    self.state = 1372
                    self.assignmentexpression()
                    pass

                elif la_ == 2:
                    self.state = 1374
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1373
                        self.match(CPP14Parser.Assign)

                    self.state = 1376
                    self.bracedinitlist()
                    pass

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGotostatement"):
                return visitor.visitGotostatement(self)
            else:
                return visitor.visitChildren(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.match(CPP14Parser.Goto)
            self.state = 1382
            self.match(CPP14Parser.Identifier)
            self.state = 1383
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1385
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1386
                    self.attributespecifier()
                    self.state = 1391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1415
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                             CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                             CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                             CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And,
                             CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis,
                             CPP14Parser.Identifier]:
                    self.state = 1403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
                    if la_ == 1:
                        self.state = 1393
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1392
                                self.declspecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1395
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 246, self._ctx)

                        self.state = 1400
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1397
                            self.attributespecifier()
                            self.state = 1402
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1405
                    self.declarator()
                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1406
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1411
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1412
                    self.functionbody()
                    pass
                elif token == CPP14Parser.Semi:
                    self.state = 1414
                    self.match(CPP14Parser.Semi)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.match(CPP14Parser.Template)
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 1418
                    self.match(CPP14Parser.Less)
                    self.state = 1427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                                    1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.Virtual) | (
                                    1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 1419
                        self.templateparameter()
                        self.state = 1424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1420
                            self.match(CPP14Parser.Comma)
                            self.state = 1421
                            self.templateparameter()
                            self.state = 1426
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1429
                    self.match(CPP14Parser.Greater)

                self.state = 1432
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1433
                self.match(CPP14Parser.Extern)
                self.state = 1434
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Template or _la == CPP14Parser.Stringliteral):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1435
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Extern:
                    self.state = 1436
                    self.match(CPP14Parser.Extern)
                    self.state = 1437
                    self.match(CPP14Parser.Stringliteral)
                    pass
                elif token in [CPP14Parser.Inline, CPP14Parser.Namespace]:
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Inline:
                        self.state = 1438
                        self.match(CPP14Parser.Inline)

                    self.state = 1441
                    self.match(CPP14Parser.Namespace)
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1442
                        self.match(CPP14Parser.Identifier)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1447
                self.match(CPP14Parser.LeftBrace)
                self.state = 1451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                        (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                                                     1 << (CPP14Parser.Semi - 66)) | (
                                                     1 << (CPP14Parser.Ellipsis - 66)) | (
                                                     1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1448
                    self.declaration()
                    self.state = 1453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1454
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_blockdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 275, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
                if la_ == 1:
                    self.state = 1458
                    self.match(CPP14Parser.Asm)
                    self.state = 1459
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1460
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 1461
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 1473
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignas, CPP14Parser.Using, CPP14Parser.LeftBracket]:
                        self.state = 1465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1462
                            self.attributespecifier()
                            self.state = 1467
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1468
                        self.match(CPP14Parser.Using)
                        self.state = 1469
                        self.match(CPP14Parser.Namespace)
                        pass
                    elif token == CPP14Parser.Namespace:
                        self.state = 1470
                        self.match(CPP14Parser.Namespace)
                        self.state = 1471
                        self.match(CPP14Parser.Identifier)
                        self.state = 1472
                        self.match(CPP14Parser.Assign)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1476
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 261, self._ctx)
                    if la_ == 1:
                        self.state = 1475
                        self.nestednamespecifier()

                    self.state = 1478
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 3:
                    self.state = 1479
                    self.match(CPP14Parser.Using)
                    self.state = 1510
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
                    if la_ == 1:
                        self.state = 1485
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 263, self._ctx)
                        if la_ == 1:
                            self.state = 1481
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Typename:
                                self.state = 1480
                                self.match(CPP14Parser.Typename)

                            self.state = 1483
                            self.nestednamespecifier()
                            pass

                        elif la_ == 2:
                            self.state = 1484
                            self.match(CPP14Parser.Doublecolon)
                            pass

                        self.state = 1487
                        self.unqualifiedid()
                        pass

                    elif la_ == 2:
                        self.state = 1488
                        self.match(CPP14Parser.Identifier)
                        self.state = 1492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1489
                            self.attributespecifier()
                            self.state = 1494
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1495
                        self.match(CPP14Parser.Assign)
                        self.state = 1497
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1496
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1499
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 265, self._ctx)

                        self.state = 1504
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 266, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1501
                                self.attributespecifier()
                            self.state = 1506
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 266, self._ctx)

                        self.state = 1508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 1507
                            self.abstractdeclarator()

                        pass

                    pass

                elif la_ == 4:
                    self.state = 1512
                    self.match(CPP14Parser.Static_assert)
                    self.state = 1513
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1514
                    self.conditionalexpression()
                    self.state = 1515
                    self.match(CPP14Parser.Comma)
                    self.state = 1516
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 1517
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 5:
                    self.state = 1519
                    self.match(CPP14Parser.Enum)
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                        self.state = 1520
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    self.state = 1526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1523
                        self.attributespecifier()
                        self.state = 1528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1529
                    self.match(CPP14Parser.Identifier)
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Colon:
                        self.state = 1530
                        self.match(CPP14Parser.Colon)
                        self.state = 1532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1531
                            self.typespecifier()
                            self.state = 1534
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                                            1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier):
                                break

                        self.state = 1539
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1536
                            self.attributespecifier()
                            self.state = 1541
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    pass

                self.state = 1546
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_simpledeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                         CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Virtual,
                         CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde,
                         CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
                if la_ == 1:
                    self.state = 1550
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1549
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1552
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

                    self.state = 1557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1554
                        self.attributespecifier()
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                                1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1562
                    self.declarator()
                    self.state = 1564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                            (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                            1 << (CPP14Parser.Assign - 54)))) != 0):
                        self.state = 1563
                        self.initializer()

                    self.state = 1573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1566
                        self.match(CPP14Parser.Comma)
                        self.state = 1567
                        self.declarator()
                        self.state = 1569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                                1 << (CPP14Parser.Assign - 54)))) != 0):
                            self.state = 1568
                            self.initializer()

                        self.state = 1575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1578
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1579
                    self.attributespecifier()
                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
                if la_ == 1:
                    self.state = 1585
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1584
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1587
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 284, self._ctx)

                    self.state = 1592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1589
                        self.attributespecifier()
                        self.state = 1594
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1597
                self.declarator()
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                        (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                        1 << (CPP14Parser.Assign - 54)))) != 0):
                    self.state = 1598
                    self.initializer()

                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1601
                    self.match(CPP14Parser.Comma)
                    self.state = 1602
                    self.declarator()
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                            (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                            1 << (CPP14Parser.Assign - 54)))) != 0):
                        self.state = 1603
                        self.initializer()

                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1611
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Specifier(self):
            return self.getToken(CPP14Parser.Specifier, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declspecifier)
        self._la = 0  # Token type
        try:
            self.state = 1617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Mutable, CPP14Parser.Specifier,
                         CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1615
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Virtual))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                           CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                           CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1616
                self.typespecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def basespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BasespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, i)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1619
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1621
                    self.attributespecifier()
                    self.state = 1626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 1628
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 293, self._ctx)
                    if la_ == 1:
                        self.state = 1627
                        self.nestednamespecifier()

                    self.state = 1630
                    self.match(CPP14Parser.Identifier)
                    self.state = 1649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1631
                        self.match(CPP14Parser.Less)
                        self.state = 1646
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                        1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                             1 << (CPP14Parser.PlusPlus - 66)) | (
                                                             1 << (CPP14Parser.MinusMinus - 66)) | (
                                                             1 << (CPP14Parser.Doublecolon - 66)) | (
                                                             1 << (CPP14Parser.Identifier - 66)) | (
                                                             1 << (CPP14Parser.Numberliteral - 66)) | (
                                                             1 << (CPP14Parser.Characterliteral - 66)) | (
                                                             1 << (CPP14Parser.Stringliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                             1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1632
                            self.templateargument()
                            self.state = 1634
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1633
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1643
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1636
                                self.match(CPP14Parser.Comma)
                                self.state = 1637
                                self.templateargument()
                                self.state = 1639
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 1638
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 1645
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 1648
                        self.match(CPP14Parser.Greater)

                    self.state = 1652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1651
                        self.match(CPP14Parser.Final)

                self.state = 1656
                self.match(CPP14Parser.Colon)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Virtual) | (
                                                                    1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 1657
                    self.basespecifier()
                    self.state = 1659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1658
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1661
                        self.match(CPP14Parser.Comma)
                        self.state = 1662
                        self.basespecifier()
                        self.state = 1664
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1663
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1673
                self.match(CPP14Parser.LeftBrace)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Specifier) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                        (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                                     1 << (CPP14Parser.Doublecolon - 66)) | (
                                                     1 << (CPP14Parser.Semi - 66)) | (
                                                     1 << (CPP14Parser.Ellipsis - 66)) | (
                                                     1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1674
                    self.memberspecification()

                self.state = 1677
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(CPP14Parser.Enum)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1679
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1682
                    self.attributespecifier()
                    self.state = 1687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1694
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 309, self._ctx)
                if la_ == 1:
                    self.state = 1689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1688
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 1691
                    self.nestednamespecifier()
                    self.state = 1692
                    self.match(CPP14Parser.Identifier)
                    pass

                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1696
                    self.match(CPP14Parser.Colon)
                    self.state = 1698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1697
                        self.typespecifier()
                        self.state = 1700
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                                        1 << CPP14Parser.Typename) | (
                                        1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1702
                        self.attributespecifier()
                        self.state = 1707
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1710
                self.match(CPP14Parser.LeftBrace)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1711
                    self.match(CPP14Parser.Identifier)
                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1712
                        self.match(CPP14Parser.Assign)
                        self.state = 1713
                        self.conditionalexpression()

                    self.state = 1724
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 315, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1716
                            self.match(CPP14Parser.Comma)
                            self.state = 1717
                            self.match(CPP14Parser.Identifier)
                            self.state = 1720
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Assign:
                                self.state = 1718
                                self.match(CPP14Parser.Assign)
                                self.state = 1719
                                self.conditionalexpression()

                        self.state = 1726
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 315, self._ctx)

                    self.state = 1728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 1727
                        self.match(CPP14Parser.Comma)

                self.state = 1732
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def ConstOrVolatile(self):
            return self.getToken(CPP14Parser.ConstOrVolatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1735
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1736
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 327, self._ctx)
                if la_ == 1:
                    self.state = 1740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1737
                        self.attributespecifier()
                        self.state = 1742
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1744
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 320, self._ctx)
                    if la_ == 1:
                        self.state = 1743
                        self.nestednamespecifier()

                    self.state = 1746
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1751
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 322, self._ctx)
                    if la_ == 1:
                        self.state = 1747
                        self.nestednamespecifier()
                        self.state = 1749
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1748
                            self.match(CPP14Parser.Template)

                    self.state = 1753
                    self.match(CPP14Parser.Identifier)
                    self.state = 1754
                    self.match(CPP14Parser.Less)
                    self.state = 1769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1755
                        self.templateargument()
                        self.state = 1757
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1756
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1759
                            self.match(CPP14Parser.Comma)
                            self.state = 1760
                            self.templateargument()
                            self.state = 1762
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1761
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1768
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1771
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token == CPP14Parser.Enum:
                self.enterOuterAlt(localctx, 3)
                self.state = 1774
                self.match(CPP14Parser.Enum)
                self.state = 1776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
                if la_ == 1:
                    self.state = 1775
                    self.nestednamespecifier()

                self.state = 1778
                self.match(CPP14Parser.Identifier)
                pass
            elif token == CPP14Parser.Typename:
                self.enterOuterAlt(localctx, 4)
                self.state = 1779
                self.match(CPP14Parser.Typename)
                self.state = 1780
                self.nestednamespecifier()
                self.state = 1804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 334, self._ctx)
                if la_ == 1:
                    self.state = 1781
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1782
                        self.match(CPP14Parser.Template)

                    self.state = 1785
                    self.match(CPP14Parser.Identifier)
                    self.state = 1786
                    self.match(CPP14Parser.Less)
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1787
                        self.templateargument()
                        self.state = 1789
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1788
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1798
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1791
                            self.match(CPP14Parser.Comma)
                            self.state = 1792
                            self.templateargument()
                            self.state = 1794
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1793
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1800
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1803
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token == CPP14Parser.ConstOrVolatile:
                self.enterOuterAlt(localctx, 5)
                self.state = 1806
                self.match(CPP14Parser.ConstOrVolatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Types(self):
            return self.getToken(CPP14Parser.Types, 0)

        def SignedUnsigned(self):
            return self.getToken(CPP14Parser.SignedUnsigned, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 348, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 336, self._ctx)
                if la_ == 1:
                    self.state = 1809
                    self.nestednamespecifier()

                self.state = 1812
                self.match(CPP14Parser.Identifier)
                self.state = 1831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 341, self._ctx)
                if la_ == 1:
                    self.state = 1813
                    self.match(CPP14Parser.Less)
                    self.state = 1828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1814
                        self.templateargument()
                        self.state = 1816
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1815
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1825
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1818
                            self.match(CPP14Parser.Comma)
                            self.state = 1819
                            self.templateargument()
                            self.state = 1821
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1820
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1827
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1830
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1833
                self.nestednamespecifier()
                self.state = 1834
                self.match(CPP14Parser.Template)
                self.state = 1835
                self.match(CPP14Parser.Identifier)
                self.state = 1836
                self.match(CPP14Parser.Less)
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                        (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                                     1 << (CPP14Parser.PlusPlus - 66)) | (
                                                     1 << (CPP14Parser.MinusMinus - 66)) | (
                                                     1 << (CPP14Parser.Doublecolon - 66)) | (
                                                     1 << (CPP14Parser.Identifier - 66)) | (
                                                     1 << (CPP14Parser.Numberliteral - 66)) | (
                                                     1 << (CPP14Parser.Characterliteral - 66)) | (
                                                     1 << (CPP14Parser.Stringliteral - 66)) | (
                                                     1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                                     1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 1837
                    self.templateargument()
                    self.state = 1839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1838
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1841
                        self.match(CPP14Parser.Comma)
                        self.state = 1842
                        self.templateargument()
                        self.state = 1844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1843
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1853
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1855
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1856
                self.match(CPP14Parser.Decltype)
                self.state = 1857
                self.match(CPP14Parser.LeftParen)
                self.state = 1867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 347, self._ctx)
                if la_ == 1:
                    self.state = 1858
                    self.assignmentexpression()
                    self.state = 1863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1859
                        self.match(CPP14Parser.Comma)
                        self.state = 1860
                        self.assignmentexpression()
                        self.state = 1865
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1866
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 1869
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.match(CPP14Parser.LeftBracket)
                self.state = 1873
                self.match(CPP14Parser.LeftBracket)
                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1874
                    self.match(CPP14Parser.Identifier)
                    self.state = 1877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Doublecolon:
                        self.state = 1875
                        self.match(CPP14Parser.Doublecolon)
                        self.state = 1876
                        self.match(CPP14Parser.Identifier)

                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 1879
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace))) != 0):
                            self.state = 1880
                            self.balancedtoken()
                            self.state = 1885
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1886
                        self.match(CPP14Parser.RightParen)

                    self.state = 1890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1889
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1894
                    self.match(CPP14Parser.Comma)
                    self.state = 1913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1895
                        self.match(CPP14Parser.Identifier)
                        self.state = 1898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Doublecolon:
                            self.state = 1896
                            self.match(CPP14Parser.Doublecolon)
                            self.state = 1897
                            self.match(CPP14Parser.Identifier)

                        self.state = 1908
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.LeftParen:
                            self.state = 1900
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1904
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace))) != 0):
                                self.state = 1901
                                self.balancedtoken()
                                self.state = 1906
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1907
                            self.match(CPP14Parser.RightParen)

                        self.state = 1911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1910
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 1919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1920
                self.match(CPP14Parser.RightBracket)
                self.state = 1921
                self.match(CPP14Parser.RightBracket)
                pass
            elif token == CPP14Parser.Alignas:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.match(CPP14Parser.Alignas)
                self.state = 1923
                self.match(CPP14Parser.LeftParen)
                self.state = 1939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 363, self._ctx)
                if la_ == 1:
                    self.state = 1925
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1924
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1927
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 360, self._ctx)

                    self.state = 1932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 361, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1929
                            self.attributespecifier()
                        self.state = 1934
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 361, self._ctx)

                    self.state = 1936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 362, self._ctx)
                    if la_ == 1:
                        self.state = 1935
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 1938
                    self.conditionalexpression()
                    pass

                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1941
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1944
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_balancedtoken)
        self._la = 0  # Token type
        try:
            self.state = 1972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftParen:
                self.enterOuterAlt(localctx, 1)
                self.state = 1948
                self.match(CPP14Parser.LeftParen)
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1949
                    self.balancedtoken()
                    self.state = 1954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1955
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 2)
                self.state = 1956
                self.match(CPP14Parser.LeftBracket)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1957
                    self.balancedtoken()
                    self.state = 1962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1963
                self.match(CPP14Parser.RightBracket)
                pass
            elif token == CPP14Parser.LeftBrace:
                self.enterOuterAlt(localctx, 3)
                self.state = 1964
                self.match(CPP14Parser.LeftBrace)
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1965
                    self.balancedtoken()
                    self.state = 1970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1971
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declarator)
        self._la = 0  # Token type
        try:
            self.state = 2030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 382, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1974
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                             CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1975
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 372, self._ctx)
                    if la_ == 1:
                        self.state = 1978
                        self.nestednamespecifier()
                        self.state = 1980
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1979
                            self.match(CPP14Parser.Template)

                    self.state = 1984
                    self.unqualifiedid()
                    self.state = 1988
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 373, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1985
                            self.attributespecifier()
                        self.state = 1990
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 373, self._ctx)

                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 1991
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1992
                    self.ptrdeclarator()
                    self.state = 1993
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2009
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == CPP14Parser.LeftParen:
                            self.state = 1997
                            self.parametersandqualifiers()
                            pass
                        elif token == CPP14Parser.LeftBracket:
                            self.state = 1998
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2000
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1999
                                self.conditionalexpression()

                            self.state = 2002
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2006
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2003
                                    self.attributespecifier()
                                self.state = 2008
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2013
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)

                self.state = 2014
                self.parametersandqualifiers()
                self.state = 2015
                self.match(CPP14Parser.Arrow)
                self.state = 2017
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2016
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2019
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 379, self._ctx)

                self.state = 2024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 380, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2021
                        self.attributespecifier()
                    self.state = 2026
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 380, self._ctx)

                self.state = 2028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 381, self._ctx)
                if la_ == 1:
                    self.state = 2027
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_ptrdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 397, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2052
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                             CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2032
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2039
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 385, self._ctx)
                    if la_ == 1:
                        self.state = 2035
                        self.nestednamespecifier()
                        self.state = 2037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2036
                            self.match(CPP14Parser.Template)

                    self.state = 2041
                    self.unqualifiedid()
                    self.state = 2045
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2042
                            self.attributespecifier()
                        self.state = 2047
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)

                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 2048
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2049
                    self.ptrdeclarator()
                    self.state = 2050
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2066
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == CPP14Parser.LeftParen:
                            self.state = 2054
                            self.parametersandqualifiers()
                            pass
                        elif token == CPP14Parser.LeftBracket:
                            self.state = 2055
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2057
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 2056
                                self.conditionalexpression()

                            self.state = 2059
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2063
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 389, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2060
                                    self.attributespecifier()
                                self.state = 2065
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 389, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2070
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2094
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 2072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 2071
                        self.nestednamespecifier()

                    self.state = 2074
                    self.match(CPP14Parser.Star)
                    self.state = 2078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2075
                        self.attributespecifier()
                        self.state = 2080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.ConstOrVolatile:
                        self.state = 2081
                        self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 2086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 2087
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2088
                        self.attributespecifier()
                        self.state = 2093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2096
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.match(CPP14Parser.LeftParen)
            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                self.state = 2100
                self.parameterdeclaration()
                self.state = 2105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 398, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2101
                        self.match(CPP14Parser.Comma)
                        self.state = 2102
                        self.parameterdeclaration()
                    self.state = 2107
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 398, self._ctx)

                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 2108
                    self.match(CPP14Parser.Comma)

            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2113
                self.match(CPP14Parser.Ellipsis)

            self.state = 2116
            self.match(CPP14Parser.RightParen)
            self.state = 2120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 402, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2117
                    self.match(CPP14Parser.ConstOrVolatile)
                self.state = 2122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 402, self._ctx)

            self.state = 2124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 403, self._ctx)
            if la_ == 1:
                self.state = 2123
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 404, self._ctx)
            if la_ == 1:
                self.state = 2126
                self.exceptionspecification()

            self.state = 2132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 405, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2129
                    self.attributespecifier()
                self.state = 2134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 405, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_abstractdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 420, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2135
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 406, self._ctx)
                if la_ == 1:
                    self.state = 2136
                    self.noptrabstractdeclarator(0)

                self.state = 2139
                self.parametersandqualifiers()
                self.state = 2140
                self.match(CPP14Parser.Arrow)
                self.state = 2142
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2141
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 407, self._ctx)

                self.state = 2149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 408, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2146
                        self.attributespecifier()
                    self.state = 2151
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 408, self._ctx)

                self.state = 2153
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 409, self._ctx)
                if la_ == 1:
                    self.state = 2152
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Decltype or _la == CPP14Parser.Star or ((((_la - 66)) & ~0x3f) == 0 and (
                        (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 2178
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier]:
                        self.state = 2156
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                            self.state = 2155
                            self.nestednamespecifier()

                        self.state = 2158
                        self.match(CPP14Parser.Star)
                        self.state = 2162
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 2159
                            self.attributespecifier()
                            self.state = 2164
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2168
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.ConstOrVolatile:
                            self.state = 2165
                            self.match(CPP14Parser.ConstOrVolatile)
                            self.state = 2170
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                        self.state = 2171
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 2172
                            self.attributespecifier()
                            self.state = 2177
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2183
                self.match(CPP14Parser.Ellipsis)
                self.state = 2198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 419, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2196
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == CPP14Parser.LeftParen:
                            self.state = 2184
                            self.parametersandqualifiers()
                            pass
                        elif token == CPP14Parser.LeftBracket:
                            self.state = 2185
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2187
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                            1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                    1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                            1 << (CPP14Parser.Stringliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 2186
                                self.conditionalexpression()

                            self.state = 2189
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2193
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2190
                                    self.attributespecifier()
                                self.state = 2195
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2200
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 419, self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ptrabstractdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2203
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2227
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 2205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 2204
                        self.nestednamespecifier()

                    self.state = 2207
                    self.match(CPP14Parser.Star)
                    self.state = 2211
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 422, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2208
                            self.attributespecifier()
                        self.state = 2213
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 422, self._ctx)

                    self.state = 2217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.ConstOrVolatile:
                        self.state = 2214
                        self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 2219
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 2220
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2224
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 424, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2221
                            self.attributespecifier()
                        self.state = 2226
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 424, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 426, self._ctx)
                if la_ == 1:
                    self.state = 2229
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 430, self._ctx)
            if la_ == 1:
                self.state = 2235
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 2236
                self.match(CPP14Parser.LeftBracket)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2237
                    self.conditionalexpression()

                self.state = 2240
                self.match(CPP14Parser.RightBracket)
                self.state = 2244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 429, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2241
                        self.attributespecifier()
                    self.state = 2246
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 429, self._ctx)

                pass

            elif la_ == 3:
                self.state = 2247
                self.match(CPP14Parser.LeftParen)
                self.state = 2248
                self.ptrabstractdeclarator()
                self.state = 2249
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 2270
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 434, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                    self.state = 2253
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2266
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.LeftParen:
                        self.state = 2254
                        self.parametersandqualifiers()
                        pass
                    elif token == CPP14Parser.LeftBracket:
                        self.state = 2255
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 2257
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                        1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 2256
                            self.conditionalexpression()

                        self.state = 2259
                        self.match(CPP14Parser.RightBracket)
                        self.state = 2263
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 432, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2260
                                self.attributespecifier()
                            self.state = 2265
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 432, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 434, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2273
                self.attributespecifier()
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2280
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2279
                    self.declspecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 436, self._ctx)

            self.state = 2287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2284
                self.attributespecifier()
                self.state = 2289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2290
            self.declarator()
            self.state = 2292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 438, self._ctx)
            if la_ == 1:
                self.state = 2291
                self.abstractdeclarator()

            self.state = 2299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Assign:
                self.state = 2294
                self.match(CPP14Parser.Assign)
                self.state = 2297
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2295
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2296
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MeminitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MeminitializerContext, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 2360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 2301
                    self.match(CPP14Parser.Colon)
                    self.state = 2302
                    self.meminitializer()
                    self.state = 2304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2303
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2306
                        self.match(CPP14Parser.Comma)
                        self.state = 2307
                        self.meminitializer()
                        self.state = 2309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2308
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2318
                self.match(CPP14Parser.LeftBrace)
                self.state = 2322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                                1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                                1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                                1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                                1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2319
                    self.statement()
                    self.state = 2324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2325
                self.match(CPP14Parser.RightBrace)
                pass
            elif token == CPP14Parser.Try:
                self.enterOuterAlt(localctx, 2)
                self.state = 2326
                self.match(CPP14Parser.Try)
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 2327
                    self.match(CPP14Parser.Colon)
                    self.state = 2328
                    self.meminitializer()
                    self.state = 2330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2329
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2332
                        self.match(CPP14Parser.Comma)
                        self.state = 2333
                        self.meminitializer()
                        self.state = 2335
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2334
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2341
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2344
                self.match(CPP14Parser.LeftBrace)
                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                                1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                                1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                                1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                                1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                                1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                                1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2345
                    self.statement()
                    self.state = 2350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2351
                self.match(CPP14Parser.RightBrace)
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2352
                    self.handler()
                    self.state = 2355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Catch):
                        break

                pass
            elif token == CPP14Parser.Assign:
                self.enterOuterAlt(localctx, 3)
                self.state = 2357
                self.match(CPP14Parser.Assign)
                self.state = 2358
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2359
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInitializer"):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 2391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 459, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2362
                self.match(CPP14Parser.Assign)
                self.state = 2363
                self.assignmentexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 2364
                    self.match(CPP14Parser.Assign)

                self.state = 2367
                self.bracedinitlist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2368
                self.match(CPP14Parser.LeftParen)
                self.state = 2371
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2369
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2370
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2373
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2376
                    self.match(CPP14Parser.Comma)
                    self.state = 2379
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2377
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 2378
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2381
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2389
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(CPP14Parser.LeftBrace)
            self.state = 2417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                            1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2396
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2394
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2395
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2398
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 464, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2401
                        self.match(CPP14Parser.Comma)
                        self.state = 2404
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 2402
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 2403
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2407
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2406
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 2413
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 464, self._ctx)

                self.state = 2415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 2414
                    self.match(CPP14Parser.Comma)

            self.state = 2419
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def memberdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_memberspecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 482, self._ctx)
            if la_ == 1:
                self.state = 2424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 467, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2421
                        self.attributespecifier()
                    self.state = 2426
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 467, self._ctx)

                self.state = 2438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 470, self._ctx)
                if la_ == 1:
                    self.state = 2428
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2427
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2430
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 468, self._ctx)

                    self.state = 2435
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 469, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2432
                            self.attributespecifier()
                        self.state = 2437
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 469, self._ctx)

                self.state = 2456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 473, self._ctx)
                if la_ == 1:
                    self.state = 2444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                            (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                                         1 << (CPP14Parser.Doublecolon - 66)) | (
                                                         1 << (CPP14Parser.Ellipsis - 66)) | (
                                                         1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2440
                        self.memberdeclarator()

                        self.state = 2441
                        self.match(CPP14Parser.Comma)
                        self.state = 2442
                        self.memberdeclarator()

                    self.state = 2446
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 2447
                    self.declarator()
                    self.state = 2451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2448
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2454
                    self.functionbody()
                    pass

                pass

            elif la_ == 2:
                self.state = 2458
                self.match(CPP14Parser.Static_assert)
                self.state = 2459
                self.match(CPP14Parser.LeftParen)
                self.state = 2460
                self.conditionalexpression()
                self.state = 2461
                self.match(CPP14Parser.Comma)
                self.state = 2462
                self.match(CPP14Parser.Stringliteral)
                self.state = 2463
                self.match(CPP14Parser.RightParen)
                self.state = 2464
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.state = 2466
                self.match(CPP14Parser.Template)
                self.state = 2467
                self.match(CPP14Parser.Less)
                self.state = 2468
                self.templateparameter()
                self.state = 2473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2469
                    self.match(CPP14Parser.Comma)
                    self.state = 2470
                    self.templateparameter()
                    self.state = 2475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2476
                self.match(CPP14Parser.Greater)
                self.state = 2477
                self.declaration()
                pass

            elif la_ == 4:
                self.state = 2479
                self.match(CPP14Parser.Using)
                self.state = 2510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 481, self._ctx)
                if la_ == 1:
                    self.state = 2485
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 476, self._ctx)
                    if la_ == 1:
                        self.state = 2481
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 2480
                            self.match(CPP14Parser.Typename)

                        self.state = 2483
                        self.nestednamespecifier()
                        pass

                    elif la_ == 2:
                        self.state = 2484
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    self.state = 2487
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 2488
                    self.match(CPP14Parser.Identifier)
                    self.state = 2492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2489
                        self.attributespecifier()
                        self.state = 2494
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2495
                    self.match(CPP14Parser.Assign)
                    self.state = 2497
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2496
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2499
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 478, self._ctx)

                    self.state = 2504
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 479, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2501
                            self.attributespecifier()
                        self.state = 2506
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 479, self._ctx)

                    self.state = 2508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2507
                        self.abstractdeclarator()

                    pass

                self.state = 2512
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.state = 2514
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.state = 2515
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2516
                self.match(CPP14Parser.Colon)
                pass

            self.state = 2520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                            1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                self.state = 2519
                self.memberspecification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 491, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2522
                self.declarator()
                self.state = 2540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 488, self._ctx)
                if la_ == 1:
                    self.state = 2526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2523
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 2529
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 2538
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 487, self._ctx)
                    if la_ == 1:
                        self.state = 2532
                        self.match(CPP14Parser.Assign)
                        self.state = 2533
                        self.assignmentexpression()

                    elif la_ == 2:
                        self.state = 2535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Assign:
                            self.state = 2534
                            self.match(CPP14Parser.Assign)

                        self.state = 2537
                        self.bracedinitlist()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2542
                    self.match(CPP14Parser.Identifier)

                self.state = 2548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2545
                    self.attributespecifier()
                    self.state = 2550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2551
                self.match(CPP14Parser.Colon)
                self.state = 2552
                self.conditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2555
            self.match(CPP14Parser.Assign)
            self.state = 2556
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo('0') != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2559
                self.attributespecifier()
                self.state = 2564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Virtual:
                self.state = 2565
                self.match(CPP14Parser.Virtual)
                self.state = 2567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.PrivateProtectedPublic:
                    self.state = 2566
                    self.match(CPP14Parser.PrivateProtectedPublic)

                pass
            elif token == CPP14Parser.PrivateProtectedPublic:
                self.state = 2569
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2570
                    self.match(CPP14Parser.Virtual)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                pass
            else:
                pass
            self.state = 2575
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classordecltype)
        self._la = 0  # Token type
        try:
            self.state = 2615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 504, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 496, self._ctx)
                if la_ == 1:
                    self.state = 2577
                    self.nestednamespecifier()

                self.state = 2580
                self.match(CPP14Parser.Identifier)
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2581
                    self.match(CPP14Parser.Less)
                    self.state = 2596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                            1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                    1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 2582
                        self.templateargument()
                        self.state = 2584
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2583
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 2586
                            self.match(CPP14Parser.Comma)
                            self.state = 2587
                            self.templateargument()
                            self.state = 2589
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 2588
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 2595
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2598
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2601
                self.match(CPP14Parser.Decltype)
                self.state = 2602
                self.match(CPP14Parser.LeftParen)
                self.state = 2612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 503, self._ctx)
                if la_ == 1:
                    self.state = 2603
                    self.assignmentexpression()
                    self.state = 2608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2604
                        self.match(CPP14Parser.Comma)
                        self.state = 2605
                        self.assignmentexpression()
                        self.state = 2610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2611
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2614
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_meminitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 505, self._ctx)
            if la_ == 1:
                self.state = 2617
                self.classordecltype()
                pass

            elif la_ == 2:
                self.state = 2618
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 2646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftParen:
                self.state = 2621
                self.match(CPP14Parser.LeftParen)
                self.state = 2642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2624
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2622
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 2623
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2626
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2629
                        self.match(CPP14Parser.Comma)
                        self.state = 2632
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 2630
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 2631
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2635
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2634
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2641
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2644
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.LeftBrace:
                self.state = 2645
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_templateparameter)
        self._la = 0  # Token type
        try:
            self.state = 2707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 527, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2648
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2673
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 519, self._ctx)
                if la_ == 1:
                    self.state = 2650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2649
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2652
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2655
                        self.match(CPP14Parser.Identifier)

                    self.state = 2658
                    self.match(CPP14Parser.Assign)
                    self.state = 2660
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2659
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2662
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 516, self._ctx)

                    self.state = 2667
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 517, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2664
                            self.attributespecifier()
                        self.state = 2669
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 517, self._ctx)

                    self.state = 2671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2670
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2675
                self.match(CPP14Parser.Template)
                self.state = 2676
                self.match(CPP14Parser.Less)
                self.state = 2677
                self.templateparameter()
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2678
                    self.match(CPP14Parser.Comma)
                    self.state = 2679
                    self.templateparameter()
                    self.state = 2684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2685
                self.match(CPP14Parser.Greater)
                self.state = 2686
                self.match(CPP14Parser.Class)
                self.state = 2704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 526, self._ctx)
                if la_ == 1:
                    self.state = 2688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2687
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2690
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2693
                        self.match(CPP14Parser.Identifier)

                    self.state = 2696
                    self.match(CPP14Parser.Assign)
                    self.state = 2701
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 525, self._ctx)
                    if la_ == 1:
                        self.state = 2697
                        self.nestednamespecifier()
                        self.state = 2699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2698
                            self.match(CPP14Parser.Template)

                    self.state = 2703
                    self.unqualifiedid()
                    pass

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2706
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_templateargument)
        self._la = 0  # Token type
        try:
            self.state = 2731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 533, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2710
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2709
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2712
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 528, self._ctx)

                self.state = 2717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 529, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2714
                        self.attributespecifier()
                    self.state = 2719
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 529, self._ctx)

                self.state = 2721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 530, self._ctx)
                if la_ == 1:
                    self.state = 2720
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2723
                self.conditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 532, self._ctx)
                if la_ == 1:
                    self.state = 2724
                    self.nestednamespecifier()
                    self.state = 2726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 2725
                        self.match(CPP14Parser.Template)

                self.state = 2730
                self.unqualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTryblock"):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2733
            self.match(CPP14Parser.Try)
            self.state = 2734
            self.match(CPP14Parser.LeftBrace)
            self.state = 2738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                            1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                            1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                            1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                            1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2735
                self.statement()
                self.state = 2740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2741
            self.match(CPP14Parser.RightBrace)
            self.state = 2743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2742
                self.handler()
                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHandler"):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.match(CPP14Parser.Catch)
            self.state = 2748
            self.match(CPP14Parser.LeftParen)
            self.state = 2773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                         CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.LeftBracket,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 2752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2749
                    self.attributespecifier()
                    self.state = 2754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2756
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2755
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 537, self._ctx)

                self.state = 2763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 538, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2760
                        self.attributespecifier()
                    self.state = 2765
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 538, self._ctx)

                self.state = 2770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 540, self._ctx)
                if la_ == 1:
                    self.state = 2766
                    self.declarator()
                    pass

                elif la_ == 2:
                    self.state = 2768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2767
                        self.abstractdeclarator()

                    pass

                pass
            elif token == CPP14Parser.Ellipsis:
                self.state = 2772
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2775
            self.match(CPP14Parser.RightParen)
            self.state = 2776
            self.match(CPP14Parser.LeftBrace)
            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                            1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                            1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                    1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                            1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                            1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                            1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2777
                self.statement()
                self.state = 2782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2783
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_exceptionspecification)
        self._la = 0  # Token type
        try:
            self.state = 2837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Throw:
                self.enterOuterAlt(localctx, 1)
                self.state = 2785
                self.match(CPP14Parser.Throw)
                self.state = 2786
                self.match(CPP14Parser.LeftParen)
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 2788
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2787
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2790
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 543, self._ctx)

                    self.state = 2795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 544, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2792
                            self.attributespecifier()
                        self.state = 2797
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 544, self._ctx)

                    self.state = 2799
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 545, self._ctx)
                    if la_ == 1:
                        self.state = 2798
                        self.abstractdeclarator()

                    self.state = 2802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2801
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2804
                        self.match(CPP14Parser.Comma)
                        self.state = 2806
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2805
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2808
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 547, self._ctx)

                        self.state = 2813
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 548, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2810
                                self.attributespecifier()
                            self.state = 2815
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 548, self._ctx)

                        self.state = 2817
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 549, self._ctx)
                        if la_ == 1:
                            self.state = 2816
                            self.abstractdeclarator()

                        self.state = 2820
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2819
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2826
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2829
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.Noexcept:
                self.enterOuterAlt(localctx, 2)
                self.state = 2830
                self.match(CPP14Parser.Noexcept)
                self.state = 2835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 553, self._ctx)
                if la_ == 1:
                    self.state = 2831
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2832
                    self.conditionalexpression()
                    self.state = 2833
                    self.match(CPP14Parser.RightParen)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_theoperator)
        self._la = 0  # Token type
        try:
            self.state = 2855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 556, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2839
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Delete) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Plus) | (
                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star) | (1 << CPP14Parser.Div))) != 0) or (
                                (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & (
                                (1 << (CPP14Parser.Mod - 64)) | (1 << (CPP14Parser.Caret - 64)) | (
                                1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                                        1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                                        1 << (CPP14Parser.Assign - 64)) | (1 << (CPP14Parser.Less - 64)) | (
                                        1 << (CPP14Parser.Greater - 64)) | (1 << (CPP14Parser.PlusAssign - 64)) | (
                                        1 << (CPP14Parser.MinusAssign - 64)) | (1 << (CPP14Parser.StarAssign - 64)) | (
                                        1 << (CPP14Parser.DivAssign - 64)) | (1 << (CPP14Parser.ModAssign - 64)) | (
                                        1 << (CPP14Parser.XorAssign - 64)) | (1 << (CPP14Parser.AndAssign - 64)) | (
                                        1 << (CPP14Parser.OrAssign - 64)) | (1 << (CPP14Parser.LeftShift - 64)) | (
                                        1 << (CPP14Parser.LeftShiftAssign - 64)) | (1 << (CPP14Parser.Equal - 64)) | (
                                        1 << (CPP14Parser.NotEqual - 64)) | (1 << (CPP14Parser.LessEqual - 64)) | (
                                        1 << (CPP14Parser.GreaterEqual - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                                        1 << (CPP14Parser.OrOr - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                        1 << (CPP14Parser.MinusMinus - 64)) | (
                                        1 << (CPP14Parser.UnaryCondition - 64)) | (1 << (CPP14Parser.Comma - 64)) | (
                                        1 << (CPP14Parser.ArrowStar - 64)) | (1 << (CPP14Parser.Arrow - 64)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2840
                self.match(CPP14Parser.New)
                self.state = 2841
                self.match(CPP14Parser.LeftBracket)
                self.state = 2842
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2843
                self.match(CPP14Parser.Delete)
                self.state = 2844
                self.match(CPP14Parser.LeftBracket)
                self.state = 2845
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2846
                self.match(CPP14Parser.Greater)
                self.state = 2847
                self.match(CPP14Parser.Greater)
                self.state = 2849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 555, self._ctx)
                if la_ == 1:
                    self.state = 2848
                    self.match(CPP14Parser.Assign)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2851
                self.match(CPP14Parser.LeftParen)
                self.state = 2852
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2853
                self.match(CPP14Parser.LeftBracket)
                self.state = 2854
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.postfixunaryincdecexpression_sempred
        self._predicates[13] = self.relationalexpression_sempred
        self._predicates[14] = self.equalityexpression_sempred
        self._predicates[40] = self.noptrabstractdeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixunaryincdecexpression_sempred(self, localctx: PostfixunaryincdecexpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 4)
