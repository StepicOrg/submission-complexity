# Generated from /home/meanmail/StepikProjects/submission-complexity/complexity/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3v")
        buf.write("\u0b12\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\3\2\7\2\u0084\n")
        buf.write("\2\f\2\16\2\u0087\13\2\3\2\3\2\3\3\3\3\6\3\u008d\n\3\r")
        buf.write("\3\16\3\u008e\3\3\7\3\u0092\n\3\f\3\16\3\u0095\13\3\3")
        buf.write("\3\5\3\u0098\n\3\3\3\3\3\7\3\u009c\n\3\f\3\16\3\u009f")
        buf.write("\13\3\3\3\7\3\u00a2\n\3\f\3\16\3\u00a5\13\3\3\3\3\3\7")
        buf.write("\3\u00a9\n\3\f\3\16\3\u00ac\13\3\7\3\u00ae\n\3\f\3\16")
        buf.write("\3\u00b1\13\3\3\3\3\3\3\3\3\3\3\3\5\3\u00b8\n\3\3\3\3")
        buf.write("\3\3\3\5\3\u00bd\n\3\7\3\u00bf\n\3\f\3\16\3\u00c2\13\3")
        buf.write("\5\3\u00c4\n\3\3\3\5\3\u00c7\n\3\3\3\3\3\3\3\3\3\3\3\7")
        buf.write("\3\u00ce\n\3\f\3\16\3\u00d1\13\3\3\3\5\3\u00d4\n\3\3\3")
        buf.write("\5\3\u00d7\n\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00df\n\3\5")
        buf.write("\3\u00e1\n\3\3\3\3\3\3\3\5\3\u00e6\n\3\3\3\3\3\3\3\5\3")
        buf.write("\u00eb\n\3\7\3\u00ed\n\3\f\3\16\3\u00f0\13\3\5\3\u00f2")
        buf.write("\n\3\3\3\5\3\u00f5\n\3\5\3\u00f7\n\3\3\4\3\4\3\4\3\4\5")
        buf.write("\4\u00fd\n\4\3\4\3\4\3\4\5\4\u0102\n\4\7\4\u0104\n\4\f")
        buf.write("\4\16\4\u0107\13\4\5\4\u0109\n\4\3\4\5\4\u010c\n\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\7\4\u0113\n\4\f\4\16\4\u0116\13\4\3\4")
        buf.write("\5\4\u0119\n\4\3\4\5\4\u011c\n\4\3\4\3\4\3\4\5\4\u0121")
        buf.write("\n\4\3\4\3\4\3\4\3\4\5\4\u0127\n\4\3\4\3\4\3\4\5\4\u012c")
        buf.write("\n\4\7\4\u012e\n\4\f\4\16\4\u0131\13\4\5\4\u0133\n\4\3")
        buf.write("\4\5\4\u0136\n\4\7\4\u0138\n\4\f\4\16\4\u013b\13\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\7\5\u0143\n\5\f\5\16\5\u0146\13\5")
        buf.write("\3\5\5\5\u0149\n\5\5\5\u014b\n\5\3\5\5\5\u014e\n\5\3\5")
        buf.write("\3\5\5\5\u0152\n\5\3\5\5\5\u0155\n\5\3\5\7\5\u0158\n\5")
        buf.write("\f\5\16\5\u015b\13\5\3\5\3\5\6\5\u015f\n\5\r\5\16\5\u0160")
        buf.write("\3\5\7\5\u0164\n\5\f\5\16\5\u0167\13\5\3\5\5\5\u016a\n")
        buf.write("\5\5\5\u016c\n\5\3\6\3\6\5\6\u0170\n\6\3\6\3\6\5\6\u0174")
        buf.write("\n\6\5\6\u0176\n\6\3\6\3\6\5\6\u017a\n\6\3\6\3\6\3\6\3")
        buf.write("\6\7\6\u0180\n\6\f\6\16\6\u0183\13\6\3\6\5\6\u0186\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\5\6\u018d\n\6\3\6\5\6\u0190\n\6\3")
        buf.write("\6\3\6\3\6\5\6\u0195\n\6\3\6\5\6\u0198\n\6\7\6\u019a\n")
        buf.write("\6\f\6\16\6\u019d\13\6\5\6\u019f\n\6\3\6\5\6\u01a2\n\6")
        buf.write("\5\6\u01a4\n\6\3\7\3\7\3\7\3\7\5\7\u01aa\n\7\5\7\u01ac")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b4\n\7\3\7\5\7\u01b7")
        buf.write("\n\7\3\7\3\7\5\7\u01bb\n\7\3\7\5\7\u01be\n\7\3\7\5\7\u01c1")
        buf.write("\n\7\3\7\3\7\5\7\u01c5\n\7\3\7\3\7\5\7\u01c9\n\7\3\7\5")
        buf.write("\7\u01cc\n\7\3\7\5\7\u01cf\n\7\7\7\u01d1\n\7\f\7\16\7")
        buf.write("\u01d4\13\7\5\7\u01d6\n\7\3\7\3\7\5\7\u01da\n\7\3\7\3")
        buf.write("\7\7\7\u01de\n\7\f\7\16\7\u01e1\13\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u01e9\n\7\3\7\3\7\3\7\3\7\5\7\u01ef\n\7\3\7")
        buf.write("\3\7\3\7\5\7\u01f4\n\7\7\7\u01f6\n\7\f\7\16\7\u01f9\13")
        buf.write("\7\5\7\u01fb\n\7\3\7\5\7\u01fe\n\7\5\7\u0200\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u0205\n\7\3\7\5\7\u0208\n\7\3\7\3\7\3\7\5\7")
        buf.write("\u020d\n\7\3\7\5\7\u0210\n\7\7\7\u0212\n\7\f\7\16\7\u0215")
        buf.write("\13\7\5\7\u0217\n\7\3\7\3\7\5\7\u021b\n\7\3\7\3\7\3\7")
        buf.write("\6\7\u0220\n\7\r\7\16\7\u0221\3\7\7\7\u0225\n\7\f\7\16")
        buf.write("\7\u0228\13\7\3\7\5\7\u022b\n\7\3\7\3\7\5\7\u022f\n\7")
        buf.write("\3\7\3\7\3\7\3\7\7\7\u0235\n\7\f\7\16\7\u0238\13\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0241\n\7\f\7\16\7\u0244")
        buf.write("\13\7\3\7\6\7\u0247\n\7\r\7\16\7\u0248\3\7\7\7\u024c\n")
        buf.write("\7\f\7\16\7\u024f\13\7\3\7\5\7\u0252\n\7\5\7\u0254\n\7")
        buf.write("\3\7\3\7\5\7\u0258\n\7\3\7\7\7\u025b\n\7\f\7\16\7\u025e")
        buf.write("\13\7\5\7\u0260\n\7\3\b\3\b\3\b\3\b\3\b\7\b\u0267\n\b")
        buf.write("\f\b\16\b\u026a\13\b\5\b\u026c\n\b\3\b\3\b\3\t\5\t\u0271")
        buf.write("\n\t\3\t\3\t\3\t\3\t\5\t\u0277\n\t\3\t\3\t\3\t\5\t\u027c")
        buf.write("\n\t\7\t\u027e\n\t\f\t\16\t\u0281\13\t\5\t\u0283\n\t\3")
        buf.write("\t\5\t\u0286\n\t\3\t\5\t\u0289\n\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\5\t\u0291\n\t\3\t\3\t\3\t\5\t\u0296\n\t\7\t\u0298")
        buf.write("\n\t\f\t\16\t\u029b\13\t\5\t\u029d\n\t\3\t\3\t\3\t\5\t")
        buf.write("\u02a2\n\t\3\t\3\t\3\t\3\t\3\t\5\t\u02a9\n\t\3\t\3\t\3")
        buf.write("\t\5\t\u02ae\n\t\7\t\u02b0\n\t\f\t\16\t\u02b3\13\t\5\t")
        buf.write("\u02b5\n\t\3\t\5\t\u02b8\n\t\3\t\3\t\3\t\3\t\3\t\3\t\7")
        buf.write("\t\u02c0\n\t\f\t\16\t\u02c3\13\t\3\t\5\t\u02c6\n\t\3\t")
        buf.write("\5\t\u02c9\n\t\3\n\3\n\3\n\3\n\3\n\3\n\6\n\u02d1\n\n\r")
        buf.write("\n\16\n\u02d2\3\n\7\n\u02d6\n\n\f\n\16\n\u02d9\13\n\3")
        buf.write("\n\5\n\u02dc\n\n\3\n\3\n\7\n\u02e0\n\n\f\n\16\n\u02e3")
        buf.write("\13\n\5\n\u02e5\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\6\n\u02f0\n\n\r\n\16\n\u02f1\3\n\7\n\u02f5\n\n\f\n")
        buf.write("\16\n\u02f8\13\n\3\n\5\n\u02fb\n\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\7\n\u0304\n\n\f\n\16\n\u0307\13\n\3\n\3\n\3\n")
        buf.write("\3\n\5\n\u030d\n\n\3\13\3\13\3\13\6\13\u0312\n\13\r\13")
        buf.write("\16\13\u0313\3\13\7\13\u0317\n\13\f\13\16\13\u031a\13")
        buf.write("\13\3\13\5\13\u031d\n\13\3\13\3\13\7\13\u0321\n\13\f\13")
        buf.write("\16\13\u0324\13\13\3\13\3\13\5\13\u0328\n\13\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\7\f\u0330\n\f\f\f\16\f\u0333\13\f\3\f\7")
        buf.write("\f\u0336\n\f\f\f\16\f\u0339\13\f\3\r\5\r\u033c\n\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u0342\n\r\3\r\5\r\u0345\n\r\3\r\3\r\3")
        buf.write("\r\5\r\u034a\n\r\3\r\5\r\u034d\n\r\7\r\u034f\n\r\f\r\16")
        buf.write("\r\u0352\13\r\3\r\3\r\5\r\u0356\n\r\3\r\6\r\u0359\n\r")
        buf.write("\r\r\16\r\u035a\3\r\7\r\u035e\n\r\f\r\16\r\u0361\13\r")
        buf.write("\3\r\5\r\u0364\n\r\3\r\3\r\6\r\u0368\n\r\r\r\16\r\u0369")
        buf.write("\3\r\7\r\u036d\n\r\f\r\16\r\u0370\13\r\3\r\5\r\u0373\n")
        buf.write("\r\3\r\3\r\5\r\u0377\n\r\3\r\3\r\3\r\5\r\u037c\n\r\3\r")
        buf.write("\5\r\u037f\n\r\3\r\3\r\3\r\5\r\u0384\n\r\3\r\5\r\u0387")
        buf.write("\n\r\7\r\u0389\n\r\f\r\16\r\u038c\13\r\5\r\u038e\n\r\3")
        buf.write("\r\3\r\5\r\u0392\n\r\3\16\5\16\u0395\n\16\3\16\3\16\7")
        buf.write("\16\u0399\n\16\f\16\16\16\u039c\13\16\3\16\7\16\u039f")
        buf.write("\n\16\f\16\16\16\u03a2\13\16\3\16\3\16\7\16\u03a6\n\16")
        buf.write("\f\16\16\16\u03a9\13\16\5\16\u03ab\n\16\3\16\5\16\u03ae")
        buf.write("\n\16\3\16\5\16\u03b1\n\16\3\17\3\17\3\17\3\17\7\17\u03b7")
        buf.write("\n\17\f\17\16\17\u03ba\13\17\3\17\3\17\7\17\u03be\n\17")
        buf.write("\f\17\16\17\u03c1\13\17\3\17\3\17\3\17\3\17\7\17\u03c7")
        buf.write("\n\17\f\17\16\17\u03ca\13\17\7\17\u03cc\n\17\f\17\16\17")
        buf.write("\u03cf\13\17\3\20\5\20\u03d2\n\20\3\20\3\20\3\20\5\20")
        buf.write("\u03d7\n\20\3\20\3\20\6\20\u03db\n\20\r\20\16\20\u03dc")
        buf.write("\3\20\7\20\u03e0\n\20\f\20\16\20\u03e3\13\20\3\20\5\20")
        buf.write("\u03e6\n\20\3\20\3\20\7\20\u03ea\n\20\f\20\16\20\u03ed")
        buf.write("\13\20\3\20\3\20\3\21\3\21\6\21\u03f3\n\21\r\21\16\21")
        buf.write("\u03f4\3\21\7\21\u03f8\n\21\f\21\16\21\u03fb\13\21\3\21")
        buf.write("\5\21\u03fe\n\21\3\21\3\21\7\21\u0402\n\21\f\21\16\21")
        buf.write("\u0405\13\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u0412\n\21\3\21\3\21\6\21\u0416\n\21")
        buf.write("\r\21\16\21\u0417\3\21\7\21\u041b\n\21\f\21\16\21\u041e")
        buf.write("\13\21\3\21\5\21\u0421\n\21\3\21\3\21\7\21\u0425\n\21")
        buf.write("\f\21\16\21\u0428\13\21\3\21\7\21\u042b\n\21\f\21\16\21")
        buf.write("\u042e\13\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0436")
        buf.write("\n\22\f\22\16\22\u0439\13\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\7\23\u0441\n\23\f\23\16\23\u0444\13\23\3\24\3\24")
        buf.write("\3\24\3\24\3\24\7\24\u044b\n\24\f\24\16\24\u044e\13\24")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\7\26")
        buf.write("\u045a\n\26\f\26\16\26\u045d\13\26\3\27\3\27\5\27\u0461")
        buf.write("\n\27\3\30\3\30\3\30\3\30\7\30\u0467\n\30\f\30\16\30\u046a")
        buf.write("\13\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0472\n\30\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u0478\n\31\3\32\7\32\u047b\n\32")
        buf.write("\f\32\16\32\u047e\13\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u0487\n\32\3\32\3\32\3\32\3\32\3\32\7\32\u048e")
        buf.write("\n\32\f\32\16\32\u0491\13\32\5\32\u0493\n\32\3\32\3\32")
        buf.write("\3\32\7\32\u0498\n\32\f\32\16\32\u049b\13\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\5\32\u04a4\n\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\7\32\u04ad\n\32\f\32\16\32\u04b0")
        buf.write("\13\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u04ba")
        buf.write("\n\32\f\32\16\32\u04bd\13\32\5\32\u04bf\n\32\3\32\3\32")
        buf.write("\5\32\u04c3\n\32\3\32\5\32\u04c6\n\32\3\32\3\32\3\32\3")
        buf.write("\32\7\32\u04cc\n\32\f\32\16\32\u04cf\13\32\5\32\u04d1")
        buf.write("\n\32\3\32\7\32\u04d4\n\32\f\32\16\32\u04d7\13\32\3\32")
        buf.write("\6\32\u04da\n\32\r\32\16\32\u04db\3\32\7\32\u04df\n\32")
        buf.write("\f\32\16\32\u04e2\13\32\3\32\3\32\3\32\3\32\3\32\7\32")
        buf.write("\u04e9\n\32\f\32\16\32\u04ec\13\32\3\32\5\32\u04ef\n\32")
        buf.write("\5\32\u04f1\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\7")
        buf.write("\32\u04fa\n\32\f\32\16\32\u04fd\13\32\5\32\u04ff\n\32")
        buf.write("\3\32\5\32\u0502\n\32\5\32\u0504\n\32\3\32\3\32\3\32\5")
        buf.write("\32\u0509\n\32\3\32\5\32\u050c\n\32\3\33\3\33\3\33\5\33")
        buf.write("\u0511\n\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3")
        buf.write("\35\7\35\u051c\n\35\f\35\16\35\u051f\13\35\3\35\7\35\u0522")
        buf.write("\n\35\f\35\16\35\u0525\13\35\3\35\6\35\u0528\n\35\r\35")
        buf.write("\16\35\u0529\3\35\7\35\u052d\n\35\f\35\16\35\u0530\13")
        buf.write("\35\3\35\3\35\3\35\3\35\5\35\u0536\n\35\3\35\5\35\u0539")
        buf.write("\n\35\5\35\u053b\n\35\3\36\3\36\3\36\3\36\3\37\3\37\7")
        buf.write("\37\u0543\n\37\f\37\16\37\u0546\13\37\3\37\6\37\u0549")
        buf.write("\n\37\r\37\16\37\u054a\3\37\7\37\u054e\n\37\f\37\16\37")
        buf.write("\u0551\13\37\5\37\u0553\n\37\3\37\3\37\7\37\u0557\n\37")
        buf.write("\f\37\16\37\u055a\13\37\3\37\3\37\3\37\5\37\u055f\n\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\7\37\u0566\n\37\f\37\16\37\u0569")
        buf.write("\13\37\5\37\u056b\n\37\3\37\5\37\u056e\n\37\3\37\3\37")
        buf.write("\5\37\u0572\n\37\3\37\3\37\3\37\3\37\5\37\u0578\n\37\3")
        buf.write("\37\3\37\5\37\u057c\n\37\5\37\u057e\n\37\3\37\3\37\7\37")
        buf.write("\u0582\n\37\f\37\16\37\u0585\13\37\3\37\5\37\u0588\n\37")
        buf.write("\3 \3 \3 \3 \3 \3 \7 \u0590\n \f \16 \u0593\13 \3 \3 ")
        buf.write("\3 \3 \3 \5 \u059a\n \3 \5 \u059d\n \3 \3 \3 \5 \u05a2")
        buf.write("\n \3 \3 \5 \u05a6\n \3 \3 \3 \7 \u05ab\n \f \16 \u05ae")
        buf.write("\13 \3 \3 \6 \u05b2\n \r \16 \u05b3\3 \7 \u05b7\n \f ")
        buf.write("\16 \u05ba\13 \3 \5 \u05bd\n \5 \u05bf\n \3 \3 \3 \3 ")
        buf.write("\3 \3 \3 \3 \3 \5 \u05ca\n \3 \7 \u05cd\n \f \16 \u05d0")
        buf.write("\13 \3 \3 \3 \6 \u05d5\n \r \16 \u05d6\3 \7 \u05da\n ")
        buf.write("\f \16 \u05dd\13 \5 \u05df\n \5 \u05e1\n \3 \5 \u05e4")
        buf.write("\n \3!\6!\u05e7\n!\r!\16!\u05e8\3!\7!\u05ec\n!\f!\16!")
        buf.write("\u05ef\13!\5!\u05f1\n!\3!\3!\5!\u05f5\n!\3!\3!\3!\5!\u05fa")
        buf.write("\n!\7!\u05fc\n!\f!\16!\u05ff\13!\5!\u0601\n!\3!\3!\6!")
        buf.write("\u0605\n!\r!\16!\u0606\3!\6!\u060a\n!\r!\16!\u060b\3!")
        buf.write("\7!\u060f\n!\f!\16!\u0612\13!\5!\u0614\n!\3!\3!\5!\u0618")
        buf.write("\n!\3!\3!\3!\5!\u061d\n!\7!\u061f\n!\f!\16!\u0622\13!")
        buf.write("\3!\3!\5!\u0626\n!\3\"\3\"\5\"\u062a\n\"\3#\3#\3#\7#\u062f")
        buf.write("\n#\f#\16#\u0632\13#\3#\5#\u0635\n#\3#\3#\3#\3#\5#\u063b")
        buf.write("\n#\3#\3#\3#\5#\u0640\n#\7#\u0642\n#\f#\16#\u0645\13#")
        buf.write("\5#\u0647\n#\3#\5#\u064a\n#\3#\5#\u064d\n#\5#\u064f\n")
        buf.write("#\3#\3#\3#\5#\u0654\n#\3#\3#\3#\5#\u0659\n#\7#\u065b\n")
        buf.write("#\f#\16#\u065e\13#\5#\u0660\n#\3#\3#\5#\u0664\n#\3#\3")
        buf.write("#\3#\5#\u0669\n#\3#\7#\u066c\n#\f#\16#\u066f\13#\3#\5")
        buf.write("#\u0672\n#\3#\3#\3#\5#\u0677\n#\3#\3#\6#\u067b\n#\r#\16")
        buf.write("#\u067c\3#\7#\u0680\n#\f#\16#\u0683\13#\5#\u0685\n#\3")
        buf.write("#\3#\3#\3#\5#\u068b\n#\3#\3#\3#\3#\5#\u0691\n#\7#\u0693")
        buf.write("\n#\f#\16#\u0696\13#\3#\5#\u0699\n#\5#\u069b\n#\3#\5#")
        buf.write("\u069e\n#\3$\3$\3$\7$\u06a3\n$\f$\16$\u06a6\13$\3$\5$")
        buf.write("\u06a9\n$\3$\3$\3$\5$\u06ae\n$\5$\u06b0\n$\3$\3$\3$\3")
        buf.write("$\5$\u06b6\n$\3$\3$\3$\5$\u06bb\n$\7$\u06bd\n$\f$\16$")
        buf.write("\u06c0\13$\5$\u06c2\n$\3$\5$\u06c5\n$\3$\3$\5$\u06c9\n")
        buf.write("$\3$\3$\3$\3$\3$\5$\u06d0\n$\3$\3$\3$\3$\5$\u06d6\n$\3")
        buf.write("$\3$\3$\5$\u06db\n$\7$\u06dd\n$\f$\16$\u06e0\13$\5$\u06e2")
        buf.write("\n$\3$\5$\u06e5\n$\3$\5$\u06e8\n$\3%\5%\u06eb\n%\3%\3")
        buf.write("%\3%\3%\5%\u06f1\n%\3%\3%\3%\5%\u06f6\n%\7%\u06f8\n%\f")
        buf.write("%\16%\u06fb\13%\5%\u06fd\n%\3%\5%\u0700\n%\3%\3%\3%\3")
        buf.write("%\3%\3%\5%\u0708\n%\3%\3%\3%\5%\u070d\n%\7%\u070f\n%\f")
        buf.write("%\16%\u0712\13%\5%\u0714\n%\3%\3%\3%\3%\3%\3%\3%\3%\7")
        buf.write("%\u071e\n%\f%\16%\u0721\13%\3%\5%\u0724\n%\3%\5%\u0727")
        buf.write("\n%\3&\3&\3&\3&\3&\5&\u072e\n&\3&\3&\7&\u0732\n&\f&\16")
        buf.write("&\u0735\13&\3&\5&\u0738\n&\3&\5&\u073b\n&\5&\u073d\n&")
        buf.write("\3&\3&\3&\3&\5&\u0743\n&\3&\3&\7&\u0747\n&\f&\16&\u074a")
        buf.write("\13&\3&\5&\u074d\n&\3&\5&\u0750\n&\5&\u0752\n&\7&\u0754")
        buf.write("\n&\f&\16&\u0757\13&\3&\3&\3&\3&\3&\6&\u075e\n&\r&\16")
        buf.write("&\u075f\3&\7&\u0763\n&\f&\16&\u0766\13&\3&\5&\u0769\n")
        buf.write("&\3&\5&\u076c\n&\3&\5&\u076f\n&\3&\3&\5&\u0773\n&\3\'")
        buf.write("\3\'\7\'\u0777\n\'\f\'\16\'\u077a\13\'\3\'\3\'\3\'\7\'")
        buf.write("\u077f\n\'\f\'\16\'\u0782\13\'\3\'\3\'\3\'\7\'\u0787\n")
        buf.write("\'\f\'\16\'\u078a\13\'\3\'\5\'\u078d\n\'\3(\3(\5(\u0791")
        buf.write("\n(\3(\3(\5(\u0795\n(\5(\u0797\n(\3(\3(\7(\u079b\n(\f")
        buf.write("(\16(\u079e\13(\3(\3(\3(\3(\5(\u07a4\n(\3(\3(\3(\5(\u07a9")
        buf.write("\n(\3(\3(\7(\u07ad\n(\f(\16(\u07b0\13(\7(\u07b2\n(\f(")
        buf.write("\16(\u07b5\13(\3(\3(\3(\6(\u07ba\n(\r(\16(\u07bb\3(\7")
        buf.write("(\u07bf\n(\f(\16(\u07c2\13(\3(\5(\u07c5\n(\5(\u07c7\n")
        buf.write("(\3)\5)\u07ca\n)\3)\3)\5)\u07ce\n)\5)\u07d0\n)\3)\3)\7")
        buf.write(")\u07d4\n)\f)\16)\u07d7\13)\3)\3)\3)\3)\5)\u07dd\n)\3")
        buf.write(")\3)\3)\5)\u07e2\n)\3)\3)\7)\u07e6\n)\f)\16)\u07e9\13")
        buf.write(")\7)\u07eb\n)\f)\16)\u07ee\13)\3)\5)\u07f1\n)\3)\3)\7")
        buf.write(")\u07f5\n)\f)\16)\u07f8\13)\3)\7)\u07fb\n)\f)\16)\u07fe")
        buf.write("\13)\3)\3)\7)\u0802\n)\f)\16)\u0805\13)\5)\u0807\n)\3")
        buf.write(")\5)\u080a\n)\3*\3*\3*\3*\7*\u0810\n*\f*\16*\u0813\13")
        buf.write("*\3*\5*\u0816\n*\5*\u0818\n*\3*\5*\u081b\n*\3*\3*\7*\u081f")
        buf.write("\n*\f*\16*\u0822\13*\3*\5*\u0825\n*\3*\5*\u0828\n*\3*")
        buf.write("\7*\u082b\n*\f*\16*\u082e\13*\3+\3+\5+\u0832\n+\3+\3+")
        buf.write("\3+\6+\u0837\n+\r+\16+\u0838\3+\7+\u083c\n+\f+\16+\u083f")
        buf.write("\13+\3+\5+\u0842\n+\3+\5+\u0845\n+\3,\3,\5,\u0849\n,\3")
        buf.write(",\3,\7,\u084d\n,\f,\16,\u0850\13,\3,\7,\u0853\n,\f,\16")
        buf.write(",\u0856\13,\3,\3,\7,\u085a\n,\f,\16,\u085d\13,\5,\u085f")
        buf.write("\n,\3,\5,\u0862\n,\5,\u0864\n,\3-\3-\3-\3-\5-\u086a\n")
        buf.write("-\3-\3-\7-\u086e\n-\f-\16-\u0871\13-\3-\3-\3-\3-\5-\u0877")
        buf.write("\n-\3-\3-\3-\3-\5-\u087d\n-\3-\3-\7-\u0881\n-\f-\16-\u0884")
        buf.write("\13-\5-\u0886\n-\7-\u0888\n-\f-\16-\u088b\13-\3.\3.\5")
        buf.write(".\u088f\n.\3.\3.\7.\u0893\n.\f.\16.\u0896\13.\3.\7.\u0899")
        buf.write("\n.\f.\16.\u089c\13.\3.\3.\7.\u08a0\n.\f.\16.\u08a3\13")
        buf.write(".\5.\u08a5\n.\3.\5.\u08a8\n.\3/\3/\3/\3/\3/\3/\3/\5/\u08b1")
        buf.write("\n/\3/\3/\7/\u08b5\n/\f/\16/\u08b8\13/\5/\u08ba\n/\7/")
        buf.write("\u08bc\n/\f/\16/\u08bf\13/\3\60\7\60\u08c2\n\60\f\60\16")
        buf.write("\60\u08c5\13\60\3\60\6\60\u08c8\n\60\r\60\16\60\u08c9")
        buf.write("\3\60\7\60\u08cd\n\60\f\60\16\60\u08d0\13\60\3\60\3\60")
        buf.write("\5\60\u08d4\n\60\3\60\3\60\3\60\5\60\u08d9\n\60\5\60\u08db")
        buf.write("\n\60\3\61\3\61\3\61\5\61\u08e0\n\61\3\61\3\61\3\61\5")
        buf.write("\61\u08e5\n\61\7\61\u08e7\n\61\f\61\16\61\u08ea\13\61")
        buf.write("\5\61\u08ec\n\61\3\61\3\61\7\61\u08f0\n\61\f\61\16\61")
        buf.write("\u08f3\13\61\3\61\3\61\3\61\3\61\3\61\5\61\u08fa\n\61")
        buf.write("\3\61\3\61\3\61\5\61\u08ff\n\61\7\61\u0901\n\61\f\61\16")
        buf.write("\61\u0904\13\61\5\61\u0906\n\61\3\61\3\61\7\61\u090a\n")
        buf.write("\61\f\61\16\61\u090d\13\61\3\61\3\61\6\61\u0911\n\61\r")
        buf.write("\61\16\61\u0912\3\61\3\61\3\61\5\61\u0918\n\61\3\62\3")
        buf.write("\62\3\62\5\62\u091d\n\62\3\62\3\62\3\62\3\62\5\62\u0923")
        buf.write("\n\62\3\62\5\62\u0926\n\62\3\62\3\62\3\62\5\62\u092b\n")
        buf.write("\62\3\62\5\62\u092e\n\62\7\62\u0930\n\62\f\62\16\62\u0933")
        buf.write("\13\62\3\62\3\62\5\62\u0937\n\62\3\63\3\63\3\63\5\63\u093c")
        buf.write("\n\63\3\63\5\63\u093f\n\63\3\63\3\63\3\63\5\63\u0944\n")
        buf.write("\63\3\63\5\63\u0947\n\63\7\63\u0949\n\63\f\63\16\63\u094c")
        buf.write("\13\63\3\63\5\63\u094f\n\63\5\63\u0951\n\63\3\63\3\63")
        buf.write("\3\64\3\64\5\64\u0957\n\64\3\64\3\64\3\64\5\64\u095c\n")
        buf.write("\64\5\64\u095e\n\64\3\65\7\65\u0961\n\65\f\65\16\65\u0964")
        buf.write("\13\65\3\65\6\65\u0967\n\65\r\65\16\65\u0968\3\65\7\65")
        buf.write("\u096c\n\65\f\65\16\65\u096f\13\65\5\65\u0971\n\65\3\65")
        buf.write("\3\65\3\65\3\65\5\65\u0977\n\65\3\65\3\65\3\65\7\65\u097c")
        buf.write("\n\65\f\65\16\65\u097f\13\65\3\65\3\65\5\65\u0983\n\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\7\65\u0992\n\65\f\65\16\65\u0995\13\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u099c\n\65\3\65\3\65\5\65\u09a0")
        buf.write("\n\65\3\65\3\65\3\65\7\65\u09a5\n\65\f\65\16\65\u09a8")
        buf.write("\13\65\3\65\3\65\6\65\u09ac\n\65\r\65\16\65\u09ad\3\65")
        buf.write("\7\65\u09b1\n\65\f\65\16\65\u09b4\13\65\3\65\5\65\u09b7")
        buf.write("\n\65\5\65\u09b9\n\65\3\65\3\65\3\65\5\65\u09be\n\65\3")
        buf.write("\66\3\66\7\66\u09c2\n\66\f\66\16\66\u09c5\13\66\3\66\5")
        buf.write("\66\u09c8\n\66\3\66\3\66\3\66\5\66\u09cd\n\66\3\66\5\66")
        buf.write("\u09d0\n\66\5\66\u09d2\n\66\3\66\5\66\u09d5\n\66\3\66")
        buf.write("\7\66\u09d8\n\66\f\66\16\66\u09db\13\66\3\66\3\66\5\66")
        buf.write("\u09df\n\66\3\67\3\67\3\67\3\67\38\78\u09e6\n8\f8\168")
        buf.write("\u09e9\138\38\38\58\u09ed\n8\38\38\58\u09f1\n8\58\u09f3")
        buf.write("\n8\38\38\39\59\u09f8\n9\39\39\39\39\59\u09fe\n9\39\3")
        buf.write("9\39\59\u0a03\n9\79\u0a05\n9\f9\169\u0a08\139\59\u0a0a")
        buf.write("\n9\39\59\u0a0d\n9\39\39\39\39\39\79\u0a14\n9\f9\169\u0a17")
        buf.write("\139\39\59\u0a1a\n9\39\59\u0a1d\n9\3:\3:\5:\u0a21\n:\3")
        buf.write(":\3:\3:\5:\u0a26\n:\3:\5:\u0a29\n:\3:\3:\3:\5:\u0a2e\n")
        buf.write(":\3:\5:\u0a31\n:\7:\u0a33\n:\f:\16:\u0a36\13:\5:\u0a38")
        buf.write("\n:\3:\3:\5:\u0a3c\n:\3;\3;\5;\u0a40\n;\3<\3<\5<\u0a44")
        buf.write("\n<\3<\5<\u0a47\n<\3<\5<\u0a4a\n<\3<\3<\6<\u0a4e\n<\r")
        buf.write("<\16<\u0a4f\3<\7<\u0a53\n<\f<\16<\u0a56\13<\3<\5<\u0a59")
        buf.write("\n<\5<\u0a5b\n<\3<\3<\3<\3<\3<\7<\u0a62\n<\f<\16<\u0a65")
        buf.write("\13<\3<\3<\3<\5<\u0a6a\n<\3<\5<\u0a6d\n<\3<\5<\u0a70\n")
        buf.write("<\3<\3<\3<\5<\u0a75\n<\5<\u0a77\n<\3<\5<\u0a7a\n<\5<\u0a7c")
        buf.write("\n<\3=\6=\u0a7f\n=\r=\16=\u0a80\3=\7=\u0a84\n=\f=\16=")
        buf.write("\u0a87\13=\3=\5=\u0a8a\n=\3=\3=\3=\5=\u0a8f\n=\5=\u0a91")
        buf.write("\n=\3=\5=\u0a94\n=\3>\3>\3>\7>\u0a99\n>\f>\16>\u0a9c\13")
        buf.write(">\3>\3>\6>\u0aa0\n>\r>\16>\u0aa1\3?\3?\3?\7?\u0aa7\n?")
        buf.write("\f?\16?\u0aaa\13?\3?\6?\u0aad\n?\r?\16?\u0aae\3?\7?\u0ab2")
        buf.write("\n?\f?\16?\u0ab5\13?\3?\3?\5?\u0ab9\n?\5?\u0abb\n?\3?")
        buf.write("\5?\u0abe\n?\3?\3?\3?\7?\u0ac3\n?\f?\16?\u0ac6\13?\3?")
        buf.write("\3?\3@\3@\3@\6@\u0acd\n@\r@\16@\u0ace\3@\7@\u0ad2\n@\f")
        buf.write("@\16@\u0ad5\13@\3@\5@\u0ad8\n@\3@\5@\u0adb\n@\3@\3@\6")
        buf.write("@\u0adf\n@\r@\16@\u0ae0\3@\7@\u0ae4\n@\f@\16@\u0ae7\13")
        buf.write("@\3@\5@\u0aea\n@\3@\5@\u0aed\n@\7@\u0aef\n@\f@\16@\u0af2")
        buf.write("\13@\5@\u0af4\n@\3@\3@\3@\3@\3@\3@\5@\u0afc\n@\5@\u0afe")
        buf.write("\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0b0a\nA\3A\3A\3")
        buf.write("A\3A\5A\u0b10\nA\3A\2\7\26\"$X\\B\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\2\30\4\2DDYY\4\2``ee\7\2")
        buf.write("\30\30##//iior\4\2DDHH\4\2>@DG\4\2\6\6**\3\2[\\\4\2IJ")
        buf.write("WX\3\2UV\4\2CEYZ\5\2HHKRTT\4\2--\67\67\4\2\t\t\17\17\4")
        buf.write("\2\31\31%%\4\2..pp\4\2\f\f,,\7\2\27\27\35\35\37\37\'\'")
        buf.write("\66\66\5\2\f\f,,\64\64\5\2\b\b\36\36))\3\2\21\22\4\2\f")
        buf.write("\f\63\63\5\2\22\22!!>`\2\u0d33\2\u0085\3\2\2\2\4\u00f6")
        buf.write("\3\2\2\2\6\u011b\3\2\2\2\b\u013e\3\2\2\2\n\u01a3\3\2\2")
        buf.write("\2\f\u025f\3\2\2\2\16\u0261\3\2\2\2\20\u02c8\3\2\2\2\22")
        buf.write("\u030c\3\2\2\2\24\u0327\3\2\2\2\26\u0329\3\2\2\2\30\u033b")
        buf.write("\3\2\2\2\32\u03b0\3\2\2\2\34\u03b2\3\2\2\2\36\u03d1\3")
        buf.write("\2\2\2 \u0403\3\2\2\2\"\u042f\3\2\2\2$\u043a\3\2\2\2&")
        buf.write("\u0445\3\2\2\2(\u0452\3\2\2\2*\u0456\3\2\2\2,\u0460\3")
        buf.write("\2\2\2.\u0468\3\2\2\2\60\u0477\3\2\2\2\62\u050b\3\2\2")
        buf.write("\2\64\u050d\3\2\2\2\66\u0515\3\2\2\28\u053a\3\2\2\2:\u053c")
        buf.write("\3\2\2\2<\u0587\3\2\2\2>\u05e3\3\2\2\2@\u0625\3\2\2\2")
        buf.write("B\u0629\3\2\2\2D\u069d\3\2\2\2F\u06e7\3\2\2\2H\u0726\3")
        buf.write("\2\2\2J\u0772\3\2\2\2L\u078c\3\2\2\2N\u07c6\3\2\2\2P\u0809")
        buf.write("\3\2\2\2R\u080b\3\2\2\2T\u0844\3\2\2\2V\u0863\3\2\2\2")
        buf.write("X\u0876\3\2\2\2Z\u08a7\3\2\2\2\\\u08a9\3\2\2\2^\u08c3")
        buf.write("\3\2\2\2`\u0917\3\2\2\2b\u0936\3\2\2\2d\u0938\3\2\2\2")
        buf.write("f\u095d\3\2\2\2h\u09bd\3\2\2\2j\u09de\3\2\2\2l\u09e0\3")
        buf.write("\2\2\2n\u09e7\3\2\2\2p\u0a1c\3\2\2\2r\u0a20\3\2\2\2t\u0a3f")
        buf.write("\3\2\2\2v\u0a7b\3\2\2\2x\u0a93\3\2\2\2z\u0a95\3\2\2\2")
        buf.write("|\u0aa3\3\2\2\2~\u0afd\3\2\2\2\u0080\u0b0f\3\2\2\2\u0082")
        buf.write("\u0084\5<\37\2\u0083\u0082\3\2\2\2\u0084\u0087\3\2\2\2")
        buf.write("\u0085\u0083\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0088\3")
        buf.write("\2\2\2\u0087\u0085\3\2\2\2\u0088\u0089\7\2\2\3\u0089\3")
        buf.write("\3\2\2\2\u008a\u008c\7$\2\2\u008b\u008d\5D#\2\u008c\u008b")
        buf.write("\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u008c\3\2\2\2\u008e")
        buf.write("\u008f\3\2\2\2\u008f\u0093\3\2\2\2\u0090\u0092\5J&\2\u0091")
        buf.write("\u0090\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2")
        buf.write("\u0093\u0094\3\2\2\2\u0094\u00af\3\2\2\2\u0095\u0093\3")
        buf.write("\2\2\2\u0096\u0098\5\6\4\2\u0097\u0096\3\2\2\2\u0097\u0098")
        buf.write("\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u009d\7@\2\2\u009a")
        buf.write("\u009c\5J&\2\u009b\u009a\3\2\2\2\u009c\u009f\3\2\2\2\u009d")
        buf.write("\u009b\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u00a3\3\2\2\2")
        buf.write("\u009f\u009d\3\2\2\2\u00a0\u00a2\7\r\2\2\u00a1\u00a0\3")
        buf.write("\2\2\2\u00a2\u00a5\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4")
        buf.write("\3\2\2\2\u00a4\u00ae\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6")
        buf.write("\u00aa\t\2\2\2\u00a7\u00a9\5J&\2\u00a8\u00a7\3\2\2\2\u00a9")
        buf.write("\u00ac\3\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2")
        buf.write("\u00ab\u00ae\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u0097\3")
        buf.write("\2\2\2\u00ad\u00a6\3\2\2\2\u00ae\u00b1\3\2\2\2\u00af\u00ad")
        buf.write("\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00f7\3\2\2\2\u00b1")
        buf.write("\u00af\3\2\2\2\u00b2\u00d6\7F\2\2\u00b3\u00c6\7h\2\2\u00b4")
        buf.write("\u00c3\7I\2\2\u00b5\u00b7\5x=\2\u00b6\u00b8\7g\2\2\u00b7")
        buf.write("\u00b6\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00c0\3\2\2\2")
        buf.write("\u00b9\u00ba\7^\2\2\u00ba\u00bc\5x=\2\u00bb\u00bd\7g\2")
        buf.write("\2\u00bc\u00bb\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf")
        buf.write("\3\2\2\2\u00be\u00b9\3\2\2\2\u00bf\u00c2\3\2\2\2\u00c0")
        buf.write("\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c4\3\2\2\2")
        buf.write("\u00c2\u00c0\3\2\2\2\u00c3\u00b5\3\2\2\2\u00c3\u00c4\3")
        buf.write("\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c7\7J\2\2\u00c6\u00b4")
        buf.write("\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00d7\3\2\2\2\u00c8")
        buf.write("\u00c9\7\20\2\2\u00c9\u00d3\78\2\2\u00ca\u00cf\5.\30\2")
        buf.write("\u00cb\u00cc\7^\2\2\u00cc\u00ce\5.\30\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00ce\u00d1\3\2\2\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0")
        buf.write("\3\2\2\2\u00d0\u00d4\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2")
        buf.write("\u00d4\7\b\2\2\u00d3\u00ca\3\2\2\2\u00d3\u00d2\3\2\2\2")
        buf.write("\u00d4\u00d5\3\2\2\2\u00d5\u00d7\79\2\2\u00d6\u00b3\3")
        buf.write("\2\2\2\u00d6\u00c8\3\2\2\2\u00d7\u00f7\3\2\2\2\u00d8\u00e1")
        buf.write("\7h\2\2\u00d9\u00de\7$\2\2\u00da\u00df\5\u0080A\2\u00db")
        buf.write("\u00dc\7p\2\2\u00dc\u00df\7h\2\2\u00dd\u00df\7r\2\2\u00de")
        buf.write("\u00da\3\2\2\2\u00de\u00db\3\2\2\2\u00de\u00dd\3\2\2\2")
        buf.write("\u00df\u00e1\3\2\2\2\u00e0\u00d8\3\2\2\2\u00e0\u00d9\3")
        buf.write("\2\2\2\u00e1\u00f4\3\2\2\2\u00e2\u00f1\7I\2\2\u00e3\u00e5")
        buf.write("\5x=\2\u00e4\u00e6\7g\2\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6")
        buf.write("\3\2\2\2\u00e6\u00ee\3\2\2\2\u00e7\u00e8\7^\2\2\u00e8")
        buf.write("\u00ea\5x=\2\u00e9\u00eb\7g\2\2\u00ea\u00e9\3\2\2\2\u00ea")
        buf.write("\u00eb\3\2\2\2\u00eb\u00ed\3\2\2\2\u00ec\u00e7\3\2\2\2")
        buf.write("\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3")
        buf.write("\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00e3")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3")
        buf.write("\u00f5\7J\2\2\u00f4\u00e2\3\2\2\2\u00f4\u00f5\3\2\2\2")
        buf.write("\u00f5\u00f7\3\2\2\2\u00f6\u008a\3\2\2\2\u00f6\u00b2\3")
        buf.write("\2\2\2\u00f6\u00e0\3\2\2\2\u00f7\5\3\2\2\2\u00f8\u010b")
        buf.write("\7h\2\2\u00f9\u0108\7I\2\2\u00fa\u00fc\5x=\2\u00fb\u00fd")
        buf.write("\7g\2\2\u00fc\u00fb\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd")
        buf.write("\u0105\3\2\2\2\u00fe\u00ff\7^\2\2\u00ff\u0101\5x=\2\u0100")
        buf.write("\u0102\7g\2\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u00fe\3\2\2\2\u0104\u0107\3")
        buf.write("\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u00fa\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\7J\2\2")
        buf.write("\u010b\u00f9\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u011c\3")
        buf.write("\2\2\2\u010d\u010e\7\20\2\2\u010e\u0118\78\2\2\u010f\u0114")
        buf.write("\5.\30\2\u0110\u0111\7^\2\2\u0111\u0113\5.\30\2\u0112")
        buf.write("\u0110\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0112\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115\u0119\3\2\2\2\u0116\u0114\3")
        buf.write("\2\2\2\u0117\u0119\7\b\2\2\u0118\u010f\3\2\2\2\u0118\u0117")
        buf.write("\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\79\2\2\u011b")
        buf.write("\u00f8\3\2\2\2\u011b\u010d\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u0139\3\2\2\2\u011d\u0135\7c\2\2\u011e\u0136\7")
        buf.write("h\2\2\u011f\u0121\7.\2\2\u0120\u011f\3\2\2\2\u0120\u0121")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\7h\2\2\u0123")
        buf.write("\u0132\7I\2\2\u0124\u0126\5x=\2\u0125\u0127\7g\2\2\u0126")
        buf.write("\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u012f\3\2\2\2")
        buf.write("\u0128\u0129\7^\2\2\u0129\u012b\5x=\2\u012a\u012c\7g\2")
        buf.write("\2\u012b\u012a\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012e")
        buf.write("\3\2\2\2\u012d\u0128\3\2\2\2\u012e\u0131\3\2\2\2\u012f")
        buf.write("\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0133\3\2\2\2")
        buf.write("\u0131\u012f\3\2\2\2\u0132\u0124\3\2\2\2\u0132\u0133\3")
        buf.write("\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136\7J\2\2\u0135\u011e")
        buf.write("\3\2\2\2\u0135\u0120\3\2\2\2\u0136\u0138\3\2\2\2\u0137")
        buf.write("\u011d\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u0137\3\2\2\2")
        buf.write("\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u0139\3")
        buf.write("\2\2\2\u013c\u013d\7c\2\2\u013d\7\3\2\2\2\u013e\u014a")
        buf.write("\78\2\2\u013f\u0144\5^\60\2\u0140\u0141\7^\2\2\u0141\u0143")
        buf.write("\5^\60\2\u0142\u0140\3\2\2\2\u0143\u0146\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0148\3\2\2\2")
        buf.write("\u0146\u0144\3\2\2\2\u0147\u0149\7^\2\2\u0148\u0147\3")
        buf.write("\2\2\2\u0148\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u013f")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c")
        buf.write("\u014e\7g\2\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014f\u0151\79\2\2\u0150\u0152\7")
        buf.write("\37\2\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2\2\2\u0152")
        buf.write("\u0154\3\2\2\2\u0153\u0155\5~@\2\u0154\u0153\3\2\2\2\u0154")
        buf.write("\u0155\3\2\2\2\u0155\u0159\3\2\2\2\u0156\u0158\5J&\2\u0157")
        buf.write("\u0156\3\2\2\2\u0158\u015b\3\2\2\2\u0159\u0157\3\2\2\2")
        buf.write("\u0159\u015a\3\2\2\2\u015a\u016b\3\2\2\2\u015b\u0159\3")
        buf.write("\2\2\2\u015c\u015e\7`\2\2\u015d\u015f\5F$\2\u015e\u015d")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3\2\2\2\u0160")
        buf.write("\u0161\3\2\2\2\u0161\u0165\3\2\2\2\u0162\u0164\5J&\2\u0163")
        buf.write("\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3")
        buf.write("\2\2\2\u0168\u016a\5T+\2\u0169\u0168\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u015c\3\2\2\2\u016b")
        buf.write("\u016c\3\2\2\2\u016c\t\3\2\2\2\u016d\u0179\t\3\2\2\u016e")
        buf.write("\u0170\7.\2\2\u016f\u016e\3\2\2\2\u016f\u0170\3\2\2\2")
        buf.write("\u0170\u0175\3\2\2\2\u0171\u0173\5\6\4\2\u0172\u0174\7")
        buf.write(".\2\2\u0173\u0172\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176")
        buf.write("\3\2\2\2\u0175\u0171\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u017a\5\4\3\2\u0178\u017a\5\20\t")
        buf.write("\2\u0179\u016f\3\2\2\2\u0179\u0178\3\2\2\2\u017a\u01a4")
        buf.write("\3\2\2\2\u017b\u0185\7:\2\2\u017c\u0181\5.\30\2\u017d")
        buf.write("\u017e\7^\2\2\u017e\u0180\5.\30\2\u017f\u017d\3\2\2\2")
        buf.write("\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3")
        buf.write("\2\2\2\u0182\u0186\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0186")
        buf.write("\5d\63\2\u0185\u017c\3\2\2\2\u0185\u0184\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\7;\2\2\u0188\u01a2\3\2\2\2")
        buf.write("\u0189\u019e\78\2\2\u018a\u018d\5.\30\2\u018b\u018d\5")
        buf.write("d\63\2\u018c\u018a\3\2\2\2\u018c\u018b\3\2\2\2\u018d\u018f")
        buf.write("\3\2\2\2\u018e\u0190\7g\2\2\u018f\u018e\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u019b\3\2\2\2\u0191\u0194\7^\2\2")
        buf.write("\u0192\u0195\5.\30\2\u0193\u0195\5d\63\2\u0194\u0192\3")
        buf.write("\2\2\2\u0194\u0193\3\2\2\2\u0195\u0197\3\2\2\2\u0196\u0198")
        buf.write("\7g\2\2\u0197\u0196\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u019a\3\2\2\2\u0199\u0191\3\2\2\2\u019a\u019d\3\2\2\2")
        buf.write("\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019f\3")
        buf.write("\2\2\2\u019d\u019b\3\2\2\2\u019e\u018c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a2\79\2\2\u01a1")
        buf.write("\u017b\3\2\2\2\u01a1\u0189\3\2\2\2\u01a2\u01a4\3\2\2\2")
        buf.write("\u01a3\u016d\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\13\3\2")
        buf.write("\2\2\u01a5\u0260\5\16\b\2\u01a6\u0258\t\4\2\2\u01a7\u01a9")
        buf.write("\5\6\4\2\u01a8\u01aa\7.\2\2\u01a9\u01a8\3\2\2\2\u01a9")
        buf.write("\u01aa\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab\u01a7\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u0258\5")
        buf.write("\4\3\2\u01ae\u01d5\7:\2\2\u01af\u01d6\7D\2\2\u01b0\u01d6")
        buf.write("\7H\2\2\u01b1\u01b2\t\5\2\2\u01b2\u01b4\7^\2\2\u01b3\u01b1")
        buf.write("\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u01bd\3\2\2\2\u01b5")
        buf.write("\u01b7\7D\2\2\u01b6\u01b5\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\u01b8\3\2\2\2\u01b8\u01ba\7h\2\2\u01b9\u01bb\5")
        buf.write("b\62\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01be")
        buf.write("\3\2\2\2\u01bc\u01be\7/\2\2\u01bd\u01b6\3\2\2\2\u01bd")
        buf.write("\u01bc\3\2\2\2\u01be\u01c0\3\2\2\2\u01bf\u01c1\7g\2\2")
        buf.write("\u01c0\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01d2\3")
        buf.write("\2\2\2\u01c2\u01cb\7^\2\2\u01c3\u01c5\7D\2\2\u01c4\u01c3")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6")
        buf.write("\u01c8\7h\2\2\u01c7\u01c9\5b\62\2\u01c8\u01c7\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01cc\3\2\2\2\u01ca\u01cc\7")
        buf.write("/\2\2\u01cb\u01c4\3\2\2\2\u01cb\u01ca\3\2\2\2\u01cc\u01ce")
        buf.write("\3\2\2\2\u01cd\u01cf\7g\2\2\u01ce\u01cd\3\2\2\2\u01ce")
        buf.write("\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01c2\3\2\2\2")
        buf.write("\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3")
        buf.write("\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5\u01af")
        buf.write("\3\2\2\2\u01d5\u01b0\3\2\2\2\u01d5\u01b3\3\2\2\2\u01d5")
        buf.write("\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d9\7;\2\2")
        buf.write("\u01d8\u01da\5\b\5\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3")
        buf.write("\2\2\2\u01da\u01db\3\2\2\2\u01db\u01df\7<\2\2\u01dc\u01de")
        buf.write("\5\62\32\2\u01dd\u01dc\3\2\2\2\u01de\u01e1\3\2\2\2\u01df")
        buf.write("\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e2\3\2\2\2")
        buf.write("\u01e1\u01df\3\2\2\2\u01e2\u0258\7=\2\2\u01e3\u0200\5")
        buf.write("H%\2\u01e4\u01e5\7\63\2\2\u01e5\u01fd\5\6\4\2\u01e6\u01fe")
        buf.write("\7h\2\2\u01e7\u01e9\7.\2\2\u01e8\u01e7\3\2\2\2\u01e8\u01e9")
        buf.write("\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\7h\2\2\u01eb")
        buf.write("\u01fa\7I\2\2\u01ec\u01ee\5x=\2\u01ed\u01ef\7g\2\2\u01ee")
        buf.write("\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f7\3\2\2\2")
        buf.write("\u01f0\u01f1\7^\2\2\u01f1\u01f3\5x=\2\u01f2\u01f4\7g\2")
        buf.write("\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f6")
        buf.write("\3\2\2\2\u01f5\u01f0\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7")
        buf.write("\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fb\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01fa\u01ec\3\2\2\2\u01fa\u01fb\3")
        buf.write("\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fe\7J\2\2\u01fd\u01e6")
        buf.write("\3\2\2\2\u01fd\u01e8\3\2\2\2\u01fe\u0200\3\2\2\2\u01ff")
        buf.write("\u01e3\3\2\2\2\u01ff\u01e4\3\2\2\2\u0200\u021a\3\2\2\2")
        buf.write("\u0201\u0216\78\2\2\u0202\u0205\5.\30\2\u0203\u0205\5")
        buf.write("d\63\2\u0204\u0202\3\2\2\2\u0204\u0203\3\2\2\2\u0205\u0207")
        buf.write("\3\2\2\2\u0206\u0208\7g\2\2\u0207\u0206\3\2\2\2\u0207")
        buf.write("\u0208\3\2\2\2\u0208\u0213\3\2\2\2\u0209\u020c\7^\2\2")
        buf.write("\u020a\u020d\5.\30\2\u020b\u020d\5d\63\2\u020c\u020a\3")
        buf.write("\2\2\2\u020c\u020b\3\2\2\2\u020d\u020f\3\2\2\2\u020e\u0210")
        buf.write("\7g\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0212\3\2\2\2\u0211\u0209\3\2\2\2\u0212\u0215\3\2\2\2")
        buf.write("\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0217\3")
        buf.write("\2\2\2\u0215\u0213\3\2\2\2\u0216\u0204\3\2\2\2\u0216\u0217")
        buf.write("\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021b\79\2\2\u0219")
        buf.write("\u021b\5d\63\2\u021a\u0201\3\2\2\2\u021a\u0219\3\2\2\2")
        buf.write("\u021b\u0258\3\2\2\2\u021c\u021d\7\16\2\2\u021d\u021f")
        buf.write("\7I\2\2\u021e\u0220\5D#\2\u021f\u021e\3\2\2\2\u0220\u0221")
        buf.write("\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0226\3\2\2\2\u0223\u0225\5J&\2\u0224\u0223\3\2\2\2\u0225")
        buf.write("\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2")
        buf.write("\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0229\u022b\5")
        buf.write("T+\2\u022a\u0229\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c")
        buf.write("\3\2\2\2\u022c\u022d\7J\2\2\u022d\u022f\3\2\2\2\u022e")
        buf.write("\u021c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0230\3\2\2\2")
        buf.write("\u0230\u0231\78\2\2\u0231\u0236\5.\30\2\u0232\u0233\7")
        buf.write("^\2\2\u0233\u0235\5.\30\2\u0234\u0232\3\2\2\2\u0235\u0238")
        buf.write("\3\2\2\2\u0236\u0234\3\2\2\2\u0236\u0237\3\2\2\2\u0237")
        buf.write("\u0239\3\2\2\2\u0238\u0236\3\2\2\2\u0239\u023a\79\2\2")
        buf.write("\u023a\u0258\3\2\2\2\u023b\u023c\7\62\2\2\u023c\u0253")
        buf.write("\78\2\2\u023d\u0242\5.\30\2\u023e\u023f\7^\2\2\u023f\u0241")
        buf.write("\5.\30\2\u0240\u023e\3\2\2\2\u0241\u0244\3\2\2\2\u0242")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0254\3\2\2\2")
        buf.write("\u0244\u0242\3\2\2\2\u0245\u0247\5D#\2\u0246\u0245\3\2")
        buf.write("\2\2\u0247\u0248\3\2\2\2\u0248\u0246\3\2\2\2\u0248\u0249")
        buf.write("\3\2\2\2\u0249\u024d\3\2\2\2\u024a\u024c\5J&\2\u024b\u024a")
        buf.write("\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2")
        buf.write("\u0250\u0252\5T+\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2")
        buf.write("\2\2\u0252\u0254\3\2\2\2\u0253\u023d\3\2\2\2\u0253\u0246")
        buf.write("\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256\79\2\2\u0256")
        buf.write("\u0258\3\2\2\2\u0257\u01a6\3\2\2\2\u0257\u01ab\3\2\2\2")
        buf.write("\u0257\u01ae\3\2\2\2\u0257\u01ff\3\2\2\2\u0257\u022e\3")
        buf.write("\2\2\2\u0257\u023b\3\2\2\2\u0258\u025c\3\2\2\2\u0259\u025b")
        buf.write("\5\n\6\2\u025a\u0259\3\2\2\2\u025b\u025e\3\2\2\2\u025c")
        buf.write("\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u0260\3\2\2\2")
        buf.write("\u025e\u025c\3\2\2\2\u025f\u01a5\3\2\2\2\u025f\u0257\3")
        buf.write("\2\2\2\u0260\r\3\2\2\2\u0261\u0262\5\4\3\2\u0262\u026b")
        buf.write("\78\2\2\u0263\u0268\5.\30\2\u0264\u0265\7^\2\2\u0265\u0267")
        buf.write("\5.\30\2\u0266\u0264\3\2\2\2\u0267\u026a\3\2\2\2\u0268")
        buf.write("\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026c\3\2\2\2")
        buf.write("\u026a\u0268\3\2\2\2\u026b\u0263\3\2\2\2\u026b\u026c\3")
        buf.write("\2\2\2\u026c\u026d\3\2\2\2\u026d\u026e\79\2\2\u026e\17")
        buf.write("\3\2\2\2\u026f\u0271\5\6\4\2\u0270\u026f\3\2\2\2\u0270")
        buf.write("\u0271\3\2\2\2\u0271\u0288\3\2\2\2\u0272\u0285\7h\2\2")
        buf.write("\u0273\u0282\7I\2\2\u0274\u0276\5x=\2\u0275\u0277\7g\2")
        buf.write("\2\u0276\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u027f")
        buf.write("\3\2\2\2\u0278\u0279\7^\2\2\u0279\u027b\5x=\2\u027a\u027c")
        buf.write("\7g\2\2\u027b\u027a\3\2\2\2\u027b\u027c\3\2\2\2\u027c")
        buf.write("\u027e\3\2\2\2\u027d\u0278\3\2\2\2\u027e\u0281\3\2\2\2")
        buf.write("\u027f\u027d\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0283\3")
        buf.write("\2\2\2\u0281\u027f\3\2\2\2\u0282\u0274\3\2\2\2\u0282\u0283")
        buf.write("\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0286\7J\2\2\u0285")
        buf.write("\u0273\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287\u0289\7c\2\2\u0288\u0272\3\2\2\2\u0288\u0289\3")
        buf.write("\2\2\2\u0289\u02a2\3\2\2\2\u028a\u028b\5\6\4\2\u028b\u028c")
        buf.write("\7.\2\2\u028c\u028d\7h\2\2\u028d\u029c\7I\2\2\u028e\u0290")
        buf.write("\5x=\2\u028f\u0291\7g\2\2\u0290\u028f\3\2\2\2\u0290\u0291")
        buf.write("\3\2\2\2\u0291\u0299\3\2\2\2\u0292\u0293\7^\2\2\u0293")
        buf.write("\u0295\5x=\2\u0294\u0296\7g\2\2\u0295\u0294\3\2\2\2\u0295")
        buf.write("\u0296\3\2\2\2\u0296\u0298\3\2\2\2\u0297\u0292\3\2\2\2")
        buf.write("\u0298\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3")
        buf.write("\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2\u029c\u028e")
        buf.write("\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e")
        buf.write("\u029f\7J\2\2\u029f\u02a0\7c\2\2\u02a0\u02a2\3\2\2\2\u02a1")
        buf.write("\u0270\3\2\2\2\u02a1\u028a\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a4\7F\2\2\u02a4\u02b7\7h\2\2\u02a5\u02b4\7I")
        buf.write("\2\2\u02a6\u02a8\5x=\2\u02a7\u02a9\7g\2\2\u02a8\u02a7")
        buf.write("\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02b1\3\2\2\2\u02aa")
        buf.write("\u02ab\7^\2\2\u02ab\u02ad\5x=\2\u02ac\u02ae\7g\2\2\u02ad")
        buf.write("\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b0\3\2\2\2")
        buf.write("\u02af\u02aa\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3")
        buf.write("\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1")
        buf.write("\3\2\2\2\u02b4\u02a6\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02b6\3\2\2\2\u02b6\u02b8\7J\2\2\u02b7\u02a5\3\2\2\2")
        buf.write("\u02b7\u02b8\3\2\2\2\u02b8\u02c9\3\2\2\2\u02b9\u02ba\7")
        buf.write("F\2\2\u02ba\u02bb\7\20\2\2\u02bb\u02c5\78\2\2\u02bc\u02c1")
        buf.write("\5.\30\2\u02bd\u02be\7^\2\2\u02be\u02c0\5.\30\2\u02bf")
        buf.write("\u02bd\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2")
        buf.write("\u02c1\u02c2\3\2\2\2\u02c2\u02c6\3\2\2\2\u02c3\u02c1\3")
        buf.write("\2\2\2\u02c4\u02c6\7\b\2\2\u02c5\u02bc\3\2\2\2\u02c5\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c9\79\2\2\u02c8")
        buf.write("\u02a1\3\2\2\2\u02c8\u02b9\3\2\2\2\u02c9\21\3\2\2\2\u02ca")
        buf.write("\u030d\5\f\7\2\u02cb\u030d\5\24\13\2\u02cc\u02e5\7*\2")
        buf.write("\2\u02cd\u02e1\t\6\2\2\u02ce\u02d0\78\2\2\u02cf\u02d1")
        buf.write("\5D#\2\u02d0\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d7\3\2\2\2\u02d4")
        buf.write("\u02d6\5J&\2\u02d5\u02d4\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02db\3\2\2\2")
        buf.write("\u02d9\u02d7\3\2\2\2\u02da\u02dc\5T+\2\u02db\u02da\3\2")
        buf.write("\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de")
        buf.write("\79\2\2\u02de\u02e0\3\2\2\2\u02df\u02ce\3\2\2\2\u02e0")
        buf.write("\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1\u02e2\3\2\2\2")
        buf.write("\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e4\u02cc\3")
        buf.write("\2\2\2\u02e4\u02cd\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u030d")
        buf.write("\5\22\n\2\u02e7\u02e8\7*\2\2\u02e8\u02e9\7g\2\2\u02e9")
        buf.write("\u02ea\78\2\2\u02ea\u02eb\7h\2\2\u02eb\u030d\79\2\2\u02ec")
        buf.write("\u02ed\t\7\2\2\u02ed\u02ef\78\2\2\u02ee\u02f0\5D#\2\u02ef")
        buf.write("\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02ef\3\2\2\2")
        buf.write("\u02f1\u02f2\3\2\2\2\u02f2\u02f6\3\2\2\2\u02f3\u02f5\5")
        buf.write("J&\2\u02f4\u02f3\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4")
        buf.write("\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8")
        buf.write("\u02f6\3\2\2\2\u02f9\u02fb\5T+\2\u02fa\u02f9\3\2\2\2\u02fa")
        buf.write("\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\79\2\2")
        buf.write("\u02fd\u030d\3\2\2\2\u02fe\u02ff\7\"\2\2\u02ff\u0300\7")
        buf.write("8\2\2\u0300\u0305\5.\30\2\u0301\u0302\7^\2\2\u0302\u0304")
        buf.write("\5.\30\2\u0303\u0301\3\2\2\2\u0304\u0307\3\2\2\2\u0305")
        buf.write("\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\3\2\2\2")
        buf.write("\u0307\u0305\3\2\2\2\u0308\u0309\79\2\2\u0309\u030d\3")
        buf.write("\2\2\2\u030a\u030d\5\30\r\2\u030b\u030d\5\36\20\2\u030c")
        buf.write("\u02ca\3\2\2\2\u030c\u02cb\3\2\2\2\u030c\u02e4\3\2\2\2")
        buf.write("\u030c\u02e7\3\2\2\2\u030c\u02ec\3\2\2\2\u030c\u02fe\3")
        buf.write("\2\2\2\u030c\u030a\3\2\2\2\u030c\u030b\3\2\2\2\u030d\23")
        buf.write("\3\2\2\2\u030e\u0322\t\b\2\2\u030f\u0311\78\2\2\u0310")
        buf.write("\u0312\5D#\2\u0311\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0318\3\2\2\2")
        buf.write("\u0315\u0317\5J&\2\u0316\u0315\3\2\2\2\u0317\u031a\3\2")
        buf.write("\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031c")
        buf.write("\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031d\5T+\2\u031c\u031b")
        buf.write("\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031e\3\2\2\2\u031e")
        buf.write("\u031f\79\2\2\u031f\u0321\3\2\2\2\u0320\u030f\3\2\2\2")
        buf.write("\u0321\u0324\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0323\3")
        buf.write("\2\2\2\u0323\u0325\3\2\2\2\u0324\u0322\3\2\2\2\u0325\u0328")
        buf.write("\5\22\n\2\u0326\u0328\5\26\f\2\u0327\u030e\3\2\2\2\u0327")
        buf.write("\u0326\3\2\2\2\u0328\25\3\2\2\2\u0329\u032a\b\f\1\2\u032a")
        buf.write("\u032b\5\f\7\2\u032b\u032c\t\b\2\2\u032c\u0337\3\2\2\2")
        buf.write("\u032d\u0331\f\3\2\2\u032e\u0330\5\n\6\2\u032f\u032e\3")
        buf.write("\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0334\3\2\2\2\u0333\u0331\3\2\2\2\u0334")
        buf.write("\u0336\t\b\2\2\u0335\u032d\3\2\2\2\u0336\u0339\3\2\2\2")
        buf.write("\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\27\3\2")
        buf.write("\2\2\u0339\u0337\3\2\2\2\u033a\u033c\7c\2\2\u033b\u033a")
        buf.write("\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\3\2\2\2\u033d")
        buf.write("\u0355\7!\2\2\u033e\u0341\78\2\2\u033f\u0342\5.\30\2\u0340")
        buf.write("\u0342\5d\63\2\u0341\u033f\3\2\2\2\u0341\u0340\3\2\2\2")
        buf.write("\u0342\u0344\3\2\2\2\u0343\u0345\7g\2\2\u0344\u0343\3")
        buf.write("\2\2\2\u0344\u0345\3\2\2\2\u0345\u0350\3\2\2\2\u0346\u0349")
        buf.write("\7^\2\2\u0347\u034a\5.\30\2\u0348\u034a\5d\63\2\u0349")
        buf.write("\u0347\3\2\2\2\u0349\u0348\3\2\2\2\u034a\u034c\3\2\2\2")
        buf.write("\u034b\u034d\7g\2\2\u034c\u034b\3\2\2\2\u034c\u034d\3")
        buf.write("\2\2\2\u034d\u034f\3\2\2\2\u034e\u0346\3\2\2\2\u034f\u0352")
        buf.write("\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351")
        buf.write("\u0353\3\2\2\2\u0352\u0350\3\2\2\2\u0353\u0354\79\2\2")
        buf.write("\u0354\u0356\3\2\2\2\u0355\u033e\3\2\2\2\u0355\u0356\3")
        buf.write("\2\2\2\u0356\u0376\3\2\2\2\u0357\u0359\5D#\2\u0358\u0357")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u0358\3\2\2\2\u035a")
        buf.write("\u035b\3\2\2\2\u035b\u035f\3\2\2\2\u035c\u035e\5J&\2\u035d")
        buf.write("\u035c\3\2\2\2\u035e\u0361\3\2\2\2\u035f\u035d\3\2\2\2")
        buf.write("\u035f\u0360\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3")
        buf.write("\2\2\2\u0362\u0364\5\32\16\2\u0363\u0362\3\2\2\2\u0363")
        buf.write("\u0364\3\2\2\2\u0364\u0377\3\2\2\2\u0365\u0367\78\2\2")
        buf.write("\u0366\u0368\5D#\2\u0367\u0366\3\2\2\2\u0368\u0369\3\2")
        buf.write("\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036e")
        buf.write("\3\2\2\2\u036b\u036d\5J&\2\u036c\u036b\3\2\2\2\u036d\u0370")
        buf.write("\3\2\2\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0372\3\2\2\2\u0370\u036e\3\2\2\2\u0371\u0373\5T+\2\u0372")
        buf.write("\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0374\3\2\2\2")
        buf.write("\u0374\u0375\79\2\2\u0375\u0377\3\2\2\2\u0376\u0358\3")
        buf.write("\2\2\2\u0376\u0365\3\2\2\2\u0377\u0391\3\2\2\2\u0378\u038d")
        buf.write("\78\2\2\u0379\u037c\5.\30\2\u037a\u037c\5d\63\2\u037b")
        buf.write("\u0379\3\2\2\2\u037b\u037a\3\2\2\2\u037c\u037e\3\2\2\2")
        buf.write("\u037d\u037f\7g\2\2\u037e\u037d\3\2\2\2\u037e\u037f\3")
        buf.write("\2\2\2\u037f\u038a\3\2\2\2\u0380\u0383\7^\2\2\u0381\u0384")
        buf.write("\5.\30\2\u0382\u0384\5d\63\2\u0383\u0381\3\2\2\2\u0383")
        buf.write("\u0382\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0387\7g\2\2")
        buf.write("\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3")
        buf.write("\2\2\2\u0388\u0380\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038e\3\2\2\2\u038c")
        buf.write("\u038a\3\2\2\2\u038d\u037b\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\u038f\3\2\2\2\u038f\u0392\79\2\2\u0390\u0392\5")
        buf.write("d\63\2\u0391\u0378\3\2\2\2\u0391\u0390\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\31\3\2\2\2\u0393\u0395\5\6\4\2\u0394\u0393")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\3\2\2\2\u0396")
        buf.write("\u039a\7@\2\2\u0397\u0399\5J&\2\u0398\u0397\3\2\2\2\u0399")
        buf.write("\u039c\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2")
        buf.write("\u039b\u03a0\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u039f\7")
        buf.write("\r\2\2\u039e\u039d\3\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03ab\3\2\2\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a3\u03a7\t\2\2\2\u03a4\u03a6\5J&\2\u03a5")
        buf.write("\u03a4\3\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2")
        buf.write("\u03a7\u03a8\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3")
        buf.write("\2\2\2\u03aa\u0394\3\2\2\2\u03aa\u03a3\3\2\2\2\u03ab\u03ad")
        buf.write("\3\2\2\2\u03ac\u03ae\5\32\16\2\u03ad\u03ac\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03b1\5\34\17")
        buf.write("\2\u03b0\u03aa\3\2\2\2\u03b0\u03af\3\2\2\2\u03b1\33\3")
        buf.write("\2\2\2\u03b2\u03b3\7:\2\2\u03b3\u03b8\5.\30\2\u03b4\u03b5")
        buf.write("\7^\2\2\u03b5\u03b7\5.\30\2\u03b6\u03b4\3\2\2\2\u03b7")
        buf.write("\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2")
        buf.write("\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bf\7")
        buf.write(";\2\2\u03bc\u03be\5J&\2\u03bd\u03bc\3\2\2\2\u03be\u03c1")
        buf.write("\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03cd\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c3\7:\2\2")
        buf.write("\u03c3\u03c4\5,\27\2\u03c4\u03c8\7;\2\2\u03c5\u03c7\5")
        buf.write("J&\2\u03c6\u03c5\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6")
        buf.write("\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca")
        buf.write("\u03c8\3\2\2\2\u03cb\u03c2\3\2\2\2\u03cc\u03cf\3\2\2\2")
        buf.write("\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\35\3\2")
        buf.write("\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d2\7c\2\2\u03d1\u03d0")
        buf.write("\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3")
        buf.write("\u03d6\7\22\2\2\u03d4\u03d5\7:\2\2\u03d5\u03d7\7;\2\2")
        buf.write("\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03eb\3")
        buf.write("\2\2\2\u03d8\u03da\78\2\2\u03d9\u03db\5D#\2\u03da\u03d9")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc")
        buf.write("\u03dd\3\2\2\2\u03dd\u03e1\3\2\2\2\u03de\u03e0\5J&\2\u03df")
        buf.write("\u03de\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1\u03df\3\2\2\2")
        buf.write("\u03e1\u03e2\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3")
        buf.write("\2\2\2\u03e4\u03e6\5T+\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e8\79\2\2\u03e8")
        buf.write("\u03ea\3\2\2\2\u03e9\u03d8\3\2\2\2\u03ea\u03ed\3\2\2\2")
        buf.write("\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03ee\3")
        buf.write("\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03ef\5\22\n\2\u03ef")
        buf.write("\37\3\2\2\2\u03f0\u03f2\78\2\2\u03f1\u03f3\5D#\2\u03f2")
        buf.write("\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f2\3\2\2\2")
        buf.write("\u03f4\u03f5\3\2\2\2\u03f5\u03f9\3\2\2\2\u03f6\u03f8\5")
        buf.write("J&\2\u03f7\u03f6\3\2\2\2\u03f8\u03fb\3\2\2\2\u03f9\u03f7")
        buf.write("\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb")
        buf.write("\u03f9\3\2\2\2\u03fc\u03fe\5T+\2\u03fd\u03fc\3\2\2\2\u03fd")
        buf.write("\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\79\2\2")
        buf.write("\u0400\u0402\3\2\2\2\u0401\u03f0\3\2\2\2\u0402\u0405\3")
        buf.write("\2\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406")
        buf.write("\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u042c\5\22\n\2\u0407")
        buf.write("\u0412\7f\2\2\u0408\u0412\7_\2\2\u0409\u0412\7@\2\2\u040a")
        buf.write("\u0412\7A\2\2\u040b\u0412\7B\2\2\u040c\u0412\7>\2\2\u040d")
        buf.write("\u0412\7?\2\2\u040e\u0412\7S\2\2\u040f\u0410\7J\2\2\u0410")
        buf.write("\u0412\7J\2\2\u0411\u0407\3\2\2\2\u0411\u0408\3\2\2\2")
        buf.write("\u0411\u0409\3\2\2\2\u0411\u040a\3\2\2\2\u0411\u040b\3")
        buf.write("\2\2\2\u0411\u040c\3\2\2\2\u0411\u040d\3\2\2\2\u0411\u040e")
        buf.write("\3\2\2\2\u0411\u040f\3\2\2\2\u0412\u0426\3\2\2\2\u0413")
        buf.write("\u0415\78\2\2\u0414\u0416\5D#\2\u0415\u0414\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0415\3\2\2\2\u0417\u0418\3\2\2\2")
        buf.write("\u0418\u041c\3\2\2\2\u0419\u041b\5J&\2\u041a\u0419\3\2")
        buf.write("\2\2\u041b\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d")
        buf.write("\3\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3\2\2\2\u041f")
        buf.write("\u0421\5T+\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421")
        buf.write("\u0422\3\2\2\2\u0422\u0423\79\2\2\u0423\u0425\3\2\2\2")
        buf.write("\u0424\u0413\3\2\2\2\u0425\u0428\3\2\2\2\u0426\u0424\3")
        buf.write("\2\2\2\u0426\u0427\3\2\2\2\u0427\u0429\3\2\2\2\u0428\u0426")
        buf.write("\3\2\2\2\u0429\u042b\5\22\n\2\u042a\u0411\3\2\2\2\u042b")
        buf.write("\u042e\3\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2")
        buf.write("\u042d!\3\2\2\2\u042e\u042c\3\2\2\2\u042f\u0430\b\22\1")
        buf.write("\2\u0430\u0431\5 \21\2\u0431\u0437\3\2\2\2\u0432\u0433")
        buf.write("\f\3\2\2\u0433\u0434\t\t\2\2\u0434\u0436\5 \21\2\u0435")
        buf.write("\u0432\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2")
        buf.write("\u0437\u0438\3\2\2\2\u0438#\3\2\2\2\u0439\u0437\3\2\2")
        buf.write("\2\u043a\u043b\b\23\1\2\u043b\u043c\5\"\22\2\u043c\u0442")
        buf.write("\3\2\2\2\u043d\u043e\f\3\2\2\u043e\u043f\t\n\2\2\u043f")
        buf.write("\u0441\5\"\22\2\u0440\u043d\3\2\2\2\u0441\u0444\3\2\2")
        buf.write("\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443%\3\2")
        buf.write("\2\2\u0444\u0442\3\2\2\2\u0445\u0446\5*\26\2\u0446\u0447")
        buf.write("\7a\2\2\u0447\u044c\5.\30\2\u0448\u0449\7^\2\2\u0449\u044b")
        buf.write("\5.\30\2\u044a\u0448\3\2\2\2\u044b\u044e\3\2\2\2\u044c")
        buf.write("\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3\2\2\2")
        buf.write("\u044e\u044c\3\2\2\2\u044f\u0450\7b\2\2\u0450\u0451\5")
        buf.write(".\30\2\u0451\'\3\2\2\2\u0452\u0453\5*\26\2\u0453\u0454")
        buf.write("\7]\2\2\u0454\u0455\5.\30\2\u0455)\3\2\2\2\u0456\u045b")
        buf.write("\5$\23\2\u0457\u0458\t\13\2\2\u0458\u045a\5$\23\2\u0459")
        buf.write("\u0457\3\2\2\2\u045a\u045d\3\2\2\2\u045b\u0459\3\2\2\2")
        buf.write("\u045b\u045c\3\2\2\2\u045c+\3\2\2\2\u045d\u045b\3\2\2")
        buf.write("\2\u045e\u0461\5*\26\2\u045f\u0461\5&\24\2\u0460\u045e")
        buf.write("\3\2\2\2\u0460\u045f\3\2\2\2\u0461-\3\2\2\2\u0462\u0463")
        buf.write("\5*\26\2\u0463\u0464\5\60\31\2\u0464\u0467\3\2\2\2\u0465")
        buf.write("\u0467\7\60\2\2\u0466\u0462\3\2\2\2\u0466\u0465\3\2\2")
        buf.write("\2\u0467\u046a\3\2\2\2\u0468\u0466\3\2\2\2\u0468\u0469")
        buf.write("\3\2\2\2\u0469\u0471\3\2\2\2\u046a\u0468\3\2\2\2\u046b")
        buf.write("\u0472\5,\27\2\u046c\u046d\5*\26\2\u046d\u046e\5\60\31")
        buf.write("\2\u046e\u046f\5d\63\2\u046f\u0472\3\2\2\2\u0470\u0472")
        buf.write("\7\60\2\2\u0471\u046b\3\2\2\2\u0471\u046c\3\2\2\2\u0471")
        buf.write("\u0470\3\2\2\2\u0472/\3\2\2\2\u0473\u0478\t\f\2\2\u0474")
        buf.write("\u0475\7J\2\2\u0475\u0476\7J\2\2\u0476\u0478\7H\2\2\u0477")
        buf.write("\u0473\3\2\2\2\u0477\u0474\3\2\2\2\u0478\61\3\2\2\2\u0479")
        buf.write("\u047b\5J&\2\u047a\u0479\3\2\2\2\u047b\u047e\3\2\2\2\u047c")
        buf.write("\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0508\3\2\2\2")
        buf.write("\u047e\u047c\3\2\2\2\u047f\u0480\7h\2\2\u0480\u0487\7")
        buf.write("b\2\2\u0481\u0482\t\r\2\2\u0482\u0483\78\2\2\u0483\u0484")
        buf.write("\58\35\2\u0484\u0485\79\2\2\u0485\u0487\3\2\2\2\u0486")
        buf.write("\u047f\3\2\2\2\u0486\u0481\3\2\2\2\u0487\u0488\3\2\2\2")
        buf.write("\u0488\u0509\5\62\32\2\u0489\u0509\5\64\33\2\u048a\u048f")
        buf.write("\5.\30\2\u048b\u048c\7^\2\2\u048c\u048e\5.\30\2\u048d")
        buf.write("\u048b\3\2\2\2\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2")
        buf.write("\u048f\u0490\3\2\2\2\u0490\u0493\3\2\2\2\u0491\u048f\3")
        buf.write("\2\2\2\u0492\u048a\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494")
        buf.write("\3\2\2\2\u0494\u0509\7d\2\2\u0495\u0499\7<\2\2\u0496\u0498")
        buf.write("\5\62\32\2\u0497\u0496\3\2\2\2\u0498\u049b\3\2\2\2\u0499")
        buf.write("\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c\3\2\2\2")
        buf.write("\u049b\u0499\3\2\2\2\u049c\u0509\7=\2\2\u049d\u049e\7")
        buf.write("\34\2\2\u049e\u049f\78\2\2\u049f\u04a0\58\35\2\u04a0\u04a1")
        buf.write("\79\2\2\u04a1\u04a3\5\62\32\2\u04a2\u04a4\5\66\34\2\u04a3")
        buf.write("\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u0509\3\2\2\2")
        buf.write("\u04a5\u04a6\7\23\2\2\u04a6\u04a7\5\62\32\2\u04a7\u04a8")
        buf.write("\7\67\2\2\u04a8\u04a9\78\2\2\u04a9\u04ae\5.\30\2\u04aa")
        buf.write("\u04ab\7^\2\2\u04ab\u04ad\5.\30\2\u04ac\u04aa\3\2\2\2")
        buf.write("\u04ad\u04b0\3\2\2\2\u04ae\u04ac\3\2\2\2\u04ae\u04af\3")
        buf.write("\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b1\u04b2")
        buf.write("\79\2\2\u04b2\u04b3\7d\2\2\u04b3\u0509\3\2\2\2\u04b4\u04b5")
        buf.write("\7\32\2\2\u04b5\u04f0\78\2\2\u04b6\u04bb\5.\30\2\u04b7")
        buf.write("\u04b8\7^\2\2\u04b8\u04ba\5.\30\2\u04b9\u04b7\3\2\2\2")
        buf.write("\u04ba\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3")
        buf.write("\2\2\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04b6")
        buf.write("\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0")
        buf.write("\u04c3\7d\2\2\u04c1\u04c3\5@!\2\u04c2\u04be\3\2\2\2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c3\u04c5\3\2\2\2\u04c4\u04c6\58\35\2")
        buf.write("\u04c5\u04c4\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\3")
        buf.write("\2\2\2\u04c7\u04d0\7d\2\2\u04c8\u04cd\5.\30\2\u04c9\u04ca")
        buf.write("\7^\2\2\u04ca\u04cc\5.\30\2\u04cb\u04c9\3\2\2\2\u04cc")
        buf.write("\u04cf\3\2\2\2\u04cd\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2")
        buf.write("\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2\u04d0\u04c8\3")
        buf.write("\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04f1\3\2\2\2\u04d2\u04d4")
        buf.write("\5J&\2\u04d3\u04d2\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d3")
        buf.write("\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d9\3\2\2\2\u04d7")
        buf.write("\u04d5\3\2\2\2\u04d8\u04da\5B\"\2\u04d9\u04d8\3\2\2\2")
        buf.write("\u04da\u04db\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3")
        buf.write("\2\2\2\u04dc\u04e0\3\2\2\2\u04dd\u04df\5J&\2\u04de\u04dd")
        buf.write("\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04de\3\2\2\2\u04e0")
        buf.write("\u04e1\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e0\3\2\2\2")
        buf.write("\u04e3\u04e4\5N(\2\u04e4\u04ee\7b\2\2\u04e5\u04ea\5.\30")
        buf.write("\2\u04e6\u04e7\7^\2\2\u04e7\u04e9\5.\30\2\u04e8\u04e6")
        buf.write("\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3\2\2\2\u04ea")
        buf.write("\u04eb\3\2\2\2\u04eb\u04ef\3\2\2\2\u04ec\u04ea\3\2\2\2")
        buf.write("\u04ed\u04ef\5d\63\2\u04ee\u04e5\3\2\2\2\u04ee\u04ed\3")
        buf.write("\2\2\2\u04ef\u04f1\3\2\2\2\u04f0\u04c2\3\2\2\2\u04f0\u04d5")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\79\2\2\u04f3")
        buf.write("\u0509\5\62\32\2\u04f4\u0504\t\16\2\2\u04f5\u0501\7(\2")
        buf.write("\2\u04f6\u04fb\5.\30\2\u04f7\u04f8\7^\2\2\u04f8\u04fa")
        buf.write("\5.\30\2\u04f9\u04f7\3\2\2\2\u04fa\u04fd\3\2\2\2\u04fb")
        buf.write("\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04ff\3\2\2\2")
        buf.write("\u04fd\u04fb\3\2\2\2\u04fe\u04f6\3\2\2\2\u04fe\u04ff\3")
        buf.write("\2\2\2\u04ff\u0502\3\2\2\2\u0500\u0502\5d\63\2\u0501\u04fe")
        buf.write("\3\2\2\2\u0501\u0500\3\2\2\2\u0502\u0504\3\2\2\2\u0503")
        buf.write("\u04f4\3\2\2\2\u0503\u04f5\3\2\2\2\u0504\u0505\3\2\2\2")
        buf.write("\u0505\u0509\7d\2\2\u0506\u0509\5:\36\2\u0507\u0509\5")
        buf.write("z>\2\u0508\u0486\3\2\2\2\u0508\u0489\3\2\2\2\u0508\u0492")
        buf.write("\3\2\2\2\u0508\u0495\3\2\2\2\u0508\u049d\3\2\2\2\u0508")
        buf.write("\u04a5\3\2\2\2\u0508\u04b4\3\2\2\2\u0508\u0503\3\2\2\2")
        buf.write("\u0508\u0506\3\2\2\2\u0508\u0507\3\2\2\2\u0509\u050c\3")
        buf.write("\2\2\2\u050a\u050c\5> \2\u050b\u047c\3\2\2\2\u050b\u050a")
        buf.write("\3\2\2\2\u050c\63\3\2\2\2\u050d\u0510\7\n\2\2\u050e\u0511")
        buf.write("\5,\27\2\u050f\u0511\7\21\2\2\u0510\u050e\3\2\2\2\u0510")
        buf.write("\u050f\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513\7b\2\2")
        buf.write("\u0513\u0514\5\62\32\2\u0514\65\3\2\2\2\u0515\u0516\7")
        buf.write("\24\2\2\u0516\u0517\5\62\32\2\u0517\67\3\2\2\2\u0518\u051d")
        buf.write("\5.\30\2\u0519\u051a\7^\2\2\u051a\u051c\5.\30\2\u051b")
        buf.write("\u0519\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3\2\2\2")
        buf.write("\u051d\u051e\3\2\2\2\u051e\u053b\3\2\2\2\u051f\u051d\3")
        buf.write("\2\2\2\u0520\u0522\5J&\2\u0521\u0520\3\2\2\2\u0522\u0525")
        buf.write("\3\2\2\2\u0523\u0521\3\2\2\2\u0523\u0524\3\2\2\2\u0524")
        buf.write("\u0527\3\2\2\2\u0525\u0523\3\2\2\2\u0526\u0528\5B\"\2")
        buf.write("\u0527\u0526\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u0527\3")
        buf.write("\2\2\2\u0529\u052a\3\2\2\2\u052a\u052e\3\2\2\2\u052b\u052d")
        buf.write("\5J&\2\u052c\u052b\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c")
        buf.write("\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530")
        buf.write("\u052e\3\2\2\2\u0531\u0538\5N(\2\u0532\u0533\7H\2\2\u0533")
        buf.write("\u0539\5.\30\2\u0534\u0536\7H\2\2\u0535\u0534\3\2\2\2")
        buf.write("\u0535\u0536\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0539\5")
        buf.write("d\63\2\u0538\u0532\3\2\2\2\u0538\u0535\3\2\2\2\u0539\u053b")
        buf.write("\3\2\2\2\u053a\u0518\3\2\2\2\u053a\u0523\3\2\2\2\u053b")
        buf.write("9\3\2\2\2\u053c\u053d\7\33\2\2\u053d\u053e\7h\2\2\u053e")
        buf.write("\u053f\7d\2\2\u053f;\3\2\2\2\u0540\u0588\5> \2\u0541\u0543")
        buf.write("\5J&\2\u0542\u0541\3\2\2\2\u0543\u0546\3\2\2\2\u0544\u0542")
        buf.write("\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u055e\3\2\2\2\u0546")
        buf.write("\u0544\3\2\2\2\u0547\u0549\5B\"\2\u0548\u0547\3\2\2\2")
        buf.write("\u0549\u054a\3\2\2\2\u054a\u0548\3\2\2\2\u054a\u054b\3")
        buf.write("\2\2\2\u054b\u054f\3\2\2\2\u054c\u054e\5J&\2\u054d\u054c")
        buf.write("\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f")
        buf.write("\u0550\3\2\2\2\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2")
        buf.write("\u0552\u0548\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554\3")
        buf.write("\2\2\2\u0554\u0558\5N(\2\u0555\u0557\t\17\2\2\u0556\u0555")
        buf.write("\3\2\2\2\u0557\u055a\3\2\2\2\u0558\u0556\3\2\2\2\u0558")
        buf.write("\u0559\3\2\2\2\u0559\u055b\3\2\2\2\u055a\u0558\3\2\2\2")
        buf.write("\u055b\u055c\5`\61\2\u055c\u055f\3\2\2\2\u055d\u055f\7")
        buf.write("d\2\2\u055e\u0552\3\2\2\2\u055e\u055d\3\2\2\2\u055f\u0588")
        buf.write("\3\2\2\2\u0560\u056d\7.\2\2\u0561\u056a\7I\2\2\u0562\u0567")
        buf.write("\5t;\2\u0563\u0564\7^\2\2\u0564\u0566\5t;\2\u0565\u0563")
        buf.write("\3\2\2\2\u0566\u0569\3\2\2\2\u0567\u0565\3\2\2\2\u0567")
        buf.write("\u0568\3\2\2\2\u0568\u056b\3\2\2\2\u0569\u0567\3\2\2\2")
        buf.write("\u056a\u0562\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056c\3")
        buf.write("\2\2\2\u056c\u056e\7J\2\2\u056d\u0561\3\2\2\2\u056d\u056e")
        buf.write("\3\2\2\2\u056e\u0572\3\2\2\2\u056f\u0570\7\27\2\2\u0570")
        buf.write("\u0572\t\20\2\2\u0571\u0560\3\2\2\2\u0571\u056f\3\2\2")
        buf.write("\2\u0572\u0573\3\2\2\2\u0573\u0588\5<\37\2\u0574\u0575")
        buf.write("\7\27\2\2\u0575\u057e\7p\2\2\u0576\u0578\7\35\2\2\u0577")
        buf.write("\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u0579\3\2\2\2")
        buf.write("\u0579\u057b\7 \2\2\u057a\u057c\7h\2\2\u057b\u057a\3\2")
        buf.write("\2\2\u057b\u057c\3\2\2\2\u057c\u057e\3\2\2\2\u057d\u0574")
        buf.write("\3\2\2\2\u057d\u0577\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u0583\7<\2\2\u0580\u0582\5<\37\2\u0581\u0580\3\2\2\2")
        buf.write("\u0582\u0585\3\2\2\2\u0583\u0581\3\2\2\2\u0583\u0584\3")
        buf.write("\2\2\2\u0584\u0586\3\2\2\2\u0585\u0583\3\2\2\2\u0586\u0588")
        buf.write("\7=\2\2\u0587\u0540\3\2\2\2\u0587\u0544\3\2\2\2\u0587")
        buf.write("\u0571\3\2\2\2\u0587\u057d\3\2\2\2\u0588=\3\2\2\2\u0589")
        buf.write("\u05e4\5@!\2\u058a\u058b\7\7\2\2\u058b\u058c\78\2\2\u058c")
        buf.write("\u058d\7p\2\2\u058d\u05e1\79\2\2\u058e\u0590\5J&\2\u058f")
        buf.write("\u058e\3\2\2\2\u0590\u0593\3\2\2\2\u0591\u058f\3\2\2\2")
        buf.write("\u0591\u0592\3\2\2\2\u0592\u0594\3\2\2\2\u0593\u0591\3")
        buf.write("\2\2\2\u0594\u0595\7\65\2\2\u0595\u059a\7 \2\2\u0596\u0597")
        buf.write("\7 \2\2\u0597\u0598\7h\2\2\u0598\u059a\7H\2\2\u0599\u0591")
        buf.write("\3\2\2\2\u0599\u0596\3\2\2\2\u059a\u059c\3\2\2\2\u059b")
        buf.write("\u059d\5\6\4\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2")
        buf.write("\u059d\u059e\3\2\2\2\u059e\u05e1\7h\2\2\u059f\u05be\7")
        buf.write("\65\2\2\u05a0\u05a2\7\63\2\2\u05a1\u05a0\3\2\2\2\u05a1")
        buf.write("\u05a2\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a6\5\6\4\2")
        buf.write("\u05a4\u05a6\7c\2\2\u05a5\u05a1\3\2\2\2\u05a5\u05a4\3")
        buf.write("\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05bf\5\4\3\2\u05a8\u05ac")
        buf.write("\7h\2\2\u05a9\u05ab\5J&\2\u05aa\u05a9\3\2\2\2\u05ab\u05ae")
        buf.write("\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad")
        buf.write("\u05af\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af\u05b1\7H\2\2")
        buf.write("\u05b0\u05b2\5D#\2\u05b1\u05b0\3\2\2\2\u05b2\u05b3\3\2")
        buf.write("\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b8")
        buf.write("\3\2\2\2\u05b5\u05b7\5J&\2\u05b6\u05b5\3\2\2\2\u05b7\u05ba")
        buf.write("\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9")
        buf.write("\u05bc\3\2\2\2\u05ba\u05b8\3\2\2\2\u05bb\u05bd\5T+\2\u05bc")
        buf.write("\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05bf\3\2\2\2")
        buf.write("\u05be\u05a5\3\2\2\2\u05be\u05a8\3\2\2\2\u05bf\u05e1\3")
        buf.write("\2\2\2\u05c0\u05c1\7+\2\2\u05c1\u05c2\78\2\2\u05c2\u05c3")
        buf.write("\5,\27\2\u05c3\u05c4\7^\2\2\u05c4\u05c5\7p\2\2\u05c5\u05c6")
        buf.write("\79\2\2\u05c6\u05e1\3\2\2\2\u05c7\u05c9\7\25\2\2\u05c8")
        buf.write("\u05ca\t\21\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2")
        buf.write("\2\u05ca\u05ce\3\2\2\2\u05cb\u05cd\5J&\2\u05cc\u05cb\3")
        buf.write("\2\2\2\u05cd\u05d0\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf")
        buf.write("\3\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1")
        buf.write("\u05de\7h\2\2\u05d2\u05d4\7b\2\2\u05d3\u05d5\5D#\2\u05d4")
        buf.write("\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d4\3\2\2\2")
        buf.write("\u05d6\u05d7\3\2\2\2\u05d7\u05db\3\2\2\2\u05d8\u05da\5")
        buf.write("J&\2\u05d9\u05d8\3\2\2\2\u05da\u05dd\3\2\2\2\u05db\u05d9")
        buf.write("\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd")
        buf.write("\u05db\3\2\2\2\u05de\u05d2\3\2\2\2\u05de\u05df\3\2\2\2")
        buf.write("\u05df\u05e1\3\2\2\2\u05e0\u058a\3\2\2\2\u05e0\u0599\3")
        buf.write("\2\2\2\u05e0\u059f\3\2\2\2\u05e0\u05c0\3\2\2\2\u05e0\u05c7")
        buf.write("\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e4\7d\2\2\u05e3")
        buf.write("\u0589\3\2\2\2\u05e3\u05e0\3\2\2\2\u05e4?\3\2\2\2\u05e5")
        buf.write("\u05e7\5B\"\2\u05e6\u05e5\3\2\2\2\u05e7\u05e8\3\2\2\2")
        buf.write("\u05e8\u05e6\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ed\3")
        buf.write("\2\2\2\u05ea\u05ec\5J&\2\u05eb\u05ea\3\2\2\2\u05ec\u05ef")
        buf.write("\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee")
        buf.write("\u05f1\3\2\2\2\u05ef\u05ed\3\2\2\2\u05f0\u05e6\3\2\2\2")
        buf.write("\u05f0\u05f1\3\2\2\2\u05f1\u0600\3\2\2\2\u05f2\u05f4\5")
        buf.write("N(\2\u05f3\u05f5\5b\62\2\u05f4\u05f3\3\2\2\2\u05f4\u05f5")
        buf.write("\3\2\2\2\u05f5\u05fd\3\2\2\2\u05f6\u05f7\7^\2\2\u05f7")
        buf.write("\u05f9\5N(\2\u05f8\u05fa\5b\62\2\u05f9\u05f8\3\2\2\2\u05f9")
        buf.write("\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05f6\3\2\2\2")
        buf.write("\u05fc\u05ff\3\2\2\2\u05fd\u05fb\3\2\2\2\u05fd\u05fe\3")
        buf.write("\2\2\2\u05fe\u0601\3\2\2\2\u05ff\u05fd\3\2\2\2\u0600\u05f2")
        buf.write("\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2\u0602")
        buf.write("\u0626\7d\2\2\u0603\u0605\5J&\2\u0604\u0603\3\2\2\2\u0605")
        buf.write("\u0606\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2")
        buf.write("\u0607\u0613\3\2\2\2\u0608\u060a\5B\"\2\u0609\u0608\3")
        buf.write("\2\2\2\u060a\u060b\3\2\2\2\u060b\u0609\3\2\2\2\u060b\u060c")
        buf.write("\3\2\2\2\u060c\u0610\3\2\2\2\u060d\u060f\5J&\2\u060e\u060d")
        buf.write("\3\2\2\2\u060f\u0612\3\2\2\2\u0610\u060e\3\2\2\2\u0610")
        buf.write("\u0611\3\2\2\2\u0611\u0614\3\2\2\2\u0612\u0610\3\2\2\2")
        buf.write("\u0613\u0609\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3")
        buf.write("\2\2\2\u0615\u0617\5N(\2\u0616\u0618\5b\62\2\u0617\u0616")
        buf.write("\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0620\3\2\2\2\u0619")
        buf.write("\u061a\7^\2\2\u061a\u061c\5N(\2\u061b\u061d\5b\62\2\u061c")
        buf.write("\u061b\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061f\3\2\2\2")
        buf.write("\u061e\u0619\3\2\2\2\u061f\u0622\3\2\2\2\u0620\u061e\3")
        buf.write("\2\2\2\u0620\u0621\3\2\2\2\u0621\u0623\3\2\2\2\u0622\u0620")
        buf.write("\3\2\2\2\u0623\u0624\7d\2\2\u0624\u0626\3\2\2\2\u0625")
        buf.write("\u05f0\3\2\2\2\u0625\u0604\3\2\2\2\u0626A\3\2\2\2\u0627")
        buf.write("\u062a\t\22\2\2\u0628\u062a\5D#\2\u0629\u0627\3\2\2\2")
        buf.write("\u0629\u0628\3\2\2\2\u062aC\3\2\2\2\u062b\u069e\5F$\2")
        buf.write("\u062c\u0630\t\23\2\2\u062d\u062f\5J&\2\u062e\u062d\3")
        buf.write("\2\2\2\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u064e\3\2\2\2\u0632\u0630\3\2\2\2\u0633")
        buf.write("\u0635\5\6\4\2\u0634\u0633\3\2\2\2\u0634\u0635\3\2\2\2")
        buf.write("\u0635\u0636\3\2\2\2\u0636\u0649\7h\2\2\u0637\u0646\7")
        buf.write("I\2\2\u0638\u063a\5x=\2\u0639\u063b\7g\2\2\u063a\u0639")
        buf.write("\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u0643\3\2\2\2\u063c")
        buf.write("\u063d\7^\2\2\u063d\u063f\5x=\2\u063e\u0640\7g\2\2\u063f")
        buf.write("\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\3\2\2\2")
        buf.write("\u0641\u063c\3\2\2\2\u0642\u0645\3\2\2\2\u0643\u0641\3")
        buf.write("\2\2\2\u0643\u0644\3\2\2\2\u0644\u0647\3\2\2\2\u0645\u0643")
        buf.write("\3\2\2\2\u0646\u0638\3\2\2\2\u0646\u0647\3\2\2\2\u0647")
        buf.write("\u0648\3\2\2\2\u0648\u064a\7J\2\2\u0649\u0637\3\2\2\2")
        buf.write("\u0649\u064a\3\2\2\2\u064a\u064c\3\2\2\2\u064b\u064d\7")
        buf.write("\31\2\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d")
        buf.write("\u064f\3\2\2\2\u064e\u0634\3\2\2\2\u064e\u064f\3\2\2\2")
        buf.write("\u064f\u0650\3\2\2\2\u0650\u065f\7b\2\2\u0651\u0653\5")
        buf.write("n8\2\u0652\u0654\7g\2\2\u0653\u0652\3\2\2\2\u0653\u0654")
        buf.write("\3\2\2\2\u0654\u065c\3\2\2\2\u0655\u0656\7^\2\2\u0656")
        buf.write("\u0658\5n8\2\u0657\u0659\7g\2\2\u0658\u0657\3\2\2\2\u0658")
        buf.write("\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a\u0655\3\2\2\2")
        buf.write("\u065b\u065e\3\2\2\2\u065c\u065a\3\2\2\2\u065c\u065d\3")
        buf.write("\2\2\2\u065d\u0660\3\2\2\2\u065e\u065c\3\2\2\2\u065f\u0651")
        buf.write("\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0661\3\2\2\2\u0661")
        buf.write("\u0663\7<\2\2\u0662\u0664\5f\64\2\u0663\u0662\3\2\2\2")
        buf.write("\u0663\u0664\3\2\2\2\u0664\u0665\3\2\2\2\u0665\u069e\7")
        buf.write("=\2\2\u0666\u0668\7\25\2\2\u0667\u0669\t\21\2\2\u0668")
        buf.write("\u0667\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066d\3\2\2\2")
        buf.write("\u066a\u066c\5J&\2\u066b\u066a\3\2\2\2\u066c\u066f\3\2")
        buf.write("\2\2\u066d\u066b\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0676")
        buf.write("\3\2\2\2\u066f\u066d\3\2\2\2\u0670\u0672\7h\2\2\u0671")
        buf.write("\u0670\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0677\3\2\2\2")
        buf.write("\u0673\u0674\5\6\4\2\u0674\u0675\7h\2\2\u0675\u0677\3")
        buf.write("\2\2\2\u0676\u0671\3\2\2\2\u0676\u0673\3\2\2\2\u0677\u0684")
        buf.write("\3\2\2\2\u0678\u067a\7b\2\2\u0679\u067b\5D#\2\u067a\u0679")
        buf.write("\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u067a\3\2\2\2\u067c")
        buf.write("\u067d\3\2\2\2\u067d\u0681\3\2\2\2\u067e\u0680\5J&\2\u067f")
        buf.write("\u067e\3\2\2\2\u0680\u0683\3\2\2\2\u0681\u067f\3\2\2\2")
        buf.write("\u0681\u0682\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3")
        buf.write("\2\2\2\u0684\u0678\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686")
        buf.write("\3\2\2\2\u0686\u069a\7<\2\2\u0687\u068a\7h\2\2\u0688\u0689")
        buf.write("\7H\2\2\u0689\u068b\5,\27\2\u068a\u0688\3\2\2\2\u068a")
        buf.write("\u068b\3\2\2\2\u068b\u0694\3\2\2\2\u068c\u068d\7^\2\2")
        buf.write("\u068d\u0690\7h\2\2\u068e\u068f\7H\2\2\u068f\u0691\5,")
        buf.write("\27\2\u0690\u068e\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0693")
        buf.write("\3\2\2\2\u0692\u068c\3\2\2\2\u0693\u0696\3\2\2\2\u0694")
        buf.write("\u0692\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0698\3\2\2\2")
        buf.write("\u0696\u0694\3\2\2\2\u0697\u0699\7^\2\2\u0698\u0697\3")
        buf.write("\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b\3\2\2\2\u069a\u0687")
        buf.write("\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c")
        buf.write("\u069e\7=\2\2\u069d\u062b\3\2\2\2\u069d\u062c\3\2\2\2")
        buf.write("\u069d\u0666\3\2\2\2\u069eE\3\2\2\2\u069f\u06e8\5H%\2")
        buf.write("\u06a0\u06c4\t\23\2\2\u06a1\u06a3\5J&\2\u06a2\u06a1\3")
        buf.write("\2\2\2\u06a3\u06a6\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a4\u06a5")
        buf.write("\3\2\2\2\u06a5\u06a8\3\2\2\2\u06a6\u06a4\3\2\2\2\u06a7")
        buf.write("\u06a9\5\6\4\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2")
        buf.write("\u06a9\u06aa\3\2\2\2\u06aa\u06c5\7h\2\2\u06ab\u06ad\5")
        buf.write("\6\4\2\u06ac\u06ae\7.\2\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae")
        buf.write("\3\2\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ab\3\2\2\2\u06af")
        buf.write("\u06b0\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\7h\2\2")
        buf.write("\u06b2\u06c1\7I\2\2\u06b3\u06b5\5x=\2\u06b4\u06b6\7g\2")
        buf.write("\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06be")
        buf.write("\3\2\2\2\u06b7\u06b8\7^\2\2\u06b8\u06ba\5x=\2\u06b9\u06bb")
        buf.write("\7g\2\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb")
        buf.write("\u06bd\3\2\2\2\u06bc\u06b7\3\2\2\2\u06bd\u06c0\3\2\2\2")
        buf.write("\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c2\3")
        buf.write("\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06b3\3\2\2\2\u06c1\u06c2")
        buf.write("\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c5\7J\2\2\u06c4")
        buf.write("\u06a4\3\2\2\2\u06c4\u06af\3\2\2\2\u06c5\u06e8\3\2\2\2")
        buf.write("\u06c6\u06c8\7\25\2\2\u06c7\u06c9\5\6\4\2\u06c8\u06c7")
        buf.write("\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca")
        buf.write("\u06e8\7h\2\2\u06cb\u06cc\7\63\2\2\u06cc\u06e4\5\6\4\2")
        buf.write("\u06cd\u06e5\7h\2\2\u06ce\u06d0\7.\2\2\u06cf\u06ce\3\2")
        buf.write("\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d2")
        buf.write("\7h\2\2\u06d2\u06e1\7I\2\2\u06d3\u06d5\5x=\2\u06d4\u06d6")
        buf.write("\7g\2\2\u06d5\u06d4\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6")
        buf.write("\u06de\3\2\2\2\u06d7\u06d8\7^\2\2\u06d8\u06da\5x=\2\u06d9")
        buf.write("\u06db\7g\2\2\u06da\u06d9\3\2\2\2\u06da\u06db\3\2\2\2")
        buf.write("\u06db\u06dd\3\2\2\2\u06dc\u06d7\3\2\2\2\u06dd\u06e0\3")
        buf.write("\2\2\2\u06de\u06dc\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e2")
        buf.write("\3\2\2\2\u06e0\u06de\3\2\2\2\u06e1\u06d3\3\2\2\2\u06e1")
        buf.write("\u06e2\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e5\7J\2\2")
        buf.write("\u06e4\u06cd\3\2\2\2\u06e4\u06cf\3\2\2\2\u06e5\u06e8\3")
        buf.write("\2\2\2\u06e6\u06e8\7\r\2\2\u06e7\u069f\3\2\2\2\u06e7\u06a0")
        buf.write("\3\2\2\2\u06e7\u06c6\3\2\2\2\u06e7\u06cb\3\2\2\2\u06e7")
        buf.write("\u06e6\3\2\2\2\u06e8G\3\2\2\2\u06e9\u06eb\5\6\4\2\u06ea")
        buf.write("\u06e9\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ec\3\2\2\2")
        buf.write("\u06ec\u06ff\7h\2\2\u06ed\u06fc\7I\2\2\u06ee\u06f0\5x")
        buf.write("=\2\u06ef\u06f1\7g\2\2\u06f0\u06ef\3\2\2\2\u06f0\u06f1")
        buf.write("\3\2\2\2\u06f1\u06f9\3\2\2\2\u06f2\u06f3\7^\2\2\u06f3")
        buf.write("\u06f5\5x=\2\u06f4\u06f6\7g\2\2\u06f5\u06f4\3\2\2\2\u06f5")
        buf.write("\u06f6\3\2\2\2\u06f6\u06f8\3\2\2\2\u06f7\u06f2\3\2\2\2")
        buf.write("\u06f8\u06fb\3\2\2\2\u06f9\u06f7\3\2\2\2\u06f9\u06fa\3")
        buf.write("\2\2\2\u06fa\u06fd\3\2\2\2\u06fb\u06f9\3\2\2\2\u06fc\u06ee")
        buf.write("\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe")
        buf.write("\u0700\7J\2\2\u06ff\u06ed\3\2\2\2\u06ff\u0700\3\2\2\2")
        buf.write("\u0700\u0727\3\2\2\2\u0701\u0702\5\6\4\2\u0702\u0703\7")
        buf.write(".\2\2\u0703\u0704\7h\2\2\u0704\u0713\7I\2\2\u0705\u0707")
        buf.write("\5x=\2\u0706\u0708\7g\2\2\u0707\u0706\3\2\2\2\u0707\u0708")
        buf.write("\3\2\2\2\u0708\u0710\3\2\2\2\u0709\u070a\7^\2\2\u070a")
        buf.write("\u070c\5x=\2\u070b\u070d\7g\2\2\u070c\u070b\3\2\2\2\u070c")
        buf.write("\u070d\3\2\2\2\u070d\u070f\3\2\2\2\u070e\u0709\3\2\2\2")
        buf.write("\u070f\u0712\3\2\2\2\u0710\u070e\3\2\2\2\u0710\u0711\3")
        buf.write("\2\2\2\u0711\u0714\3\2\2\2\u0712\u0710\3\2\2\2\u0713\u0705")
        buf.write("\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0715\3\2\2\2\u0715")
        buf.write("\u0716\7J\2\2\u0716\u0727\3\2\2\2\u0717\u0727\t\24\2\2")
        buf.write("\u0718\u0719\7\20\2\2\u0719\u0723\78\2\2\u071a\u071f\5")
        buf.write(".\30\2\u071b\u071c\7^\2\2\u071c\u071e\5.\30\2\u071d\u071b")
        buf.write("\3\2\2\2\u071e\u0721\3\2\2\2\u071f\u071d\3\2\2\2\u071f")
        buf.write("\u0720\3\2\2\2\u0720\u0724\3\2\2\2\u0721\u071f\3\2\2\2")
        buf.write("\u0722\u0724\7\b\2\2\u0723\u071a\3\2\2\2\u0723\u0722\3")
        buf.write("\2\2\2\u0724\u0725\3\2\2\2\u0725\u0727\79\2\2\u0726\u06ea")
        buf.write("\3\2\2\2\u0726\u0701\3\2\2\2\u0726\u0717\3\2\2\2\u0726")
        buf.write("\u0718\3\2\2\2\u0727I\3\2\2\2\u0728\u0729\7:\2\2\u0729")
        buf.write("\u073c\7:\2\2\u072a\u072d\7h\2\2\u072b\u072c\7c\2\2\u072c")
        buf.write("\u072e\7h\2\2\u072d\u072b\3\2\2\2\u072d\u072e\3\2\2\2")
        buf.write("\u072e\u0737\3\2\2\2\u072f\u0733\78\2\2\u0730\u0732\5")
        buf.write("L\'\2\u0731\u0730\3\2\2\2\u0732\u0735\3\2\2\2\u0733\u0731")
        buf.write("\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2\u0735")
        buf.write("\u0733\3\2\2\2\u0736\u0738\79\2\2\u0737\u072f\3\2\2\2")
        buf.write("\u0737\u0738\3\2\2\2\u0738\u073a\3\2\2\2\u0739\u073b\7")
        buf.write("g\2\2\u073a\u0739\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d")
        buf.write("\3\2\2\2\u073c\u072a\3\2\2\2\u073c\u073d\3\2\2\2\u073d")
        buf.write("\u0755\3\2\2\2\u073e\u0751\7^\2\2\u073f\u0742\7h\2\2\u0740")
        buf.write("\u0741\7c\2\2\u0741\u0743\7h\2\2\u0742\u0740\3\2\2\2\u0742")
        buf.write("\u0743\3\2\2\2\u0743\u074c\3\2\2\2\u0744\u0748\78\2\2")
        buf.write("\u0745\u0747\5L\'\2\u0746\u0745\3\2\2\2\u0747\u074a\3")
        buf.write("\2\2\2\u0748\u0746\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074b")
        buf.write("\3\2\2\2\u074a\u0748\3\2\2\2\u074b\u074d\79\2\2\u074c")
        buf.write("\u0744\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074f\3\2\2\2")
        buf.write("\u074e\u0750\7g\2\2\u074f\u074e\3\2\2\2\u074f\u0750\3")
        buf.write("\2\2\2\u0750\u0752\3\2\2\2\u0751\u073f\3\2\2\2\u0751\u0752")
        buf.write("\3\2\2\2\u0752\u0754\3\2\2\2\u0753\u073e\3\2\2\2\u0754")
        buf.write("\u0757\3\2\2\2\u0755\u0753\3\2\2\2\u0755\u0756\3\2\2\2")
        buf.write("\u0756\u0758\3\2\2\2\u0757\u0755\3\2\2\2\u0758\u0759\7")
        buf.write(";\2\2\u0759\u0773\7;\2\2\u075a\u075b\7\5\2\2\u075b\u076b")
        buf.write("\78\2\2\u075c\u075e\5D#\2\u075d\u075c\3\2\2\2\u075e\u075f")
        buf.write("\3\2\2\2\u075f\u075d\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write("\u0764\3\2\2\2\u0761\u0763\5J&\2\u0762\u0761\3\2\2\2\u0763")
        buf.write("\u0766\3\2\2\2\u0764\u0762\3\2\2\2\u0764\u0765\3\2\2\2")
        buf.write("\u0765\u0768\3\2\2\2\u0766\u0764\3\2\2\2\u0767\u0769\5")
        buf.write("T+\2\u0768\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076c")
        buf.write("\3\2\2\2\u076a\u076c\5,\27\2\u076b\u075d\3\2\2\2\u076b")
        buf.write("\u076a\3\2\2\2\u076c\u076e\3\2\2\2\u076d\u076f\7g\2\2")
        buf.write("\u076e\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0770\3")
        buf.write("\2\2\2\u0770\u0771\79\2\2\u0771\u0773\3\2\2\2\u0772\u0728")
        buf.write("\3\2\2\2\u0772\u075a\3\2\2\2\u0773K\3\2\2\2\u0774\u0778")
        buf.write("\78\2\2\u0775\u0777\5L\'\2\u0776\u0775\3\2\2\2\u0777\u077a")
        buf.write("\3\2\2\2\u0778\u0776\3\2\2\2\u0778\u0779\3\2\2\2\u0779")
        buf.write("\u077b\3\2\2\2\u077a\u0778\3\2\2\2\u077b\u078d\79\2\2")
        buf.write("\u077c\u0780\7:\2\2\u077d\u077f\5L\'\2\u077e\u077d\3\2")
        buf.write("\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2\2\u0780\u0781")
        buf.write("\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0780\3\2\2\2\u0783")
        buf.write("\u078d\7;\2\2\u0784\u0788\7<\2\2\u0785\u0787\5L\'\2\u0786")
        buf.write("\u0785\3\2\2\2\u0787\u078a\3\2\2\2\u0788\u0786\3\2\2\2")
        buf.write("\u0788\u0789\3\2\2\2\u0789\u078b\3\2\2\2\u078a\u0788\3")
        buf.write("\2\2\2\u078b\u078d\7=\2\2\u078c\u0774\3\2\2\2\u078c\u077c")
        buf.write("\3\2\2\2\u078c\u0784\3\2\2\2\u078dM\3\2\2\2\u078e\u07c7")
        buf.write("\5P)\2\u078f\u0791\7g\2\2\u0790\u078f\3\2\2\2\u0790\u0791")
        buf.write("\3\2\2\2\u0791\u0796\3\2\2\2\u0792\u0794\5\6\4\2\u0793")
        buf.write("\u0795\7.\2\2\u0794\u0793\3\2\2\2\u0794\u0795\3\2\2\2")
        buf.write("\u0795\u0797\3\2\2\2\u0796\u0792\3\2\2\2\u0796\u0797\3")
        buf.write("\2\2\2\u0797\u0798\3\2\2\2\u0798\u079c\5\4\3\2\u0799\u079b")
        buf.write("\5J&\2\u079a\u0799\3\2\2\2\u079b\u079e\3\2\2\2\u079c\u079a")
        buf.write("\3\2\2\2\u079c\u079d\3\2\2\2\u079d\u07a4\3\2\2\2\u079e")
        buf.write("\u079c\3\2\2\2\u079f\u07a0\78\2\2\u07a0\u07a1\5P)\2\u07a1")
        buf.write("\u07a2\79\2\2\u07a2\u07a4\3\2\2\2\u07a3\u0790\3\2\2\2")
        buf.write("\u07a3\u079f\3\2\2\2\u07a4\u07b3\3\2\2\2\u07a5\u07b2\5")
        buf.write("R*\2\u07a6\u07a8\7:\2\2\u07a7\u07a9\5,\27\2\u07a8\u07a7")
        buf.write("\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa")
        buf.write("\u07ae\7;\2\2\u07ab\u07ad\5J&\2\u07ac\u07ab\3\2\2\2\u07ad")
        buf.write("\u07b0\3\2\2\2\u07ae\u07ac\3\2\2\2\u07ae\u07af\3\2\2\2")
        buf.write("\u07af\u07b2\3\2\2\2\u07b0\u07ae\3\2\2\2\u07b1\u07a5\3")
        buf.write("\2\2\2\u07b1\u07a6\3\2\2\2\u07b2\u07b5\3\2\2\2\u07b3\u07b1")
        buf.write("\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b6\3\2\2\2\u07b5")
        buf.write("\u07b3\3\2\2\2\u07b6\u07b7\5R*\2\u07b7\u07b9\7`\2\2\u07b8")
        buf.write("\u07ba\5F$\2\u07b9\u07b8\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb")
        buf.write("\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07c0\3\2\2\2")
        buf.write("\u07bd\u07bf\5J&\2\u07be\u07bd\3\2\2\2\u07bf\u07c2\3\2")
        buf.write("\2\2\u07c0\u07be\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07c4")
        buf.write("\3\2\2\2\u07c2\u07c0\3\2\2\2\u07c3\u07c5\5T+\2\u07c4\u07c3")
        buf.write("\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c7\3\2\2\2\u07c6")
        buf.write("\u078e\3\2\2\2\u07c6\u07a3\3\2\2\2\u07c7O\3\2\2\2\u07c8")
        buf.write("\u07ca\7g\2\2\u07c9\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2")
        buf.write("\u07ca\u07cf\3\2\2\2\u07cb\u07cd\5\6\4\2\u07cc\u07ce\7")
        buf.write(".\2\2\u07cd\u07cc\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d0")
        buf.write("\3\2\2\2\u07cf\u07cb\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0")
        buf.write("\u07d1\3\2\2\2\u07d1\u07d5\5\4\3\2\u07d2\u07d4\5J&\2\u07d3")
        buf.write("\u07d2\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d3\3\2\2\2")
        buf.write("\u07d5\u07d6\3\2\2\2\u07d6\u07dd\3\2\2\2\u07d7\u07d5\3")
        buf.write("\2\2\2\u07d8\u07d9\78\2\2\u07d9\u07da\5P)\2\u07da\u07db")
        buf.write("\79\2\2\u07db\u07dd\3\2\2\2\u07dc\u07c9\3\2\2\2\u07dc")
        buf.write("\u07d8\3\2\2\2\u07dd\u07ec\3\2\2\2\u07de\u07eb\5R*\2\u07df")
        buf.write("\u07e1\7:\2\2\u07e0\u07e2\5,\27\2\u07e1\u07e0\3\2\2\2")
        buf.write("\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e7\7")
        buf.write(";\2\2\u07e4\u07e6\5J&\2\u07e5\u07e4\3\2\2\2\u07e6\u07e9")
        buf.write("\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8")
        buf.write("\u07eb\3\2\2\2\u07e9\u07e7\3\2\2\2\u07ea\u07de\3\2\2\2")
        buf.write("\u07ea\u07df\3\2\2\2\u07eb\u07ee\3\2\2\2\u07ec\u07ea\3")
        buf.write("\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u080a\3\2\2\2\u07ee\u07ec")
        buf.write("\3\2\2\2\u07ef\u07f1\5\6\4\2\u07f0\u07ef\3\2\2\2\u07f0")
        buf.write("\u07f1\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f6\7@\2\2")
        buf.write("\u07f3\u07f5\5J&\2\u07f4\u07f3\3\2\2\2\u07f5\u07f8\3\2")
        buf.write("\2\2\u07f6\u07f4\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07fc")
        buf.write("\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f9\u07fb\7\r\2\2\u07fa")
        buf.write("\u07f9\3\2\2\2\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2")
        buf.write("\u07fc\u07fd\3\2\2\2\u07fd\u0807\3\2\2\2\u07fe\u07fc\3")
        buf.write("\2\2\2\u07ff\u0803\t\2\2\2\u0800\u0802\5J&\2\u0801\u0800")
        buf.write("\3\2\2\2\u0802\u0805\3\2\2\2\u0803\u0801\3\2\2\2\u0803")
        buf.write("\u0804\3\2\2\2\u0804\u0807\3\2\2\2\u0805\u0803\3\2\2\2")
        buf.write("\u0806\u07f0\3\2\2\2\u0806\u07ff\3\2\2\2\u0807\u0808\3")
        buf.write("\2\2\2\u0808\u080a\5P)\2\u0809\u07dc\3\2\2\2\u0809\u0806")
        buf.write("\3\2\2\2\u080aQ\3\2\2\2\u080b\u0817\78\2\2\u080c\u0811")
        buf.write("\5^\60\2\u080d\u080e\7^\2\2\u080e\u0810\5^\60\2\u080f")
        buf.write("\u080d\3\2\2\2\u0810\u0813\3\2\2\2\u0811\u080f\3\2\2\2")
        buf.write("\u0811\u0812\3\2\2\2\u0812\u0815\3\2\2\2\u0813\u0811\3")
        buf.write("\2\2\2\u0814\u0816\7^\2\2\u0815\u0814\3\2\2\2\u0815\u0816")
        buf.write("\3\2\2\2\u0816\u0818\3\2\2\2\u0817\u080c\3\2\2\2\u0817")
        buf.write("\u0818\3\2\2\2\u0818\u081a\3\2\2\2\u0819\u081b\7g\2\2")
        buf.write("\u081a\u0819\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c\3")
        buf.write("\2\2\2\u081c\u0820\79\2\2\u081d\u081f\7\r\2\2\u081e\u081d")
        buf.write("\3\2\2\2\u081f\u0822\3\2\2\2\u0820\u081e\3\2\2\2\u0820")
        buf.write("\u0821\3\2\2\2\u0821\u0824\3\2\2\2\u0822\u0820\3\2\2\2")
        buf.write("\u0823\u0825\t\2\2\2\u0824\u0823\3\2\2\2\u0824\u0825\3")
        buf.write("\2\2\2\u0825\u0827\3\2\2\2\u0826\u0828\5~@\2\u0827\u0826")
        buf.write("\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u082c\3\2\2\2\u0829")
        buf.write("\u082b\5J&\2\u082a\u0829\3\2\2\2\u082b\u082e\3\2\2\2\u082c")
        buf.write("\u082a\3\2\2\2\u082c\u082d\3\2\2\2\u082dS\3\2\2\2\u082e")
        buf.write("\u082c\3\2\2\2\u082f\u0845\5V,\2\u0830\u0832\5X-\2\u0831")
        buf.write("\u0830\3\2\2\2\u0831\u0832\3\2\2\2\u0832\u0833\3\2\2\2")
        buf.write("\u0833\u0834\5R*\2\u0834\u0836\7`\2\2\u0835\u0837\5F$")
        buf.write("\2\u0836\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u0836")
        buf.write("\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083d\3\2\2\2\u083a")
        buf.write("\u083c\5J&\2\u083b\u083a\3\2\2\2\u083c\u083f\3\2\2\2\u083d")
        buf.write("\u083b\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u0841\3\2\2\2")
        buf.write("\u083f\u083d\3\2\2\2\u0840\u0842\5T+\2\u0841\u0840\3\2")
        buf.write("\2\2\u0841\u0842\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0845")
        buf.write("\5Z.\2\u0844\u082f\3\2\2\2\u0844\u0831\3\2\2\2\u0844\u0843")
        buf.write("\3\2\2\2\u0845U\3\2\2\2\u0846\u0864\5X-\2\u0847\u0849")
        buf.write("\5\6\4\2\u0848\u0847\3\2\2\2\u0848\u0849\3\2\2\2\u0849")
        buf.write("\u084a\3\2\2\2\u084a\u084e\7@\2\2\u084b\u084d\5J&\2\u084c")
        buf.write("\u084b\3\2\2\2\u084d\u0850\3\2\2\2\u084e\u084c\3\2\2\2")
        buf.write("\u084e\u084f\3\2\2\2\u084f\u0854\3\2\2\2\u0850\u084e\3")
        buf.write("\2\2\2\u0851\u0853\7\r\2\2\u0852\u0851\3\2\2\2\u0853\u0856")
        buf.write("\3\2\2\2\u0854\u0852\3\2\2\2\u0854\u0855\3\2\2\2\u0855")
        buf.write("\u085f\3\2\2\2\u0856\u0854\3\2\2\2\u0857\u085b\t\2\2\2")
        buf.write("\u0858\u085a\5J&\2\u0859\u0858\3\2\2\2\u085a\u085d\3\2")
        buf.write("\2\2\u085b\u0859\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085f")
        buf.write("\3\2\2\2\u085d\u085b\3\2\2\2\u085e\u0848\3\2\2\2\u085e")
        buf.write("\u0857\3\2\2\2\u085f\u0861\3\2\2\2\u0860\u0862\5V,\2\u0861")
        buf.write("\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\3\2\2\2")
        buf.write("\u0863\u0846\3\2\2\2\u0863\u085e\3\2\2\2\u0864W\3\2\2")
        buf.write("\2\u0865\u0866\b-\1\2\u0866\u0877\5R*\2\u0867\u0869\7")
        buf.write(":\2\2\u0868\u086a\5,\27\2\u0869\u0868\3\2\2\2\u0869\u086a")
        buf.write("\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u086f\7;\2\2\u086c")
        buf.write("\u086e\5J&\2\u086d\u086c\3\2\2\2\u086e\u0871\3\2\2\2\u086f")
        buf.write("\u086d\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0877\3\2\2\2")
        buf.write("\u0871\u086f\3\2\2\2\u0872\u0873\78\2\2\u0873\u0874\5")
        buf.write("V,\2\u0874\u0875\79\2\2\u0875\u0877\3\2\2\2\u0876\u0865")
        buf.write("\3\2\2\2\u0876\u0867\3\2\2\2\u0876\u0872\3\2\2\2\u0877")
        buf.write("\u0889\3\2\2\2\u0878\u0885\f\6\2\2\u0879\u0886\5R*\2\u087a")
        buf.write("\u087c\7:\2\2\u087b\u087d\5,\27\2\u087c\u087b\3\2\2\2")
        buf.write("\u087c\u087d\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u0882\7")
        buf.write(";\2\2\u087f\u0881\5J&\2\u0880\u087f\3\2\2\2\u0881\u0884")
        buf.write("\3\2\2\2\u0882\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883")
        buf.write("\u0886\3\2\2\2\u0884\u0882\3\2\2\2\u0885\u0879\3\2\2\2")
        buf.write("\u0885\u087a\3\2\2\2\u0886\u0888\3\2\2\2\u0887\u0878\3")
        buf.write("\2\2\2\u0888\u088b\3\2\2\2\u0889\u0887\3\2\2\2\u0889\u088a")
        buf.write("\3\2\2\2\u088aY\3\2\2\2\u088b\u0889\3\2\2\2\u088c\u08a8")
        buf.write("\5\\/\2\u088d\u088f\5\6\4\2\u088e\u088d\3\2\2\2\u088e")
        buf.write("\u088f\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0894\7@\2\2")
        buf.write("\u0891\u0893\5J&\2\u0892\u0891\3\2\2\2\u0893\u0896\3\2")
        buf.write("\2\2\u0894\u0892\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u089a")
        buf.write("\3\2\2\2\u0896\u0894\3\2\2\2\u0897\u0899\7\r\2\2\u0898")
        buf.write("\u0897\3\2\2\2\u0899\u089c\3\2\2\2\u089a\u0898\3\2\2\2")
        buf.write("\u089a\u089b\3\2\2\2\u089b\u08a5\3\2\2\2\u089c\u089a\3")
        buf.write("\2\2\2\u089d\u08a1\t\2\2\2\u089e\u08a0\5J&\2\u089f\u089e")
        buf.write("\3\2\2\2\u08a0\u08a3\3\2\2\2\u08a1\u089f\3\2\2\2\u08a1")
        buf.write("\u08a2\3\2\2\2\u08a2\u08a5\3\2\2\2\u08a3\u08a1\3\2\2\2")
        buf.write("\u08a4\u088e\3\2\2\2\u08a4\u089d\3\2\2\2\u08a5\u08a6\3")
        buf.write("\2\2\2\u08a6\u08a8\5Z.\2\u08a7\u088c\3\2\2\2\u08a7\u08a4")
        buf.write("\3\2\2\2\u08a8[\3\2\2\2\u08a9\u08aa\b/\1\2\u08aa\u08ab")
        buf.write("\7g\2\2\u08ab\u08bd\3\2\2\2\u08ac\u08b9\f\4\2\2\u08ad")
        buf.write("\u08ba\5R*\2\u08ae\u08b0\7:\2\2\u08af\u08b1\5,\27\2\u08b0")
        buf.write("\u08af\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b2\3\2\2\2")
        buf.write("\u08b2\u08b6\7;\2\2\u08b3\u08b5\5J&\2\u08b4\u08b3\3\2")
        buf.write("\2\2\u08b5\u08b8\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7")
        buf.write("\3\2\2\2\u08b7\u08ba\3\2\2\2\u08b8\u08b6\3\2\2\2\u08b9")
        buf.write("\u08ad\3\2\2\2\u08b9\u08ae\3\2\2\2\u08ba\u08bc\3\2\2\2")
        buf.write("\u08bb\u08ac\3\2\2\2\u08bc\u08bf\3\2\2\2\u08bd\u08bb\3")
        buf.write("\2\2\2\u08bd\u08be\3\2\2\2\u08be]\3\2\2\2\u08bf\u08bd")
        buf.write("\3\2\2\2\u08c0\u08c2\5J&\2\u08c1\u08c0\3\2\2\2\u08c2\u08c5")
        buf.write("\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4")
        buf.write("\u08c7\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c6\u08c8\5B\"\2")
        buf.write("\u08c7\u08c6\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08c7\3")
        buf.write("\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08ce\3\2\2\2\u08cb\u08cd")
        buf.write("\5J&\2\u08cc\u08cb\3\2\2\2\u08cd\u08d0\3\2\2\2\u08ce\u08cc")
        buf.write("\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d1\3\2\2\2\u08d0")
        buf.write("\u08ce\3\2\2\2\u08d1\u08d3\5N(\2\u08d2\u08d4\5T+\2\u08d3")
        buf.write("\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08da\3\2\2\2")
        buf.write("\u08d5\u08d8\7H\2\2\u08d6\u08d9\5.\30\2\u08d7\u08d9\5")
        buf.write("d\63\2\u08d8\u08d6\3\2\2\2\u08d8\u08d7\3\2\2\2\u08d9\u08db")
        buf.write("\3\2\2\2\u08da\u08d5\3\2\2\2\u08da\u08db\3\2\2\2\u08db")
        buf.write("_\3\2\2\2\u08dc\u08dd\7b\2\2\u08dd\u08df\5r:\2\u08de\u08e0")
        buf.write("\7g\2\2\u08df\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0")
        buf.write("\u08e8\3\2\2\2\u08e1\u08e2\7^\2\2\u08e2\u08e4\5r:\2\u08e3")
        buf.write("\u08e5\7g\2\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2")
        buf.write("\u08e5\u08e7\3\2\2\2\u08e6\u08e1\3\2\2\2\u08e7\u08ea\3")
        buf.write("\2\2\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ec")
        buf.write("\3\2\2\2\u08ea\u08e8\3\2\2\2\u08eb\u08dc\3\2\2\2\u08eb")
        buf.write("\u08ec\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08f1\7<\2\2")
        buf.write("\u08ee\u08f0\5\62\32\2\u08ef\u08ee\3\2\2\2\u08f0\u08f3")
        buf.write("\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2")
        buf.write("\u08f4\3\2\2\2\u08f3\u08f1\3\2\2\2\u08f4\u0918\7=\2\2")
        buf.write("\u08f5\u0905\7\61\2\2\u08f6\u08f7\7b\2\2\u08f7\u08f9\5")
        buf.write("r:\2\u08f8\u08fa\7g\2\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa")
        buf.write("\3\2\2\2\u08fa\u0902\3\2\2\2\u08fb\u08fc\7^\2\2\u08fc")
        buf.write("\u08fe\5r:\2\u08fd\u08ff\7g\2\2\u08fe\u08fd\3\2\2\2\u08fe")
        buf.write("\u08ff\3\2\2\2\u08ff\u0901\3\2\2\2\u0900\u08fb\3\2\2\2")
        buf.write("\u0901\u0904\3\2\2\2\u0902\u0900\3\2\2\2\u0902\u0903\3")
        buf.write("\2\2\2\u0903\u0906\3\2\2\2\u0904\u0902\3\2\2\2\u0905\u08f6")
        buf.write("\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0907\3\2\2\2\u0907")
        buf.write("\u090b\7<\2\2\u0908\u090a\5\62\32\2\u0909\u0908\3\2\2")
        buf.write("\2\u090a\u090d\3\2\2\2\u090b\u0909\3\2\2\2\u090b\u090c")
        buf.write("\3\2\2\2\u090c\u090e\3\2\2\2\u090d\u090b\3\2\2\2\u090e")
        buf.write("\u0910\7=\2\2\u090f\u0911\5|?\2\u0910\u090f\3\2\2\2\u0911")
        buf.write("\u0912\3\2\2\2\u0912\u0910\3\2\2\2\u0912\u0913\3\2\2\2")
        buf.write("\u0913\u0918\3\2\2\2\u0914\u0915\7H\2\2\u0915\u0916\t")
        buf.write("\25\2\2\u0916\u0918\7d\2\2\u0917\u08eb\3\2\2\2\u0917\u08f5")
        buf.write("\3\2\2\2\u0917\u0914\3\2\2\2\u0918a\3\2\2\2\u0919\u091a")
        buf.write("\7H\2\2\u091a\u0937\5.\30\2\u091b\u091d\7H\2\2\u091c\u091b")
        buf.write("\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e")
        buf.write("\u0937\5d\63\2\u091f\u0922\78\2\2\u0920\u0923\5.\30\2")
        buf.write("\u0921\u0923\5d\63\2\u0922\u0920\3\2\2\2\u0922\u0921\3")
        buf.write("\2\2\2\u0923\u0925\3\2\2\2\u0924\u0926\7g\2\2\u0925\u0924")
        buf.write("\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0931\3\2\2\2\u0927")
        buf.write("\u092a\7^\2\2\u0928\u092b\5.\30\2\u0929\u092b\5d\63\2")
        buf.write("\u092a\u0928\3\2\2\2\u092a\u0929\3\2\2\2\u092b\u092d\3")
        buf.write("\2\2\2\u092c\u092e\7g\2\2\u092d\u092c\3\2\2\2\u092d\u092e")
        buf.write("\3\2\2\2\u092e\u0930\3\2\2\2\u092f\u0927\3\2\2\2\u0930")
        buf.write("\u0933\3\2\2\2\u0931\u092f\3\2\2\2\u0931\u0932\3\2\2\2")
        buf.write("\u0932\u0934\3\2\2\2\u0933\u0931\3\2\2\2\u0934\u0935\7")
        buf.write("9\2\2\u0935\u0937\3\2\2\2\u0936\u0919\3\2\2\2\u0936\u091c")
        buf.write("\3\2\2\2\u0936\u091f\3\2\2\2\u0937c\3\2\2\2\u0938\u0950")
        buf.write("\7<\2\2\u0939\u093c\5.\30\2\u093a\u093c\5d\63\2\u093b")
        buf.write("\u0939\3\2\2\2\u093b\u093a\3\2\2\2\u093c\u093e\3\2\2\2")
        buf.write("\u093d\u093f\7g\2\2\u093e\u093d\3\2\2\2\u093e\u093f\3")
        buf.write("\2\2\2\u093f\u094a\3\2\2\2\u0940\u0943\7^\2\2\u0941\u0944")
        buf.write("\5.\30\2\u0942\u0944\5d\63\2\u0943\u0941\3\2\2\2\u0943")
        buf.write("\u0942\3\2\2\2\u0944\u0946\3\2\2\2\u0945\u0947\7g\2\2")
        buf.write("\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0949\3")
        buf.write("\2\2\2\u0948\u0940\3\2\2\2\u0949\u094c\3\2\2\2\u094a\u0948")
        buf.write("\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094e\3\2\2\2\u094c")
        buf.write("\u094a\3\2\2\2\u094d\u094f\7^\2\2\u094e\u094d\3\2\2\2")
        buf.write("\u094e\u094f\3\2\2\2\u094f\u0951\3\2\2\2\u0950\u093b\3")
        buf.write("\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953")
        buf.write("\7=\2\2\u0953e\3\2\2\2\u0954\u0956\5h\65\2\u0955\u0957")
        buf.write("\5f\64\2\u0956\u0955\3\2\2\2\u0956\u0957\3\2\2\2\u0957")
        buf.write("\u095e\3\2\2\2\u0958\u0959\7&\2\2\u0959\u095b\7b\2\2\u095a")
        buf.write("\u095c\5f\64\2\u095b\u095a\3\2\2\2\u095b\u095c\3\2\2\2")
        buf.write("\u095c\u095e\3\2\2\2\u095d\u0954\3\2\2\2\u095d\u0958\3")
        buf.write("\2\2\2\u095eg\3\2\2\2\u095f\u0961\5J&\2\u0960\u095f\3")
        buf.write("\2\2\2\u0961\u0964\3\2\2\2\u0962\u0960\3\2\2\2\u0962\u0963")
        buf.write("\3\2\2\2\u0963\u0970\3\2\2\2\u0964\u0962\3\2\2\2\u0965")
        buf.write("\u0967\5B\"\2\u0966\u0965\3\2\2\2\u0967\u0968\3\2\2\2")
        buf.write("\u0968\u0966\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096d\3")
        buf.write("\2\2\2\u096a\u096c\5J&\2\u096b\u096a\3\2\2\2\u096c\u096f")
        buf.write("\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e")
        buf.write("\u0971\3\2\2\2\u096f\u096d\3\2\2\2\u0970\u0966\3\2\2\2")
        buf.write("\u0970\u0971\3\2\2\2\u0971\u0982\3\2\2\2\u0972\u0973\5")
        buf.write("j\66\2\u0973\u0974\7^\2\2\u0974\u0975\5j\66\2\u0975\u0977")
        buf.write("\3\2\2\2\u0976\u0972\3\2\2\2\u0976\u0977\3\2\2\2\u0977")
        buf.write("\u0978\3\2\2\2\u0978\u0983\7d\2\2\u0979\u097d\5N(\2\u097a")
        buf.write("\u097c\t\17\2\2\u097b\u097a\3\2\2\2\u097c\u097f\3\2\2")
        buf.write("\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0980")
        buf.write("\3\2\2\2\u097f\u097d\3\2\2\2\u0980\u0981\5`\61\2\u0981")
        buf.write("\u0983\3\2\2\2\u0982\u0976\3\2\2\2\u0982\u0979\3\2\2\2")
        buf.write("\u0983\u09be\3\2\2\2\u0984\u0985\7+\2\2\u0985\u0986\7")
        buf.write("8\2\2\u0986\u0987\5,\27\2\u0987\u0988\7^\2\2\u0988\u0989")
        buf.write("\7p\2\2\u0989\u098a\79\2\2\u098a\u098b\7d\2\2\u098b\u09be")
        buf.write("\3\2\2\2\u098c\u098d\7.\2\2\u098d\u098e\7I\2\2\u098e\u0993")
        buf.write("\5t;\2\u098f\u0990\7^\2\2\u0990\u0992\5t;\2\u0991\u098f")
        buf.write("\3\2\2\2\u0992\u0995\3\2\2\2\u0993\u0991\3\2\2\2\u0993")
        buf.write("\u0994\3\2\2\2\u0994\u0996\3\2\2\2\u0995\u0993\3\2\2\2")
        buf.write("\u0996\u0997\7J\2\2\u0997\u0998\5<\37\2\u0998\u09be\3")
        buf.write("\2\2\2\u0999\u09b8\7\65\2\2\u099a\u099c\7\63\2\2\u099b")
        buf.write("\u099a\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099d\3\2\2\2")
        buf.write("\u099d\u09a0\5\6\4\2\u099e\u09a0\7c\2\2\u099f\u099b\3")
        buf.write("\2\2\2\u099f\u099e\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09b9")
        buf.write("\5\4\3\2\u09a2\u09a6\7h\2\2\u09a3\u09a5\5J&\2\u09a4\u09a3")
        buf.write("\3\2\2\2\u09a5\u09a8\3\2\2\2\u09a6\u09a4\3\2\2\2\u09a6")
        buf.write("\u09a7\3\2\2\2\u09a7\u09a9\3\2\2\2\u09a8\u09a6\3\2\2\2")
        buf.write("\u09a9\u09ab\7H\2\2\u09aa\u09ac\5D#\2\u09ab\u09aa\3\2")
        buf.write("\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ad\u09ae")
        buf.write("\3\2\2\2\u09ae\u09b2\3\2\2\2\u09af\u09b1\5J&\2\u09b0\u09af")
        buf.write("\3\2\2\2\u09b1\u09b4\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b2")
        buf.write("\u09b3\3\2\2\2\u09b3\u09b6\3\2\2\2\u09b4\u09b2\3\2\2\2")
        buf.write("\u09b5\u09b7\5T+\2\u09b6\u09b5\3\2\2\2\u09b6\u09b7\3\2")
        buf.write("\2\2\u09b7\u09b9\3\2\2\2\u09b8\u099f\3\2\2\2\u09b8\u09a2")
        buf.write("\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb\7d\2\2\u09bb")
        buf.write("\u09be\3\2\2\2\u09bc\u09be\7d\2\2\u09bd\u0962\3\2\2\2")
        buf.write("\u09bd\u0984\3\2\2\2\u09bd\u098c\3\2\2\2\u09bd\u0999\3")
        buf.write("\2\2\2\u09bd\u09bc\3\2\2\2\u09bei\3\2\2\2\u09bf\u09d1")
        buf.write("\5N(\2\u09c0\u09c2\t\17\2\2\u09c1\u09c0\3\2\2\2\u09c2")
        buf.write("\u09c5\3\2\2\2\u09c3\u09c1\3\2\2\2\u09c3\u09c4\3\2\2\2")
        buf.write("\u09c4\u09c7\3\2\2\2\u09c5\u09c3\3\2\2\2\u09c6\u09c8\5")
        buf.write("l\67\2\u09c7\u09c6\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09d2")
        buf.write("\3\2\2\2\u09c9\u09ca\7H\2\2\u09ca\u09d0\5.\30\2\u09cb")
        buf.write("\u09cd\7H\2\2\u09cc\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2")
        buf.write("\u09cd\u09ce\3\2\2\2\u09ce\u09d0\5d\63\2\u09cf\u09c9\3")
        buf.write("\2\2\2\u09cf\u09cc\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d2")
        buf.write("\3\2\2\2\u09d1\u09c3\3\2\2\2\u09d1\u09cf\3\2\2\2\u09d2")
        buf.write("\u09df\3\2\2\2\u09d3\u09d5\7h\2\2\u09d4\u09d3\3\2\2\2")
        buf.write("\u09d4\u09d5\3\2\2\2\u09d5\u09d9\3\2\2\2\u09d6\u09d8\5")
        buf.write("J&\2\u09d7\u09d6\3\2\2\2\u09d8\u09db\3\2\2\2\u09d9\u09d7")
        buf.write("\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09dc\3\2\2\2\u09db")
        buf.write("\u09d9\3\2\2\2\u09dc\u09dd\7b\2\2\u09dd\u09df\5,\27\2")
        buf.write("\u09de\u09bf\3\2\2\2\u09de\u09d4\3\2\2\2\u09dfk\3\2\2")
        buf.write("\2\u09e0\u09e1\7H\2\2\u09e1\u09e2\7k\2\2\u09e2\u09e3\b")
        buf.write("\67\1\2\u09e3m\3\2\2\2\u09e4\u09e6\5J&\2\u09e5\u09e4\3")
        buf.write("\2\2\2\u09e6\u09e9\3\2\2\2\u09e7\u09e5\3\2\2\2\u09e7\u09e8")
        buf.write("\3\2\2\2\u09e8\u09f2\3\2\2\2\u09e9\u09e7\3\2\2\2\u09ea")
        buf.write("\u09ec\7\66\2\2\u09eb\u09ed\7&\2\2\u09ec\u09eb\3\2\2\2")
        buf.write("\u09ec\u09ed\3\2\2\2\u09ed\u09f3\3\2\2\2\u09ee\u09f0\7")
        buf.write("&\2\2\u09ef\u09f1\7\66\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1")
        buf.write("\3\2\2\2\u09f1\u09f3\3\2\2\2\u09f2\u09ea\3\2\2\2\u09f2")
        buf.write("\u09ee\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2")
        buf.write("\u09f4\u09f5\5p9\2\u09f5o\3\2\2\2\u09f6\u09f8\5\6\4\2")
        buf.write("\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9\3")
        buf.write("\2\2\2\u09f9\u0a0c\7h\2\2\u09fa\u0a09\7I\2\2\u09fb\u09fd")
        buf.write("\5x=\2\u09fc\u09fe\7g\2\2\u09fd\u09fc\3\2\2\2\u09fd\u09fe")
        buf.write("\3\2\2\2\u09fe\u0a06\3\2\2\2\u09ff\u0a00\7^\2\2\u0a00")
        buf.write("\u0a02\5x=\2\u0a01\u0a03\7g\2\2\u0a02\u0a01\3\2\2\2\u0a02")
        buf.write("\u0a03\3\2\2\2\u0a03\u0a05\3\2\2\2\u0a04\u09ff\3\2\2\2")
        buf.write("\u0a05\u0a08\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a07\3")
        buf.write("\2\2\2\u0a07\u0a0a\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a09\u09fb")
        buf.write("\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b")
        buf.write("\u0a0d\7J\2\2\u0a0c\u09fa\3\2\2\2\u0a0c\u0a0d\3\2\2\2")
        buf.write("\u0a0d\u0a1d\3\2\2\2\u0a0e\u0a0f\7\20\2\2\u0a0f\u0a19")
        buf.write("\78\2\2\u0a10\u0a15\5.\30\2\u0a11\u0a12\7^\2\2\u0a12\u0a14")
        buf.write("\5.\30\2\u0a13\u0a11\3\2\2\2\u0a14\u0a17\3\2\2\2\u0a15")
        buf.write("\u0a13\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a1a\3\2\2\2")
        buf.write("\u0a17\u0a15\3\2\2\2\u0a18\u0a1a\7\b\2\2\u0a19\u0a10\3")
        buf.write("\2\2\2\u0a19\u0a18\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a1d")
        buf.write("\79\2\2\u0a1c\u09f7\3\2\2\2\u0a1c\u0a0e\3\2\2\2\u0a1d")
        buf.write("q\3\2\2\2\u0a1e\u0a21\5p9\2\u0a1f\u0a21\7h\2\2\u0a20\u0a1e")
        buf.write("\3\2\2\2\u0a20\u0a1f\3\2\2\2\u0a21\u0a3b\3\2\2\2\u0a22")
        buf.write("\u0a37\78\2\2\u0a23\u0a26\5.\30\2\u0a24\u0a26\5d\63\2")
        buf.write("\u0a25\u0a23\3\2\2\2\u0a25\u0a24\3\2\2\2\u0a26\u0a28\3")
        buf.write("\2\2\2\u0a27\u0a29\7g\2\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29")
        buf.write("\3\2\2\2\u0a29\u0a34\3\2\2\2\u0a2a\u0a2d\7^\2\2\u0a2b")
        buf.write("\u0a2e\5.\30\2\u0a2c\u0a2e\5d\63\2\u0a2d\u0a2b\3\2\2\2")
        buf.write("\u0a2d\u0a2c\3\2\2\2\u0a2e\u0a30\3\2\2\2\u0a2f\u0a31\7")
        buf.write("g\2\2\u0a30\u0a2f\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33")
        buf.write("\3\2\2\2\u0a32\u0a2a\3\2\2\2\u0a33\u0a36\3\2\2\2\u0a34")
        buf.write("\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a38\3\2\2\2")
        buf.write("\u0a36\u0a34\3\2\2\2\u0a37\u0a25\3\2\2\2\u0a37\u0a38\3")
        buf.write("\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3c\79\2\2\u0a3a\u0a3c")
        buf.write("\5d\63\2\u0a3b\u0a22\3\2\2\2\u0a3b\u0a3a\3\2\2\2\u0a3c")
        buf.write("s\3\2\2\2\u0a3d\u0a40\5v<\2\u0a3e\u0a40\5^\60\2\u0a3f")
        buf.write("\u0a3d\3\2\2\2\u0a3f\u0a3e\3\2\2\2\u0a40u\3\2\2\2\u0a41")
        buf.write("\u0a5a\t\26\2\2\u0a42\u0a44\7g\2\2\u0a43\u0a42\3\2\2\2")
        buf.write("\u0a43\u0a44\3\2\2\2\u0a44\u0a46\3\2\2\2\u0a45\u0a47\7")
        buf.write("h\2\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a5b")
        buf.write("\3\2\2\2\u0a48\u0a4a\7h\2\2\u0a49\u0a48\3\2\2\2\u0a49")
        buf.write("\u0a4a\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4d\7H\2\2")
        buf.write("\u0a4c\u0a4e\5D#\2\u0a4d\u0a4c\3\2\2\2\u0a4e\u0a4f\3\2")
        buf.write("\2\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a54")
        buf.write("\3\2\2\2\u0a51\u0a53\5J&\2\u0a52\u0a51\3\2\2\2\u0a53\u0a56")
        buf.write("\3\2\2\2\u0a54\u0a52\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55")
        buf.write("\u0a58\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a57\u0a59\5T+\2\u0a58")
        buf.write("\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5b\3\2\2\2")
        buf.write("\u0a5a\u0a43\3\2\2\2\u0a5a\u0a49\3\2\2\2\u0a5b\u0a7c\3")
        buf.write("\2\2\2\u0a5c\u0a5d\7.\2\2\u0a5d\u0a5e\7I\2\2\u0a5e\u0a63")
        buf.write("\5t;\2\u0a5f\u0a60\7^\2\2\u0a60\u0a62\5t;\2\u0a61\u0a5f")
        buf.write("\3\2\2\2\u0a62\u0a65\3\2\2\2\u0a63\u0a61\3\2\2\2\u0a63")
        buf.write("\u0a64\3\2\2\2\u0a64\u0a66\3\2\2\2\u0a65\u0a63\3\2\2\2")
        buf.write("\u0a66\u0a67\7J\2\2\u0a67\u0a79\7\f\2\2\u0a68\u0a6a\7")
        buf.write("g\2\2\u0a69\u0a68\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c")
        buf.write("\3\2\2\2\u0a6b\u0a6d\7h\2\2\u0a6c\u0a6b\3\2\2\2\u0a6c")
        buf.write("\u0a6d\3\2\2\2\u0a6d\u0a7a\3\2\2\2\u0a6e\u0a70\7h\2\2")
        buf.write("\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a71\3")
        buf.write("\2\2\2\u0a71\u0a76\7H\2\2\u0a72\u0a74\5\6\4\2\u0a73\u0a75")
        buf.write("\7.\2\2\u0a74\u0a73\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75")
        buf.write("\u0a77\3\2\2\2\u0a76\u0a72\3\2\2\2\u0a76\u0a77\3\2\2\2")
        buf.write("\u0a77\u0a78\3\2\2\2\u0a78\u0a7a\5\4\3\2\u0a79\u0a69\3")
        buf.write("\2\2\2\u0a79\u0a6f\3\2\2\2\u0a7a\u0a7c\3\2\2\2\u0a7b\u0a41")
        buf.write("\3\2\2\2\u0a7b\u0a5c\3\2\2\2\u0a7cw\3\2\2\2\u0a7d\u0a7f")
        buf.write("\5D#\2\u0a7e\u0a7d\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a7e")
        buf.write("\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81\u0a85\3\2\2\2\u0a82")
        buf.write("\u0a84\5J&\2\u0a83\u0a82\3\2\2\2\u0a84\u0a87\3\2\2\2\u0a85")
        buf.write("\u0a83\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a89\3\2\2\2")
        buf.write("\u0a87\u0a85\3\2\2\2\u0a88\u0a8a\5T+\2\u0a89\u0a88\3\2")
        buf.write("\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a94\3\2\2\2\u0a8b\u0a94")
        buf.write("\5,\27\2\u0a8c\u0a8e\5\6\4\2\u0a8d\u0a8f\7.\2\2\u0a8e")
        buf.write("\u0a8d\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a91\3\2\2\2")
        buf.write("\u0a90\u0a8c\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\3")
        buf.write("\2\2\2\u0a92\u0a94\5\4\3\2\u0a93\u0a7e\3\2\2\2\u0a93\u0a8b")
        buf.write("\3\2\2\2\u0a93\u0a90\3\2\2\2\u0a94y\3\2\2\2\u0a95\u0a96")
        buf.write("\7\61\2\2\u0a96\u0a9a\7<\2\2\u0a97\u0a99\5\62\32\2\u0a98")
        buf.write("\u0a97\3\2\2\2\u0a99\u0a9c\3\2\2\2\u0a9a\u0a98\3\2\2\2")
        buf.write("\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9d\3\2\2\2\u0a9c\u0a9a\3")
        buf.write("\2\2\2\u0a9d\u0a9f\7=\2\2\u0a9e\u0aa0\5|?\2\u0a9f\u0a9e")
        buf.write("\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0a9f\3\2\2\2\u0aa1")
        buf.write("\u0aa2\3\2\2\2\u0aa2{\3\2\2\2\u0aa3\u0aa4\7\13\2\2\u0aa4")
        buf.write("\u0abd\78\2\2\u0aa5\u0aa7\5J&\2\u0aa6\u0aa5\3\2\2\2\u0aa7")
        buf.write("\u0aaa\3\2\2\2\u0aa8\u0aa6\3\2\2\2\u0aa8\u0aa9\3\2\2\2")
        buf.write("\u0aa9\u0aac\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aab\u0aad\5")
        buf.write("D#\2\u0aac\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0aac")
        buf.write("\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab3\3\2\2\2\u0ab0")
        buf.write("\u0ab2\5J&\2\u0ab1\u0ab0\3\2\2\2\u0ab2\u0ab5\3\2\2\2\u0ab3")
        buf.write("\u0ab1\3\2\2\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0aba\3\2\2\2")
        buf.write("\u0ab5\u0ab3\3\2\2\2\u0ab6\u0abb\5N(\2\u0ab7\u0ab9\5T")
        buf.write("+\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0abb")
        buf.write("\3\2\2\2\u0aba\u0ab6\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0abb")
        buf.write("\u0abe\3\2\2\2\u0abc\u0abe\7g\2\2\u0abd\u0aa8\3\2\2\2")
        buf.write("\u0abd\u0abc\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac0\7")
        buf.write("9\2\2\u0ac0\u0ac4\7<\2\2\u0ac1\u0ac3\5\62\32\2\u0ac2\u0ac1")
        buf.write("\3\2\2\2\u0ac3\u0ac6\3\2\2\2\u0ac4\u0ac2\3\2\2\2\u0ac4")
        buf.write("\u0ac5\3\2\2\2\u0ac5\u0ac7\3\2\2\2\u0ac6\u0ac4\3\2\2\2")
        buf.write("\u0ac7\u0ac8\7=\2\2\u0ac8}\3\2\2\2\u0ac9\u0aca\7\60\2")
        buf.write("\2\u0aca\u0af3\78\2\2\u0acb\u0acd\5D#\2\u0acc\u0acb\3")
        buf.write("\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0acc\3\2\2\2\u0ace\u0acf")
        buf.write("\3\2\2\2\u0acf\u0ad3\3\2\2\2\u0ad0\u0ad2\5J&\2\u0ad1\u0ad0")
        buf.write("\3\2\2\2\u0ad2\u0ad5\3\2\2\2\u0ad3\u0ad1\3\2\2\2\u0ad3")
        buf.write("\u0ad4\3\2\2\2\u0ad4\u0ad7\3\2\2\2\u0ad5\u0ad3\3\2\2\2")
        buf.write("\u0ad6\u0ad8\5T+\2\u0ad7\u0ad6\3\2\2\2\u0ad7\u0ad8\3\2")
        buf.write("\2\2\u0ad8\u0ada\3\2\2\2\u0ad9\u0adb\7g\2\2\u0ada\u0ad9")
        buf.write("\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0af0\3\2\2\2\u0adc")
        buf.write("\u0ade\7^\2\2\u0add\u0adf\5D#\2\u0ade\u0add\3\2\2\2\u0adf")
        buf.write("\u0ae0\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae0\u0ae1\3\2\2\2")
        buf.write("\u0ae1\u0ae5\3\2\2\2\u0ae2\u0ae4\5J&\2\u0ae3\u0ae2\3\2")
        buf.write("\2\2\u0ae4\u0ae7\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6")
        buf.write("\3\2\2\2\u0ae6\u0ae9\3\2\2\2\u0ae7\u0ae5\3\2\2\2\u0ae8")
        buf.write("\u0aea\5T+\2\u0ae9\u0ae8\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea")
        buf.write("\u0aec\3\2\2\2\u0aeb\u0aed\7g\2\2\u0aec\u0aeb\3\2\2\2")
        buf.write("\u0aec\u0aed\3\2\2\2\u0aed\u0aef\3\2\2\2\u0aee\u0adc\3")
        buf.write("\2\2\2\u0aef\u0af2\3\2\2\2\u0af0\u0aee\3\2\2\2\u0af0\u0af1")
        buf.write("\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2\u0af0\3\2\2\2\u0af3")
        buf.write("\u0acc\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\3\2\2\2")
        buf.write("\u0af5\u0afe\79\2\2\u0af6\u0afb\7\"\2\2\u0af7\u0af8\7")
        buf.write("8\2\2\u0af8\u0af9\5,\27\2\u0af9\u0afa\79\2\2\u0afa\u0afc")
        buf.write("\3\2\2\2\u0afb\u0af7\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc")
        buf.write("\u0afe\3\2\2\2\u0afd\u0ac9\3\2\2\2\u0afd\u0af6\3\2\2\2")
        buf.write("\u0afe\177\3\2\2\2\u0aff\u0b10\t\27\2\2\u0b00\u0b01\7")
        buf.write("!\2\2\u0b01\u0b02\7:\2\2\u0b02\u0b10\7;\2\2\u0b03\u0b04")
        buf.write("\7\22\2\2\u0b04\u0b05\7:\2\2\u0b05\u0b10\7;\2\2\u0b06")
        buf.write("\u0b07\7J\2\2\u0b07\u0b09\7J\2\2\u0b08\u0b0a\7H\2\2\u0b09")
        buf.write("\u0b08\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b10\3\2\2\2")
        buf.write("\u0b0b\u0b0c\78\2\2\u0b0c\u0b10\79\2\2\u0b0d\u0b0e\7:")
        buf.write("\2\2\u0b0e\u0b10\7;\2\2\u0b0f\u0aff\3\2\2\2\u0b0f\u0b00")
        buf.write("\3\2\2\2\u0b0f\u0b03\3\2\2\2\u0b0f\u0b06\3\2\2\2\u0b0f")
        buf.write("\u0b0b\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10\u0081\3\2\2\2")
        buf.write("\u022a\u0085\u008e\u0093\u0097\u009d\u00a3\u00aa\u00ad")
        buf.write("\u00af\u00b7\u00bc\u00c0\u00c3\u00c6\u00cf\u00d3\u00d6")
        buf.write("\u00de\u00e0\u00e5\u00ea\u00ee\u00f1\u00f4\u00f6\u00fc")
        buf.write("\u0101\u0105\u0108\u010b\u0114\u0118\u011b\u0120\u0126")
        buf.write("\u012b\u012f\u0132\u0135\u0139\u0144\u0148\u014a\u014d")
        buf.write("\u0151\u0154\u0159\u0160\u0165\u0169\u016b\u016f\u0173")
        buf.write("\u0175\u0179\u0181\u0185\u018c\u018f\u0194\u0197\u019b")
        buf.write("\u019e\u01a1\u01a3\u01a9\u01ab\u01b3\u01b6\u01ba\u01bd")
        buf.write("\u01c0\u01c4\u01c8\u01cb\u01ce\u01d2\u01d5\u01d9\u01df")
        buf.write("\u01e8\u01ee\u01f3\u01f7\u01fa\u01fd\u01ff\u0204\u0207")
        buf.write("\u020c\u020f\u0213\u0216\u021a\u0221\u0226\u022a\u022e")
        buf.write("\u0236\u0242\u0248\u024d\u0251\u0253\u0257\u025c\u025f")
        buf.write("\u0268\u026b\u0270\u0276\u027b\u027f\u0282\u0285\u0288")
        buf.write("\u0290\u0295\u0299\u029c\u02a1\u02a8\u02ad\u02b1\u02b4")
        buf.write("\u02b7\u02c1\u02c5\u02c8\u02d2\u02d7\u02db\u02e1\u02e4")
        buf.write("\u02f1\u02f6\u02fa\u0305\u030c\u0313\u0318\u031c\u0322")
        buf.write("\u0327\u0331\u0337\u033b\u0341\u0344\u0349\u034c\u0350")
        buf.write("\u0355\u035a\u035f\u0363\u0369\u036e\u0372\u0376\u037b")
        buf.write("\u037e\u0383\u0386\u038a\u038d\u0391\u0394\u039a\u03a0")
        buf.write("\u03a7\u03aa\u03ad\u03b0\u03b8\u03bf\u03c8\u03cd\u03d1")
        buf.write("\u03d6\u03dc\u03e1\u03e5\u03eb\u03f4\u03f9\u03fd\u0403")
        buf.write("\u0411\u0417\u041c\u0420\u0426\u042c\u0437\u0442\u044c")
        buf.write("\u045b\u0460\u0466\u0468\u0471\u0477\u047c\u0486\u048f")
        buf.write("\u0492\u0499\u04a3\u04ae\u04bb\u04be\u04c2\u04c5\u04cd")
        buf.write("\u04d0\u04d5\u04db\u04e0\u04ea\u04ee\u04f0\u04fb\u04fe")
        buf.write("\u0501\u0503\u0508\u050b\u0510\u051d\u0523\u0529\u052e")
        buf.write("\u0535\u0538\u053a\u0544\u054a\u054f\u0552\u0558\u055e")
        buf.write("\u0567\u056a\u056d\u0571\u0577\u057b\u057d\u0583\u0587")
        buf.write("\u0591\u0599\u059c\u05a1\u05a5\u05ac\u05b3\u05b8\u05bc")
        buf.write("\u05be\u05c9\u05ce\u05d6\u05db\u05de\u05e0\u05e3\u05e8")
        buf.write("\u05ed\u05f0\u05f4\u05f9\u05fd\u0600\u0606\u060b\u0610")
        buf.write("\u0613\u0617\u061c\u0620\u0625\u0629\u0630\u0634\u063a")
        buf.write("\u063f\u0643\u0646\u0649\u064c\u064e\u0653\u0658\u065c")
        buf.write("\u065f\u0663\u0668\u066d\u0671\u0676\u067c\u0681\u0684")
        buf.write("\u068a\u0690\u0694\u0698\u069a\u069d\u06a4\u06a8\u06ad")
        buf.write("\u06af\u06b5\u06ba\u06be\u06c1\u06c4\u06c8\u06cf\u06d5")
        buf.write("\u06da\u06de\u06e1\u06e4\u06e7\u06ea\u06f0\u06f5\u06f9")
        buf.write("\u06fc\u06ff\u0707\u070c\u0710\u0713\u071f\u0723\u0726")
        buf.write("\u072d\u0733\u0737\u073a\u073c\u0742\u0748\u074c\u074f")
        buf.write("\u0751\u0755\u075f\u0764\u0768\u076b\u076e\u0772\u0778")
        buf.write("\u0780\u0788\u078c\u0790\u0794\u0796\u079c\u07a3\u07a8")
        buf.write("\u07ae\u07b1\u07b3\u07bb\u07c0\u07c4\u07c6\u07c9\u07cd")
        buf.write("\u07cf\u07d5\u07dc\u07e1\u07e7\u07ea\u07ec\u07f0\u07f6")
        buf.write("\u07fc\u0803\u0806\u0809\u0811\u0815\u0817\u081a\u0820")
        buf.write("\u0824\u0827\u082c\u0831\u0838\u083d\u0841\u0844\u0848")
        buf.write("\u084e\u0854\u085b\u085e\u0861\u0863\u0869\u086f\u0876")
        buf.write("\u087c\u0882\u0885\u0889\u088e\u0894\u089a\u08a1\u08a4")
        buf.write("\u08a7\u08b0\u08b6\u08b9\u08bd\u08c3\u08c9\u08ce\u08d3")
        buf.write("\u08d8\u08da\u08df\u08e4\u08e8\u08eb\u08f1\u08f9\u08fe")
        buf.write("\u0902\u0905\u090b\u0912\u0917\u091c\u0922\u0925\u092a")
        buf.write("\u092d\u0931\u0936\u093b\u093e\u0943\u0946\u094a\u094e")
        buf.write("\u0950\u0956\u095b\u095d\u0962\u0968\u096d\u0970\u0976")
        buf.write("\u097d\u0982\u0993\u099b\u099f\u09a6\u09ad\u09b2\u09b6")
        buf.write("\u09b8\u09bd\u09c3\u09c7\u09cc\u09cf\u09d1\u09d4\u09d9")
        buf.write("\u09de\u09e7\u09ec\u09f0\u09f2\u09f7\u09fd\u0a02\u0a06")
        buf.write("\u0a09\u0a0c\u0a15\u0a19\u0a1c\u0a20\u0a25\u0a28\u0a2d")
        buf.write("\u0a30\u0a34\u0a37\u0a3b\u0a3f\u0a43\u0a46\u0a49\u0a4f")
        buf.write("\u0a54\u0a58\u0a5a\u0a63\u0a69\u0a6c\u0a6f\u0a74\u0a76")
        buf.write("\u0a79\u0a7b\u0a80\u0a85\u0a89\u0a8e\u0a90\u0a93\u0a9a")
        buf.write("\u0aa1\u0aa8\u0aae\u0ab3\u0ab8\u0aba\u0abd\u0ac4\u0ace")
        buf.write("\u0ad3\u0ad7\u0ada\u0ae0\u0ae5\u0ae9\u0aec\u0af0\u0af3")
        buf.write("\u0afb\u0afd\u0b09\u0b0f")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'break'", "'case'",
                    "'catch'", "'class'", "<INVALID>", "<INVALID>", "'continue'",
                    "'decltype'", "'default'", "'delete'", "'do'", "'else'",
                    "'enum'", "'export'", "'extern'", "<INVALID>", "'final'",
                    "'for'", "'goto'", "'if'", "'inline'", "<INVALID>",
                    "'mutable'", "'namespace'", "'new'", "'noexcept'",
                    "'nullptr'", "'operator'", "'override'", "<INVALID>",
                    "<INVALID>", "'return'", "<INVALID>", "'sizeof'", "'static_assert'",
                    "'struct'", "'switch'", "'template'", "'this'", "'throw'",
                    "'try'", "'typeid'", "'typename'", "'union'", "'using'",
                    "'virtual'", "'while'", "'('", "')'", "'['", "']'",
                    "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
                    "'&'", "'|'", "'~'", "'!'", "'='", "'<'", "'>'", "'+='",
                    "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='",
                    "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'",
                    "'||'", "'++'", "'--'", "'?:'", "','", "'->*'", "'->'",
                    "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Break", "Case", "Catch",
                     "Class", "ConstOrVolatile", "Cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Else", "Enum", "Export",
                     "Extern", "TrueFalse", "Final", "For", "Goto", "If",
                     "Inline", "Types", "Mutable", "Namespace", "New",
                     "Noexcept", "Nullptr", "Operator", "Override", "PrivateProtectedPublic",
                     "Specifier", "Return", "SignedUnsigned", "Sizeof",
                     "Static_assert", "Struct", "Switch", "Template", "This",
                     "Throw", "Try", "Typeid", "Typename", "Union", "Using",
                     "Virtual", "While", "LeftParen", "RightParen", "LeftBracket",
                     "RightBracket", "LeftBrace", "RightBrace", "Plus",
                     "Minus", "Star", "Div", "Mod", "Caret", "And", "Or",
                     "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign",
                     "MinusAssign", "StarAssign", "DivAssign", "ModAssign",
                     "XorAssign", "AndAssign", "OrAssign", "LeftShift",
                     "LeftShiftAssign", "Equal", "NotEqual", "LessEqual",
                     "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus",
                     "UnaryCondition", "Comma", "ArrowStar", "Arrow", "Question",
                     "Colon", "Doublecolon", "Semi", "Dot", "DotStar",
                     "Ellipsis", "Identifier", "Numberliteral", "Decimalliteral",
                     "Octalliteral", "Hexadecimalliteral", "Binaryliteral",
                     "Integersuffix", "Characterliteral", "Stringliteral",
                     "Userdefinedliteral", "Userdefinedstringliteral",
                     "Whitespace", "Newline", "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_unqualifiedid = 1
    RULE_nestednamespecifier = 2
    RULE_lambdadeclarator = 3
    RULE_postoperation = 4
    RULE_postfixexpression = 5
    RULE_call = 6
    RULE_pseudodestructorname = 7
    RULE_unaryexpression = 8
    RULE_unaryincdecexpression = 9
    RULE_postfixunaryincdecexpression = 10
    RULE_newexpression = 11
    RULE_newdeclarator = 12
    RULE_noptrnewdeclarator = 13
    RULE_deleteexpression = 14
    RULE_shiftexpression = 15
    RULE_relationalexpression = 16
    RULE_equalityexpression = 17
    RULE_ternaryconditionalexpression = 18
    RULE_unaryconditionalexpression = 19
    RULE_logicalorexpression = 20
    RULE_conditionalexpression = 21
    RULE_assignmentexpression = 22
    RULE_assignmentoperator = 23
    RULE_statement = 24
    RULE_casestatement = 25
    RULE_elsestatement = 26
    RULE_condition = 27
    RULE_gotostatement = 28
    RULE_declaration = 29
    RULE_blockdeclaration = 30
    RULE_simpledeclaration = 31
    RULE_declspecifier = 32
    RULE_typespecifier = 33
    RULE_trailingtypespecifier = 34
    RULE_simpletypespecifier = 35
    RULE_attributespecifier = 36
    RULE_balancedtoken = 37
    RULE_declarator = 38
    RULE_ptrdeclarator = 39
    RULE_parametersandqualifiers = 40
    RULE_abstractdeclarator = 41
    RULE_ptrabstractdeclarator = 42
    RULE_noptrabstractdeclarator = 43
    RULE_abstractpackdeclarator = 44
    RULE_noptrabstractpackdeclarator = 45
    RULE_parameterdeclaration = 46
    RULE_functionbody = 47
    RULE_initializer = 48
    RULE_bracedinitlist = 49
    RULE_memberspecification = 50
    RULE_memberdeclaration = 51
    RULE_memberdeclarator = 52
    RULE_purespecifier = 53
    RULE_basespecifier = 54
    RULE_classordecltype = 55
    RULE_meminitializer = 56
    RULE_templateparameter = 57
    RULE_typeparameter = 58
    RULE_templateargument = 59
    RULE_tryblock = 60
    RULE_handler = 61
    RULE_exceptionspecification = 62
    RULE_theoperator = 63

    ruleNames = ["translationunit", "unqualifiedid", "nestednamespecifier",
                 "lambdadeclarator", "postoperation", "postfixexpression",
                 "call", "pseudodestructorname", "unaryexpression", "unaryincdecexpression",
                 "postfixunaryincdecexpression", "newexpression", "newdeclarator",
                 "noptrnewdeclarator", "deleteexpression", "shiftexpression",
                 "relationalexpression", "equalityexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "logicalorexpression",
                 "conditionalexpression", "assignmentexpression", "assignmentoperator",
                 "statement", "casestatement", "elsestatement", "condition",
                 "gotostatement", "declaration", "blockdeclaration", "simpledeclaration",
                 "declspecifier", "typespecifier", "trailingtypespecifier",
                 "simpletypespecifier", "attributespecifier", "balancedtoken",
                 "declarator", "ptrdeclarator", "parametersandqualifiers",
                 "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator",
                 "abstractpackdeclarator", "noptrabstractpackdeclarator",
                 "parameterdeclaration", "functionbody", "initializer",
                 "bracedinitlist", "memberspecification", "memberdeclaration",
                 "memberdeclarator", "purespecifier", "basespecifier",
                 "classordecltype", "meminitializer", "templateparameter",
                 "typeparameter", "templateargument", "tryblock", "handler",
                 "exceptionspecification", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Break = 7
    Case = 8
    Catch = 9
    Class = 10
    ConstOrVolatile = 11
    Cast = 12
    Continue = 13
    Decltype = 14
    Default = 15
    Delete = 16
    Do = 17
    Else = 18
    Enum = 19
    Export = 20
    Extern = 21
    TrueFalse = 22
    Final = 23
    For = 24
    Goto = 25
    If = 26
    Inline = 27
    Types = 28
    Mutable = 29
    Namespace = 30
    New = 31
    Noexcept = 32
    Nullptr = 33
    Operator = 34
    Override = 35
    PrivateProtectedPublic = 36
    Specifier = 37
    Return = 38
    SignedUnsigned = 39
    Sizeof = 40
    Static_assert = 41
    Struct = 42
    Switch = 43
    Template = 44
    This = 45
    Throw = 46
    Try = 47
    Typeid = 48
    Typename = 49
    Union = 50
    Using = 51
    Virtual = 52
    While = 53
    LeftParen = 54
    RightParen = 55
    LeftBracket = 56
    RightBracket = 57
    LeftBrace = 58
    RightBrace = 59
    Plus = 60
    Minus = 61
    Star = 62
    Div = 63
    Mod = 64
    Caret = 65
    And = 66
    Or = 67
    Tilde = 68
    Not = 69
    Assign = 70
    Less = 71
    Greater = 72
    PlusAssign = 73
    MinusAssign = 74
    StarAssign = 75
    DivAssign = 76
    ModAssign = 77
    XorAssign = 78
    AndAssign = 79
    OrAssign = 80
    LeftShift = 81
    LeftShiftAssign = 82
    Equal = 83
    NotEqual = 84
    LessEqual = 85
    GreaterEqual = 86
    AndAnd = 87
    OrOr = 88
    PlusPlus = 89
    MinusMinus = 90
    UnaryCondition = 91
    Comma = 92
    ArrowStar = 93
    Arrow = 94
    Question = 95
    Colon = 96
    Doublecolon = 97
    Semi = 98
    Dot = 99
    DotStar = 100
    Ellipsis = 101
    Identifier = 102
    Numberliteral = 103
    Decimalliteral = 104
    Octalliteral = 105
    Hexadecimalliteral = 106
    Binaryliteral = 107
    Integersuffix = 108
    Characterliteral = 109
    Stringliteral = 110
    Userdefinedliteral = 111
    Userdefinedstringliteral = 112
    Whitespace = 113
    Newline = 114
    BlockComment = 115
    LineComment = 116

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                1 << (CPP14Parser.Identifier - 66)))) != 0):
                self.state = 128
                self.declaration()
                self.state = 133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 134
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 136
                self.match(CPP14Parser.Operator)
                self.state = 138
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 137
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 140
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)

                self.state = 145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 142
                        self.attributespecifier()
                    self.state = 147
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

                self.state = 173
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 171
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier]:
                            self.state = 149
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                                self.state = 148
                                self.nestednamespecifier()

                            self.state = 151
                            self.match(CPP14Parser.Star)
                            self.state = 155
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 152
                                    self.attributespecifier()
                                self.state = 157
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

                            self.state = 161
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 158
                                    self.match(CPP14Parser.ConstOrVolatile)
                                self.state = 163
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

                            pass
                        elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                            self.state = 164
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 168
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 165
                                    self.attributespecifier()
                                self.state = 170
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 175
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 176
                self.match(CPP14Parser.Tilde)
                self.state = 212
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Identifier:
                    self.state = 177
                    self.match(CPP14Parser.Identifier)
                    self.state = 196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
                    if la_ == 1:
                        self.state = 178
                        self.match(CPP14Parser.Less)
                        self.state = 193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 179
                            self.templateargument()
                            self.state = 181
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 180
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 190
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 183
                                self.match(CPP14Parser.Comma)
                                self.state = 184
                                self.templateargument()
                                self.state = 186
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 185
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 192
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 195
                        self.match(CPP14Parser.Greater)

                    pass
                elif token == CPP14Parser.Decltype:
                    self.state = 198
                    self.match(CPP14Parser.Decltype)
                    self.state = 199
                    self.match(CPP14Parser.LeftParen)
                    self.state = 209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
                    if la_ == 1:
                        self.state = 200
                        self.assignmentexpression()
                        self.state = 205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 201
                            self.match(CPP14Parser.Comma)
                            self.state = 202
                            self.assignmentexpression()
                            self.state = 207
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 208
                        self.match(CPP14Parser.Auto)
                        pass

                    self.state = 211
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Identifier:
                    self.state = 214
                    self.match(CPP14Parser.Identifier)
                    pass
                elif token == CPP14Parser.Operator:
                    self.state = 215
                    self.match(CPP14Parser.Operator)
                    self.state = 220
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div,
                                 CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                 CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater,
                                 CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                                 CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign,
                                 CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShift,
                                 CPP14Parser.LeftShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual,
                                 CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                                 CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                        self.state = 216
                        self.theoperator()
                        pass
                    elif token == CPP14Parser.Stringliteral:
                        self.state = 217
                        self.match(CPP14Parser.Stringliteral)
                        self.state = 218
                        self.match(CPP14Parser.Identifier)
                        pass
                    elif token == CPP14Parser.Userdefinedstringliteral:
                        self.state = 219
                        self.match(CPP14Parser.Userdefinedstringliteral)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 224
                    self.match(CPP14Parser.Less)
                    self.state = 239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 225
                        self.templateargument()
                        self.state = 227
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 226
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 236
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 229
                            self.match(CPP14Parser.Comma)
                            self.state = 230
                            self.templateargument()
                            self.state = 232
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 231
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 238
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 241
                    self.match(CPP14Parser.Greater)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def nestednamespecifier(self):

        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nestednamespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Identifier:
                self.state = 246
                self.match(CPP14Parser.Identifier)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 247
                    self.match(CPP14Parser.Less)
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 248
                        self.templateargument()
                        self.state = 250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 249
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 259
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 252
                            self.match(CPP14Parser.Comma)
                            self.state = 253
                            self.templateargument()
                            self.state = 255
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 254
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 261
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 264
                    self.match(CPP14Parser.Greater)

                pass
            elif token == CPP14Parser.Decltype:
                self.state = 267
                self.match(CPP14Parser.Decltype)
                self.state = 268
                self.match(CPP14Parser.LeftParen)
                self.state = 278
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
                if la_ == 1:
                    self.state = 269
                    self.assignmentexpression()
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 270
                        self.match(CPP14Parser.Comma)
                        self.state = 271
                        self.assignmentexpression()
                        self.state = 276
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 277
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 280
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.Doublecolon:
                pass
            else:
                pass
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 283
                    self.match(CPP14Parser.Doublecolon)
                    self.state = 307
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                    if la_ == 1:
                        self.state = 284
                        self.match(CPP14Parser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 285
                            self.match(CPP14Parser.Template)

                        self.state = 288
                        self.match(CPP14Parser.Identifier)
                        self.state = 289
                        self.match(CPP14Parser.Less)
                        self.state = 304
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 290
                            self.templateargument()
                            self.state = 292
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 291
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 301
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 294
                                self.match(CPP14Parser.Comma)
                                self.state = 295
                                self.templateargument()
                                self.state = 297
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 296
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 303
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 306
                        self.match(CPP14Parser.Greater)
                        pass

                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)

            self.state = 314
            self.match(CPP14Parser.Doublecolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(CPP14Parser.LeftParen)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                self.state = 317
                self.parameterdeclaration()
                self.state = 322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 318
                        self.match(CPP14Parser.Comma)
                        self.state = 319
                        self.parameterdeclaration()
                    self.state = 324
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 325
                    self.match(CPP14Parser.Comma)

            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 330
                self.match(CPP14Parser.Ellipsis)

            self.state = 333
            self.match(CPP14Parser.RightParen)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 334
                self.match(CPP14Parser.Mutable)

            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Noexcept or _la == CPP14Parser.Throw:
                self.state = 337
                self.exceptionspecification()

            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 340
                self.attributespecifier()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 346
                self.match(CPP14Parser.Arrow)
                self.state = 348
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 347
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 350
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)

                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 352
                        self.attributespecifier()
                    self.state = 357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)

                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 358
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostoperationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postoperation

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def postoperation(self):

        localctx = CPP14Parser.PostoperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postoperation)
        self._la = 0  # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Arrow, CPP14Parser.Dot]:
                self.enterOuterAlt(localctx, 1)
                self.state = 363
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 375
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                if la_ == 1:
                    self.state = 365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 364
                        self.match(CPP14Parser.Template)

                    self.state = 371
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                    if la_ == 1:
                        self.state = 367
                        self.nestednamespecifier()
                        self.state = 369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 368
                            self.match(CPP14Parser.Template)

                    self.state = 373
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 374
                    self.pseudodestructorname()
                    pass

                pass
            elif token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.LeftBracket:
                    self.state = 377
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 387
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 378
                        self.assignmentexpression()
                        self.state = 383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 379
                            self.match(CPP14Parser.Comma)
                            self.state = 380
                            self.assignmentexpression()
                            self.state = 385
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 386
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 389
                    self.match(CPP14Parser.RightBracket)
                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 391
                    self.match(CPP14Parser.LeftParen)
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 394
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 392
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 393
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 396
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 399
                            self.match(CPP14Parser.Comma)
                            self.state = 402
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                         CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                         CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                         CPP14Parser.Userdefinedstringliteral]:
                                self.state = 400
                                self.assignmentexpression()
                                pass
                            elif token == CPP14Parser.LeftBrace:
                                self.state = 401
                                self.bracedinitlist()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 405
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 404
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 411
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 414
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def call(self):
            return self.getTypedRuleContext(CPP14Parser.CallContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def Numberliteral(self):
            return self.getToken(CPP14Parser.Numberliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def TrueFalse(self):
            return self.getToken(CPP14Parser.TrueFalse, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedliteral(self):
            return self.getToken(CPP14Parser.Userdefinedliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def This(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.This)
            else:
                return self.getToken(CPP14Parser.This, i)

        def postoperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostoperationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostoperationContext, i)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Cast(self):
            return self.getToken(CPP14Parser.Cast, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def postfixexpression(self):

        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixexpression)
        self._la = 0  # Token type
        try:
            self.state = 605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                if la_ == 1:
                    self.state = 420
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.This))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & (
                                    (1 << (CPP14Parser.Numberliteral - 103)) | (
                                    1 << (CPP14Parser.Characterliteral - 103)) | (
                                1 << (CPP14Parser.Stringliteral - 103)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 103)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 103)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                elif la_ == 2:
                    self.state = 425
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
                    if la_ == 1:
                        self.state = 421
                        self.nestednamespecifier()
                        self.state = 423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 422
                            self.match(CPP14Parser.Template)

                    self.state = 427
                    self.unqualifiedid()
                    pass

                elif la_ == 3:
                    self.state = 428
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 467
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
                    if la_ == 1:
                        self.state = 429
                        self.match(CPP14Parser.And)

                    elif la_ == 2:
                        self.state = 430
                        self.match(CPP14Parser.Assign)

                    elif la_ == 3:
                        self.state = 433
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
                        if la_ == 1:
                            self.state = 431
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 432
                            self.match(CPP14Parser.Comma)

                        self.state = 443
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 436
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 435
                                self.match(CPP14Parser.And)

                            self.state = 438
                            self.match(CPP14Parser.Identifier)
                            self.state = 440
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                    (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                                1 << (CPP14Parser.Assign - 54)))) != 0):
                                self.state = 439
                                self.initializer()

                            pass
                        elif token == CPP14Parser.This:
                            self.state = 442
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 445
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 448
                            self.match(CPP14Parser.Comma)
                            self.state = 457
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                                self.state = 450
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.And:
                                    self.state = 449
                                    self.match(CPP14Parser.And)

                                self.state = 452
                                self.match(CPP14Parser.Identifier)
                                self.state = 454
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                        (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                                    1 << (CPP14Parser.Assign - 54)))) != 0):
                                    self.state = 453
                                    self.initializer()

                                pass
                            elif token == CPP14Parser.This:
                                self.state = 456
                                self.match(CPP14Parser.This)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 460
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 459
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 466
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 469
                    self.match(CPP14Parser.RightBracket)
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 470
                        self.lambdadeclarator()

                    self.state = 473
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                        1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                        1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                        1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                        1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                        1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                        1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 474
                        self.statement()
                        self.state = 479
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 480
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 4:
                    self.state = 509
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                        self.state = 481
                        self.simpletypespecifier()
                        pass
                    elif token == CPP14Parser.Typename:
                        self.state = 482
                        self.match(CPP14Parser.Typename)
                        self.state = 483
                        self.nestednamespecifier()
                        self.state = 507
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
                        if la_ == 1:
                            self.state = 484
                            self.match(CPP14Parser.Identifier)
                            pass

                        elif la_ == 2:
                            self.state = 486
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 485
                                self.match(CPP14Parser.Template)

                            self.state = 488
                            self.match(CPP14Parser.Identifier)
                            self.state = 489
                            self.match(CPP14Parser.Less)
                            self.state = 504
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                            (1 << (CPP14Parser.And - 66)) | (
                                                                            1 << (CPP14Parser.Or - 66)) | (
                                                                        1 << (CPP14Parser.Tilde - 66)) | (
                                                                    1 << (CPP14Parser.Not - 66)) | (
                                                                1 << (CPP14Parser.PlusPlus - 66)) | (
                                                            1 << (CPP14Parser.MinusMinus - 66)) | (
                                                        1 << (CPP14Parser.Doublecolon - 66)) | (
                                                    1 << (CPP14Parser.Identifier - 66)) | (
                                                1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 490
                                self.templateargument()
                                self.state = 492
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 491
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 501
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 494
                                    self.match(CPP14Parser.Comma)
                                    self.state = 495
                                    self.templateargument()
                                    self.state = 497
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la == CPP14Parser.Ellipsis:
                                        self.state = 496
                                        self.match(CPP14Parser.Ellipsis)

                                    self.state = 503
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 506
                            self.match(CPP14Parser.Greater)
                            pass

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 536
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.LeftParen:
                        self.state = 511
                        self.match(CPP14Parser.LeftParen)
                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 514
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                         CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                         CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename,
                                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                         CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus,
                                         CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                         CPP14Parser.Userdefinedstringliteral]:
                                self.state = 512
                                self.assignmentexpression()
                                pass
                            elif token == CPP14Parser.LeftBrace:
                                self.state = 513
                                self.bracedinitlist()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 517
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 516
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 529
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 519
                                self.match(CPP14Parser.Comma)
                                self.state = 522
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast,
                                             CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.TrueFalse,
                                             CPP14Parser.Types, CPP14Parser.New, CPP14Parser.Noexcept,
                                             CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                                             CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                             CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus,
                                             CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                             CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                             CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                                    self.state = 520
                                    self.assignmentexpression()
                                    pass
                                elif token == CPP14Parser.LeftBrace:
                                    self.state = 521
                                    self.bracedinitlist()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 525
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 524
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 531
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 534
                        self.match(CPP14Parser.RightParen)
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 535
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Cast:
                        self.state = 538
                        self.match(CPP14Parser.Cast)
                        self.state = 539
                        self.match(CPP14Parser.Less)
                        self.state = 541
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 540
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 543
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 94, self._ctx)

                        self.state = 548
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 545
                                self.attributespecifier()
                            self.state = 550
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 95, self._ctx)

                        self.state = 552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 551
                            self.abstractdeclarator()

                        self.state = 554
                        self.match(CPP14Parser.Greater)

                    self.state = 558
                    self.match(CPP14Parser.LeftParen)
                    self.state = 559
                    self.assignmentexpression()
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 560
                        self.match(CPP14Parser.Comma)
                        self.state = 561
                        self.assignmentexpression()
                        self.state = 566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 567
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 6:
                    self.state = 569
                    self.match(CPP14Parser.Typeid)
                    self.state = 570
                    self.match(CPP14Parser.LeftParen)
                    self.state = 593
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                    if la_ == 1:
                        self.state = 571
                        self.assignmentexpression()
                        self.state = 576
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 572
                            self.match(CPP14Parser.Comma)
                            self.state = 573
                            self.assignmentexpression()
                            self.state = 578
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 580
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 579
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 582
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 100, self._ctx)

                        self.state = 587
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 584
                                self.attributespecifier()
                            self.state = 589
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)

                        self.state = 591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 590
                            self.abstractdeclarator()

                        pass

                    self.state = 595
                    self.match(CPP14Parser.RightParen)
                    pass

                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 599
                        self.postoperation()
                    self.state = 604
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall"):
                listener.enterCall(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def call(self):

        localctx = CPP14Parser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.unqualifiedid()
            self.state = 608
            self.match(CPP14Parser.LeftParen)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 609
                self.assignmentexpression()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 610
                    self.match(CPP14Parser.Comma)
                    self.state = 611
                    self.assignmentexpression()
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 619
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 120, self._ctx)
                if la_ == 1:
                    self.state = 622
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
                    if la_ == 1:
                        self.state = 621
                        self.nestednamespecifier()

                    self.state = 646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 624
                        self.match(CPP14Parser.Identifier)
                        self.state = 643
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Less:
                            self.state = 625
                            self.match(CPP14Parser.Less)
                            self.state = 640
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                            (1 << (CPP14Parser.And - 66)) | (
                                                                            1 << (CPP14Parser.Or - 66)) | (
                                                                        1 << (CPP14Parser.Tilde - 66)) | (
                                                                    1 << (CPP14Parser.Not - 66)) | (
                                                                1 << (CPP14Parser.PlusPlus - 66)) | (
                                                            1 << (CPP14Parser.MinusMinus - 66)) | (
                                                        1 << (CPP14Parser.Doublecolon - 66)) | (
                                                    1 << (CPP14Parser.Identifier - 66)) | (
                                                1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 626
                                self.templateargument()
                                self.state = 628
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 627
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 637
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 630
                                    self.match(CPP14Parser.Comma)
                                    self.state = 631
                                    self.templateargument()
                                    self.state = 633
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if _la == CPP14Parser.Ellipsis:
                                        self.state = 632
                                        self.match(CPP14Parser.Ellipsis)

                                    self.state = 639
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 642
                            self.match(CPP14Parser.Greater)

                        self.state = 645
                        self.match(CPP14Parser.Doublecolon)

                    pass

                elif la_ == 2:
                    self.state = 648
                    self.nestednamespecifier()
                    self.state = 649
                    self.match(CPP14Parser.Template)
                    self.state = 650
                    self.match(CPP14Parser.Identifier)
                    self.state = 651
                    self.match(CPP14Parser.Less)
                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 652
                        self.templateargument()
                        self.state = 654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 653
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 656
                            self.match(CPP14Parser.Comma)
                            self.state = 657
                            self.templateargument()
                            self.state = 659
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 658
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 665
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 668
                    self.match(CPP14Parser.Greater)
                    self.state = 669
                    self.match(CPP14Parser.Doublecolon)
                    pass

                self.state = 673
                self.match(CPP14Parser.Tilde)
                self.state = 674
                self.match(CPP14Parser.Identifier)
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
                if la_ == 1:
                    self.state = 675
                    self.match(CPP14Parser.Less)
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 676
                        self.templateargument()
                        self.state = 678
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 677
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 680
                            self.match(CPP14Parser.Comma)
                            self.state = 681
                            self.templateargument()
                            self.state = 683
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 682
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 689
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 692
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.match(CPP14Parser.Tilde)
                self.state = 696
                self.match(CPP14Parser.Decltype)
                self.state = 697
                self.match(CPP14Parser.LeftParen)
                self.state = 707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 127, self._ctx)
                if la_ == 1:
                    self.state = 698
                    self.assignmentexpression()
                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 699
                        self.match(CPP14Parser.Comma)
                        self.state = 700
                        self.assignmentexpression()
                        self.state = 705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 706
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 709
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self.postfixexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 713
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Sizeof:
                    self.state = 714
                    self.match(CPP14Parser.Sizeof)
                    pass
                elif token in [CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                               CPP14Parser.Tilde, CPP14Parser.Not]:
                    self.state = 715
                    _la = self._input.LA(1)
                    if not (((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & (
                                            (1 << (CPP14Parser.Plus - 60)) | (1 << (CPP14Parser.Minus - 60)) | (
                                        1 << (CPP14Parser.Star - 60)) | (1 << (CPP14Parser.And - 60)) | (
                                1 << (CPP14Parser.Or - 60)) | (1 << (CPP14Parser.Tilde - 60)) | (
                        1 << (CPP14Parser.Not - 60)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 735
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 716
                            self.match(CPP14Parser.LeftParen)
                            self.state = 718
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 717
                                    self.typespecifier()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 720
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

                            self.state = 725
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 722
                                    self.attributespecifier()
                                self.state = 727
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 130, self._ctx)

                            self.state = 729
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)))) != 0):
                                self.state = 728
                                self.abstractdeclarator()

                            self.state = 731
                            self.match(CPP14Parser.RightParen)
                        self.state = 737
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 132, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 740
                self.unaryexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 741
                self.match(CPP14Parser.Sizeof)
                self.state = 742
                self.match(CPP14Parser.Ellipsis)
                self.state = 743
                self.match(CPP14Parser.LeftParen)
                self.state = 744
                self.match(CPP14Parser.Identifier)
                self.state = 745
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 746
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Alignof or _la == CPP14Parser.Sizeof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 747
                self.match(CPP14Parser.LeftParen)
                self.state = 749
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 748
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 751
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)

                self.state = 756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 753
                        self.attributespecifier()
                    self.state = 758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 135, self._ctx)

                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 759
                    self.abstractdeclarator()

                self.state = 762
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 764
                self.match(CPP14Parser.Noexcept)
                self.state = 765
                self.match(CPP14Parser.LeftParen)
                self.state = 766
                self.assignmentexpression()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 767
                    self.match(CPP14Parser.Comma)
                    self.state = 768
                    self.assignmentexpression()
                    self.state = 773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 774
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 776
                self.newexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 777
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus, CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 142, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 781
                        self.match(CPP14Parser.LeftParen)
                        self.state = 783
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 782
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 785
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 139, self._ctx)

                        self.state = 790
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 140, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 787
                                self.attributespecifier()
                            self.state = 792
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 140, self._ctx)

                        self.state = 794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 793
                            self.abstractdeclarator()

                        self.state = 796
                        self.match(CPP14Parser.RightParen)
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 142, self._ctx)

                self.state = 803
                self.unaryexpression()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype, CPP14Parser.TrueFalse,
                           CPP14Parser.Types, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                           CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                           CPP14Parser.LeftBracket, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                           CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                           CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.postfixunaryincdecexpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixunaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def postoperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostoperationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostoperationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixunaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def postfixunaryincdecexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_postfixunaryincdecexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.postfixexpression()
            self.state = 809
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixunaryincdecexpression)
                    self.state = 811
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBracket - 54)) | (
                            1 << (CPP14Parser.Arrow - 54)) | (1 << (CPP14Parser.Dot - 54)))) != 0):
                        self.state = 812
                        self.postoperation()
                        self.state = 817
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 818
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 824
                self.match(CPP14Parser.Doublecolon)

            self.state = 827
            self.match(CPP14Parser.New)
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
            if la_ == 1:
                self.state = 828
                self.match(CPP14Parser.LeftParen)
                self.state = 831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 829
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 830
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 833
                    self.match(CPP14Parser.Ellipsis)

                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 836
                    self.match(CPP14Parser.Comma)
                    self.state = 839
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 837
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 838
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 841
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 849
                self.match(CPP14Parser.RightParen)

            self.state = 884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 854
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 853
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 856
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 153, self._ctx)

                self.state = 861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 858
                        self.attributespecifier()
                    self.state = 863
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 154, self._ctx)

                self.state = 865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
                if la_ == 1:
                    self.state = 864
                    self.newdeclarator()

                pass
            elif token == CPP14Parser.LeftParen:
                self.state = 867
                self.match(CPP14Parser.LeftParen)
                self.state = 869
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 868
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 871
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 873
                        self.attributespecifier()
                    self.state = 878
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 157, self._ctx)

                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                            1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 879
                    self.abstractdeclarator()

                self.state = 882
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
            if la_ == 1:
                self.state = 886
                self.match(CPP14Parser.LeftParen)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                    1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 889
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 887
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 888
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 891
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 894
                        self.match(CPP14Parser.Comma)
                        self.state = 897
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 895
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 896
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 899
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 906
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 909
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 910
                self.bracedinitlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_newdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 913
                        self.nestednamespecifier()

                    self.state = 916
                    self.match(CPP14Parser.Star)
                    self.state = 920
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 917
                            self.attributespecifier()
                        self.state = 922
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 168, self._ctx)

                    self.state = 926
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 923
                            self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 928
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 169, self._ctx)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 929
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 933
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 170, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 930
                            self.attributespecifier()
                        self.state = 935
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 170, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.newdeclarator()

                pass
            elif token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.noptrnewdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def noptrnewdeclarator(self):

        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noptrnewdeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(CPP14Parser.LeftBracket)
            self.state = 945
            self.assignmentexpression()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 946
                self.match(CPP14Parser.Comma)
                self.state = 947
                self.assignmentexpression()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self.match(CPP14Parser.RightBracket)
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 954
                    self.attributespecifier()
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 175, self._ctx)

            self.state = 971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 177, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 960
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 961
                    self.conditionalexpression()
                    self.state = 962
                    self.match(CPP14Parser.RightBracket)
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 963
                            self.attributespecifier()
                        self.state = 968
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)

                self.state = 973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 177, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 974
                self.match(CPP14Parser.Doublecolon)

            self.state = 977
            self.match(CPP14Parser.Delete)
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(CPP14Parser.LeftBracket)
                self.state = 979
                self.match(CPP14Parser.RightBracket)

            self.state = 1001
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 982
                    self.match(CPP14Parser.LeftParen)
                    self.state = 984
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 983
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 986
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 180, self._ctx)

                    self.state = 991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 988
                            self.attributespecifier()
                        self.state = 993
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 181, self._ctx)

                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 994
                        self.abstractdeclarator()

                    self.state = 997
                    self.match(CPP14Parser.RightParen)
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 183, self._ctx)

            self.state = 1004
            self.unaryexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnaryexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, i)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def shiftexpression(self):

        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_shiftexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1006
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1007
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1010
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)

                    self.state = 1015
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1012
                            self.attributespecifier()
                        self.state = 1017
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 185, self._ctx)

                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 1018
                        self.abstractdeclarator()

                    self.state = 1021
                    self.match(CPP14Parser.RightParen)
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)

            self.state = 1028
            self.unaryexpression()
            self.state = 1066
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 193, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1039
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.DotStar:
                        self.state = 1029
                        self.match(CPP14Parser.DotStar)
                        pass
                    elif token == CPP14Parser.ArrowStar:
                        self.state = 1030
                        self.match(CPP14Parser.ArrowStar)
                        pass
                    elif token == CPP14Parser.Star:
                        self.state = 1031
                        self.match(CPP14Parser.Star)
                        pass
                    elif token == CPP14Parser.Div:
                        self.state = 1032
                        self.match(CPP14Parser.Div)
                        pass
                    elif token == CPP14Parser.Mod:
                        self.state = 1033
                        self.match(CPP14Parser.Mod)
                        pass
                    elif token == CPP14Parser.Plus:
                        self.state = 1034
                        self.match(CPP14Parser.Plus)
                        pass
                    elif token == CPP14Parser.Minus:
                        self.state = 1035
                        self.match(CPP14Parser.Minus)
                        pass
                    elif token == CPP14Parser.LeftShift:
                        self.state = 1036
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token == CPP14Parser.Greater:
                        self.state = 1037
                        self.match(CPP14Parser.Greater)
                        self.state = 1038
                        self.match(CPP14Parser.Greater)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 192, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1041
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1043
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1042
                                    self.typespecifier()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1045
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 189, self._ctx)

                            self.state = 1050
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1047
                                    self.attributespecifier()
                                self.state = 1052
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 190, self._ctx)

                            self.state = 1054
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                1 << (CPP14Parser.Identifier - 66)))) != 0):
                                self.state = 1053
                                self.abstractdeclarator()

                            self.state = 1056
                            self.match(CPP14Parser.RightParen)
                        self.state = 1062
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 192, self._ctx)

                    self.state = 1063
                    self.unaryexpression()
                self.state = 1068
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 193, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.shiftexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 1072
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1073
                    _la = self._input.LA(1)
                    if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                (1 << (CPP14Parser.Less - 71)) | (1 << (CPP14Parser.Greater - 71)) | (
                            1 << (CPP14Parser.LessEqual - 71)) | (1 << (CPP14Parser.GreaterEqual - 71)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1074
                    self.shiftexpression()
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 194, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 195, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 1083
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1084
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1085
                    self.relationalexpression(0)
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 195, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ternaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.logicalorexpression()
            self.state = 1092
            self.match(CPP14Parser.Question)
            self.state = 1093
            self.assignmentexpression()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 1094
                self.match(CPP14Parser.Comma)
                self.state = 1095
                self.assignmentexpression()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1101
            self.match(CPP14Parser.Colon)
            self.state = 1102
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unaryconditionalexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.logicalorexpression()
            self.state = 1105
            self.match(CPP14Parser.UnaryCondition)
            self.state = 1106
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def logicalorexpression(self):

        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_logicalorexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.equalityexpression(0)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                            (1 << (CPP14Parser.Caret - 65)) | (1 << (CPP14Parser.And - 65)) | (
                        1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.AndAnd - 65)) | (
                1 << (CPP14Parser.OrOr - 65)))) != 0):
                self.state = 1109
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                                (1 << (CPP14Parser.Caret - 65)) | (1 << (CPP14Parser.And - 65)) | (
                            1 << (CPP14Parser.Or - 65)) | (1 << (CPP14Parser.AndAnd - 65)) | (
                    1 << (CPP14Parser.OrOr - 65)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1110
                self.equalityexpression(0)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conditionalexpression)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1116
                self.logicalorexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.ternaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def logicalorexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.LogicalorexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext, i)

        def assignmentoperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentoperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, i)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Throw(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Throw)
            else:
                return self.getToken(CPP14Parser.Throw, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignmentexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1124
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Typeid,
                                 CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                                 CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                                 CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                                 CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                        self.state = 1120
                        self.logicalorexpression()
                        self.state = 1121
                        self.assignmentoperator()
                        pass
                    elif token == CPP14Parser.Throw:
                        self.state = 1123
                        self.match(CPP14Parser.Throw)
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)

            self.state = 1135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
            if la_ == 1:
                self.state = 1129
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.state = 1130
                self.logicalorexpression()
                self.state = 1131
                self.assignmentoperator()
                self.state = 1132
                self.bracedinitlist()
                pass

            elif la_ == 3:
                self.state = 1134
                self.match(CPP14Parser.Throw)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignmentoperator)
        self._la = 0  # Token type
        try:
            self.state = 1141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign, CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                         CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign,
                         CPP14Parser.OrAssign, CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                _la = self._input.LA(1)
                if not (((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (CPP14Parser.Assign - 70)) | (
                    1 << (CPP14Parser.PlusAssign - 70)) | (1 << (CPP14Parser.MinusAssign - 70)) | (
                    1 << (CPP14Parser.StarAssign - 70)) | (1 << (CPP14Parser.DivAssign - 70)) | (
                    1 << (CPP14Parser.ModAssign - 70)) | (1 << (CPP14Parser.XorAssign - 70)) | (
                    1 << (CPP14Parser.AndAssign - 70)) | (1 << (CPP14Parser.OrAssign - 70)) | (
                    1 << (CPP14Parser.LeftShiftAssign - 70)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token == CPP14Parser.Greater:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.match(CPP14Parser.Greater)
                self.state = 1139
                self.match(CPP14Parser.Greater)
                self.state = 1140
                self.match(CPP14Parser.Assign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1143
                        self.attributespecifier()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 203, self._ctx)

                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 226, self._ctx)
                if la_ == 1:
                    self.state = 1156
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.Identifier:
                        self.state = 1149
                        self.match(CPP14Parser.Identifier)
                        self.state = 1150
                        self.match(CPP14Parser.Colon)
                        pass
                    elif token in [CPP14Parser.Switch, CPP14Parser.While]:
                        self.state = 1151
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Switch or _la == CPP14Parser.While):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1152
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1153
                        self.condition()
                        self.state = 1154
                        self.match(CPP14Parser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1158
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 1159
                    self.casestatement()
                    pass

                elif la_ == 3:
                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                        (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                        1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                        1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                        1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1160
                        self.assignmentexpression()
                        self.state = 1165
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1161
                            self.match(CPP14Parser.Comma)
                            self.state = 1162
                            self.assignmentexpression()
                            self.state = 1167
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1170
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 4:
                    self.state = 1171
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                        1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                        1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                        1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                        1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                        1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                        1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                        1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                        1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                        1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                        1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1172
                        self.statement()
                        self.state = 1177
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1178
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 5:
                    self.state = 1179
                    self.match(CPP14Parser.If)
                    self.state = 1180
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1181
                    self.condition()
                    self.state = 1182
                    self.match(CPP14Parser.RightParen)
                    self.state = 1183
                    self.statement()
                    self.state = 1185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
                    if la_ == 1:
                        self.state = 1184
                        self.elsestatement()

                    pass

                elif la_ == 6:
                    self.state = 1187
                    self.match(CPP14Parser.Do)
                    self.state = 1188
                    self.statement()
                    self.state = 1189
                    self.match(CPP14Parser.While)
                    self.state = 1190
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1191
                    self.assignmentexpression()
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1192
                        self.match(CPP14Parser.Comma)
                        self.state = 1193
                        self.assignmentexpression()
                        self.state = 1198
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1199
                    self.match(CPP14Parser.RightParen)
                    self.state = 1200
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 7:
                    self.state = 1202
                    self.match(CPP14Parser.For)
                    self.state = 1203
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1262
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                    if la_ == 1:
                        self.state = 1216
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
                        if la_ == 1:
                            self.state = 1212
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                            (1 << (CPP14Parser.And - 66)) | (
                                                                            1 << (CPP14Parser.Or - 66)) | (
                                                                        1 << (CPP14Parser.Tilde - 66)) | (
                                                                    1 << (CPP14Parser.Not - 66)) | (
                                                                1 << (CPP14Parser.PlusPlus - 66)) | (
                                                            1 << (CPP14Parser.MinusMinus - 66)) | (
                                                        1 << (CPP14Parser.Doublecolon - 66)) | (
                                                    1 << (CPP14Parser.Identifier - 66)) | (
                                                1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1204
                                self.assignmentexpression()
                                self.state = 1209
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 1205
                                    self.match(CPP14Parser.Comma)
                                    self.state = 1206
                                    self.assignmentexpression()
                                    self.state = 1211
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 1214
                            self.match(CPP14Parser.Semi)
                            pass

                        elif la_ == 2:
                            self.state = 1215
                            self.simpledeclaration()
                            pass

                        self.state = 1219
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.PlusPlus - 66)) | (
                                                        1 << (CPP14Parser.MinusMinus - 66)) | (
                                                    1 << (CPP14Parser.Doublecolon - 66)) | (
                                                1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1218
                            self.condition()

                        self.state = 1221
                        self.match(CPP14Parser.Semi)
                        self.state = 1230
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.PlusPlus - 66)) | (
                                                        1 << (CPP14Parser.MinusMinus - 66)) | (
                                                    1 << (CPP14Parser.Doublecolon - 66)) | (
                                                1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1222
                            self.assignmentexpression()
                            self.state = 1227
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1223
                                self.match(CPP14Parser.Comma)
                                self.state = 1224
                                self.assignmentexpression()
                                self.state = 1229
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1235
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1232
                            self.attributespecifier()
                            self.state = 1237
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1239
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1238
                                self.declspecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1241
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 217, self._ctx)

                        self.state = 1246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1243
                            self.attributespecifier()
                            self.state = 1248
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1249
                        self.declarator()
                        self.state = 1250
                        self.match(CPP14Parser.Colon)
                        self.state = 1260
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1251
                            self.assignmentexpression()
                            self.state = 1256
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1252
                                self.match(CPP14Parser.Comma)
                                self.state = 1253
                                self.assignmentexpression()
                                self.state = 1258
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 1259
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    self.state = 1264
                    self.match(CPP14Parser.RightParen)
                    self.state = 1265
                    self.statement()
                    pass

                elif la_ == 8:
                    self.state = 1281
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Break, CPP14Parser.Continue]:
                        self.state = 1266
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token == CPP14Parser.Return:
                        self.state = 1267
                        self.match(CPP14Parser.Return)
                        self.state = 1279
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Semi, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                     CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                     CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1276
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                            (1 << (CPP14Parser.And - 66)) | (
                                                                            1 << (CPP14Parser.Or - 66)) | (
                                                                        1 << (CPP14Parser.Tilde - 66)) | (
                                                                    1 << (CPP14Parser.Not - 66)) | (
                                                                1 << (CPP14Parser.PlusPlus - 66)) | (
                                                            1 << (CPP14Parser.MinusMinus - 66)) | (
                                                        1 << (CPP14Parser.Doublecolon - 66)) | (
                                                    1 << (CPP14Parser.Identifier - 66)) | (
                                                1 << (CPP14Parser.Numberliteral - 66)) | (
                                            1 << (CPP14Parser.Characterliteral - 66)) | (
                                        1 << (CPP14Parser.Stringliteral - 66)) | (
                                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1268
                                self.assignmentexpression()
                                self.state = 1273
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CPP14Parser.Comma:
                                    self.state = 1269
                                    self.match(CPP14Parser.Comma)
                                    self.state = 1270
                                    self.assignmentexpression()
                                    self.state = 1275
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 1278
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1283
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 9:
                    self.state = 1284
                    self.gotostatement()
                    pass

                elif la_ == 10:
                    self.state = 1285
                    self.tryblock()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.blockdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(CPP14Parser.Case)
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename,
                         CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus,
                         CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                         CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier,
                         CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                         CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.state = 1292
                self.conditionalexpression()
                pass
            elif token == CPP14Parser.Default:
                self.state = 1293
                self.match(CPP14Parser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1296
            self.match(CPP14Parser.Colon)
            self.state = 1297
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(CPP14Parser.Else)
            self.state = 1300
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.assignmentexpression()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1303
                    self.match(CPP14Parser.Comma)
                    self.state = 1304
                    self.assignmentexpression()
                    self.state = 1309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1310
                    self.attributespecifier()
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1317
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1316
                        self.declspecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 231, self._ctx)

                self.state = 1324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1321
                    self.attributespecifier()
                    self.state = 1326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1327
                self.declarator()
                self.state = 1334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 234, self._ctx)
                if la_ == 1:
                    self.state = 1328
                    self.match(CPP14Parser.Assign)
                    self.state = 1329
                    self.assignmentexpression()
                    pass

                elif la_ == 2:
                    self.state = 1331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1330
                        self.match(CPP14Parser.Assign)

                    self.state = 1333
                    self.bracedinitlist()
                    pass

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(CPP14Parser.Goto)
            self.state = 1339
            self.match(CPP14Parser.Identifier)
            self.state = 1340
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 250, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1343
                    self.attributespecifier()
                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1372
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                             CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                             CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                             CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And,
                             CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis,
                             CPP14Parser.Identifier]:
                    self.state = 1360
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 239, self._ctx)
                    if la_ == 1:
                        self.state = 1350
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1349
                                self.declspecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1352
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 237, self._ctx)

                        self.state = 1357
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1354
                            self.attributespecifier()
                            self.state = 1359
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1362
                    self.declarator()
                    self.state = 1366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1363
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1369
                    self.functionbody()
                    pass
                elif token == CPP14Parser.Semi:
                    self.state = 1371
                    self.match(CPP14Parser.Semi)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Template:
                    self.state = 1374
                    self.match(CPP14Parser.Template)
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1375
                        self.match(CPP14Parser.Less)
                        self.state = 1384
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                            1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Struct) | (1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                            self.state = 1376
                            self.templateparameter()
                            self.state = 1381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1377
                                self.match(CPP14Parser.Comma)
                                self.state = 1378
                                self.templateparameter()
                                self.state = 1383
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 1386
                        self.match(CPP14Parser.Greater)

                    pass
                elif token == CPP14Parser.Extern:
                    self.state = 1389
                    self.match(CPP14Parser.Extern)
                    self.state = 1390
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Template or _la == CPP14Parser.Stringliteral):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1393
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1403
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CPP14Parser.Extern:
                    self.state = 1394
                    self.match(CPP14Parser.Extern)
                    self.state = 1395
                    self.match(CPP14Parser.Stringliteral)
                    pass
                elif token in [CPP14Parser.Inline, CPP14Parser.Namespace]:
                    self.state = 1397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Inline:
                        self.state = 1396
                        self.match(CPP14Parser.Inline)

                    self.state = 1399
                    self.match(CPP14Parser.Namespace)
                    self.state = 1401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1400
                        self.match(CPP14Parser.Identifier)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1405
                self.match(CPP14Parser.LeftBrace)
                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                    1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1406
                    self.declaration()
                    self.state = 1411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1412
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext, 0)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_blockdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 267, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1415
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 266, self._ctx)
                if la_ == 1:
                    self.state = 1416
                    self.match(CPP14Parser.Asm)
                    self.state = 1417
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1418
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 1419
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 1431
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignas, CPP14Parser.Using, CPP14Parser.LeftBracket]:
                        self.state = 1423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1420
                            self.attributespecifier()
                            self.state = 1425
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1426
                        self.match(CPP14Parser.Using)
                        self.state = 1427
                        self.match(CPP14Parser.Namespace)
                        pass
                    elif token == CPP14Parser.Namespace:
                        self.state = 1428
                        self.match(CPP14Parser.Namespace)
                        self.state = 1429
                        self.match(CPP14Parser.Identifier)
                        self.state = 1430
                        self.match(CPP14Parser.Assign)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1434
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
                    if la_ == 1:
                        self.state = 1433
                        self.nestednamespecifier()

                    self.state = 1436
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 3:
                    self.state = 1437
                    self.match(CPP14Parser.Using)
                    self.state = 1468
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
                    if la_ == 1:
                        self.state = 1443
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 255, self._ctx)
                        if la_ == 1:
                            self.state = 1439
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Typename:
                                self.state = 1438
                                self.match(CPP14Parser.Typename)

                            self.state = 1441
                            self.nestednamespecifier()
                            pass

                        elif la_ == 2:
                            self.state = 1442
                            self.match(CPP14Parser.Doublecolon)
                            pass

                        self.state = 1445
                        self.unqualifiedid()
                        pass

                    elif la_ == 2:
                        self.state = 1446
                        self.match(CPP14Parser.Identifier)
                        self.state = 1450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1447
                            self.attributespecifier()
                            self.state = 1452
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1453
                        self.match(CPP14Parser.Assign)
                        self.state = 1455
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1454
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1457
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 257, self._ctx)

                        self.state = 1462
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1459
                                self.attributespecifier()
                            self.state = 1464
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)

                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)))) != 0):
                            self.state = 1465
                            self.abstractdeclarator()

                        pass

                    pass

                elif la_ == 4:
                    self.state = 1470
                    self.match(CPP14Parser.Static_assert)
                    self.state = 1471
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1472
                    self.conditionalexpression()
                    self.state = 1473
                    self.match(CPP14Parser.Comma)
                    self.state = 1474
                    self.match(CPP14Parser.Stringliteral)
                    self.state = 1475
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 5:
                    self.state = 1477
                    self.match(CPP14Parser.Enum)
                    self.state = 1479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                        self.state = 1478
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    self.state = 1484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1481
                        self.attributespecifier()
                        self.state = 1486
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1487
                    self.match(CPP14Parser.Identifier)
                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Colon:
                        self.state = 1488
                        self.match(CPP14Parser.Colon)
                        self.state = 1490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1489
                            self.typespecifier()
                            self.state = 1492
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                                (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                                            1 << CPP14Parser.ConstOrVolatile) | (
                                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                                1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier):
                                break

                        self.state = 1497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1494
                            self.attributespecifier()
                            self.state = 1499
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    pass

                self.state = 1504
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_simpledeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                         CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Virtual,
                         CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde,
                         CPP14Parser.AndAnd, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
                if la_ == 1:
                    self.state = 1508
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1507
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1510
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 268, self._ctx)

                    self.state = 1515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1512
                        self.attributespecifier()
                        self.state = 1517
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1520
                    self.declarator()
                    self.state = 1522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                            (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                        1 << (CPP14Parser.Assign - 54)))) != 0):
                        self.state = 1521
                        self.initializer()

                    self.state = 1531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1524
                        self.match(CPP14Parser.Comma)
                        self.state = 1525
                        self.declarator()
                        self.state = 1527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                                (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                            1 << (CPP14Parser.Assign - 54)))) != 0):
                            self.state = 1526
                            self.initializer()

                        self.state = 1533
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1536
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1537
                    self.attributespecifier()
                    self.state = 1540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 278, self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1542
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1545
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

                    self.state = 1550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1547
                        self.attributespecifier()
                        self.state = 1552
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1555
                self.declarator()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                        (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                    1 << (CPP14Parser.Assign - 54)))) != 0):
                    self.state = 1556
                    self.initializer()

                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1559
                    self.match(CPP14Parser.Comma)
                    self.state = 1560
                    self.declarator()
                    self.state = 1562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & (
                            (1 << (CPP14Parser.LeftParen - 54)) | (1 << (CPP14Parser.LeftBrace - 54)) | (
                        1 << (CPP14Parser.Assign - 54)))) != 0):
                        self.state = 1561
                        self.initializer()

                    self.state = 1568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1569
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Specifier(self):
            return self.getToken(CPP14Parser.Specifier, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declspecifier)
        self._la = 0  # Token type
        try:
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Mutable, CPP14Parser.Specifier,
                         CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Virtual))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                           CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                           CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1574
                self.typespecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def basespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BasespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, i)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1579
                    self.attributespecifier()
                    self.state = 1584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 1586
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
                    if la_ == 1:
                        self.state = 1585
                        self.nestednamespecifier()

                    self.state = 1588
                    self.match(CPP14Parser.Identifier)
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1589
                        self.match(CPP14Parser.Less)
                        self.state = 1604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                            1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                            1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                            1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 1590
                            self.templateargument()
                            self.state = 1592
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1591
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1601
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1594
                                self.match(CPP14Parser.Comma)
                                self.state = 1595
                                self.templateargument()
                                self.state = 1597
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Ellipsis:
                                    self.state = 1596
                                    self.match(CPP14Parser.Ellipsis)

                                self.state = 1603
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        self.state = 1606
                        self.match(CPP14Parser.Greater)

                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1609
                        self.match(CPP14Parser.Final)

                self.state = 1614
                self.match(CPP14Parser.Colon)
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Virtual) | (
                    1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 1615
                    self.basespecifier()
                    self.state = 1617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1616
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1619
                        self.match(CPP14Parser.Comma)
                        self.state = 1620
                        self.basespecifier()
                        self.state = 1622
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1621
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1628
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1631
                self.match(CPP14Parser.LeftBrace)
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 1632
                    self.memberspecification()

                self.state = 1635
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1636
                self.match(CPP14Parser.Enum)
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1637
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1640
                    self.attributespecifier()
                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1652
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
                if la_ == 1:
                    self.state = 1647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1646
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 1649
                    self.nestednamespecifier()
                    self.state = 1650
                    self.match(CPP14Parser.Identifier)
                    pass

                self.state = 1666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1654
                    self.match(CPP14Parser.Colon)
                    self.state = 1656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1655
                        self.typespecifier()
                        self.state = 1658
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                            (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1660
                        self.attributespecifier()
                        self.state = 1665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1668
                self.match(CPP14Parser.LeftBrace)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1669
                    self.match(CPP14Parser.Identifier)
                    self.state = 1672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1670
                        self.match(CPP14Parser.Assign)
                        self.state = 1671
                        self.conditionalexpression()

                    self.state = 1682
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 307, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1674
                            self.match(CPP14Parser.Comma)
                            self.state = 1675
                            self.match(CPP14Parser.Identifier)
                            self.state = 1678
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Assign:
                                self.state = 1676
                                self.match(CPP14Parser.Assign)
                                self.state = 1677
                                self.conditionalexpression()

                        self.state = 1684
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 307, self._ctx)

                    self.state = 1686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 1685
                        self.match(CPP14Parser.Comma)

                self.state = 1690
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def ConstOrVolatile(self):
            return self.getToken(CPP14Parser.ConstOrVolatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1693
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1694
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 319, self._ctx)
                if la_ == 1:
                    self.state = 1698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1695
                        self.attributespecifier()
                        self.state = 1700
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1702
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 312, self._ctx)
                    if la_ == 1:
                        self.state = 1701
                        self.nestednamespecifier()

                    self.state = 1704
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1709
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 314, self._ctx)
                    if la_ == 1:
                        self.state = 1705
                        self.nestednamespecifier()
                        self.state = 1707
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1706
                            self.match(CPP14Parser.Template)

                    self.state = 1711
                    self.match(CPP14Parser.Identifier)
                    self.state = 1712
                    self.match(CPP14Parser.Less)
                    self.state = 1727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1713
                        self.templateargument()
                        self.state = 1715
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1714
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1717
                            self.match(CPP14Parser.Comma)
                            self.state = 1718
                            self.templateargument()
                            self.state = 1720
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1719
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1726
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1729
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token == CPP14Parser.Enum:
                self.enterOuterAlt(localctx, 3)
                self.state = 1732
                self.match(CPP14Parser.Enum)
                self.state = 1734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 320, self._ctx)
                if la_ == 1:
                    self.state = 1733
                    self.nestednamespecifier()

                self.state = 1736
                self.match(CPP14Parser.Identifier)
                pass
            elif token == CPP14Parser.Typename:
                self.enterOuterAlt(localctx, 4)
                self.state = 1737
                self.match(CPP14Parser.Typename)
                self.state = 1738
                self.nestednamespecifier()
                self.state = 1762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 326, self._ctx)
                if la_ == 1:
                    self.state = 1739
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1740
                        self.match(CPP14Parser.Template)

                    self.state = 1743
                    self.match(CPP14Parser.Identifier)
                    self.state = 1744
                    self.match(CPP14Parser.Less)
                    self.state = 1759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1745
                        self.templateargument()
                        self.state = 1747
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1746
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1756
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1749
                            self.match(CPP14Parser.Comma)
                            self.state = 1750
                            self.templateargument()
                            self.state = 1752
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1751
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1758
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1761
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token == CPP14Parser.ConstOrVolatile:
                self.enterOuterAlt(localctx, 5)
                self.state = 1764
                self.match(CPP14Parser.ConstOrVolatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Types(self):
            return self.getToken(CPP14Parser.Types, 0)

        def SignedUnsigned(self):
            return self.getToken(CPP14Parser.SignedUnsigned, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 340, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 328, self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.nestednamespecifier()

                self.state = 1770
                self.match(CPP14Parser.Identifier)
                self.state = 1789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 333, self._ctx)
                if la_ == 1:
                    self.state = 1771
                    self.match(CPP14Parser.Less)
                    self.state = 1786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 1772
                        self.templateargument()
                        self.state = 1774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1773
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1783
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 1776
                            self.match(CPP14Parser.Comma)
                            self.state = 1777
                            self.templateargument()
                            self.state = 1779
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 1778
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 1785
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1788
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1791
                self.nestednamespecifier()
                self.state = 1792
                self.match(CPP14Parser.Template)
                self.state = 1793
                self.match(CPP14Parser.Identifier)
                self.state = 1794
                self.match(CPP14Parser.Less)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                    1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 1795
                    self.templateargument()
                    self.state = 1797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1796
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1799
                        self.match(CPP14Parser.Comma)
                        self.state = 1800
                        self.templateargument()
                        self.state = 1802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1801
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1811
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1813
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1814
                self.match(CPP14Parser.Decltype)
                self.state = 1815
                self.match(CPP14Parser.LeftParen)
                self.state = 1825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 339, self._ctx)
                if la_ == 1:
                    self.state = 1816
                    self.assignmentexpression()
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1817
                        self.match(CPP14Parser.Comma)
                        self.state = 1818
                        self.assignmentexpression()
                        self.state = 1823
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1824
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 1827
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 1)
                self.state = 1830
                self.match(CPP14Parser.LeftBracket)
                self.state = 1831
                self.match(CPP14Parser.LeftBracket)
                self.state = 1850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1832
                    self.match(CPP14Parser.Identifier)
                    self.state = 1835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Doublecolon:
                        self.state = 1833
                        self.match(CPP14Parser.Doublecolon)
                        self.state = 1834
                        self.match(CPP14Parser.Identifier)

                    self.state = 1845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 1837
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1841
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace))) != 0):
                            self.state = 1838
                            self.balancedtoken()
                            self.state = 1843
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1844
                        self.match(CPP14Parser.RightParen)

                    self.state = 1848
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1847
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1852
                    self.match(CPP14Parser.Comma)
                    self.state = 1871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1853
                        self.match(CPP14Parser.Identifier)
                        self.state = 1856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Doublecolon:
                            self.state = 1854
                            self.match(CPP14Parser.Doublecolon)
                            self.state = 1855
                            self.match(CPP14Parser.Identifier)

                        self.state = 1866
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.LeftParen:
                            self.state = 1858
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1862
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace))) != 0):
                                self.state = 1859
                                self.balancedtoken()
                                self.state = 1864
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1865
                            self.match(CPP14Parser.RightParen)

                        self.state = 1869
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1868
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 1877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1878
                self.match(CPP14Parser.RightBracket)
                self.state = 1879
                self.match(CPP14Parser.RightBracket)
                pass
            elif token == CPP14Parser.Alignas:
                self.enterOuterAlt(localctx, 2)
                self.state = 1880
                self.match(CPP14Parser.Alignas)
                self.state = 1881
                self.match(CPP14Parser.LeftParen)
                self.state = 1897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 355, self._ctx)
                if la_ == 1:
                    self.state = 1883
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1882
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1885
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 352, self._ctx)

                    self.state = 1890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 353, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1887
                            self.attributespecifier()
                        self.state = 1892
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 353, self._ctx)

                    self.state = 1894
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 354, self._ctx)
                    if la_ == 1:
                        self.state = 1893
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 1896
                    self.conditionalexpression()
                    pass

                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1899
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1902
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_balancedtoken)
        self._la = 0  # Token type
        try:
            self.state = 1930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftParen:
                self.enterOuterAlt(localctx, 1)
                self.state = 1906
                self.match(CPP14Parser.LeftParen)
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1907
                    self.balancedtoken()
                    self.state = 1912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1913
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.LeftBracket:
                self.enterOuterAlt(localctx, 2)
                self.state = 1914
                self.match(CPP14Parser.LeftBracket)
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1915
                    self.balancedtoken()
                    self.state = 1920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1921
                self.match(CPP14Parser.RightBracket)
                pass
            elif token == CPP14Parser.LeftBrace:
                self.enterOuterAlt(localctx, 3)
                self.state = 1922
                self.match(CPP14Parser.LeftBrace)
                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1923
                    self.balancedtoken()
                    self.state = 1928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1929
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_declarator)
        self._la = 0  # Token type
        try:
            self.state = 1988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 374, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1932
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                             CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1933
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1940
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 364, self._ctx)
                    if la_ == 1:
                        self.state = 1936
                        self.nestednamespecifier()
                        self.state = 1938
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1937
                            self.match(CPP14Parser.Template)

                    self.state = 1942
                    self.unqualifiedid()
                    self.state = 1946
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 365, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1943
                            self.attributespecifier()
                        self.state = 1948
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 365, self._ctx)

                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 1949
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1950
                    self.ptrdeclarator()
                    self.state = 1951
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1967
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == CPP14Parser.LeftParen:
                            self.state = 1955
                            self.parametersandqualifiers()
                            pass
                        elif token == CPP14Parser.LeftBracket:
                            self.state = 1956
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 1958
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 1957
                                self.conditionalexpression()

                            self.state = 1960
                            self.match(CPP14Parser.RightBracket)
                            self.state = 1964
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 368, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1961
                                    self.attributespecifier()
                                self.state = 1966
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 368, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 1971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 370, self._ctx)

                self.state = 1972
                self.parametersandqualifiers()
                self.state = 1973
                self.match(CPP14Parser.Arrow)
                self.state = 1975
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1974
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1977
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 371, self._ctx)

                self.state = 1982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 372, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1979
                        self.attributespecifier()
                    self.state = 1984
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 372, self._ctx)

                self.state = 1986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 373, self._ctx)
                if la_ == 1:
                    self.state = 1985
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext, 0)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def conditionalexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConditionalexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ptrdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 389, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon,
                             CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1990
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1997
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 377, self._ctx)
                    if la_ == 1:
                        self.state = 1993
                        self.nestednamespecifier()
                        self.state = 1995
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1994
                            self.match(CPP14Parser.Template)

                    self.state = 1999
                    self.unqualifiedid()
                    self.state = 2003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2000
                            self.attributespecifier()
                        self.state = 2005
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)

                    pass
                elif token == CPP14Parser.LeftParen:
                    self.state = 2006
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2007
                    self.ptrdeclarator()
                    self.state = 2008
                    self.match(CPP14Parser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2026
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2024
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token == CPP14Parser.LeftParen:
                            self.state = 2012
                            self.parametersandqualifiers()
                            pass
                        elif token == CPP14Parser.LeftBracket:
                            self.state = 2013
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2015
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and (
                                (1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Or - 66)) | (
                                1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                                1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                                self.state = 2014
                                self.conditionalexpression()

                            self.state = 2017
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2021
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2018
                                    self.attributespecifier()
                                self.state = 2023
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2028
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2052
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 2030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 2029
                        self.nestednamespecifier()

                    self.state = 2032
                    self.match(CPP14Parser.Star)
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2033
                        self.attributespecifier()
                        self.state = 2038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2042
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.ConstOrVolatile:
                        self.state = 2039
                        self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 2044
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 2045
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2046
                        self.attributespecifier()
                        self.state = 2051
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2054
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.match(CPP14Parser.LeftParen)
            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                self.state = 2058
                self.parameterdeclaration()
                self.state = 2063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 390, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2059
                        self.match(CPP14Parser.Comma)
                        self.state = 2060
                        self.parameterdeclaration()
                    self.state = 2065
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 390, self._ctx)

                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 2066
                    self.match(CPP14Parser.Comma)

            self.state = 2072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2071
                self.match(CPP14Parser.Ellipsis)

            self.state = 2074
            self.match(CPP14Parser.RightParen)
            self.state = 2078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 394, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2075
                    self.match(CPP14Parser.ConstOrVolatile)
                self.state = 2080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 394, self._ctx)

            self.state = 2082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 395, self._ctx)
            if la_ == 1:
                self.state = 2081
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 396, self._ctx)
            if la_ == 1:
                self.state = 2084
                self.exceptionspecification()

            self.state = 2090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2087
                    self.attributespecifier()
                self.state = 2092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_abstractdeclarator)
        try:
            self.state = 2114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 402, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2093
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 398, self._ctx)
                if la_ == 1:
                    self.state = 2094
                    self.noptrabstractdeclarator(0)

                self.state = 2097
                self.parametersandqualifiers()
                self.state = 2098
                self.match(CPP14Parser.Arrow)
                self.state = 2100
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2099
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2102
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 399, self._ctx)

                self.state = 2107
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 400, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2104
                        self.attributespecifier()
                    self.state = 2109
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 400, self._ctx)

                self.state = 2111
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 401, self._ctx)
                if la_ == 1:
                    self.state = 2110
                    self.abstractdeclarator()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2113
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ptrabstractdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2116
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2140
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 2118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 2117
                        self.nestednamespecifier()

                    self.state = 2120
                    self.match(CPP14Parser.Star)
                    self.state = 2124
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 404, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2121
                            self.attributespecifier()
                        self.state = 2126
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 404, self._ctx)

                    self.state = 2130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.ConstOrVolatile:
                        self.state = 2127
                        self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 2132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 2133
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 406, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2134
                            self.attributespecifier()
                        self.state = 2139
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 406, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 408, self._ctx)
                if la_ == 1:
                    self.state = 2142
                    self.ptrabstractdeclarator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 412, self._ctx)
            if la_ == 1:
                self.state = 2148
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 2149
                self.match(CPP14Parser.LeftBracket)
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                    1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                (1 << (CPP14Parser.And - 66)) | (
                                                                1 << (CPP14Parser.Or - 66)) | (
                                                            1 << (CPP14Parser.Tilde - 66)) | (
                                                        1 << (CPP14Parser.Not - 66)) | (
                                                    1 << (CPP14Parser.PlusPlus - 66)) | (
                                                1 << (CPP14Parser.MinusMinus - 66)) | (
                                            1 << (CPP14Parser.Doublecolon - 66)) | (
                                        1 << (CPP14Parser.Identifier - 66)) | (
                                    1 << (CPP14Parser.Numberliteral - 66)) | (
                                1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2150
                    self.conditionalexpression()

                self.state = 2153
                self.match(CPP14Parser.RightBracket)
                self.state = 2157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 411, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2154
                        self.attributespecifier()
                    self.state = 2159
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 411, self._ctx)

                pass

            elif la_ == 3:
                self.state = 2160
                self.match(CPP14Parser.LeftParen)
                self.state = 2161
                self.ptrabstractdeclarator()
                self.state = 2162
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 2183
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                    self.state = 2166
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2179
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.LeftParen:
                        self.state = 2167
                        self.parametersandqualifiers()
                        pass
                    elif token == CPP14Parser.LeftBracket:
                        self.state = 2168
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 2170
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.PlusPlus - 66)) | (
                                                        1 << (CPP14Parser.MinusMinus - 66)) | (
                                                    1 << (CPP14Parser.Doublecolon - 66)) | (
                                                1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 2169
                            self.conditionalexpression()

                        self.state = 2172
                        self.match(CPP14Parser.RightBracket)
                        self.state = 2176
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 414, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2173
                                self.attributespecifier()
                            self.state = 2178
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 414, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_abstractpackdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Ellipsis:
                self.enterOuterAlt(localctx, 1)
                self.state = 2186
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                           CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2210
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                    self.state = 2188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Decltype or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                        self.state = 2187
                        self.nestednamespecifier()

                    self.state = 2190
                    self.match(CPP14Parser.Star)
                    self.state = 2194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2191
                        self.attributespecifier()
                        self.state = 2196
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.ConstOrVolatile:
                        self.state = 2197
                        self.match(CPP14Parser.ConstOrVolatile)
                        self.state = 2202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                    self.state = 2203
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2204
                        self.attributespecifier()
                        self.state = 2209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2212
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext, 0)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def noptrabstractpackdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 426, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                    self.state = 2218
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2231
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CPP14Parser.LeftParen:
                        self.state = 2219
                        self.parametersandqualifiers()
                        pass
                    elif token == CPP14Parser.LeftBracket:
                        self.state = 2220
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 2222
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                            1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.PlusPlus - 66)) | (
                                                        1 << (CPP14Parser.MinusMinus - 66)) | (
                                                    1 << (CPP14Parser.Doublecolon - 66)) | (
                                                1 << (CPP14Parser.Identifier - 66)) | (
                                            1 << (CPP14Parser.Numberliteral - 66)) | (
                                        1 << (CPP14Parser.Characterliteral - 66)) | (
                                    1 << (CPP14Parser.Stringliteral - 66)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                            1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                            self.state = 2221
                            self.conditionalexpression()

                        self.state = 2224
                        self.match(CPP14Parser.RightBracket)
                        self.state = 2228
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 424, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2225
                                self.attributespecifier()
                            self.state = 2230
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 424, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 426, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2238
                self.attributespecifier()
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2245
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2244
                    self.declspecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 2247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 428, self._ctx)

            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2249
                self.attributespecifier()
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2255
            self.declarator()
            self.state = 2257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 430, self._ctx)
            if la_ == 1:
                self.state = 2256
                self.abstractdeclarator()

            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Assign:
                self.state = 2259
                self.match(CPP14Parser.Assign)
                self.state = 2262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2260
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2261
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MeminitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MeminitializerContext, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionbody)
        self._la = 0  # Token type
        try:
            self.state = 2325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 2266
                    self.match(CPP14Parser.Colon)
                    self.state = 2267
                    self.meminitializer()
                    self.state = 2269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2268
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2271
                        self.match(CPP14Parser.Comma)
                        self.state = 2272
                        self.meminitializer()
                        self.state = 2274
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2273
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2283
                self.match(CPP14Parser.LeftBrace)
                self.state = 2287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                    1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                    1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                    1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2284
                    self.statement()
                    self.state = 2289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2290
                self.match(CPP14Parser.RightBrace)
                pass
            elif token == CPP14Parser.Try:
                self.enterOuterAlt(localctx, 2)
                self.state = 2291
                self.match(CPP14Parser.Try)
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 2292
                    self.match(CPP14Parser.Colon)
                    self.state = 2293
                    self.meminitializer()
                    self.state = 2295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2294
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2297
                        self.match(CPP14Parser.Comma)
                        self.state = 2298
                        self.meminitializer()
                        self.state = 2300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2299
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2306
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2309
                self.match(CPP14Parser.LeftBrace)
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Continue) | (
                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                    1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (
                    1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                    1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                    1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (
                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                    1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                    1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                    1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                    1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2310
                    self.statement()
                    self.state = 2315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2316
                self.match(CPP14Parser.RightBrace)
                self.state = 2318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2317
                    self.handler()
                    self.state = 2320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Catch):
                        break

                pass
            elif token == CPP14Parser.Assign:
                self.enterOuterAlt(localctx, 3)
                self.state = 2322
                self.match(CPP14Parser.Assign)
                self.state = 2323
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2324
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 2356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 451, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2327
                self.match(CPP14Parser.Assign)
                self.state = 2328
                self.assignmentexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 2329
                    self.match(CPP14Parser.Assign)

                self.state = 2332
                self.bracedinitlist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2333
                self.match(CPP14Parser.LeftParen)
                self.state = 2336
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2334
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2335
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2338
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2341
                    self.match(CPP14Parser.Comma)
                    self.state = 2344
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2342
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 2343
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2346
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2354
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_bracedinitlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            self.match(CPP14Parser.LeftBrace)
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                    (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2361
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2359
                    self.assignmentexpression()
                    pass
                elif token == CPP14Parser.LeftBrace:
                    self.state = 2360
                    self.bracedinitlist()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2363
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 456, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2366
                        self.match(CPP14Parser.Comma)
                        self.state = 2369
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 2367
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 2368
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2371
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 2378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 456, self._ctx)

                self.state = 2380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 2379
                    self.match(CPP14Parser.Comma)

            self.state = 2384
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_memberspecification)
        self._la = 0  # Token type
        try:
            self.state = 2395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                         CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline,
                         CPP14Parser.Types, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                         CPP14Parser.SignedUnsigned, CPP14Parser.Static_assert, CPP14Parser.Struct,
                         CPP14Parser.Template, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Using,
                         CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star,
                         CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon,
                         CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2386
                self.memberdeclaration()
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 2387
                    self.memberspecification()

                pass
            elif token == CPP14Parser.PrivateProtectedPublic:
                self.enterOuterAlt(localctx, 2)
                self.state = 2390
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2391
                self.match(CPP14Parser.Colon)
                self.state = 2393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.PrivateProtectedPublic) | (1 << CPP14Parser.Specifier) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Semi - 66)) | (
                        1 << (CPP14Parser.Ellipsis - 66)) | (1 << (CPP14Parser.Identifier - 66)))) != 0):
                    self.state = 2392
                    self.memberspecification()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def memberdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, i)

        def declspecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclspecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext, i)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 477, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 462, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2397
                        self.attributespecifier()
                    self.state = 2402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 462, self._ctx)

                self.state = 2414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 465, self._ctx)
                if la_ == 1:
                    self.state = 2404
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2403
                            self.declspecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2406
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 463, self._ctx)

                    self.state = 2411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 464, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2408
                            self.attributespecifier()
                        self.state = 2413
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 464, self._ctx)

                self.state = 2432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 468, self._ctx)
                if la_ == 1:
                    self.state = 2420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                                        1 << (CPP14Parser.AndAnd - 66)) | (1 << (CPP14Parser.Colon - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2416
                        self.memberdeclarator()

                        self.state = 2417
                        self.match(CPP14Parser.Comma)
                        self.state = 2418
                        self.memberdeclarator()

                    self.state = 2422
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 2423
                    self.declarator()
                    self.state = 2427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2424
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2430
                    self.functionbody()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2434
                self.match(CPP14Parser.Static_assert)
                self.state = 2435
                self.match(CPP14Parser.LeftParen)
                self.state = 2436
                self.conditionalexpression()
                self.state = 2437
                self.match(CPP14Parser.Comma)
                self.state = 2438
                self.match(CPP14Parser.Stringliteral)
                self.state = 2439
                self.match(CPP14Parser.RightParen)
                self.state = 2440
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2442
                self.match(CPP14Parser.Template)
                self.state = 2443
                self.match(CPP14Parser.Less)
                self.state = 2444
                self.templateparameter()
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2445
                    self.match(CPP14Parser.Comma)
                    self.state = 2446
                    self.templateparameter()
                    self.state = 2451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2452
                self.match(CPP14Parser.Greater)
                self.state = 2453
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2455
                self.match(CPP14Parser.Using)
                self.state = 2486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 476, self._ctx)
                if la_ == 1:
                    self.state = 2461
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 471, self._ctx)
                    if la_ == 1:
                        self.state = 2457
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 2456
                            self.match(CPP14Parser.Typename)

                        self.state = 2459
                        self.nestednamespecifier()
                        pass

                    elif la_ == 2:
                        self.state = 2460
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    self.state = 2463
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 2464
                    self.match(CPP14Parser.Identifier)
                    self.state = 2468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 2465
                        self.attributespecifier()
                        self.state = 2470
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2471
                    self.match(CPP14Parser.Assign)
                    self.state = 2473
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2472
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2475
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 473, self._ctx)

                    self.state = 2480
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2477
                            self.attributespecifier()
                        self.state = 2482
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 474, self._ctx)

                    self.state = 2484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2483
                        self.abstractdeclarator()

                    pass

                self.state = 2488
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2490
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 485, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2493
                self.declarator()
                self.state = 2511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 482, self._ctx)
                if la_ == 1:
                    self.state = 2497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2494
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 2500
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 2509
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 481, self._ctx)
                    if la_ == 1:
                        self.state = 2503
                        self.match(CPP14Parser.Assign)
                        self.state = 2504
                        self.assignmentexpression()

                    elif la_ == 2:
                        self.state = 2506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Assign:
                            self.state = 2505
                            self.match(CPP14Parser.Assign)

                        self.state = 2508
                        self.bracedinitlist()

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2513
                    self.match(CPP14Parser.Identifier)

                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2516
                    self.attributespecifier()
                    self.state = 2521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2522
                self.match(CPP14Parser.Colon)
                self.state = 2523
                self.conditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2526
            self.match(CPP14Parser.Assign)
            self.state = 2527
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo('0') != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2530
                self.attributespecifier()
                self.state = 2535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Virtual:
                self.state = 2536
                self.match(CPP14Parser.Virtual)
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.PrivateProtectedPublic:
                    self.state = 2537
                    self.match(CPP14Parser.PrivateProtectedPublic)

                pass
            elif token == CPP14Parser.PrivateProtectedPublic:
                self.state = 2540
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2541
                    self.match(CPP14Parser.Virtual)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                pass
            else:
                pass
            self.state = 2546
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classordecltype)
        self._la = 0  # Token type
        try:
            self.state = 2586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 498, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 490, self._ctx)
                if la_ == 1:
                    self.state = 2548
                    self.nestednamespecifier()

                self.state = 2551
                self.match(CPP14Parser.Identifier)
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2552
                    self.match(CPP14Parser.Less)
                    self.state = 2567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                        1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (
                        1 << (CPP14Parser.Not - 66)) | (1 << (CPP14Parser.PlusPlus - 66)) | (
                        1 << (CPP14Parser.MinusMinus - 66)) | (1 << (CPP14Parser.Doublecolon - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                        1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                        1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                        self.state = 2553
                        self.templateargument()
                        self.state = 2555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2554
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 2557
                            self.match(CPP14Parser.Comma)
                            self.state = 2558
                            self.templateargument()
                            self.state = 2560
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Ellipsis:
                                self.state = 2559
                                self.match(CPP14Parser.Ellipsis)

                            self.state = 2566
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2569
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2572
                self.match(CPP14Parser.Decltype)
                self.state = 2573
                self.match(CPP14Parser.LeftParen)
                self.state = 2583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 497, self._ctx)
                if la_ == 1:
                    self.state = 2574
                    self.assignmentexpression()
                    self.state = 2579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2575
                        self.match(CPP14Parser.Comma)
                        self.state = 2576
                        self.assignmentexpression()
                        self.state = 2581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2582
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2585
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def bracedinitlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BracedinitlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_meminitializer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 499, self._ctx)
            if la_ == 1:
                self.state = 2588
                self.classordecltype()
                pass

            elif la_ == 2:
                self.state = 2589
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 2617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.LeftParen:
                self.state = 2592
                self.match(CPP14Parser.LeftParen)
                self.state = 2613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                    1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                    1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CPP14Parser.And - 66)) | (
                    1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.Tilde - 66)) | (1 << (CPP14Parser.Not - 66)) | (
                    1 << (CPP14Parser.PlusPlus - 66)) | (1 << (CPP14Parser.MinusMinus - 66)) | (
                    1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Identifier - 66)) | (
                    1 << (CPP14Parser.Numberliteral - 66)) | (1 << (CPP14Parser.Characterliteral - 66)) | (
                    1 << (CPP14Parser.Stringliteral - 66)) | (1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                    self.state = 2595
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2593
                        self.assignmentexpression()
                        pass
                    elif token == CPP14Parser.LeftBrace:
                        self.state = 2594
                        self.bracedinitlist()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2597
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2600
                        self.match(CPP14Parser.Comma)
                        self.state = 2603
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 2601
                            self.assignmentexpression()
                            pass
                        elif token == CPP14Parser.LeftBrace:
                            self.state = 2602
                            self.bracedinitlist()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 2606
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2605
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2612
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2615
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.LeftBrace:
                self.state = 2616
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeparameterContext, 0)

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_templateparameter)
        try:
            self.state = 2621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 507, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2619
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2620
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeparameterContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateparameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext, i)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeparameter

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def typeparameter(self):

        localctx = CPP14Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeparameter)
        self._la = 0  # Token type
        try:
            self.state = 2681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Class, CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2623
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 514, self._ctx)
                if la_ == 1:
                    self.state = 2625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2624
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2627
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2630
                        self.match(CPP14Parser.Identifier)

                    self.state = 2633
                    self.match(CPP14Parser.Assign)
                    self.state = 2635
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2634
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2637
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 511, self._ctx)

                    self.state = 2642
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 512, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2639
                            self.attributespecifier()
                        self.state = 2644
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 512, self._ctx)

                    self.state = 2646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2645
                        self.abstractdeclarator()

                    pass

                pass
            elif token == CPP14Parser.Template:
                self.enterOuterAlt(localctx, 2)
                self.state = 2650
                self.match(CPP14Parser.Template)
                self.state = 2651
                self.match(CPP14Parser.Less)
                self.state = 2652
                self.templateparameter()
                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 2653
                    self.match(CPP14Parser.Comma)
                    self.state = 2654
                    self.templateparameter()
                    self.state = 2659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2660
                self.match(CPP14Parser.Greater)
                self.state = 2661
                self.match(CPP14Parser.Class)
                self.state = 2679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 521, self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2662
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2665
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2668
                        self.match(CPP14Parser.Identifier)

                    self.state = 2671
                    self.match(CPP14Parser.Assign)
                    self.state = 2676
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 520, self._ctx)
                    if la_ == 1:
                        self.state = 2672
                        self.nestednamespecifier()
                        self.state = 2674
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2673
                            self.match(CPP14Parser.Template)

                    self.state = 2678
                    self.unqualifiedid()
                    pass

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_templateargument)
        self._la = 0  # Token type
        try:
            self.state = 2705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 528, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2684
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2683
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 523, self._ctx)

                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 524, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2688
                        self.attributespecifier()
                    self.state = 2693
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 524, self._ctx)

                self.state = 2695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 525, self._ctx)
                if la_ == 1:
                    self.state = 2694
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2697
                self.conditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 527, self._ctx)
                if la_ == 1:
                    self.state = 2698
                    self.nestednamespecifier()
                    self.state = 2700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 2699
                        self.match(CPP14Parser.Template)

                self.state = 2704
                self.unqualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2707
            self.match(CPP14Parser.Try)
            self.state = 2708
            self.match(CPP14Parser.LeftBrace)
            self.state = 2712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.AndAnd - 66)) | (
                                                        1 << (CPP14Parser.PlusPlus - 66)) | (
                                                    1 << (CPP14Parser.MinusMinus - 66)) | (
                                                1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2709
                self.statement()
                self.state = 2714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2715
            self.match(CPP14Parser.RightBrace)
            self.state = 2717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2716
                self.handler()
                self.state = 2719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            pass

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2721
            self.match(CPP14Parser.Catch)
            self.state = 2722
            self.match(CPP14Parser.LeftParen)
            self.state = 2747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                         CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.LeftBracket,
                         CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.state = 2726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2723
                    self.attributespecifier()
                    self.state = 2728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2730
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2729
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2732
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 532, self._ctx)

                self.state = 2737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 533, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2734
                        self.attributespecifier()
                    self.state = 2739
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 533, self._ctx)

                self.state = 2744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 535, self._ctx)
                if la_ == 1:
                    self.state = 2740
                    self.declarator()
                    pass

                elif la_ == 2:
                    self.state = 2742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.And - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.Doublecolon - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                        1 << (CPP14Parser.Identifier - 66)))) != 0):
                        self.state = 2741
                        self.abstractdeclarator()

                    pass

                pass
            elif token == CPP14Parser.Ellipsis:
                self.state = 2746
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2749
            self.match(CPP14Parser.RightParen)
            self.state = 2750
            self.match(CPP14Parser.LeftBrace)
            self.state = 2754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (
                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.SignedUnsigned) | (
                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                1 << CPP14Parser.Star))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                                                        (1 << (CPP14Parser.And - 66)) | (
                                                                        1 << (CPP14Parser.Or - 66)) | (
                                                                    1 << (CPP14Parser.Tilde - 66)) | (
                                                                1 << (CPP14Parser.Not - 66)) | (
                                                            1 << (CPP14Parser.AndAnd - 66)) | (
                                                        1 << (CPP14Parser.PlusPlus - 66)) | (
                                                    1 << (CPP14Parser.MinusMinus - 66)) | (
                                                1 << (CPP14Parser.Doublecolon - 66)) | (
                                            1 << (CPP14Parser.Semi - 66)) | (1 << (CPP14Parser.Ellipsis - 66)) | (
                                    1 << (CPP14Parser.Identifier - 66)) | (1 << (CPP14Parser.Numberliteral - 66)) | (
                            1 << (CPP14Parser.Characterliteral - 66)) | (1 << (CPP14Parser.Stringliteral - 66)) | (
                    1 << (CPP14Parser.Userdefinedliteral - 66)) | (
                1 << (CPP14Parser.Userdefinedstringliteral - 66)))) != 0):
                self.state = 2751
                self.statement()
                self.state = 2756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2757
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_exceptionspecification)
        self._la = 0  # Token type
        try:
            self.state = 2811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CPP14Parser.Throw:
                self.enterOuterAlt(localctx, 1)
                self.state = 2759
                self.match(CPP14Parser.Throw)
                self.state = 2760
                self.match(CPP14Parser.LeftParen)
                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (
                    1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Doublecolon or _la == CPP14Parser.Identifier:
                    self.state = 2762
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2761
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2764
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 538, self._ctx)

                    self.state = 2769
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 539, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2766
                            self.attributespecifier()
                        self.state = 2771
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 539, self._ctx)

                    self.state = 2773
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 540, self._ctx)
                    if la_ == 1:
                        self.state = 2772
                        self.abstractdeclarator()

                    self.state = 2776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2775
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2778
                        self.match(CPP14Parser.Comma)
                        self.state = 2780
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2779
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2782
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 542, self._ctx)

                        self.state = 2787
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 543, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2784
                                self.attributespecifier()
                            self.state = 2789
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 543, self._ctx)

                        self.state = 2791
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 544, self._ctx)
                        if la_ == 1:
                            self.state = 2790
                            self.abstractdeclarator()

                        self.state = 2794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2793
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2800
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2803
                self.match(CPP14Parser.RightParen)
                pass
            elif token == CPP14Parser.Noexcept:
                self.enterOuterAlt(localctx, 2)
                self.state = 2804
                self.match(CPP14Parser.Noexcept)
                self.state = 2809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 548, self._ctx)
                if la_ == 1:
                    self.state = 2805
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2806
                    self.conditionalexpression()
                    self.state = 2807
                    self.match(CPP14Parser.RightParen)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            pass

        def exitRule(self, listener: ParseTreeListener):
            pass

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_theoperator)
        self._la = 0  # Token type
        try:
            self.state = 2829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 551, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2813
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Delete) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star) | (1 << CPP14Parser.Div))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Mod - 64)) | (
                    1 << (CPP14Parser.Caret - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (
                    1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                    1 << (CPP14Parser.Assign - 64)) | (1 << (CPP14Parser.Less - 64)) | (
                    1 << (CPP14Parser.Greater - 64)) | (1 << (CPP14Parser.PlusAssign - 64)) | (
                    1 << (CPP14Parser.MinusAssign - 64)) | (1 << (CPP14Parser.StarAssign - 64)) | (
                    1 << (CPP14Parser.DivAssign - 64)) | (1 << (CPP14Parser.ModAssign - 64)) | (
                    1 << (CPP14Parser.XorAssign - 64)) | (1 << (CPP14Parser.AndAssign - 64)) | (
                    1 << (CPP14Parser.OrAssign - 64)) | (1 << (CPP14Parser.LeftShift - 64)) | (
                    1 << (CPP14Parser.LeftShiftAssign - 64)) | (1 << (CPP14Parser.Equal - 64)) | (
                    1 << (CPP14Parser.NotEqual - 64)) | (1 << (CPP14Parser.LessEqual - 64)) | (
                    1 << (CPP14Parser.GreaterEqual - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                    1 << (CPP14Parser.OrOr - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.UnaryCondition - 64)) | (
                    1 << (CPP14Parser.Comma - 64)) | (1 << (CPP14Parser.ArrowStar - 64)) | (
                    1 << (CPP14Parser.Arrow - 64)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2814
                self.match(CPP14Parser.New)
                self.state = 2815
                self.match(CPP14Parser.LeftBracket)
                self.state = 2816
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2817
                self.match(CPP14Parser.Delete)
                self.state = 2818
                self.match(CPP14Parser.LeftBracket)
                self.state = 2819
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2820
                self.match(CPP14Parser.Greater)
                self.state = 2821
                self.match(CPP14Parser.Greater)
                self.state = 2823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 550, self._ctx)
                if la_ == 1:
                    self.state = 2822
                    self.match(CPP14Parser.Assign)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2825
                self.match(CPP14Parser.LeftParen)
                self.state = 2826
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2827
                self.match(CPP14Parser.LeftBracket)
                self.state = 2828
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[10] = self.postfixunaryincdecexpression_sempred
        self._predicates[16] = self.relationalexpression_sempred
        self._predicates[17] = self.equalityexpression_sempred
        self._predicates[43] = self.noptrabstractdeclarator_sempred
        self._predicates[45] = self.noptrabstractpackdeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixunaryincdecexpression_sempred(self, localctx: PostfixunaryincdecexpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 4)

    def noptrabstractpackdeclarator_sempred(self, localctx: NoptrabstractpackdeclaratorContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 2)
