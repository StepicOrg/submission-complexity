# Generated from /home/meanmail/StepikProjects/submission-complexity/complexity/grammars/C.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3w")
        buf.write("\u0504\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\3")
        buf.write("\2\3\2\3\2\6\2\u00c0\n\2\r\2\16\2\u00c1\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\5\2\u00ca\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00de\n")
        buf.write("\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\7\4\u00ed\n\4\f\4\16\4\u00f0\13\4\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\5\5\u00f9\n\5\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0101")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u0106\n\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u010f\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u011a\n\7\3\7\3\7\5\7\u011e\n\7\3\7\7\7\u0121\n\7")
        buf.write("\f\7\16\7\u0124\13\7\3\b\3\b\3\b\5\b\u0129\n\b\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\7\t\u0131\n\t\f\t\16\t\u0134\13\t\3\t")
        buf.write("\7\t\u0137\n\t\f\t\16\t\u013a\13\t\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\7\n\u0142\n\n\f\n\16\n\u0145\13\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\5\13\u015a\n\13\3\f\3\f\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u016b")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\7\16\u0179\n\16\f\16\16\16\u017c\13\16\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0187\n")
        buf.write("\17\f\17\16\17\u018a\13\17\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u0195\n\20\f\20\16\20\u0198\13")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u01a0\n\21\f\21")
        buf.write("\16\21\u01a3\13\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22")
        buf.write("\u01ab\n\22\f\22\16\22\u01ae\13\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u01b6\n\23\f\23\16\23\u01b9\13\23\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\7\24\u01c1\n\24\f\24\16\24\u01c4")
        buf.write("\13\24\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u01cc\n\25\f")
        buf.write("\25\16\25\u01cf\13\25\3\26\3\26\3\26\3\26\3\26\3\26\7")
        buf.write("\26\u01d7\n\26\f\26\16\26\u01da\13\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\7\27\u01e2\n\27\f\27\16\27\u01e5\13\27\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u01ed\n\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u01f5\n\31\3\32\3\32\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\7\33\u01ff\n\33\f\33\16\33\u0202")
        buf.write("\13\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u020e\n\35\3\36\6\36\u0211\n\36\r\36\16\36\u0212")
        buf.write("\3\37\6\37\u0216\n\37\r\37\16\37\u0217\3 \3 \3 \3 \3 ")
        buf.write("\5 \u021f\n \3!\3!\3!\3!\3!\3!\7!\u0227\n!\f!\16!\u022a")
        buf.write("\13!\3\"\3\"\3\"\3\"\3\"\5\"\u0231\n\"\3#\3#\3$\3$\3$")
        buf.write("\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0243\n$\3%\3%\5")
        buf.write("%\u0247\n%\3%\3%\3%\3%\3%\3%\3%\5%\u0250\n%\3&\3&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\7\'\u0259\n\'\f\'\16\'\u025c\13\'\3(")
        buf.write("\3(\5(\u0260\n(\3(\3(\3(\5(\u0265\n(\3)\3)\5)\u0269\n")
        buf.write(")\3)\3)\5)\u026d\n)\5)\u026f\n)\3*\3*\3*\3*\3*\3*\7*\u0277")
        buf.write("\n*\f*\16*\u027a\13*\3+\3+\5+\u027e\n+\3+\3+\5+\u0282")
        buf.write("\n+\3,\3,\5,\u0286\n,\3,\3,\3,\3,\3,\3,\5,\u028e\n,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\5,\u0297\n,\3-\3-\3-\3-\3-\3-\7-\u029f")
        buf.write("\n-\f-\16-\u02a2\13-\3.\3.\3.\3.\3.\5.\u02a9\n.\3/\3/")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\5\62\u02ba\n\62\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u02c2\n\63\3\64\5\64\u02c5\n\64\3\64\3\64\7\64")
        buf.write("\u02c9\n\64\f\64\16\64\u02cc\13\64\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\5\65\u02d7\n\65\3\65\3\65\3")
        buf.write("\65\5\65\u02dc\n\65\3\65\5\65\u02df\n\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\5\65\u02e6\n\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02f5\n\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65")
        buf.write("\u0301\n\65\3\65\7\65\u0304\n\65\f\65\16\65\u0307\13\65")
        buf.write("\3\66\3\66\3\66\6\66\u030c\n\66\r\66\16\66\u030d\3\66")
        buf.write("\3\66\5\66\u0312\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\38\38\38\78\u031e\n8\f8\168\u0321\138\38\58\u0324")
        buf.write("\n8\39\39\39\59\u0329\n9\39\59\u032c\n9\39\59\u032f\n")
        buf.write("9\3:\3:\3:\3:\3:\7:\u0336\n:\f:\16:\u0339\13:\3;\3;\5")
        buf.write(";\u033d\n;\3;\3;\5;\u0341\n;\3;\3;\3;\5;\u0346\n;\3;\3")
        buf.write(";\5;\u034a\n;\3;\5;\u034d\n;\3<\3<\3<\3<\3<\7<\u0354\n")
        buf.write("<\f<\16<\u0357\13<\3=\3=\3=\5=\u035c\n=\3>\3>\3>\3>\3")
        buf.write(">\3>\7>\u0364\n>\f>\16>\u0367\13>\3?\3?\3?\3?\3?\5?\u036e")
        buf.write("\n?\5?\u0370\n?\3@\3@\3@\3@\3@\3@\7@\u0378\n@\f@\16@\u037b")
        buf.write("\13@\3A\3A\5A\u037f\nA\3B\3B\5B\u0383\nB\3B\3B\7B\u0387")
        buf.write("\nB\fB\16B\u038a\13B\5B\u038c\nB\3C\3C\3C\3C\3C\7C\u0393")
        buf.write("\nC\fC\16C\u0396\13C\3C\3C\5C\u039a\nC\3C\5C\u039d\nC")
        buf.write("\3C\3C\3C\3C\5C\u03a3\nC\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\5C\u03b3\nC\3C\3C\7C\u03b7\nC\fC\16C\u03ba")
        buf.write("\13C\5C\u03bc\nC\3C\3C\3C\5C\u03c1\nC\3C\5C\u03c4\nC\3")
        buf.write("C\3C\3C\3C\3C\5C\u03cb\nC\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\5C\u03de\nC\3C\3C\7C\u03e2\nC\f")
        buf.write("C\16C\u03e5\13C\7C\u03e7\nC\fC\16C\u03ea\13C\3D\3D\3E")
        buf.write("\3E\3E\3E\5E\u03f2\nE\3E\3E\5E\u03f6\nE\3F\3F\5F\u03fa")
        buf.write("\nF\3F\3F\3F\3F\3F\5F\u0401\nF\3F\7F\u0404\nF\fF\16F\u0407")
        buf.write("\13F\3G\3G\3G\3H\3H\3H\3H\3H\7H\u0411\nH\fH\16H\u0414")
        buf.write("\13H\3I\3I\3I\3I\3I\3I\5I\u041c\nI\3J\3J\3J\3J\3J\6J\u0423")
        buf.write("\nJ\rJ\16J\u0424\3J\3J\3J\3K\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\7K\u0436\nK\fK\16K\u0439\13K\5K\u043b\nK\3K\3")
        buf.write("K\3K\3K\7K\u0441\nK\fK\16K\u0444\13K\5K\u0446\nK\7K\u0448")
        buf.write("\nK\fK\16K\u044b\13K\3K\3K\5K\u044f\nK\3L\3L\3L\3L\5L")
        buf.write("\u0455\nL\3M\3M\3M\3M\3M\3M\3M\3M\5M\u045f\nM\3N\3N\5")
        buf.write("N\u0463\nN\3N\3N\3O\3O\3O\3O\3O\7O\u046c\nO\fO\16O\u046f")
        buf.write("\13O\3P\3P\5P\u0473\nP\3Q\5Q\u0476\nQ\3Q\3Q\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u0480\nR\3R\3R\3R\3R\3R\3R\5R\u0488\nR\3S\3")
        buf.write("S\3S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\5T\u04a1\nT\3U\3U\3U\5U\u04a6\nU\3U\3U\5U\u04aa")
        buf.write("\nU\3U\5U\u04ad\nU\3U\3U\5U\u04b1\nU\3U\3U\5U\u04b5\n")
        buf.write("U\5U\u04b7\nU\3V\3V\3V\3V\5V\u04bd\nV\3W\3W\3W\3W\3W\3")
        buf.write("W\7W\u04c5\nW\fW\16W\u04c8\13W\3X\3X\3X\3X\3X\3X\3X\5")
        buf.write("X\u04d1\nX\3X\5X\u04d4\nX\3Y\3Y\3Y\5Y\u04d9\nY\3Y\3Y\3")
        buf.write("Z\5Z\u04de\nZ\3Z\3Z\3[\3[\3[\3[\3[\7[\u04e7\n[\f[\16[")
        buf.write("\u04ea\13[\3\\\3\\\3\\\5\\\u04ef\n\\\3]\5]\u04f2\n]\3")
        buf.write("]\3]\5]\u04f6\n]\3]\3]\3^\3^\3^\3^\3^\7^\u04ff\n^\f^\16")
        buf.write("^\u0502\13^\3^\2\37\6\20\22\32\34\36 \"$&(*,\64@LRXhv")
        buf.write("z~\u0084\u008a\u008e\u009c\u00ac\u00b4\u00ba_\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\2\22\3\2hi\4\2JJLL\7\2IIKKMMPPUV\3\2CF\3\2fg\3\2[e\b")
        buf.write("\2\21\21\34\34$$**--<<\n\2\6\b\24\24\31\31\35\35\"#\'")
        buf.write("(/\60\66\67\3\2\6\b\4\2++..\6\2\25\25%%\61\61\65\65\5")
        buf.write("\2\n\13!!::\4\2=>ZZ\3\2=>\4\2\r\r\17\17\4\2\20\20\61\61")
        buf.write("\2\u056b\2\u00dd\3\2\2\2\4\u00df\3\2\2\2\6\u00e6\3\2\2")
        buf.write("\2\b\u00f8\3\2\2\2\n\u0105\3\2\2\2\f\u011d\3\2\2\2\16")
        buf.write("\u0128\3\2\2\2\20\u012a\3\2\2\2\22\u013b\3\2\2\2\24\u0159")
        buf.write("\3\2\2\2\26\u015b\3\2\2\2\30\u016a\3\2\2\2\32\u016c\3")
        buf.write("\2\2\2\34\u017d\3\2\2\2\36\u018b\3\2\2\2 \u0199\3\2\2")
        buf.write("\2\"\u01a4\3\2\2\2$\u01af\3\2\2\2&\u01ba\3\2\2\2(\u01c5")
        buf.write("\3\2\2\2*\u01d0\3\2\2\2,\u01db\3\2\2\2.\u01e6\3\2\2\2")
        buf.write("\60\u01f4\3\2\2\2\62\u01f6\3\2\2\2\64\u01f8\3\2\2\2\66")
        buf.write("\u0203\3\2\2\28\u020d\3\2\2\2:\u0210\3\2\2\2<\u0215\3")
        buf.write("\2\2\2>\u021e\3\2\2\2@\u0220\3\2\2\2B\u0230\3\2\2\2D\u0232")
        buf.write("\3\2\2\2F\u0242\3\2\2\2H\u024f\3\2\2\2J\u0251\3\2\2\2")
        buf.write("L\u0253\3\2\2\2N\u0264\3\2\2\2P\u026e\3\2\2\2R\u0270\3")
        buf.write("\2\2\2T\u0281\3\2\2\2V\u0296\3\2\2\2X\u0298\3\2\2\2Z\u02a8")
        buf.write("\3\2\2\2\\\u02aa\3\2\2\2^\u02ac\3\2\2\2`\u02b1\3\2\2\2")
        buf.write("b\u02b9\3\2\2\2d\u02c1\3\2\2\2f\u02c4\3\2\2\2h\u02d6\3")
        buf.write("\2\2\2j\u0311\3\2\2\2l\u0313\3\2\2\2n\u0323\3\2\2\2p\u032e")
        buf.write("\3\2\2\2r\u0337\3\2\2\2t\u034c\3\2\2\2v\u034e\3\2\2\2")
        buf.write("x\u0358\3\2\2\2z\u035d\3\2\2\2|\u036f\3\2\2\2~\u0371\3")
        buf.write("\2\2\2\u0080\u037c\3\2\2\2\u0082\u038b\3\2\2\2\u0084\u03bb")
        buf.write("\3\2\2\2\u0086\u03eb\3\2\2\2\u0088\u03f5\3\2\2\2\u008a")
        buf.write("\u03f7\3\2\2\2\u008c\u0408\3\2\2\2\u008e\u040b\3\2\2\2")
        buf.write("\u0090\u041b\3\2\2\2\u0092\u041d\3\2\2\2\u0094\u044e\3")
        buf.write("\2\2\2\u0096\u0454\3\2\2\2\u0098\u045e\3\2\2\2\u009a\u0460")
        buf.write("\3\2\2\2\u009c\u0466\3\2\2\2\u009e\u0472\3\2\2\2\u00a0")
        buf.write("\u0475\3\2\2\2\u00a2\u0487\3\2\2\2\u00a4\u0489\3\2\2\2")
        buf.write("\u00a6\u04a0\3\2\2\2\u00a8\u04b6\3\2\2\2\u00aa\u04bc\3")
        buf.write("\2\2\2\u00ac\u04be\3\2\2\2\u00ae\u04d3\3\2\2\2\u00b0\u04d5")
        buf.write("\3\2\2\2\u00b2\u04dd\3\2\2\2\u00b4\u04e1\3\2\2\2\u00b6")
        buf.write("\u04ee\3\2\2\2\u00b8\u04f1\3\2\2\2\u00ba\u04f9\3\2\2\2")
        buf.write("\u00bc\u00de\7k\2\2\u00bd\u00de\7l\2\2\u00be\u00c0\7n")
        buf.write("\2\2\u00bf\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00bf")
        buf.write("\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2\u00de\3\2\2\2\u00c3")
        buf.write("\u00c4\7=\2\2\u00c4\u00c5\5\64\33\2\u00c5\u00c6\7>\2\2")
        buf.write("\u00c6\u00de\3\2\2\2\u00c7\u00de\5\4\3\2\u00c8\u00ca\7")
        buf.write("\3\2\2\u00c9\u00c8\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cb")
        buf.write("\3\2\2\2\u00cb\u00cc\7=\2\2\u00cc\u00cd\5\u009aN\2\u00cd")
        buf.write("\u00ce\7>\2\2\u00ce\u00de\3\2\2\2\u00cf\u00d0\7\4\2\2")
        buf.write("\u00d0\u00d1\7=\2\2\u00d1\u00d2\5\24\13\2\u00d2\u00d3")
        buf.write("\7Z\2\2\u00d3\u00d4\5\u0080A\2\u00d4\u00d5\7>\2\2\u00d5")
        buf.write("\u00de\3\2\2\2\u00d6\u00d7\7\5\2\2\u00d7\u00d8\7=\2\2")
        buf.write("\u00d8\u00d9\5\u0080A\2\u00d9\u00da\7Z\2\2\u00da\u00db")
        buf.write("\5\24\13\2\u00db\u00dc\7>\2\2\u00dc\u00de\3\2\2\2\u00dd")
        buf.write("\u00bc\3\2\2\2\u00dd\u00bd\3\2\2\2\u00dd\u00bf\3\2\2\2")
        buf.write("\u00dd\u00c3\3\2\2\2\u00dd\u00c7\3\2\2\2\u00dd\u00c9\3")
        buf.write("\2\2\2\u00dd\u00cf\3\2\2\2\u00dd\u00d6\3\2\2\2\u00de\3")
        buf.write("\3\2\2\2\u00df\u00e0\78\2\2\u00e0\u00e1\7=\2\2\u00e1\u00e2")
        buf.write("\5\60\31\2\u00e2\u00e3\7Z\2\2\u00e3\u00e4\5\6\4\2\u00e4")
        buf.write("\u00e5\7>\2\2\u00e5\5\3\2\2\2\u00e6\u00e7\b\4\1\2\u00e7")
        buf.write("\u00e8\5\b\5\2\u00e8\u00ee\3\2\2\2\u00e9\u00ea\f\3\2\2")
        buf.write("\u00ea\u00eb\7Z\2\2\u00eb\u00ed\5\b\5\2\u00ec\u00e9\3")
        buf.write("\2\2\2\u00ed\u00f0\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef")
        buf.write("\3\2\2\2\u00ef\7\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f1\u00f2")
        buf.write("\5\u0080A\2\u00f2\u00f3\7X\2\2\u00f3\u00f4\5\60\31\2\u00f4")
        buf.write("\u00f9\3\2\2\2\u00f5\u00f6\7\27\2\2\u00f6\u00f7\7X\2\2")
        buf.write("\u00f7\u00f9\5\60\31\2\u00f8\u00f1\3\2\2\2\u00f8\u00f5")
        buf.write("\3\2\2\2\u00f9\t\3\2\2\2\u00fa\u00fb\7?\2\2\u00fb\u00fc")
        buf.write("\5\64\33\2\u00fc\u00fd\7@\2\2\u00fd\u0106\3\2\2\2\u00fe")
        buf.write("\u0100\7=\2\2\u00ff\u0101\5\22\n\2\u0100\u00ff\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0106\7")
        buf.write(">\2\2\u0103\u0104\t\2\2\2\u0104\u0106\7k\2\2\u0105\u00fa")
        buf.write("\3\2\2\2\u0105\u00fe\3\2\2\2\u0105\u0103\3\2\2\2\u0106")
        buf.write("\13\3\2\2\2\u0107\u011e\5\2\2\2\u0108\u0109\7=\2\2\u0109")
        buf.write("\u010a\5\u0080A\2\u010a\u010b\7>\2\2\u010b\u010c\7A\2")
        buf.write("\2\u010c\u010e\5\u008aF\2\u010d\u010f\7Z\2\2\u010e\u010d")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\3\2\2\2\u0110")
        buf.write("\u0111\7B\2\2\u0111\u011e\3\2\2\2\u0112\u0113\7\3\2\2")
        buf.write("\u0113\u0114\7=\2\2\u0114\u0115\5\u0080A\2\u0115\u0116")
        buf.write("\7>\2\2\u0116\u0117\7A\2\2\u0117\u0119\5\u008aF\2\u0118")
        buf.write("\u011a\7Z\2\2\u0119\u0118\3\2\2\2\u0119\u011a\3\2\2\2")
        buf.write("\u011a\u011b\3\2\2\2\u011b\u011c\7B\2\2\u011c\u011e\3")
        buf.write("\2\2\2\u011d\u0107\3\2\2\2\u011d\u0108\3\2\2\2\u011d\u0112")
        buf.write("\3\2\2\2\u011e\u0122\3\2\2\2\u011f\u0121\5\n\6\2\u0120")
        buf.write("\u011f\3\2\2\2\u0121\u0124\3\2\2\2\u0122\u0120\3\2\2\2")
        buf.write("\u0122\u0123\3\2\2\2\u0123\r\3\2\2\2\u0124\u0122\3\2\2")
        buf.write("\2\u0125\u0126\t\3\2\2\u0126\u0129\5\24\13\2\u0127\u0129")
        buf.write("\5\20\t\2\u0128\u0125\3\2\2\2\u0128\u0127\3\2\2\2\u0129")
        buf.write("\17\3\2\2\2\u012a\u012b\b\t\1\2\u012b\u012c\5\f\7\2\u012c")
        buf.write("\u012d\t\3\2\2\u012d\u0138\3\2\2\2\u012e\u0132\f\3\2\2")
        buf.write("\u012f\u0131\5\n\6\2\u0130\u012f\3\2\2\2\u0131\u0134\3")
        buf.write("\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0135")
        buf.write("\3\2\2\2\u0134\u0132\3\2\2\2\u0135\u0137\t\3\2\2\u0136")
        buf.write("\u012e\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139\21\3\2\2\2\u013a\u0138\3\2")
        buf.write("\2\2\u013b\u013c\b\n\1\2\u013c\u013d\5\60\31\2\u013d\u0143")
        buf.write("\3\2\2\2\u013e\u013f\f\3\2\2\u013f\u0140\7Z\2\2\u0140")
        buf.write("\u0142\5\60\31\2\u0141\u013e\3\2\2\2\u0142\u0145\3\2\2")
        buf.write("\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\23\3")
        buf.write("\2\2\2\u0145\u0143\3\2\2\2\u0146\u015a\5\f\7\2\u0147\u015a")
        buf.write("\5\16\b\2\u0148\u0149\5\26\f\2\u0149\u014a\5\30\r\2\u014a")
        buf.write("\u015a\3\2\2\2\u014b\u014c\7)\2\2\u014c\u015a\5\24\13")
        buf.write("\2\u014d\u014e\7)\2\2\u014e\u014f\7=\2\2\u014f\u0150\5")
        buf.write("\u0080A\2\u0150\u0151\7>\2\2\u0151\u015a\3\2\2\2\u0152")
        buf.write("\u0153\7\64\2\2\u0153\u0154\7=\2\2\u0154\u0155\5\u0080")
        buf.write("A\2\u0155\u0156\7>\2\2\u0156\u015a\3\2\2\2\u0157\u0158")
        buf.write("\7R\2\2\u0158\u015a\7k\2\2\u0159\u0146\3\2\2\2\u0159\u0147")
        buf.write("\3\2\2\2\u0159\u0148\3\2\2\2\u0159\u014b\3\2\2\2\u0159")
        buf.write("\u014d\3\2\2\2\u0159\u0152\3\2\2\2\u0159\u0157\3\2\2\2")
        buf.write("\u015a\25\3\2\2\2\u015b\u015c\t\4\2\2\u015c\27\3\2\2\2")
        buf.write("\u015d\u016b\5\24\13\2\u015e\u015f\7=\2\2\u015f\u0160")
        buf.write("\5\u0080A\2\u0160\u0161\7>\2\2\u0161\u0162\5\30\r\2\u0162")
        buf.write("\u016b\3\2\2\2\u0163\u0164\7\3\2\2\u0164\u0165\7=\2\2")
        buf.write("\u0165\u0166\5\u0080A\2\u0166\u0167\7>\2\2\u0167\u0168")
        buf.write("\5\30\r\2\u0168\u016b\3\2\2\2\u0169\u016b\7m\2\2\u016a")
        buf.write("\u015d\3\2\2\2\u016a\u015e\3\2\2\2\u016a\u0163\3\2\2\2")
        buf.write("\u016a\u0169\3\2\2\2\u016b\31\3\2\2\2\u016c\u016d\b\16")
        buf.write("\1\2\u016d\u016e\5\30\r\2\u016e\u017a\3\2\2\2\u016f\u0170")
        buf.write("\f\5\2\2\u0170\u0171\7M\2\2\u0171\u0179\5\30\r\2\u0172")
        buf.write("\u0173\f\4\2\2\u0173\u0174\7N\2\2\u0174\u0179\5\30\r\2")
        buf.write("\u0175\u0176\f\3\2\2\u0176\u0177\7O\2\2\u0177\u0179\5")
        buf.write("\30\r\2\u0178\u016f\3\2\2\2\u0178\u0172\3\2\2\2\u0178")
        buf.write("\u0175\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017b\33\3\2\2\2\u017c\u017a\3\2")
        buf.write("\2\2\u017d\u017e\b\17\1\2\u017e\u017f\5\32\16\2\u017f")
        buf.write("\u0188\3\2\2\2\u0180\u0181\f\4\2\2\u0181\u0182\7I\2\2")
        buf.write("\u0182\u0187\5\32\16\2\u0183\u0184\f\3\2\2\u0184\u0185")
        buf.write("\7K\2\2\u0185\u0187\5\32\16\2\u0186\u0180\3\2\2\2\u0186")
        buf.write("\u0183\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\35\3\2\2\2\u018a\u0188\3\2")
        buf.write("\2\2\u018b\u018c\b\20\1\2\u018c\u018d\5\34\17\2\u018d")
        buf.write("\u0196\3\2\2\2\u018e\u018f\f\4\2\2\u018f\u0190\7G\2\2")
        buf.write("\u0190\u0195\5\34\17\2\u0191\u0192\f\3\2\2\u0192\u0193")
        buf.write("\7H\2\2\u0193\u0195\5\34\17\2\u0194\u018e\3\2\2\2\u0194")
        buf.write("\u0191\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\37\3\2\2\2\u0198\u0196\3\2")
        buf.write("\2\2\u0199\u019a\b\21\1\2\u019a\u019b\5\36\20\2\u019b")
        buf.write("\u01a1\3\2\2\2\u019c\u019d\f\3\2\2\u019d\u019e\t\5\2\2")
        buf.write("\u019e\u01a0\5\36\20\2\u019f\u019c\3\2\2\2\u01a0\u01a3")
        buf.write("\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2")
        buf.write("!\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a5\b\22\1\2\u01a5")
        buf.write("\u01a6\5 \21\2\u01a6\u01ac\3\2\2\2\u01a7\u01a8\f\3\2\2")
        buf.write("\u01a8\u01a9\t\6\2\2\u01a9\u01ab\5 \21\2\u01aa\u01a7\3")
        buf.write("\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad")
        buf.write("\3\2\2\2\u01ad#\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af\u01b0")
        buf.write("\b\23\1\2\u01b0\u01b1\5\"\22\2\u01b1\u01b7\3\2\2\2\u01b2")
        buf.write("\u01b3\f\3\2\2\u01b3\u01b4\7P\2\2\u01b4\u01b6\5\"\22\2")
        buf.write("\u01b5\u01b2\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3")
        buf.write("\2\2\2\u01b7\u01b8\3\2\2\2\u01b8%\3\2\2\2\u01b9\u01b7")
        buf.write("\3\2\2\2\u01ba\u01bb\b\24\1\2\u01bb\u01bc\5$\23\2\u01bc")
        buf.write("\u01c2\3\2\2\2\u01bd\u01be\f\3\2\2\u01be\u01bf\7T\2\2")
        buf.write("\u01bf\u01c1\5$\23\2\u01c0\u01bd\3\2\2\2\u01c1\u01c4\3")
        buf.write("\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\'")
        buf.write("\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c6\b\25\1\2\u01c6")
        buf.write("\u01c7\5&\24\2\u01c7\u01cd\3\2\2\2\u01c8\u01c9\f\3\2\2")
        buf.write("\u01c9\u01ca\7Q\2\2\u01ca\u01cc\5&\24\2\u01cb\u01c8\3")
        buf.write("\2\2\2\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01cd\u01ce")
        buf.write("\3\2\2\2\u01ce)\3\2\2\2\u01cf\u01cd\3\2\2\2\u01d0\u01d1")
        buf.write("\b\26\1\2\u01d1\u01d2\5(\25\2\u01d2\u01d8\3\2\2\2\u01d3")
        buf.write("\u01d4\f\3\2\2\u01d4\u01d5\7R\2\2\u01d5\u01d7\5(\25\2")
        buf.write("\u01d6\u01d3\3\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6\3")
        buf.write("\2\2\2\u01d8\u01d9\3\2\2\2\u01d9+\3\2\2\2\u01da\u01d8")
        buf.write("\3\2\2\2\u01db\u01dc\b\27\1\2\u01dc\u01dd\5*\26\2\u01dd")
        buf.write("\u01e3\3\2\2\2\u01de\u01df\f\3\2\2\u01df\u01e0\7S\2\2")
        buf.write("\u01e0\u01e2\5*\26\2\u01e1\u01de\3\2\2\2\u01e2\u01e5\3")
        buf.write("\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4-")
        buf.write("\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01ec\5,\27\2\u01e7")
        buf.write("\u01e8\7W\2\2\u01e8\u01e9\5\64\33\2\u01e9\u01ea\7X\2\2")
        buf.write("\u01ea\u01eb\5.\30\2\u01eb\u01ed\3\2\2\2\u01ec\u01e7\3")
        buf.write("\2\2\2\u01ec\u01ed\3\2\2\2\u01ed/\3\2\2\2\u01ee\u01f5")
        buf.write("\5.\30\2\u01ef\u01f0\5\24\13\2\u01f0\u01f1\5\62\32\2\u01f1")
        buf.write("\u01f2\5\60\31\2\u01f2\u01f5\3\2\2\2\u01f3\u01f5\7m\2")
        buf.write("\2\u01f4\u01ee\3\2\2\2\u01f4\u01ef\3\2\2\2\u01f4\u01f3")
        buf.write("\3\2\2\2\u01f5\61\3\2\2\2\u01f6\u01f7\t\7\2\2\u01f7\63")
        buf.write("\3\2\2\2\u01f8\u01f9\b\33\1\2\u01f9\u01fa\5\60\31\2\u01fa")
        buf.write("\u0200\3\2\2\2\u01fb\u01fc\f\3\2\2\u01fc\u01fd\7Z\2\2")
        buf.write("\u01fd\u01ff\5\60\31\2\u01fe\u01fb\3\2\2\2\u01ff\u0202")
        buf.write("\3\2\2\2\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\65\3\2\2\2\u0202\u0200\3\2\2\2\u0203\u0204\5.\30\2\u0204")
        buf.write("\67\3\2\2\2\u0205\u0206\5:\36\2\u0206\u0207\5@!\2\u0207")
        buf.write("\u0208\7Y\2\2\u0208\u020e\3\2\2\2\u0209\u020a\5:\36\2")
        buf.write("\u020a\u020b\7Y\2\2\u020b\u020e\3\2\2\2\u020c\u020e\5")
        buf.write("\u0092J\2\u020d\u0205\3\2\2\2\u020d\u0209\3\2\2\2\u020d")
        buf.write("\u020c\3\2\2\2\u020e9\3\2\2\2\u020f\u0211\5> \2\u0210")
        buf.write("\u020f\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0210\3\2\2\2")
        buf.write("\u0212\u0213\3\2\2\2\u0213;\3\2\2\2\u0214\u0216\5> \2")
        buf.write("\u0215\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0215\3")
        buf.write("\2\2\2\u0217\u0218\3\2\2\2\u0218=\3\2\2\2\u0219\u021f")
        buf.write("\5D#\2\u021a\u021f\5F$\2\u021b\u021f\5`\61\2\u021c\u021f")
        buf.write("\5b\62\2\u021d\u021f\5d\63\2\u021e\u0219\3\2\2\2\u021e")
        buf.write("\u021a\3\2\2\2\u021e\u021b\3\2\2\2\u021e\u021c\3\2\2\2")
        buf.write("\u021e\u021d\3\2\2\2\u021f?\3\2\2\2\u0220\u0221\b!\1\2")
        buf.write("\u0221\u0222\5B\"\2\u0222\u0228\3\2\2\2\u0223\u0224\f")
        buf.write("\3\2\2\u0224\u0225\7Z\2\2\u0225\u0227\5B\"\2\u0226\u0223")
        buf.write("\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229A\3\2\2\2\u022a\u0228\3\2\2\2\u022b")
        buf.write("\u0231\5f\64\2\u022c\u022d\5f\64\2\u022d\u022e\7[\2\2")
        buf.write("\u022e\u022f\5\u0088E\2\u022f\u0231\3\2\2\2\u0230\u022b")
        buf.write("\3\2\2\2\u0230\u022c\3\2\2\2\u0231C\3\2\2\2\u0232\u0233")
        buf.write("\t\b\2\2\u0233E\3\2\2\2\u0234\u0243\t\t\2\2\u0235\u0236")
        buf.write("\7\3\2\2\u0236\u0237\7=\2\2\u0237\u0238\t\n\2\2\u0238")
        buf.write("\u0243\7>\2\2\u0239\u0243\5^\60\2\u023a\u0243\5H%\2\u023b")
        buf.write("\u0243\5V,\2\u023c\u0243\5\u0086D\2\u023d\u023e\7\t\2")
        buf.write("\2\u023e\u023f\7=\2\2\u023f\u0240\5\66\34\2\u0240\u0241")
        buf.write("\7>\2\2\u0241\u0243\3\2\2\2\u0242\u0234\3\2\2\2\u0242")
        buf.write("\u0235\3\2\2\2\u0242\u0239\3\2\2\2\u0242\u023a\3\2\2\2")
        buf.write("\u0242\u023b\3\2\2\2\u0242\u023c\3\2\2\2\u0242\u023d\3")
        buf.write("\2\2\2\u0243G\3\2\2\2\u0244\u0246\5J&\2\u0245\u0247\7")
        buf.write("k\2\2\u0246\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248")
        buf.write("\3\2\2\2\u0248\u0249\7A\2\2\u0249\u024a\5L\'\2\u024a\u024b")
        buf.write("\7B\2\2\u024b\u0250\3\2\2\2\u024c\u024d\5J&\2\u024d\u024e")
        buf.write("\7k\2\2\u024e\u0250\3\2\2\2\u024f\u0244\3\2\2\2\u024f")
        buf.write("\u024c\3\2\2\2\u0250I\3\2\2\2\u0251\u0252\t\13\2\2\u0252")
        buf.write("K\3\2\2\2\u0253\u0254\b\'\1\2\u0254\u0255\5N(\2\u0255")
        buf.write("\u025a\3\2\2\2\u0256\u0257\f\3\2\2\u0257\u0259\5N(\2\u0258")
        buf.write("\u0256\3\2\2\2\u0259\u025c\3\2\2\2\u025a\u0258\3\2\2\2")
        buf.write("\u025a\u025b\3\2\2\2\u025bM\3\2\2\2\u025c\u025a\3\2\2")
        buf.write("\2\u025d\u025f\5P)\2\u025e\u0260\5R*\2\u025f\u025e\3\2")
        buf.write("\2\2\u025f\u0260\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262")
        buf.write("\7Y\2\2\u0262\u0265\3\2\2\2\u0263\u0265\5\u0092J\2\u0264")
        buf.write("\u025d\3\2\2\2\u0264\u0263\3\2\2\2\u0265O\3\2\2\2\u0266")
        buf.write("\u0268\5F$\2\u0267\u0269\5P)\2\u0268\u0267\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026f\3\2\2\2\u026a\u026c\5`\61\2")
        buf.write("\u026b\u026d\5P)\2\u026c\u026b\3\2\2\2\u026c\u026d\3\2")
        buf.write("\2\2\u026d\u026f\3\2\2\2\u026e\u0266\3\2\2\2\u026e\u026a")
        buf.write("\3\2\2\2\u026fQ\3\2\2\2\u0270\u0271\b*\1\2\u0271\u0272")
        buf.write("\5T+\2\u0272\u0278\3\2\2\2\u0273\u0274\f\3\2\2\u0274\u0275")
        buf.write("\7Z\2\2\u0275\u0277\5T+\2\u0276\u0273\3\2\2\2\u0277\u027a")
        buf.write("\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279")
        buf.write("S\3\2\2\2\u027a\u0278\3\2\2\2\u027b\u0282\5f\64\2\u027c")
        buf.write("\u027e\5f\64\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2")
        buf.write("\u027e\u027f\3\2\2\2\u027f\u0280\7X\2\2\u0280\u0282\5")
        buf.write("\66\34\2\u0281\u027b\3\2\2\2\u0281\u027d\3\2\2\2\u0282")
        buf.write("U\3\2\2\2\u0283\u0285\7\33\2\2\u0284\u0286\7k\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2")
        buf.write("\u0287\u0288\7A\2\2\u0288\u0289\5X-\2\u0289\u028a\7B\2")
        buf.write("\2\u028a\u0297\3\2\2\2\u028b\u028d\7\33\2\2\u028c\u028e")
        buf.write("\7k\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u0290\7A\2\2\u0290\u0291\5X-\2\u0291")
        buf.write("\u0292\7Z\2\2\u0292\u0293\7B\2\2\u0293\u0297\3\2\2\2\u0294")
        buf.write("\u0295\7\33\2\2\u0295\u0297\7k\2\2\u0296\u0283\3\2\2\2")
        buf.write("\u0296\u028b\3\2\2\2\u0296\u0294\3\2\2\2\u0297W\3\2\2")
        buf.write("\2\u0298\u0299\b-\1\2\u0299\u029a\5Z.\2\u029a\u02a0\3")
        buf.write("\2\2\2\u029b\u029c\f\3\2\2\u029c\u029d\7Z\2\2\u029d\u029f")
        buf.write("\5Z.\2\u029e\u029b\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0\u029e")
        buf.write("\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1Y\3\2\2\2\u02a2\u02a0")
        buf.write("\3\2\2\2\u02a3\u02a9\5\\/\2\u02a4\u02a5\5\\/\2\u02a5\u02a6")
        buf.write("\7[\2\2\u02a6\u02a7\5\66\34\2\u02a7\u02a9\3\2\2\2\u02a8")
        buf.write("\u02a3\3\2\2\2\u02a8\u02a4\3\2\2\2\u02a9[\3\2\2\2\u02aa")
        buf.write("\u02ab\7k\2\2\u02ab]\3\2\2\2\u02ac\u02ad\7\65\2\2\u02ad")
        buf.write("\u02ae\7=\2\2\u02ae\u02af\5\u0080A\2\u02af\u02b0\7>\2")
        buf.write("\2\u02b0_\3\2\2\2\u02b1\u02b2\t\f\2\2\u02b2a\3\2\2\2\u02b3")
        buf.write("\u02ba\t\r\2\2\u02b4\u02ba\5l\67\2\u02b5\u02b6\7\f\2\2")
        buf.write("\u02b6\u02b7\7=\2\2\u02b7\u02b8\7k\2\2\u02b8\u02ba\7>")
        buf.write("\2\2\u02b9\u02b3\3\2\2\2\u02b9\u02b4\3\2\2\2\u02b9\u02b5")
        buf.write("\3\2\2\2\u02bac\3\2\2\2\u02bb\u02bc\7\63\2\2\u02bc\u02bd")
        buf.write("\7=\2\2\u02bd\u02c2\5\u0080A\2\u02be\u02bf\5\66\34\2\u02bf")
        buf.write("\u02c0\7>\2\2\u02c0\u02c2\3\2\2\2\u02c1\u02bb\3\2\2\2")
        buf.write("\u02c1\u02be\3\2\2\2\u02c2e\3\2\2\2\u02c3\u02c5\5t;\2")
        buf.write("\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c6\3")
        buf.write("\2\2\2\u02c6\u02ca\5h\65\2\u02c7\u02c9\5j\66\2\u02c8\u02c7")
        buf.write("\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca")
        buf.write("\u02cb\3\2\2\2\u02cbg\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cd")
        buf.write("\u02ce\b\65\1\2\u02ce\u02d7\7k\2\2\u02cf\u02d0\7=\2\2")
        buf.write("\u02d0\u02d1\5f\64\2\u02d1\u02d2\7>\2\2\u02d2\u02d7\3")
        buf.write("\2\2\2\u02d3\u02d4\7k\2\2\u02d4\u02d5\7X\2\2\u02d5\u02d7")
        buf.write("\7m\2\2\u02d6\u02cd\3\2\2\2\u02d6\u02cf\3\2\2\2\u02d6")
        buf.write("\u02d3\3\2\2\2\u02d7\u0305\3\2\2\2\u02d8\u02d9\f\t\2\2")
        buf.write("\u02d9\u02db\7?\2\2\u02da\u02dc\5v<\2\u02db\u02da\3\2")
        buf.write("\2\2\u02db\u02dc\3\2\2\2\u02dc\u02de\3\2\2\2\u02dd\u02df")
        buf.write("\5\60\31\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02df")
        buf.write("\u02e0\3\2\2\2\u02e0\u0304\7@\2\2\u02e1\u02e2\f\b\2\2")
        buf.write("\u02e2\u02e3\7?\2\2\u02e3\u02e5\7*\2\2\u02e4\u02e6\5v")
        buf.write("<\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\5\60\31\2\u02e8\u02e9\7@\2\2\u02e9")
        buf.write("\u0304\3\2\2\2\u02ea\u02eb\f\7\2\2\u02eb\u02ec\7?\2\2")
        buf.write("\u02ec\u02ed\5v<\2\u02ed\u02ee\7*\2\2\u02ee\u02ef\5\60")
        buf.write("\31\2\u02ef\u02f0\7@\2\2\u02f0\u0304\3\2\2\2\u02f1\u02f2")
        buf.write("\f\6\2\2\u02f2\u02f4\7?\2\2\u02f3\u02f5\5v<\2\u02f4\u02f3")
        buf.write("\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02f7\7M\2\2\u02f7\u0304\7@\2\2\u02f8\u02f9\f\5\2\2\u02f9")
        buf.write("\u02fa\7=\2\2\u02fa\u02fb\5x=\2\u02fb\u02fc\7>\2\2\u02fc")
        buf.write("\u0304\3\2\2\2\u02fd\u02fe\f\4\2\2\u02fe\u0300\7=\2\2")
        buf.write("\u02ff\u0301\5~@\2\u0300\u02ff\3\2\2\2\u0300\u0301\3\2")
        buf.write("\2\2\u0301\u0302\3\2\2\2\u0302\u0304\7>\2\2\u0303\u02d8")
        buf.write("\3\2\2\2\u0303\u02e1\3\2\2\2\u0303\u02ea\3\2\2\2\u0303")
        buf.write("\u02f1\3\2\2\2\u0303\u02f8\3\2\2\2\u0303\u02fd\3\2\2\2")
        buf.write("\u0304\u0307\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3")
        buf.write("\2\2\2\u0306i\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309")
        buf.write("\7\r\2\2\u0309\u030b\7=\2\2\u030a\u030c\7n\2\2\u030b\u030a")
        buf.write("\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030b\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0312\7>\2\2")
        buf.write("\u0310\u0312\5l\67\2\u0311\u0308\3\2\2\2\u0311\u0310\3")
        buf.write("\2\2\2\u0312k\3\2\2\2\u0313\u0314\7\16\2\2\u0314\u0315")
        buf.write("\7=\2\2\u0315\u0316\7=\2\2\u0316\u0317\5n8\2\u0317\u0318")
        buf.write("\7>\2\2\u0318\u0319\7>\2\2\u0319m\3\2\2\2\u031a\u031f")
        buf.write("\5p9\2\u031b\u031c\7Z\2\2\u031c\u031e\5p9\2\u031d\u031b")
        buf.write("\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2\u031f")
        buf.write("\u0320\3\2\2\2\u0320\u0324\3\2\2\2\u0321\u031f\3\2\2\2")
        buf.write("\u0322\u0324\3\2\2\2\u0323\u031a\3\2\2\2\u0323\u0322\3")
        buf.write("\2\2\2\u0324o\3\2\2\2\u0325\u032b\n\16\2\2\u0326\u0328")
        buf.write("\7=\2\2\u0327\u0329\5\22\n\2\u0328\u0327\3\2\2\2\u0328")
        buf.write("\u0329\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\7>\2\2")
        buf.write("\u032b\u0326\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032f\3")
        buf.write("\2\2\2\u032d\u032f\3\2\2\2\u032e\u0325\3\2\2\2\u032e\u032d")
        buf.write("\3\2\2\2\u032fq\3\2\2\2\u0330\u0336\n\17\2\2\u0331\u0332")
        buf.write("\7=\2\2\u0332\u0333\5r:\2\u0333\u0334\7>\2\2\u0334\u0336")
        buf.write("\3\2\2\2\u0335\u0330\3\2\2\2\u0335\u0331\3\2\2\2\u0336")
        buf.write("\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2")
        buf.write("\u0338s\3\2\2\2\u0339\u0337\3\2\2\2\u033a\u033c\7M\2\2")
        buf.write("\u033b\u033d\5v<\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2")
        buf.write("\2\2\u033d\u034d\3\2\2\2\u033e\u0340\7M\2\2\u033f\u0341")
        buf.write("\5v<\2\u0340\u033f\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342")
        buf.write("\3\2\2\2\u0342\u034d\5t;\2\u0343\u0345\7T\2\2\u0344\u0346")
        buf.write("\5v<\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u034d")
        buf.write("\3\2\2\2\u0347\u0349\7T\2\2\u0348\u034a\5v<\2\u0349\u0348")
        buf.write("\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034d\5t;\2\u034c\u033a\3\2\2\2\u034c\u033e\3\2\2\2\u034c")
        buf.write("\u0343\3\2\2\2\u034c\u0347\3\2\2\2\u034du\3\2\2\2\u034e")
        buf.write("\u034f\b<\1\2\u034f\u0350\5`\61\2\u0350\u0355\3\2\2\2")
        buf.write("\u0351\u0352\f\3\2\2\u0352\u0354\5`\61\2\u0353\u0351\3")
        buf.write("\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2\u0355\u0356")
        buf.write("\3\2\2\2\u0356w\3\2\2\2\u0357\u0355\3\2\2\2\u0358\u035b")
        buf.write("\5z>\2\u0359\u035a\7Z\2\2\u035a\u035c\7j\2\2\u035b\u0359")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035cy\3\2\2\2\u035d\u035e")
        buf.write("\b>\1\2\u035e\u035f\5|?\2\u035f\u0365\3\2\2\2\u0360\u0361")
        buf.write("\f\3\2\2\u0361\u0362\7Z\2\2\u0362\u0364\5|?\2\u0363\u0360")
        buf.write("\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366{\3\2\2\2\u0367\u0365\3\2\2\2\u0368")
        buf.write("\u0369\5:\36\2\u0369\u036a\5f\64\2\u036a\u0370\3\2\2\2")
        buf.write("\u036b\u036d\5<\37\2\u036c\u036e\5\u0082B\2\u036d\u036c")
        buf.write("\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u0370\3\2\2\2\u036f")
        buf.write("\u0368\3\2\2\2\u036f\u036b\3\2\2\2\u0370}\3\2\2\2\u0371")
        buf.write("\u0372\b@\1\2\u0372\u0373\7k\2\2\u0373\u0379\3\2\2\2\u0374")
        buf.write("\u0375\f\3\2\2\u0375\u0376\7Z\2\2\u0376\u0378\7k\2\2\u0377")
        buf.write("\u0374\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2")
        buf.write("\u0379\u037a\3\2\2\2\u037a\177\3\2\2\2\u037b\u0379\3\2")
        buf.write("\2\2\u037c\u037e\5P)\2\u037d\u037f\5\u0082B\2\u037e\u037d")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0081\3\2\2\2\u0380")
        buf.write("\u038c\5t;\2\u0381\u0383\5t;\2\u0382\u0381\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0388\5\u0084")
        buf.write("C\2\u0385\u0387\5j\66\2\u0386\u0385\3\2\2\2\u0387\u038a")
        buf.write("\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u0380\3\2\2\2")
        buf.write("\u038b\u0382\3\2\2\2\u038c\u0083\3\2\2\2\u038d\u038e\b")
        buf.write("C\1\2\u038e\u038f\7=\2\2\u038f\u0390\5\u0082B\2\u0390")
        buf.write("\u0394\7>\2\2\u0391\u0393\5j\66\2\u0392\u0391\3\2\2\2")
        buf.write("\u0393\u0396\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3")
        buf.write("\2\2\2\u0395\u03bc\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u0399")
        buf.write("\7?\2\2\u0398\u039a\5v<\2\u0399\u0398\3\2\2\2\u0399\u039a")
        buf.write("\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u039d\5\60\31\2\u039c")
        buf.write("\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e\3\2\2\2")
        buf.write("\u039e\u03bc\7@\2\2\u039f\u03a0\7?\2\2\u03a0\u03a2\7*")
        buf.write("\2\2\u03a1\u03a3\5v<\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3")
        buf.write("\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\5\60\31\2\u03a5")
        buf.write("\u03a6\7@\2\2\u03a6\u03bc\3\2\2\2\u03a7\u03a8\7?\2\2\u03a8")
        buf.write("\u03a9\5v<\2\u03a9\u03aa\7*\2\2\u03aa\u03ab\5\60\31\2")
        buf.write("\u03ab\u03ac\7@\2\2\u03ac\u03bc\3\2\2\2\u03ad\u03ae\7")
        buf.write("?\2\2\u03ae\u03af\7M\2\2\u03af\u03bc\7@\2\2\u03b0\u03b2")
        buf.write("\7=\2\2\u03b1\u03b3\5x=\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3")
        buf.write("\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b8\7>\2\2\u03b5")
        buf.write("\u03b7\5j\66\2\u03b6\u03b5\3\2\2\2\u03b7\u03ba\3\2\2\2")
        buf.write("\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bc\3")
        buf.write("\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u038d\3\2\2\2\u03bb\u0397")
        buf.write("\3\2\2\2\u03bb\u039f\3\2\2\2\u03bb\u03a7\3\2\2\2\u03bb")
        buf.write("\u03ad\3\2\2\2\u03bb\u03b0\3\2\2\2\u03bc\u03e8\3\2\2\2")
        buf.write("\u03bd\u03be\f\7\2\2\u03be\u03c0\7?\2\2\u03bf\u03c1\5")
        buf.write("v<\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3")
        buf.write("\3\2\2\2\u03c2\u03c4\5\60\31\2\u03c3\u03c2\3\2\2\2\u03c3")
        buf.write("\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03e7\7@\2\2")
        buf.write("\u03c6\u03c7\f\6\2\2\u03c7\u03c8\7?\2\2\u03c8\u03ca\7")
        buf.write("*\2\2\u03c9\u03cb\5v<\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\5\60\31\2\u03cd")
        buf.write("\u03ce\7@\2\2\u03ce\u03e7\3\2\2\2\u03cf\u03d0\f\5\2\2")
        buf.write("\u03d0\u03d1\7?\2\2\u03d1\u03d2\5v<\2\u03d2\u03d3\7*\2")
        buf.write("\2\u03d3\u03d4\5\60\31\2\u03d4\u03d5\7@\2\2\u03d5\u03e7")
        buf.write("\3\2\2\2\u03d6\u03d7\f\4\2\2\u03d7\u03d8\7?\2\2\u03d8")
        buf.write("\u03d9\7M\2\2\u03d9\u03e7\7@\2\2\u03da\u03db\f\3\2\2\u03db")
        buf.write("\u03dd\7=\2\2\u03dc\u03de\5x=\2\u03dd\u03dc\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e3\7>\2\2")
        buf.write("\u03e0\u03e2\5j\66\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5\3")
        buf.write("\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e7")
        buf.write("\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03bd\3\2\2\2\u03e6")
        buf.write("\u03c6\3\2\2\2\u03e6\u03cf\3\2\2\2\u03e6\u03d6\3\2\2\2")
        buf.write("\u03e6\u03da\3\2\2\2\u03e7\u03ea\3\2\2\2\u03e8\u03e6\3")
        buf.write("\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u0085\3\2\2\2\u03ea\u03e8")
        buf.write("\3\2\2\2\u03eb\u03ec\7k\2\2\u03ec\u0087\3\2\2\2\u03ed")
        buf.write("\u03f6\5\60\31\2\u03ee\u03ef\7A\2\2\u03ef\u03f1\5\u008a")
        buf.write("F\2\u03f0\u03f2\7Z\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\7B\2\2\u03f4")
        buf.write("\u03f6\3\2\2\2\u03f5\u03ed\3\2\2\2\u03f5\u03ee\3\2\2\2")
        buf.write("\u03f6\u0089\3\2\2\2\u03f7\u03f9\bF\1\2\u03f8\u03fa\5")
        buf.write("\u008cG\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fc\5\u0088E\2\u03fc\u0405\3\2")
        buf.write("\2\2\u03fd\u03fe\f\3\2\2\u03fe\u0400\7Z\2\2\u03ff\u0401")
        buf.write("\5\u008cG\2\u0400\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401")
        buf.write("\u0402\3\2\2\2\u0402\u0404\5\u0088E\2\u0403\u03fd\3\2")
        buf.write("\2\2\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406")
        buf.write("\3\2\2\2\u0406\u008b\3\2\2\2\u0407\u0405\3\2\2\2\u0408")
        buf.write("\u0409\5\u008eH\2\u0409\u040a\7[\2\2\u040a\u008d\3\2\2")
        buf.write("\2\u040b\u040c\bH\1\2\u040c\u040d\5\u0090I\2\u040d\u0412")
        buf.write("\3\2\2\2\u040e\u040f\f\3\2\2\u040f\u0411\5\u0090I\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0412\u0413\3\2\2\2\u0413\u008f\3\2\2\2\u0414\u0412\3")
        buf.write("\2\2\2\u0415\u0416\7?\2\2\u0416\u0417\5\66\34\2\u0417")
        buf.write("\u0418\7@\2\2\u0418\u041c\3\2\2\2\u0419\u041a\7i\2\2\u041a")
        buf.write("\u041c\7k\2\2\u041b\u0415\3\2\2\2\u041b\u0419\3\2\2\2")
        buf.write("\u041c\u0091\3\2\2\2\u041d\u041e\7;\2\2\u041e\u041f\7")
        buf.write("=\2\2\u041f\u0420\5\66\34\2\u0420\u0422\7Z\2\2\u0421\u0423")
        buf.write("\7n\2\2\u0422\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424")
        buf.write("\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0427\7>\2\2\u0427\u0428\7Y\2\2\u0428\u0093\3\2")
        buf.write("\2\2\u0429\u044f\5\u0096L\2\u042a\u044f\5\u009aN\2\u042b")
        buf.write("\u044f\5\u00a0Q\2\u042c\u044f\5\u00a2R\2\u042d\u044f\5")
        buf.write("\u00a6T\2\u042e\u044f\5\u00aeX\2\u042f\u0430\t\20\2\2")
        buf.write("\u0430\u0431\t\21\2\2\u0431\u043a\7=\2\2\u0432\u0437\5")
        buf.write(",\27\2\u0433\u0434\7Z\2\2\u0434\u0436\5,\27\2\u0435\u0433")
        buf.write("\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437")
        buf.write("\u0438\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2")
        buf.write("\u043a\u0432\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u0449\3")
        buf.write("\2\2\2\u043c\u0445\7X\2\2\u043d\u0442\5,\27\2\u043e\u043f")
        buf.write("\7Z\2\2\u043f\u0441\5,\27\2\u0440\u043e\3\2\2\2\u0441")
        buf.write("\u0444\3\2\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2")
        buf.write("\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0445\u043d\3")
        buf.write("\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448\3\2\2\2\u0447\u043c")
        buf.write("\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449")
        buf.write("\u044a\3\2\2\2\u044a\u044c\3\2\2\2\u044b\u0449\3\2\2\2")
        buf.write("\u044c\u044d\7>\2\2\u044d\u044f\7Y\2\2\u044e\u0429\3\2")
        buf.write("\2\2\u044e\u042a\3\2\2\2\u044e\u042b\3\2\2\2\u044e\u042c")
        buf.write("\3\2\2\2\u044e\u042d\3\2\2\2\u044e\u042e\3\2\2\2\u044e")
        buf.write("\u042f\3\2\2\2\u044f\u0095\3\2\2\2\u0450\u0451\7k\2\2")
        buf.write("\u0451\u0452\7X\2\2\u0452\u0455\5\u0094K\2\u0453\u0455")
        buf.write("\5\u0098M\2\u0454\u0450\3\2\2\2\u0454\u0453\3\2\2\2\u0455")
        buf.write("\u0097\3\2\2\2\u0456\u0457\7\23\2\2\u0457\u0458\5\66\34")
        buf.write("\2\u0458\u0459\7X\2\2\u0459\u045a\5\u0094K\2\u045a\u045f")
        buf.write("\3\2\2\2\u045b\u045c\7\27\2\2\u045c\u045d\7X\2\2\u045d")
        buf.write("\u045f\5\u0094K\2\u045e\u0456\3\2\2\2\u045e\u045b\3\2")
        buf.write("\2\2\u045f\u0099\3\2\2\2\u0460\u0462\7A\2\2\u0461\u0463")
        buf.write("\5\u009cO\2\u0462\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u0465\7B\2\2\u0465\u009b\3\2\2\2")
        buf.write("\u0466\u0467\bO\1\2\u0467\u0468\5\u009eP\2\u0468\u046d")
        buf.write("\3\2\2\2\u0469\u046a\f\3\2\2\u046a\u046c\5\u009eP\2\u046b")
        buf.write("\u0469\3\2\2\2\u046c\u046f\3\2\2\2\u046d\u046b\3\2\2\2")
        buf.write("\u046d\u046e\3\2\2\2\u046e\u009d\3\2\2\2\u046f\u046d\3")
        buf.write("\2\2\2\u0470\u0473\58\35\2\u0471\u0473\5\u0094K\2\u0472")
        buf.write("\u0470\3\2\2\2\u0472\u0471\3\2\2\2\u0473\u009f\3\2\2\2")
        buf.write("\u0474\u0476\5\64\33\2\u0475\u0474\3\2\2\2\u0475\u0476")
        buf.write("\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\7Y\2\2\u0478")
        buf.write("\u00a1\3\2\2\2\u0479\u047a\7 \2\2\u047a\u047b\7=\2\2\u047b")
        buf.write("\u047c\5\64\33\2\u047c\u047d\7>\2\2\u047d\u047f\5\u0094")
        buf.write("K\2\u047e\u0480\5\u00a4S\2\u047f\u047e\3\2\2\2\u047f\u0480")
        buf.write("\3\2\2\2\u0480\u0488\3\2\2\2\u0481\u0482\7,\2\2\u0482")
        buf.write("\u0483\7=\2\2\u0483\u0484\5\64\33\2\u0484\u0485\7>\2\2")
        buf.write("\u0485\u0486\5\u0094K\2\u0486\u0488\3\2\2\2\u0487\u0479")
        buf.write("\3\2\2\2\u0487\u0481\3\2\2\2\u0488\u00a3\3\2\2\2\u0489")
        buf.write("\u048a\7\32\2\2\u048a\u048b\5\u0094K\2\u048b\u00a5\3\2")
        buf.write("\2\2\u048c\u048d\7\62\2\2\u048d\u048e\7=\2\2\u048e\u048f")
        buf.write("\5\64\33\2\u048f\u0490\7>\2\2\u0490\u0491\5\u0094K\2\u0491")
        buf.write("\u04a1\3\2\2\2\u0492\u0493\7\30\2\2\u0493\u0494\5\u0094")
        buf.write("K\2\u0494\u0495\7\62\2\2\u0495\u0496\7=\2\2\u0496\u0497")
        buf.write("\5\64\33\2\u0497\u0498\7>\2\2\u0498\u0499\7Y\2\2\u0499")
        buf.write("\u04a1\3\2\2\2\u049a\u049b\7\36\2\2\u049b\u049c\7=\2\2")
        buf.write("\u049c\u049d\5\u00a8U\2\u049d\u049e\7>\2\2\u049e\u049f")
        buf.write("\5\u0094K\2\u049f\u04a1\3\2\2\2\u04a0\u048c\3\2\2\2\u04a0")
        buf.write("\u0492\3\2\2\2\u04a0\u049a\3\2\2\2\u04a1\u00a7\3\2\2\2")
        buf.write("\u04a2\u04a3\5\u00aaV\2\u04a3\u04a5\7Y\2\2\u04a4\u04a6")
        buf.write("\5\u00acW\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6")
        buf.write("\u04a7\3\2\2\2\u04a7\u04a9\7Y\2\2\u04a8\u04aa\5\u00ac")
        buf.write("W\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04b7")
        buf.write("\3\2\2\2\u04ab\u04ad\5\64\33\2\u04ac\u04ab\3\2\2\2\u04ac")
        buf.write("\u04ad\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0\7Y\2\2")
        buf.write("\u04af\u04b1\5\u00acW\2\u04b0\u04af\3\2\2\2\u04b0\u04b1")
        buf.write("\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\7Y\2\2\u04b3")
        buf.write("\u04b5\5\u00acW\2\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2")
        buf.write("\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04a2\3\2\2\2\u04b6\u04ac")
        buf.write("\3\2\2\2\u04b7\u00a9\3\2\2\2\u04b8\u04b9\5:\36\2\u04b9")
        buf.write("\u04ba\5@!\2\u04ba\u04bd\3\2\2\2\u04bb\u04bd\5:\36\2\u04bc")
        buf.write("\u04b8\3\2\2\2\u04bc\u04bb\3\2\2\2\u04bd\u00ab\3\2\2\2")
        buf.write("\u04be\u04bf\bW\1\2\u04bf\u04c0\5\60\31\2\u04c0\u04c6")
        buf.write("\3\2\2\2\u04c1\u04c2\f\3\2\2\u04c2\u04c3\7Z\2\2\u04c3")
        buf.write("\u04c5\5\60\31\2\u04c4\u04c1\3\2\2\2\u04c5\u04c8\3\2\2")
        buf.write("\2\u04c6\u04c4\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u00ad")
        buf.write("\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c9\u04d4\5\u00b0Y\2\u04ca")
        buf.write("\u04cb\7\26\2\2\u04cb\u04d4\7Y\2\2\u04cc\u04cd\7\22\2")
        buf.write("\2\u04cd\u04d4\7Y\2\2\u04ce\u04d0\7&\2\2\u04cf\u04d1\5")
        buf.write("\64\33\2\u04d0\u04cf\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d4\7Y\2\2\u04d3\u04c9\3\2\2\2")
        buf.write("\u04d3\u04ca\3\2\2\2\u04d3\u04cc\3\2\2\2\u04d3\u04ce\3")
        buf.write("\2\2\2\u04d4\u00af\3\2\2\2\u04d5\u04d8\7\37\2\2\u04d6")
        buf.write("\u04d9\7k\2\2\u04d7\u04d9\5\24\13\2\u04d8\u04d6\3\2\2")
        buf.write("\2\u04d8\u04d7\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db")
        buf.write("\7Y\2\2\u04db\u00b1\3\2\2\2\u04dc\u04de\5\u00b4[\2\u04dd")
        buf.write("\u04dc\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\3\2\2\2")
        buf.write("\u04df\u04e0\7\2\2\3\u04e0\u00b3\3\2\2\2\u04e1\u04e2\b")
        buf.write("[\1\2\u04e2\u04e3\5\u00b6\\\2\u04e3\u04e8\3\2\2\2\u04e4")
        buf.write("\u04e5\f\3\2\2\u04e5\u04e7\5\u00b6\\\2\u04e6\u04e4\3\2")
        buf.write("\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9")
        buf.write("\3\2\2\2\u04e9\u00b5\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb")
        buf.write("\u04ef\5\u00b8]\2\u04ec\u04ef\58\35\2\u04ed\u04ef\7Y\2")
        buf.write("\2\u04ee\u04eb\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ee\u04ed")
        buf.write("\3\2\2\2\u04ef\u00b7\3\2\2\2\u04f0\u04f2\5:\36\2\u04f1")
        buf.write("\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\3\2\2\2")
        buf.write("\u04f3\u04f5\5f\64\2\u04f4\u04f6\5\u00ba^\2\u04f5\u04f4")
        buf.write("\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u04f8\5\u009aN\2\u04f8\u00b9\3\2\2\2\u04f9\u04fa\b^\1")
        buf.write("\2\u04fa\u04fb\58\35\2\u04fb\u0500\3\2\2\2\u04fc\u04fd")
        buf.write("\f\3\2\2\u04fd\u04ff\58\35\2\u04fe\u04fc\3\2\2\2\u04ff")
        buf.write("\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2")
        buf.write("\u0501\u00bb\3\2\2\2\u0502\u0500\3\2\2\2\u0094\u00c1\u00c9")
        buf.write("\u00dd\u00ee\u00f8\u0100\u0105\u010e\u0119\u011d\u0122")
        buf.write("\u0128\u0132\u0138\u0143\u0159\u016a\u0178\u017a\u0186")
        buf.write("\u0188\u0194\u0196\u01a1\u01ac\u01b7\u01c2\u01cd\u01d8")
        buf.write("\u01e3\u01ec\u01f4\u0200\u020d\u0212\u0217\u021e\u0228")
        buf.write("\u0230\u0242\u0246\u024f\u025a\u025f\u0264\u0268\u026c")
        buf.write("\u026e\u0278\u027d\u0281\u0285\u028d\u0296\u02a0\u02a8")
        buf.write("\u02b9\u02c1\u02c4\u02ca\u02d6\u02db\u02de\u02e5\u02f4")
        buf.write("\u0300\u0303\u0305\u030d\u0311\u031f\u0323\u0328\u032b")
        buf.write("\u032e\u0335\u0337\u033c\u0340\u0345\u0349\u034c\u0355")
        buf.write("\u035b\u0365\u036d\u036f\u0379\u037e\u0382\u0388\u038b")
        buf.write("\u0394\u0399\u039c\u03a2\u03b2\u03b8\u03bb\u03c0\u03c3")
        buf.write("\u03ca\u03dd\u03e3\u03e6\u03e8\u03f1\u03f5\u03f9\u0400")
        buf.write("\u0405\u0412\u041b\u0424\u0437\u043a\u0442\u0445\u0449")
        buf.write("\u044e\u0454\u045e\u0462\u046d\u0472\u0475\u047f\u0487")
        buf.write("\u04a0\u04a5\u04a9\u04ac\u04b0\u04b4\u04b6\u04bc\u04c6")
        buf.write("\u04d0\u04d3\u04d8\u04dd\u04e8\u04ee\u04f1\u04f5\u0500")
        return buf.getvalue()


class CParser(Parser):
    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'__extension__'", "'__builtin_va_arg'",
                    "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'",
                    "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'",
                    "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'",
                    "'auto'", "'break'", "'case'", "'char'", "'const'",
                    "'continue'", "'default'", "'do'", "'double'", "'else'",
                    "'enum'", "'extern'", "'float'", "'for'", "'goto'",
                    "'if'", "'inline'", "'int'", "'long'", "'register'",
                    "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'",
                    "'static'", "'struct'", "'switch'", "'typedef'", "'union'",
                    "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'",
                    "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'",
                    "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'",
                    "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'",
                    "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'",
                    "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'",
                    "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'",
                    "'?'", "':'", "';'", "','", "'='", "'*='", "'/='",
                    "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='",
                    "'|='", "'=='", "'!='", "'->'", "'.'", "'...'"]

    symbolicNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break",
                     "Case", "Char", "Const", "Continue", "Default", "Do",
                     "Double", "Else", "Enum", "Extern", "Float", "For",
                     "Goto", "If", "Inline", "Int", "Long", "Register",
                     "Restrict", "Return", "Short", "Signed", "Sizeof",
                     "Static", "Struct", "Switch", "Typedef", "Union",
                     "Unsigned", "Void", "Volatile", "While", "Alignas",
                     "Alignof", "Atomic", "Bool", "Complex", "Generic",
                     "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal",
                     "LeftParen", "RightParen", "LeftBracket", "RightBracket",
                     "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater",
                     "GreaterEqual", "LeftShift", "RightShift", "Plus",
                     "PlusPlus", "Minus", "MinusMinus", "Star", "Div",
                     "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not",
                     "Tilde", "Question", "Colon", "Semi", "Comma", "Assign",
                     "StarAssign", "DivAssign", "ModAssign", "PlusAssign",
                     "MinusAssign", "LeftShiftAssign", "RightShiftAssign",
                     "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual",
                     "Arrow", "Dot", "Ellipsis", "Identifier", "Constant",
                     "DigitSequence", "StringLiteral", "ComplexDefine",
                     "AsmBlock", "LineAfterPreprocessing", "LineDirective",
                     "PragmaDirective", "Whitespace", "Newline", "BlockComment",
                     "LineComment"]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postOperation = 4
    RULE_postfixExpression = 5
    RULE_unaryIncDecExpression = 6
    RULE_postfixUnaryIncDecExpression = 7
    RULE_argumentExpressionList = 8
    RULE_unaryExpression = 9
    RULE_unaryOperator = 10
    RULE_castExpression = 11
    RULE_multiplicativeExpression = 12
    RULE_additiveExpression = 13
    RULE_shiftExpression = 14
    RULE_relationalExpression = 15
    RULE_equalityExpression = 16
    RULE_andExpression = 17
    RULE_exclusiveOrExpression = 18
    RULE_inclusiveOrExpression = 19
    RULE_logicalAndExpression = 20
    RULE_logicalOrExpression = 21
    RULE_conditionalExpression = 22
    RULE_assignmentExpression = 23
    RULE_assignmentOperator = 24
    RULE_expression = 25
    RULE_constantExpression = 26
    RULE_declaration = 27
    RULE_declarationSpecifiers = 28
    RULE_declarationSpecifiers2 = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_storageClassSpecifier = 33
    RULE_typeSpecifier = 34
    RULE_structOrUnionSpecifier = 35
    RULE_structOrUnion = 36
    RULE_structDeclarationList = 37
    RULE_structDeclaration = 38
    RULE_specifierQualifierList = 39
    RULE_structDeclaratorList = 40
    RULE_structDeclarator = 41
    RULE_enumSpecifier = 42
    RULE_enumeratorList = 43
    RULE_enumerator = 44
    RULE_enumerationConstant = 45
    RULE_atomicTypeSpecifier = 46
    RULE_typeQualifier = 47
    RULE_functionSpecifier = 48
    RULE_alignmentSpecifier = 49
    RULE_declarator = 50
    RULE_directDeclarator = 51
    RULE_gccDeclaratorExtension = 52
    RULE_gccAttributeSpecifier = 53
    RULE_gccAttributeList = 54
    RULE_gccAttribute = 55
    RULE_nestedParenthesesBlock = 56
    RULE_pointer = 57
    RULE_typeQualifierList = 58
    RULE_parameterTypeList = 59
    RULE_parameterList = 60
    RULE_parameterDeclaration = 61
    RULE_identifierList = 62
    RULE_typeName = 63
    RULE_abstractDeclarator = 64
    RULE_directAbstractDeclarator = 65
    RULE_typedefName = 66
    RULE_initializer = 67
    RULE_initializerList = 68
    RULE_designation = 69
    RULE_designatorList = 70
    RULE_designator = 71
    RULE_staticAssertDeclaration = 72
    RULE_statement = 73
    RULE_labeledStatement = 74
    RULE_caseStatement = 75
    RULE_compoundStatement = 76
    RULE_blockItemList = 77
    RULE_blockItem = 78
    RULE_expressionStatement = 79
    RULE_selectionStatement = 80
    RULE_elseStatement = 81
    RULE_iterationStatement = 82
    RULE_forCondition = 83
    RULE_forDeclaration = 84
    RULE_forExpression = 85
    RULE_jumpStatement = 86
    RULE_gotoStatement = 87
    RULE_compilationUnit = 88
    RULE_translationUnit = 89
    RULE_externalDeclaration = 90
    RULE_functionDefinition = 91
    RULE_declarationList = 92

    ruleNames = ["primaryExpression", "genericSelection", "genericAssocList",
                 "genericAssociation", "postOperation", "postfixExpression",
                 "unaryIncDecExpression", "postfixUnaryIncDecExpression",
                 "argumentExpressionList", "unaryExpression", "unaryOperator",
                 "castExpression", "multiplicativeExpression", "additiveExpression",
                 "shiftExpression", "relationalExpression", "equalityExpression",
                 "andExpression", "exclusiveOrExpression", "inclusiveOrExpression",
                 "logicalAndExpression", "logicalOrExpression", "conditionalExpression",
                 "assignmentExpression", "assignmentOperator", "expression",
                 "constantExpression", "declaration", "declarationSpecifiers",
                 "declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList",
                 "initDeclarator", "storageClassSpecifier", "typeSpecifier",
                 "structOrUnionSpecifier", "structOrUnion", "structDeclarationList",
                 "structDeclaration", "specifierQualifierList", "structDeclaratorList",
                 "structDeclarator", "enumSpecifier", "enumeratorList",
                 "enumerator", "enumerationConstant", "atomicTypeSpecifier",
                 "typeQualifier", "functionSpecifier", "alignmentSpecifier",
                 "declarator", "directDeclarator", "gccDeclaratorExtension",
                 "gccAttributeSpecifier", "gccAttributeList", "gccAttribute",
                 "nestedParenthesesBlock", "pointer", "typeQualifierList",
                 "parameterTypeList", "parameterList", "parameterDeclaration",
                 "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator",
                 "typedefName", "initializer", "initializerList", "designation",
                 "designatorList", "designator", "staticAssertDeclaration",
                 "statement", "labeledStatement", "caseStatement", "compoundStatement",
                 "blockItemList", "blockItem", "expressionStatement",
                 "selectionStatement", "elseStatement", "iterationStatement",
                 "forCondition", "forDeclaration", "forExpression", "jumpStatement",
                 "gotoStatement", "compilationUnit", "translationUnit",
                 "externalDeclaration", "functionDefinition", "declarationList"]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    Auto = 15
    Break = 16
    Case = 17
    Char = 18
    Const = 19
    Continue = 20
    Default = 21
    Do = 22
    Double = 23
    Else = 24
    Enum = 25
    Extern = 26
    Float = 27
    For = 28
    Goto = 29
    If = 30
    Inline = 31
    Int = 32
    Long = 33
    Register = 34
    Restrict = 35
    Return = 36
    Short = 37
    Signed = 38
    Sizeof = 39
    Static = 40
    Struct = 41
    Switch = 42
    Typedef = 43
    Union = 44
    Unsigned = 45
    Void = 46
    Volatile = 47
    While = 48
    Alignas = 49
    Alignof = 50
    Atomic = 51
    Bool = 52
    Complex = 53
    Generic = 54
    Imaginary = 55
    Noreturn = 56
    StaticAssert = 57
    ThreadLocal = 58
    LeftParen = 59
    RightParen = 60
    LeftBracket = 61
    RightBracket = 62
    LeftBrace = 63
    RightBrace = 64
    Less = 65
    LessEqual = 66
    Greater = 67
    GreaterEqual = 68
    LeftShift = 69
    RightShift = 70
    Plus = 71
    PlusPlus = 72
    Minus = 73
    MinusMinus = 74
    Star = 75
    Div = 76
    Mod = 77
    And = 78
    Or = 79
    AndAnd = 80
    OrOr = 81
    Caret = 82
    Not = 83
    Tilde = 84
    Question = 85
    Colon = 86
    Semi = 87
    Comma = 88
    Assign = 89
    StarAssign = 90
    DivAssign = 91
    ModAssign = 92
    PlusAssign = 93
    MinusAssign = 94
    LeftShiftAssign = 95
    RightShiftAssign = 96
    AndAssign = 97
    XorAssign = 98
    OrAssign = 99
    Equal = 100
    NotEqual = 101
    Arrow = 102
    Dot = 103
    Ellipsis = 104
    Identifier = 105
    Constant = 106
    DigitSequence = 107
    StringLiteral = 108
    ComplexDefine = 109
    AsmBlock = 110
    LineAfterPreprocessing = 111
    LineDirective = 112
    PragmaDirective = 113
    Whitespace = 114
    Newline = 115
    BlockComment = 116
    LineComment = 117

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExpression"):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)

    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0  # Token type
        try:
            self.state = 219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 189
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 188
                        self.match(CParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 191
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 193
                self.match(CParser.LeftParen)
                self.state = 194
                self.expression(0)
                self.state = 195
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 197
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.T__0:
                    self.state = 198
                    self.match(CParser.T__0)

                self.state = 201
                self.match(CParser.LeftParen)
                self.state = 202
                self.compoundStatement()
                self.state = 203
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 205
                self.match(CParser.T__1)
                self.state = 206
                self.match(CParser.LeftParen)
                self.state = 207
                self.unaryExpression()
                self.state = 208
                self.match(CParser.Comma)
                self.state = 209
                self.typeName()
                self.state = 210
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 212
                self.match(CParser.T__2)
                self.state = 213
                self.match(CParser.LeftParen)
                self.state = 214
                self.typeName()
                self.state = 215
                self.match(CParser.Comma)
                self.state = 216
                self.unaryExpression()
                self.state = 217
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericSelectionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenericSelection"):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)

    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(CParser.Generic)
            self.state = 222
            self.match(CParser.LeftParen)
            self.state = 223
            self.assignmentExpression()
            self.state = 224
            self.match(CParser.Comma)
            self.state = 225
            self.genericAssocList(0)
            self.state = 226
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericAssocListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self):
            return self.getTypedRuleContext(CParser.GenericAssociationContext, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenericAssocList"):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)

    def genericAssocList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.GenericAssocListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_genericAssocList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.genericAssociation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.GenericAssocListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_genericAssocList)
                    self.state = 231
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 232
                    self.match(CParser.Comma)
                    self.state = 233
                    self.genericAssociation()
                self.state = 238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GenericAssociationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGenericAssociation"):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)

    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.state = 246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char,
                         CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long,
                         CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union,
                         CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool,
                         CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self.typeName()
                self.state = 240
                self.match(CParser.Colon)
                self.state = 241
                self.assignmentExpression()
                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 2)
                self.state = 243
                self.match(CParser.Default)
                self.state = 244
                self.match(CParser.Colon)
                self.state = 245
                self.assignmentExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostOperationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_postOperation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostOperation"):
                return visitor.visitPostOperation(self)
            else:
                return visitor.visitChildren(self)

    def postOperation(self):

        localctx = CParser.PostOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postOperation)
        self._la = 0  # Token type
        try:
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.match(CParser.LeftBracket)
                self.state = 249
                self.expression(0)
                self.state = 250
                self.match(CParser.RightBracket)
                pass
            elif token in [CParser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.match(CParser.LeftParen)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 253
                    self.argumentExpressionList(0)

                self.state = 256
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.Arrow, CParser.Dot]:
                self.enterOuterAlt(localctx, 3)
                self.state = 257
                _la = self._input.LA(1)
                if not (_la == CParser.Arrow or _la == CParser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 258
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext, 0)

        def postOperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PostOperationContext)
            else:
                return self.getTypedRuleContext(CParser.PostOperationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostfixExpression"):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)

    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.state = 261
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 262
                self.match(CParser.LeftParen)
                self.state = 263
                self.typeName()
                self.state = 264
                self.match(CParser.RightParen)
                self.state = 265
                self.match(CParser.LeftBrace)
                self.state = 266
                self.initializerList(0)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Comma:
                    self.state = 267
                    self.match(CParser.Comma)

                self.state = 270
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.state = 272
                self.match(CParser.T__0)
                self.state = 273
                self.match(CParser.LeftParen)
                self.state = 274
                self.typeName()
                self.state = 275
                self.match(CParser.RightParen)
                self.state = 276
                self.match(CParser.LeftBrace)
                self.state = 277
                self.initializerList(0)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Comma:
                    self.state = 278
                    self.match(CParser.Comma)

                self.state = 281
                self.match(CParser.RightBrace)
                pass

            self.state = 288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 285
                    self.postOperation()
                self.state = 290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 10, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryIncDecExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def postfixUnaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.PostfixUnaryIncDecExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryIncDecExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryIncDecExpression"):
                return visitor.visitUnaryIncDecExpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryIncDecExpression(self):

        localctx = CParser.UnaryIncDecExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unaryIncDecExpression)
        self._la = 0  # Token type
        try:
            self.state = 294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.PlusPlus, CParser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                _la = self._input.LA(1)
                if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 292
                self.unaryExpression()
                pass
            elif token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Generic, CParser.LeftParen,
                           CParser.Identifier, CParser.Constant, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.postfixUnaryIncDecExpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryIncDecExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext, 0)

        def postfixUnaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.PostfixUnaryIncDecExpressionContext, 0)

        def postOperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PostOperationContext)
            else:
                return self.getTypedRuleContext(CParser.PostOperationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_postfixUnaryIncDecExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPostfixUnaryIncDecExpression"):
                return visitor.visitPostfixUnaryIncDecExpression(self)
            else:
                return visitor.visitChildren(self)

    def postfixUnaryIncDecExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.PostfixUnaryIncDecExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_postfixUnaryIncDecExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.postfixExpression()
            self.state = 298
            _la = self._input.LA(1)
            if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.PostfixUnaryIncDecExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixUnaryIncDecExpression)
                    self.state = 300
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & (
                                (1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (
                            1 << (CParser.Arrow - 59)) | (1 << (CParser.Dot - 59)))) != 0):
                        self.state = 301
                        self.postOperation()
                        self.state = 306
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 307
                    _la = self._input.LA(1)
                    if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentExpressionList"):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)

    def argumentExpressionList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_argumentExpressionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ArgumentExpressionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argumentExpressionList)
                    self.state = 316
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 317
                    self.match(CParser.Comma)
                    self.state = 318
                    self.assignmentExpression()
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext, 0)

        def unaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.UnaryIncDecExpressionContext, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryExpression"):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryExpression)
        try:
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 15, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.unaryIncDecExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.unaryOperator()
                self.state = 327
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.match(CParser.Sizeof)
                self.state = 330
                self.unaryExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 331
                self.match(CParser.Sizeof)
                self.state = 332
                self.match(CParser.LeftParen)
                self.state = 333
                self.typeName()
                self.state = 334
                self.match(CParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 336
                self.match(CParser.Alignof)
                self.state = 337
                self.match(CParser.LeftParen)
                self.state = 338
                self.typeName()
                self.state = 339
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 341
                self.match(CParser.AndAnd)
                self.state = 342
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryOperator"):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)

    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unaryOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            _la = self._input.LA(1)
            if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                (1 << (CParser.Plus - 71)) | (1 << (CParser.Minus - 71)) | (
                            1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.Not - 71)) | (
                1 << (CParser.Tilde - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastExpression"):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)

    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_castExpression)
        try:
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.match(CParser.LeftParen)
                self.state = 349
                self.typeName()
                self.state = 350
                self.match(CParser.RightParen)
                self.state = 351
                self.castExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.match(CParser.T__0)
                self.state = 354
                self.match(CParser.LeftParen)
                self.state = 355
                self.typeName()
                self.state = 356
                self.match(CParser.RightParen)
                self.state = 357
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 359
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext, 0)

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultiplicativeExpression"):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)

    def multiplicativeExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.castExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                    if la_ == 1:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 365
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 366
                        self.match(CParser.Star)
                        self.state = 367
                        self.castExpression()
                        pass

                    elif la_ == 2:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 368
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 369
                        self.match(CParser.Div)
                        self.state = 370
                        self.castExpression()
                        pass

                    elif la_ == 3:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 371
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 372
                        self.match(CParser.Mod)
                        self.state = 373
                        self.castExpression()
                        pass

                self.state = 378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext, 0)

        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdditiveExpression"):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)

    def additiveExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 388
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                    if la_ == 1:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 382
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 383
                        self.match(CParser.Plus)
                        self.state = 384
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 385
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 386
                        self.match(CParser.Minus)
                        self.state = 387
                        self.multiplicativeExpression(0)
                        pass

                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 20, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext, 0)

        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitShiftExpression"):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)

    def shiftExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
                    if la_ == 1:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 396
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 397
                        self.match(CParser.LeftShift)
                        self.state = 398
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 399
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 400
                        self.match(CParser.RightShift)
                        self.state = 401
                        self.additiveExpression(0)
                        pass

                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalExpression"):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)

    def relationalExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_relationalExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                    self.state = 410
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 411
                    _la = self._input.LA(1)
                    if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & (
                                (1 << (CParser.Less - 65)) | (1 << (CParser.LessEqual - 65)) | (
                            1 << (CParser.Greater - 65)) | (1 << (CParser.GreaterEqual - 65)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 412
                    self.shiftExpression(0)
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqualityExpression"):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)

    def equalityExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_equalityExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 421
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 422
                    _la = self._input.LA(1)
                    if not (_la == CParser.Equal or _la == CParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 423
                    self.relationalExpression(0)
                self.state = 428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 24, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext, 0)

        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAndExpression"):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)

    def andExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 25, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 432
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 433
                    self.match(CParser.And)
                    self.state = 434
                    self.equalityExpression(0)
                self.state = 439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 25, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext, 0)

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExclusiveOrExpression"):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def exclusiveOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 443
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 444
                    self.match(CParser.Caret)
                    self.state = 445
                    self.andExpression(0)
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext, 0)

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInclusiveOrExpression"):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def inclusiveOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 454
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 455
                    self.match(CParser.Or)
                    self.state = 456
                    self.exclusiveOrExpression(0)
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 27, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalAndExpression"):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)

    def logicalAndExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 465
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 466
                    self.match(CParser.AndAnd)
                    self.state = 467
                    self.inclusiveOrExpression(0)
                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext, 0)

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLogicalOrExpression"):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def logicalOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 476
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 477
                    self.match(CParser.OrOr)
                    self.state = 478
                    self.logicalAndExpression(0)
                self.state = 483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionalExpression"):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)

    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.logicalOrExpression(0)
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.state = 485
                self.match(CParser.Question)
                self.state = 486
                self.expression(0)
                self.state = 487
                self.match(CParser.Colon)
                self.state = 488
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentExpression"):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)

    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignmentExpression)
        try:
            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.unaryExpression()
                self.state = 494
                self.assignmentOperator()
                self.state = 495
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentOperator"):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)

    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignmentOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            _la = self._input.LA(1)
            if not (((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & (
                                                    (1 << (CParser.Assign - 89)) | (1 << (CParser.StarAssign - 89)) | (
                                                1 << (CParser.DivAssign - 89)) | (1 << (CParser.ModAssign - 89)) | (
                                        1 << (CParser.PlusAssign - 89)) | (1 << (CParser.MinusAssign - 89)) | (
                                1 << (CParser.LeftShiftAssign - 89)) | (1 << (CParser.RightShiftAssign - 89)) | (
                        1 << (CParser.AndAssign - 89)) | (1 << (CParser.XorAssign - 89)) | (
                1 << (CParser.OrAssign - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 510
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 505
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 506
                    self.match(CParser.Comma)
                    self.state = 507
                    self.assignmentExpression()
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstantExpression"):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)

    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_declaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_declaration)
        try:
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 33, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.declarationSpecifiers()
                self.state = 516
                self.initDeclaratorList(0)
                self.state = 517
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.declarationSpecifiers()
                self.state = 520
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarationSpecifiers"):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)

    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 525
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifiers2Context(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarationSpecifiers2"):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)

    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declarationSpecifiers2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 530
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 35, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext, 0)

        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext, 0)

        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext, 0)

        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarationSpecifier"):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 36, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 535
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 537
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 538
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 539
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorContext, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInitDeclaratorList"):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)

    def initDeclaratorList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InitDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_initDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.initDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InitDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initDeclaratorList)
                    self.state = 545
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 546
                    self.match(CParser.Comma)
                    self.state = 547
                    self.initDeclarator()
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 37, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInitDeclarator"):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 553
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 554
                self.declarator()
                self.state = 555
                self.match(CParser.Assign)
                self.state = 556
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStorageClassSpecifier"):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_storageClassSpecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CParser.Auto) | (1 << CParser.Extern) | (1 << CParser.Register) | (
                        1 << CParser.Static) | (1 << CParser.Typedef) | (1 << CParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext, 0)

        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext, 0)

        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext, 0)

        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeSpecifier"):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def typeSpecifier(self):

        localctx = CParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typeSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__3, CParser.T__4, CParser.T__5, CParser.Char, CParser.Double, CParser.Float,
                         CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void,
                         CParser.Bool, CParser.Complex]:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (
                    1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float) | (
                    1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                    1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Bool) | (
                    1 << CParser.Complex))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                self.match(CParser.T__0)
                self.state = 564
                self.match(CParser.LeftParen)
                self.state = 565
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and (
                    (1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 566
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.Atomic]:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.atomicTypeSpecifier()
                pass
            elif token in [CParser.Struct, CParser.Union]:
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.structOrUnionSpecifier()
                pass
            elif token in [CParser.Enum]:
                self.enterOuterAlt(localctx, 5)
                self.state = 569
                self.enumSpecifier()
                pass
            elif token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 570
                self.typedefName()
                pass
            elif token in [CParser.T__6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 571
                self.match(CParser.T__6)
                self.state = 572
                self.match(CParser.LeftParen)
                self.state = 573
                self.constantExpression()
                self.state = 574
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructOrUnionSpecifier"):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structOrUnionSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.structOrUnion()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Identifier:
                    self.state = 579
                    self.match(CParser.Identifier)

                self.state = 582
                self.match(CParser.LeftBrace)
                self.state = 583
                self.structDeclarationList(0)
                self.state = 584
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.structOrUnion()
                self.state = 587
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructOrUnion"):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)

    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnion)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            _la = self._input.LA(1)
            if not (_la == CParser.Struct or _la == CParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self):
            return self.getTypedRuleContext(CParser.StructDeclarationContext, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDeclarationList"):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)

    def structDeclarationList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.StructDeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_structDeclarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.structDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 600
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.StructDeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclarationList)
                    self.state = 596
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 597
                    self.structDeclaration()
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDeclaration"):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char,
                         CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long,
                         CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union,
                         CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool,
                         CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.specifierQualifierList()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & (
                                (1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (
                            1 << (CParser.Caret - 59)) | (1 << (CParser.Colon - 59)) | (
                    1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 604
                    self.structDeclaratorList(0)

                self.state = 607
                self.match(CParser.Semi)
                pass
            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext, 0)

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSpecifierQualifierList"):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)

    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_specifierQualifierList)
        try:
            self.state = 620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.typeSpecifier()
                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.specifierQualifierList()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.typeQualifier()
                self.state = 618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
                if la_ == 1:
                    self.state = 617
                    self.specifierQualifierList()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorContext, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDeclaratorList"):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)

    def structDeclaratorList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.StructDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_structDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.structDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 630
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.StructDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclaratorList)
                    self.state = 625
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 626
                    self.match(CParser.Comma)
                    self.state = 627
                    self.structDeclarator()
                self.state = 632
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 48, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDeclarator"):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclarator)
        self._la = 0  # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & (
                            (1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (
                        1 << (CParser.Caret - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 634
                    self.declarator()

                self.state = 637
                self.match(CParser.Colon)
                self.state = 638
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumSpecifier"):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.match(CParser.Enum)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Identifier:
                    self.state = 642
                    self.match(CParser.Identifier)

                self.state = 645
                self.match(CParser.LeftBrace)
                self.state = 646
                self.enumeratorList(0)
                self.state = 647
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.match(CParser.Enum)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Identifier:
                    self.state = 650
                    self.match(CParser.Identifier)

                self.state = 653
                self.match(CParser.LeftBrace)
                self.state = 654
                self.enumeratorList(0)
                self.state = 655
                self.match(CParser.Comma)
                self.state = 656
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self.match(CParser.Enum)
                self.state = 659
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CParser.EnumeratorContext, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumeratorList"):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)

    def enumeratorList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EnumeratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_enumeratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.enumerator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 54, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.EnumeratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorList)
                    self.state = 665
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 666
                    self.match(CParser.Comma)
                    self.state = 667
                    self.enumerator()
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 54, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumerator"):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)

    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumerator)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.enumerationConstant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.enumerationConstant()
                self.state = 675
                self.match(CParser.Assign)
                self.state = 676
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumerationConstantContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumerationConstant"):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)

    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtomicTypeSpecifier"):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(CParser.Atomic)
            self.state = 683
            self.match(CParser.LeftParen)
            self.state = 684
            self.typeName()
            self.state = 685
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeQualifier"):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)

    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeQualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                1 << CParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionSpecifier"):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__7, CParser.T__8, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline) | (
                    1 << CParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.gccAttributeSpecifier()
                pass
            elif token in [CParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 691
                self.match(CParser.T__9)
                self.state = 692
                self.match(CParser.LeftParen)
                self.state = 693
                self.match(CParser.Identifier)
                self.state = 694
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlignmentSpecifier"):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alignmentSpecifier)
        try:
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Alignas]:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.match(CParser.Alignas)
                self.state = 698
                self.match(CParser.LeftParen)
                self.state = 699
                self.typeName()
                pass
            elif token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Sizeof, CParser.Alignof, CParser.Generic,
                           CParser.LeftParen, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                           CParser.Star, CParser.And, CParser.AndAnd, CParser.Not, CParser.Tilde, CParser.Identifier,
                           CParser.Constant, CParser.DigitSequence, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.constantExpression()
                self.state = 701
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_declarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarator"):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.Star or _la == CParser.Caret:
                self.state = 705
                self.pointer()

            self.state = 708
            self.directDeclarator(0)
            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 709
                    self.gccDeclaratorExtension()
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 59, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext, 0)

        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectDeclarator"):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def directDeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_directDeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
            if la_ == 1:
                self.state = 716
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 717
                self.match(CParser.LeftParen)
                self.state = 718
                self.declarator()
                self.state = 719
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 721
                self.match(CParser.Identifier)
                self.state = 722
                self.match(CParser.Colon)
                self.state = 723
                self.match(CParser.DigitSequence)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 769
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 66, self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 726
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 727
                        self.match(CParser.LeftBracket)
                        self.state = 729
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                            1 << CParser.Atomic))) != 0):
                            self.state = 728
                            self.typeQualifierList(0)

                        self.state = 732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                        1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                            1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                        (1 << (CParser.Plus - 71)) | (
                                                                        1 << (CParser.PlusPlus - 71)) | (
                                                                    1 << (CParser.Minus - 71)) | (
                                                                1 << (CParser.MinusMinus - 71)) | (
                                                            1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (
                                                    1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (
                                            1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (
                                    1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (
                            1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 731
                            self.assignmentExpression()

                        self.state = 734
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 735
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 736
                        self.match(CParser.LeftBracket)
                        self.state = 737
                        self.match(CParser.Static)
                        self.state = 739
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                            1 << CParser.Atomic))) != 0):
                            self.state = 738
                            self.typeQualifierList(0)

                        self.state = 741
                        self.assignmentExpression()
                        self.state = 742
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 744
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 745
                        self.match(CParser.LeftBracket)
                        self.state = 746
                        self.typeQualifierList(0)
                        self.state = 747
                        self.match(CParser.Static)
                        self.state = 748
                        self.assignmentExpression()
                        self.state = 749
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 751
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 752
                        self.match(CParser.LeftBracket)
                        self.state = 754
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                            1 << CParser.Atomic))) != 0):
                            self.state = 753
                            self.typeQualifierList(0)

                        self.state = 756
                        self.match(CParser.Star)
                        self.state = 757
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 758
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 759
                        self.match(CParser.LeftParen)
                        self.state = 760
                        self.parameterTypeList()
                        self.state = 761
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 763
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 764
                        self.match(CParser.LeftParen)
                        self.state = 766
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CParser.Identifier:
                            self.state = 765
                            self.identifierList(0)

                        self.state = 768
                        self.match(CParser.RightParen)
                        pass

                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGccDeclaratorExtension"):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)

    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gccDeclaratorExtension)
        self._la = 0  # Token type
        try:
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.match(CParser.T__10)
                self.state = 775
                self.match(CParser.LeftParen)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 776
                    self.match(CParser.StringLiteral)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CParser.StringLiteral):
                        break

                self.state = 781
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGccAttributeSpecifier"):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(CParser.T__11)
            self.state = 786
            self.match(CParser.LeftParen)
            self.state = 787
            self.match(CParser.LeftParen)
            self.state = 788
            self.gccAttributeList()
            self.state = 789
            self.match(CParser.RightParen)
            self.state = 790
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGccAttributeList"):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)

    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccAttributeList)
        self._la = 0  # Token type
        try:
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.gccAttribute()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CParser.Comma:
                    self.state = 793
                    self.match(CParser.Comma)
                    self.state = 794
                    self.gccAttribute()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGccAttribute"):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)

    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttribute)
        self._la = 0  # Token type
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5,
                         CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11,
                         CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char,
                         CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else,
                         CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If,
                         CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return,
                         CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch,
                         CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile,
                         CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex,
                         CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert,
                         CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace,
                         CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual,
                         CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus,
                         CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or,
                         CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question,
                         CParser.Colon, CParser.Semi, CParser.Assign, CParser.StarAssign, CParser.DivAssign,
                         CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign,
                         CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign,
                         CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis,
                         CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral,
                         CParser.ComplexDefine, CParser.AsmBlock, CParser.LineAfterPreprocessing, CParser.LineDirective,
                         CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment,
                         CParser.LineComment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & (
                        (1 << (CParser.LeftParen - 59)) | (1 << (CParser.RightParen - 59)) | (
                    1 << (CParser.Comma - 59)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.LeftParen:
                    self.state = 804
                    self.match(CParser.LeftParen)
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                            (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                    1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                        1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                    (1 << (CParser.Plus - 71)) | (
                                                                    1 << (CParser.PlusPlus - 71)) | (
                                                                1 << (CParser.Minus - 71)) | (
                                                            1 << (CParser.MinusMinus - 71)) | (
                                                        1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (
                                                1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (
                                        1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (
                                1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (
                        1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 805
                        self.argumentExpressionList(0)

                    self.state = 808
                    self.match(CParser.RightParen)

                pass
            elif token in [CParser.RightParen, CParser.Comma]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedParenthesesBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedParenthesesBlock"):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)

    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_nestedParenthesesBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (
                1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (
                1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (
                1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (
                1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (
                1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (
                1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (
                1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (
                1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (
                1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (
                1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (
                1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBracket) | (
                1 << CParser.RightBracket) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and (
                (1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (
                1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (
                1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (
                1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (
                1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (
                1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (
                1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (
                1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (
                1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (
                1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (
                1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (
                1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (
                1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (
                1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (
                1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (
                1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (
                1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (
                1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (
                1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (
                1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (
                1 << (CParser.LineComment - 64)))) != 0):
                self.state = 819
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5,
                             CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11,
                             CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char,
                             CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else,
                             CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If,
                             CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict,
                             CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static,
                             CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned,
                             CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof,
                             CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary,
                             CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket,
                             CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less,
                             CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift,
                             CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                             CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd,
                             CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon,
                             CParser.Semi, CParser.Comma, CParser.Assign, CParser.StarAssign, CParser.DivAssign,
                             CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign,
                             CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign,
                             CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis,
                             CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral,
                             CParser.ComplexDefine, CParser.AsmBlock, CParser.LineAfterPreprocessing,
                             CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline,
                             CParser.BlockComment, CParser.LineComment]:
                    self.state = 814
                    _la = self._input.LA(1)
                    if _la <= 0 or _la == CParser.LeftParen or _la == CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 815
                    self.match(CParser.LeftParen)
                    self.state = 816
                    self.nestedParenthesesBlock()
                    self.state = 817
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_pointer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPointer"):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)

    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pointer)
        self._la = 0  # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.match(CParser.Star)
                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.typeQualifierList(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(CParser.Star)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                    1 << CParser.Atomic))) != 0):
                    self.state = 829
                    self.typeQualifierList(0)

                self.state = 832
                self.pointer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 833
                self.match(CParser.Caret)
                self.state = 835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
                if la_ == 1:
                    self.state = 834
                    self.typeQualifierList(0)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 837
                self.match(CParser.Caret)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                    1 << CParser.Atomic))) != 0):
                    self.state = 838
                    self.typeQualifierList(0)

                self.state = 841
                self.pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeQualifierList"):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)

    def typeQualifierList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TypeQualifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_typeQualifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.typeQualifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TypeQualifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeQualifierList)
                    self.state = 847
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 848
                    self.typeQualifier()
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterTypeList"):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)

    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameterTypeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.parameterList(0)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.Comma:
                self.state = 855
                self.match(CParser.Comma)
                self.state = 856
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self):
            return self.getTypedRuleContext(CParser.ParameterDeclarationContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterList"):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)

    def parameterList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ParameterListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_parameterList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.parameterDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ParameterListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterList)
                    self.state = 862
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 863
                    self.match(CParser.Comma)
                    self.state = 864
                    self.parameterDeclaration()
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 84, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterDeclaration"):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterDeclaration)
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.declarationSpecifiers()
                self.state = 871
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.declarationSpecifiers2()
                self.state = 875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 85, self._ctx)
                if la_ == 1:
                    self.state = 874
                    self.abstractDeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierList"):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)

    def identifierList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.IdentifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_identifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(CParser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.IdentifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_identifierList)
                    self.state = 882
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 883
                    self.match(CParser.Comma)
                    self.state = 884
                    self.match(CParser.Identifier)
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeName

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeName"):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)

    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.specifierQualifierList()
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 88, self._ctx)
            if la_ == 1:
                self.state = 891
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAbstractDeclarator"):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_abstractDeclarator)
        self._la = 0  # Token type
        try:
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Star or _la == CParser.Caret:
                    self.state = 895
                    self.pointer()

                self.state = 898
                self.directAbstractDeclarator(0)
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 899
                        self.gccDeclaratorExtension()
                    self.state = 904
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext, 0)

        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDirectAbstractDeclarator"):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def directAbstractDeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_directAbstractDeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
            if la_ == 1:
                self.state = 908
                self.match(CParser.LeftParen)
                self.state = 909
                self.abstractDeclarator()
                self.state = 910
                self.match(CParser.RightParen)
                self.state = 914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 911
                        self.gccDeclaratorExtension()
                    self.state = 916
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)

                pass

            elif la_ == 2:
                self.state = 917
                self.match(CParser.LeftBracket)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                    1 << CParser.Atomic))) != 0):
                    self.state = 918
                    self.typeQualifierList(0)

                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 921
                    self.assignmentExpression()

                self.state = 924
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 925
                self.match(CParser.LeftBracket)
                self.state = 926
                self.match(CParser.Static)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                    1 << CParser.Atomic))) != 0):
                    self.state = 927
                    self.typeQualifierList(0)

                self.state = 930
                self.assignmentExpression()
                self.state = 931
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 933
                self.match(CParser.LeftBracket)
                self.state = 934
                self.typeQualifierList(0)
                self.state = 935
                self.match(CParser.Static)
                self.state = 936
                self.assignmentExpression()
                self.state = 937
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 939
                self.match(CParser.LeftBracket)
                self.state = 940
                self.match(CParser.Star)
                self.state = 941
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 942
                self.match(CParser.LeftParen)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                    1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                    1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                    1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (
                    1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (
                    1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (
                    1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (
                    1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (
                    1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (
                    1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (
                    1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 943
                    self.parameterTypeList()

                self.state = 946
                self.match(CParser.RightParen)
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 947
                        self.gccDeclaratorExtension()
                    self.state = 952
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 996
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 955
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 956
                        self.match(CParser.LeftBracket)
                        self.state = 958
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                            1 << CParser.Atomic))) != 0):
                            self.state = 957
                            self.typeQualifierList(0)

                        self.state = 961
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                        1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                            1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                        (1 << (CParser.Plus - 71)) | (
                                                                        1 << (CParser.PlusPlus - 71)) | (
                                                                    1 << (CParser.Minus - 71)) | (
                                                                1 << (CParser.MinusMinus - 71)) | (
                                                            1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (
                                                    1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (
                                            1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (
                                    1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (
                            1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 960
                            self.assignmentExpression()

                        self.state = 963
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 964
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 965
                        self.match(CParser.LeftBracket)
                        self.state = 966
                        self.match(CParser.Static)
                        self.state = 968
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (
                            1 << CParser.Atomic))) != 0):
                            self.state = 967
                            self.typeQualifierList(0)

                        self.state = 970
                        self.assignmentExpression()
                        self.state = 971
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 973
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 974
                        self.match(CParser.LeftBracket)
                        self.state = 975
                        self.typeQualifierList(0)
                        self.state = 976
                        self.match(CParser.Static)
                        self.state = 977
                        self.assignmentExpression()
                        self.state = 978
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 980
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 981
                        self.match(CParser.LeftBracket)
                        self.state = 982
                        self.match(CParser.Star)
                        self.state = 983
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 984
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 985
                        self.match(CParser.LeftParen)
                        self.state = 987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                            1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                            1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                            1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (
                            1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (
                            1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (
                            1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (
                            1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (
                            1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (
                            1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (
                            1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (
                            1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (
                            1 << CParser.Noreturn) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or (
                                (((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (
                            1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (
                            1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (
                            1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                            1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                            1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 986
                            self.parameterTypeList()

                        self.state = 989
                        self.match(CParser.RightParen)
                        self.state = 993
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 990
                                self.gccDeclaratorExtension()
                            self.state = 995
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 103, self._ctx)

                        pass

                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 105, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypedefName"):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)

    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInitializer"):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)

    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Sizeof, CParser.Alignof, CParser.Generic,
                         CParser.LeftParen, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                         CParser.Star, CParser.And, CParser.AndAnd, CParser.Not, CParser.Tilde, CParser.Identifier,
                         CParser.Constant, CParser.DigitSequence, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.assignmentExpression()
                pass
            elif token in [CParser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(CParser.LeftBrace)
                self.state = 1005
                self.initializerList(0)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Comma:
                    self.state = 1006
                    self.match(CParser.Comma)

                self.state = 1009
                self.match(CParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext, 0)

        def designation(self):
            return self.getTypedRuleContext(CParser.DesignationContext, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInitializerList"):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)

    def initializerList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InitializerListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_initializerList, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.LeftBracket or _la == CParser.Dot:
                self.state = 1014
                self.designation()

            self.state = 1017
            self.initializer()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InitializerListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerList)
                    self.state = 1019
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1020
                    self.match(CParser.Comma)
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CParser.LeftBracket or _la == CParser.Dot:
                        self.state = 1021
                        self.designation()

                    self.state = 1024
                    self.initializer()
                self.state = 1029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DesignationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDesignation"):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)

    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.designatorList(0)
            self.state = 1031
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self):
            return self.getTypedRuleContext(CParser.DesignatorContext, 0)

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDesignatorList"):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)

    def designatorList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DesignatorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_designatorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.designator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1040
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DesignatorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_designatorList)
                    self.state = 1036
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1037
                    self.designator()
                self.state = 1042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDesignator"):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)

    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designator)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1043
                self.match(CParser.LeftBracket)
                self.state = 1044
                self.constantExpression()
                self.state = 1045
                self.match(CParser.RightBracket)
                pass
            elif token in [CParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                self.match(CParser.Dot)
                self.state = 1048
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStaticAssertDeclaration"):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_staticAssertDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(CParser.StaticAssert)
            self.state = 1052
            self.match(CParser.LeftParen)
            self.state = 1053
            self.constantExpression()
            self.state = 1054
            self.match(CParser.Comma)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1055
                self.match(CParser.StringLiteral)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CParser.StringLiteral):
                    break

            self.state = 1060
            self.match(CParser.RightParen)
            self.state = 1061
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext, 0)

        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext, 0)

        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext, 0)

        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext, 0)

        def logicalOrExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 119, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1066
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1067
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1068
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1069
                _la = self._input.LA(1)
                if not (_la == CParser.T__10 or _la == CParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1070
                _la = self._input.LA(1)
                if not (_la == CParser.T__13 or _la == CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1071
                self.match(CParser.LeftParen)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1072
                    self.logicalOrExpression(0)
                    self.state = 1077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CParser.Comma:
                        self.state = 1073
                        self.match(CParser.Comma)
                        self.state = 1074
                        self.logicalOrExpression(0)
                        self.state = 1079
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CParser.Colon:
                    self.state = 1082
                    self.match(CParser.Colon)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                            (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                    1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                        1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                    (1 << (CParser.Plus - 71)) | (
                                                                    1 << (CParser.PlusPlus - 71)) | (
                                                                1 << (CParser.Minus - 71)) | (
                                                            1 << (CParser.MinusMinus - 71)) | (
                                                        1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (
                                                1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (
                                        1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (
                                1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (
                        1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 1083
                        self.logicalOrExpression(0)
                        self.state = 1088
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CParser.Comma:
                            self.state = 1084
                            self.match(CParser.Comma)
                            self.state = 1085
                            self.logicalOrExpression(0)
                            self.state = 1090
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1098
                self.match(CParser.RightParen)
                self.state = 1099
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def caseStatement(self):
            return self.getTypedRuleContext(CParser.CaseStatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabeledStatement"):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)

    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_labeledStatement)
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.match(CParser.Identifier)
                self.state = 1103
                self.match(CParser.Colon)
                self.state = 1104
                self.statement()
                pass
            elif token in [CParser.Case, CParser.Default]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.caseStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_caseStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseStatement"):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)

    def caseStatement(self):

        localctx = CParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_caseStatement)
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Case]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(CParser.Case)
                self.state = 1109
                self.constantExpression()
                self.state = 1110
                self.match(CParser.Colon)
                self.state = 1111
                self.statement()
                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.match(CParser.Default)
                self.state = 1114
                self.match(CParser.Colon)
                self.state = 1115
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompoundStatement"):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)

    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_compoundStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(CParser.LeftBrace)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (
                1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (
                1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (
                1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (
                1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (
                1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (
                1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (
                1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (
                1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (
                1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (
                1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (
                1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (
                1 << CParser.LeftBrace))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Semi - 71)) | (1 << (CParser.Identifier - 71)) | (
                        1 << (CParser.Constant - 71)) | (1 << (CParser.DigitSequence - 71)) | (
                1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1119
                self.blockItemList(0)

            self.state = 1122
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockItemListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self):
            return self.getTypedRuleContext(CParser.BlockItemContext, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlockItemList"):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)

    def blockItemList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.BlockItemListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_blockItemList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.blockItem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.BlockItemListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_blockItemList)
                    self.state = 1127
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1128
                    self.blockItem()
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlockItem"):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)

    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItem)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionStatement"):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)

    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_expressionStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                            1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                            (1 << (CParser.Plus - 71)) | (
                                                            1 << (CParser.PlusPlus - 71)) | (
                                                        1 << (CParser.Minus - 71)) | (
                                                    1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                            1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                    1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                            1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                    1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1138
                self.expression(0)

            self.state = 1141
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(CParser.ElseStatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectionStatement"):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)

    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_selectionStatement)
        try:
            self.state = 1157
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(CParser.If)
                self.state = 1144
                self.match(CParser.LeftParen)
                self.state = 1145
                self.expression(0)
                self.state = 1146
                self.match(CParser.RightParen)
                self.state = 1147
                self.statement()
                self.state = 1149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 126, self._ctx)
                if la_ == 1:
                    self.state = 1148
                    self.elseStatement()

                pass
            elif token in [CParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.match(CParser.Switch)
                self.state = 1152
                self.match(CParser.LeftParen)
                self.state = 1153
                self.expression(0)
                self.state = 1154
                self.match(CParser.RightParen)
                self.state = 1155
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_elseStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElseStatement"):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)

    def elseStatement(self):

        localctx = CParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(CParser.Else)
            self.state = 1160
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def Do(self):
            return self.getToken(CParser.Do, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIterationStatement"):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)

    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_iterationStatement)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.match(CParser.While)
                self.state = 1163
                self.match(CParser.LeftParen)
                self.state = 1164
                self.expression(0)
                self.state = 1165
                self.match(CParser.RightParen)
                self.state = 1166
                self.statement()
                pass
            elif token in [CParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.match(CParser.Do)
                self.state = 1169
                self.statement()
                self.state = 1170
                self.match(CParser.While)
                self.state = 1171
                self.match(CParser.LeftParen)
                self.state = 1172
                self.expression(0)
                self.state = 1173
                self.match(CParser.RightParen)
                self.state = 1174
                self.match(CParser.Semi)
                pass
            elif token in [CParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1176
                self.match(CParser.For)
                self.state = 1177
                self.match(CParser.LeftParen)
                self.state = 1178
                self.forCondition()
                self.state = 1179
                self.match(CParser.RightParen)
                self.state = 1180
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext, 0)

        def forExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext, i)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForCondition"):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)

    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forCondition)
        self._la = 0  # Token type
        try:
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.forDeclaration()
                self.state = 1185
                self.match(CParser.Semi)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1186
                    self.forExpression(0)

                self.state = 1189
                self.match(CParser.Semi)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1190
                    self.forExpression(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1193
                    self.expression(0)

                self.state = 1196
                self.match(CParser.Semi)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1197
                    self.forExpression(0)

                self.state = 1200
                self.match(CParser.Semi)
                self.state = 1202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1201
                    self.forExpression(0)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForDeclaration"):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forDeclaration)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.declarationSpecifiers()
                self.state = 1207
                self.initDeclaratorList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.declarationSpecifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def forExpression(self):
            return self.getTypedRuleContext(CParser.ForExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForExpression"):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)

    def forExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ForExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_forExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ForExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_forExpression)
                    self.state = 1215
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1216
                    self.match(CParser.Comma)
                    self.state = 1217
                    self.assignmentExpression()
                self.state = 1222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gotoStatement(self):
            return self.getTypedRuleContext(CParser.GotoStatementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJumpStatement"):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)

    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_jumpStatement)
        self._la = 0  # Token type
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Goto]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.gotoStatement()
                pass
            elif token in [CParser.Continue]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(CParser.Continue)
                self.state = 1225
                self.match(CParser.Semi)
                pass
            elif token in [CParser.Break]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1226
                self.match(CParser.Break)
                self.state = 1227
                self.match(CParser.Semi)
                pass
            elif token in [CParser.Return]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1228
                self.match(CParser.Return)
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                    1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & (
                                                                (1 << (CParser.Plus - 71)) | (
                                                                1 << (CParser.PlusPlus - 71)) | (
                                                            1 << (CParser.Minus - 71)) | (
                                                        1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                                                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (
                                        1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (
                                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                        1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1229
                    self.expression(0)

                self.state = 1232
                self.match(CParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gotoStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGotoStatement"):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)

    def gotoStatement(self):

        localctx = CParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(CParser.Goto)
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
            if la_ == 1:
                self.state = 1236
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1237
                self.unaryExpression()
                pass

            self.state = 1240
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompilationUnit"):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)

    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_compilationUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (
                1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (
                1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (
                1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (
                1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (
                1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (
                1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (
                1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (
                1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and (
                (1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (
                1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Caret - 71)) | (
                1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)) | (
                1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1242
                self.translationUnit(0)

            self.state = 1245
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self):
            return self.getTypedRuleContext(CParser.ExternalDeclarationContext, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTranslationUnit"):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)

    def translationUnit(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TranslationUnitContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_translationUnit, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.externalDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TranslationUnitContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_translationUnit)
                    self.state = 1250
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1251
                    self.externalDeclaration()
                self.state = 1256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 141, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExternalDeclaration"):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_externalDeclaration)
        try:
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1259
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext, 0)

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext, 0)

        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionDefinition"):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)

    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.state = 1262
                self.declarationSpecifiers()

            self.state = 1265
            self.declarator()
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (
                1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (
                1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (
                1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (
                1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (
                1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (
                1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (
                1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (
                1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (
                1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and (
                (1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (
                1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (
                1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (
                1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (
                1 << (CParser.DigitSequence - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1266
                self.declarationList(0)

            self.state = 1269
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext, 0)

        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclarationList"):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)

    def declarationList(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_declarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1272
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationList)
                    self.state = 1274
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1275
                    self.declaration()
                self.state = 1280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.genericAssocList_sempred
        self._predicates[7] = self.postfixUnaryIncDecExpression_sempred
        self._predicates[8] = self.argumentExpressionList_sempred
        self._predicates[12] = self.multiplicativeExpression_sempred
        self._predicates[13] = self.additiveExpression_sempred
        self._predicates[14] = self.shiftExpression_sempred
        self._predicates[15] = self.relationalExpression_sempred
        self._predicates[16] = self.equalityExpression_sempred
        self._predicates[17] = self.andExpression_sempred
        self._predicates[18] = self.exclusiveOrExpression_sempred
        self._predicates[19] = self.inclusiveOrExpression_sempred
        self._predicates[20] = self.logicalAndExpression_sempred
        self._predicates[21] = self.logicalOrExpression_sempred
        self._predicates[25] = self.expression_sempred
        self._predicates[31] = self.initDeclaratorList_sempred
        self._predicates[37] = self.structDeclarationList_sempred
        self._predicates[40] = self.structDeclaratorList_sempred
        self._predicates[43] = self.enumeratorList_sempred
        self._predicates[51] = self.directDeclarator_sempred
        self._predicates[58] = self.typeQualifierList_sempred
        self._predicates[60] = self.parameterList_sempred
        self._predicates[62] = self.identifierList_sempred
        self._predicates[65] = self.directAbstractDeclarator_sempred
        self._predicates[68] = self.initializerList_sempred
        self._predicates[70] = self.designatorList_sempred
        self._predicates[77] = self.blockItemList_sempred
        self._predicates[85] = self.forExpression_sempred
        self._predicates[89] = self.translationUnit_sempred
        self._predicates[92] = self.declarationList_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def genericAssocList_sempred(self, localctx: GenericAssocListContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def postfixUnaryIncDecExpression_sempred(self, localctx: PostfixUnaryIncDecExpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def argumentExpressionList_sempred(self, localctx: ArgumentExpressionListContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def multiplicativeExpression_sempred(self, localctx: MultiplicativeExpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 3)

        if predIndex == 4:
            return self.precpred(self._ctx, 2)

        if predIndex == 5:
            return self.precpred(self._ctx, 1)

    def additiveExpression_sempred(self, localctx: AdditiveExpressionContext, predIndex: int):
        if predIndex == 6:
            return self.precpred(self._ctx, 2)

        if predIndex == 7:
            return self.precpred(self._ctx, 1)

    def shiftExpression_sempred(self, localctx: ShiftExpressionContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 2)

        if predIndex == 9:
            return self.precpred(self._ctx, 1)

    def relationalExpression_sempred(self, localctx: RelationalExpressionContext, predIndex: int):
        if predIndex == 10:
            return self.precpred(self._ctx, 1)

    def equalityExpression_sempred(self, localctx: EqualityExpressionContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 1)

    def andExpression_sempred(self, localctx: AndExpressionContext, predIndex: int):
        if predIndex == 12:
            return self.precpred(self._ctx, 1)

    def exclusiveOrExpression_sempred(self, localctx: ExclusiveOrExpressionContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 1)

    def inclusiveOrExpression_sempred(self, localctx: InclusiveOrExpressionContext, predIndex: int):
        if predIndex == 14:
            return self.precpred(self._ctx, 1)

    def logicalAndExpression_sempred(self, localctx: LogicalAndExpressionContext, predIndex: int):
        if predIndex == 15:
            return self.precpred(self._ctx, 1)

    def logicalOrExpression_sempred(self, localctx: LogicalOrExpressionContext, predIndex: int):
        if predIndex == 16:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 17:
            return self.precpred(self._ctx, 1)

    def initDeclaratorList_sempred(self, localctx: InitDeclaratorListContext, predIndex: int):
        if predIndex == 18:
            return self.precpred(self._ctx, 1)

    def structDeclarationList_sempred(self, localctx: StructDeclarationListContext, predIndex: int):
        if predIndex == 19:
            return self.precpred(self._ctx, 1)

    def structDeclaratorList_sempred(self, localctx: StructDeclaratorListContext, predIndex: int):
        if predIndex == 20:
            return self.precpred(self._ctx, 1)

    def enumeratorList_sempred(self, localctx: EnumeratorListContext, predIndex: int):
        if predIndex == 21:
            return self.precpred(self._ctx, 1)

    def directDeclarator_sempred(self, localctx: DirectDeclaratorContext, predIndex: int):
        if predIndex == 22:
            return self.precpred(self._ctx, 7)

        if predIndex == 23:
            return self.precpred(self._ctx, 6)

        if predIndex == 24:
            return self.precpred(self._ctx, 5)

        if predIndex == 25:
            return self.precpred(self._ctx, 4)

        if predIndex == 26:
            return self.precpred(self._ctx, 3)

        if predIndex == 27:
            return self.precpred(self._ctx, 2)

    def typeQualifierList_sempred(self, localctx: TypeQualifierListContext, predIndex: int):
        if predIndex == 28:
            return self.precpred(self._ctx, 1)

    def parameterList_sempred(self, localctx: ParameterListContext, predIndex: int):
        if predIndex == 29:
            return self.precpred(self._ctx, 1)

    def identifierList_sempred(self, localctx: IdentifierListContext, predIndex: int):
        if predIndex == 30:
            return self.precpred(self._ctx, 1)

    def directAbstractDeclarator_sempred(self, localctx: DirectAbstractDeclaratorContext, predIndex: int):
        if predIndex == 31:
            return self.precpred(self._ctx, 5)

        if predIndex == 32:
            return self.precpred(self._ctx, 4)

        if predIndex == 33:
            return self.precpred(self._ctx, 3)

        if predIndex == 34:
            return self.precpred(self._ctx, 2)

        if predIndex == 35:
            return self.precpred(self._ctx, 1)

    def initializerList_sempred(self, localctx: InitializerListContext, predIndex: int):
        if predIndex == 36:
            return self.precpred(self._ctx, 1)

    def designatorList_sempred(self, localctx: DesignatorListContext, predIndex: int):
        if predIndex == 37:
            return self.precpred(self._ctx, 1)

    def blockItemList_sempred(self, localctx: BlockItemListContext, predIndex: int):
        if predIndex == 38:
            return self.precpred(self._ctx, 1)

    def forExpression_sempred(self, localctx: ForExpressionContext, predIndex: int):
        if predIndex == 39:
            return self.precpred(self._ctx, 1)

    def translationUnit_sempred(self, localctx: TranslationUnitContext, predIndex: int):
        if predIndex == 40:
            return self.precpred(self._ctx, 1)

    def declarationList_sempred(self, localctx: DeclarationListContext, predIndex: int):
        if predIndex == 41:
            return self.precpred(self._ctx, 1)
