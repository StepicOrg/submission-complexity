# Generated from complexity/grammars/C.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO

from complexity.parsers.parsers import ParserWithTimeLimit


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3{")
        buf.write("\u0416\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\3\2\3\2\3\2\6\2\u0082\n\2\r")
        buf.write("\2\16\2\u0083\5\2\u0086\n\2\3\2\3\2\3\2\3\2\3\2\3\2\5")
        buf.write("\2\u008e\n\2\3\2\3\2\3\2\7\2\u0093\n\2\f\2\16\2\u0096")
        buf.write("\13\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\5\2\u00a8\n\2\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\5\3\u00b0\n\3\3\3\3\3\6\3\u00b4\n\3\r\3\16\3\u00b5\3")
        buf.write("\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u00c1\n\4\3\5\3")
        buf.write("\5\5\5\u00c5\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00cd\n\5")
        buf.write("\3\5\3\5\5\5\u00d1\n\5\3\5\7\5\u00d4\n\5\f\5\16\5\u00d7")
        buf.write("\13\5\3\6\3\6\5\6\u00db\n\6\3\6\3\6\3\7\3\7\3\7\5\7\u00e2")
        buf.write("\n\7\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u00ea\n\b\f\b\16\b\u00ed")
        buf.write("\13\b\3\b\7\b\u00f0\n\b\f\b\16\b\u00f3\13\b\3\t\3\t\3")
        buf.write("\t\7\t\u00f8\n\t\f\t\16\t\u00fb\13\t\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\5\n\u0107\n\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\5\n\u0110\n\n\3\13\3\13\5\13\u0114\n\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\5\13\u011c\n\13\3\f\3\f\3\f")
        buf.write("\7\f\u0121\n\f\f\f\16\f\u0124\13\f\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\7\r\u012c\n\r\f\r\16\r\u012f\13\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\7\16\u0137\n\16\f\16\16\16\u013a\13\16")
        buf.write("\3\17\3\17\3\17\7\17\u013f\n\17\f\17\16\17\u0142\13\17")
        buf.write("\3\20\3\20\3\20\5\20\u0147\n\20\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u0159\n\23\3\24\3\24\3\25\3\25\3\25\7\25\u0160")
        buf.write("\n\25\f\25\16\25\u0163\13\25\3\26\6\26\u0166\n\26\r\26")
        buf.write("\16\26\u0167\3\26\5\26\u016b\n\26\3\26\3\26\3\26\5\26")
        buf.write("\u0170\n\26\3\27\3\27\3\27\3\27\5\27\u0176\n\27\3\30\3")
        buf.write("\30\3\30\7\30\u017b\n\30\f\30\16\30\u017e\13\30\3\31\3")
        buf.write("\31\3\31\5\31\u0183\n\31\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u0197\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\5\32\u01a1\n\32\3\32\3\32\3\32\3\32\7\32\u01a7")
        buf.write("\n\32\f\32\16\32\u01aa\13\32\3\32\5\32\u01ad\n\32\3\32")
        buf.write("\3\32\3\32\5\32\u01b2\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\5\32\u01ba\n\32\3\33\3\33\5\33\u01be\n\33\3\33\3\33")
        buf.write("\6\33\u01c2\n\33\r\33\16\33\u01c3\3\33\3\33\3\33\5\33")
        buf.write("\u01c9\n\33\3\34\3\34\3\34\3\34\7\34\u01cf\n\34\f\34\16")
        buf.write("\34\u01d2\13\34\5\34\u01d4\n\34\3\34\3\34\3\34\5\34\u01d9")
        buf.write("\n\34\3\35\3\35\5\35\u01dd\n\35\3\35\5\35\u01e0\n\35\3")
        buf.write("\36\3\36\5\36\u01e4\n\36\3\36\3\36\5\36\u01e8\n\36\3\37")
        buf.write("\3\37\3\37\5\37\u01ed\n\37\3 \3 \3 \3 \3 \3 \3 \3 \5 ")
        buf.write("\u01f7\n \3 \5 \u01fa\n \3!\3!\3!\3!\3!\3!\5!\u0202\n")
        buf.write("!\3\"\5\"\u0205\n\"\3\"\3\"\7\"\u0209\n\"\f\"\16\"\u020c")
        buf.write("\13\"\3#\3#\3#\3#\5#\u0212\n#\3#\3#\3#\3#\5#\u0218\n#")
        buf.write("\3#\3#\3#\7#\u021d\n#\f#\16#\u0220\13#\3#\5#\u0223\n#")
        buf.write("\3#\5#\u0226\n#\3#\3#\7#\u022a\n#\f#\16#\u022d\13#\3#")
        buf.write("\3#\6#\u0231\n#\r#\16#\u0232\3#\5#\u0236\n#\3#\5#\u0239")
        buf.write("\n#\3#\3#\3#\3#\3#\5#\u0240\n#\3#\5#\u0243\n#\5#\u0245")
        buf.write("\n#\3#\5#\u0248\n#\7#\u024a\n#\f#\16#\u024d\13#\3$\3$")
        buf.write("\3$\6$\u0252\n$\r$\16$\u0253\3$\3$\5$\u0258\n$\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3&\3&\3&\7&\u0264\n&\f&\16&\u0267\13&\3")
        buf.write("&\5&\u026a\n&\3\'\3\'\3\'\5\'\u026f\n\'\3\'\5\'\u0272")
        buf.write("\n\'\3\'\5\'\u0275\n\'\3(\3(\3(\3(\3(\7(\u027c\n(\f(\16")
        buf.write("(\u027f\13(\3)\3)\7)\u0283\n)\f)\16)\u0286\13)\3)\5)\u0289")
        buf.write("\n)\3*\3*\3*\7*\u028e\n*\f*\16*\u0291\13*\3+\6+\u0294")
        buf.write("\n+\r+\16+\u0295\3+\3+\5+\u029a\n+\5+\u029c\n+\3,\3,\3")
        buf.write(",\7,\u02a1\n,\f,\16,\u02a4\13,\3-\3-\5-\u02a8\n-\3.\3")
        buf.write(".\5.\u02ac\n.\3.\3.\7.\u02b0\n.\f.\16.\u02b3\13.\5.\u02b5")
        buf.write("\n.\3/\3/\3/\3/\3/\7/\u02bc\n/\f/\16/\u02bf\13/\3/\3/")
        buf.write("\7/\u02c3\n/\f/\16/\u02c6\13/\3/\5/\u02c9\n/\3/\3/\7/")
        buf.write("\u02cd\n/\f/\16/\u02d0\13/\3/\6/\u02d3\n/\r/\16/\u02d4")
        buf.write("\3/\5/\u02d8\n/\3/\3/\5/\u02dc\n/\3/\3/\3/\3/\3/\5/\u02e3")
        buf.write("\n/\5/\u02e5\n/\3/\3/\7/\u02e9\n/\f/\16/\u02ec\13/\5/")
        buf.write("\u02ee\n/\3/\3/\3/\7/\u02f3\n/\f/\16/\u02f6\13/\3/\5/")
        buf.write("\u02f9\n/\3/\3/\7/\u02fd\n/\f/\16/\u0300\13/\3/\6/\u0303")
        buf.write("\n/\r/\16/\u0304\3/\5/\u0308\n/\3/\3/\5/\u030c\n/\3/\3")
        buf.write("/\3/\3/\3/\5/\u0313\n/\5/\u0315\n/\3/\3/\7/\u0319\n/\f")
        buf.write("/\16/\u031c\13/\5/\u031e\n/\7/\u0320\n/\f/\16/\u0323\13")
        buf.write("/\3\60\3\60\3\60\3\60\5\60\u0329\n\60\3\60\3\60\5\60\u032d")
        buf.write("\n\60\3\61\6\61\u0330\n\61\r\61\16\61\u0331\3\61\3\61")
        buf.write("\5\61\u0336\n\61\3\61\3\61\3\61\6\61\u033b\n\61\r\61\16")
        buf.write("\61\u033c\3\61\3\61\5\61\u0341\n\61\3\61\7\61\u0344\n")
        buf.write("\61\f\61\16\61\u0347\13\61\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\5\62\u034f\n\62\3\63\3\63\3\63\3\63\3\63\6\63\u0356")
        buf.write("\n\63\r\63\16\63\u0357\3\63\3\63\3\63\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\7\64\u0363\n\64\f\64\16\64\u0366\13\64\3")
        buf.write("\64\3\64\5\64\u036a\n\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u0376\n\64\f\64\16\64\u0379")
        buf.write("\13\64\5\64\u037b\n\64\3\64\3\64\3\64\3\64\7\64\u0381")
        buf.write("\n\64\f\64\16\64\u0384\13\64\5\64\u0386\n\64\7\64\u0388")
        buf.write("\n\64\f\64\16\64\u038b\13\64\3\64\3\64\5\64\u038f\n\64")
        buf.write("\3\65\3\65\3\65\5\65\u0394\n\65\3\65\3\65\3\65\3\66\3")
        buf.write("\66\5\66\u039b\n\66\3\67\3\67\3\67\3\67\3\67\3\67\5\67")
        buf.write("\u03a3\n\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u03ab\n")
        buf.write("\67\38\38\38\39\39\39\39\39\39\39\39\39\39\39\39\39\3")
        buf.write("9\39\39\39\39\39\39\59\u03c4\n9\3:\6:\u03c7\n:\r:\16:")
        buf.write("\u03c8\3:\5:\u03cc\n:\3:\5:\u03cf\n:\5:\u03d1\n:\3:\3")
        buf.write(":\5:\u03d5\n:\3:\3:\5:\u03d9\n:\3;\3;\3;\7;\u03de\n;\f")
        buf.write(";\16;\u03e1\13;\3<\3<\3<\3<\3<\5<\u03e8\n<\3<\5<\u03eb")
        buf.write("\n<\3=\3=\3=\5=\u03f0\n=\3=\3=\3>\7>\u03f5\n>\f>\16>\u03f8")
        buf.write("\13>\3>\3>\3?\7?\u03fd\n?\f?\16?\u0400\13?\3?\3?\7?\u0404")
        buf.write("\n?\f?\16?\u0407\13?\3?\3?\7?\u040b\n?\f?\16?\u040e\13")
        buf.write("?\3?\3?\3?\3?\5?\u0414\n?\3?\2\7\16\30\32D\\@\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|\2\22\3\2lm\4\2MMO")
        buf.write("O\7\2LLNNPPSSXY\5\2JLNNPR\3\2FI\3\2jk\3\2SW\3\2_i\4\2")
        buf.write("\21\21\23\23\3\2\6\b\4\2@A^^\3\2@A\4\2PPWW\4\2\r\r\17")
        buf.write("\17\4\2\20\20\64\64\4\2\25\25\31\31\2\u049b\2\u00a7\3")
        buf.write("\2\2\2\4\u00a9\3\2\2\2\6\u00c0\3\2\2\2\b\u00d0\3\2\2\2")
        buf.write("\n\u00d8\3\2\2\2\f\u00e1\3\2\2\2\16\u00e3\3\2\2\2\20\u00f4")
        buf.write("\3\2\2\2\22\u010f\3\2\2\2\24\u011b\3\2\2\2\26\u011d\3")
        buf.write("\2\2\2\30\u0125\3\2\2\2\32\u0130\3\2\2\2\34\u013b\3\2")
        buf.write("\2\2\36\u0146\3\2\2\2 \u0148\3\2\2\2\"\u014e\3\2\2\2$")
        buf.write("\u0158\3\2\2\2&\u015a\3\2\2\2(\u015c\3\2\2\2*\u016f\3")
        buf.write("\2\2\2,\u0175\3\2\2\2.\u0177\3\2\2\2\60\u017f\3\2\2\2")
        buf.write("\62\u01b9\3\2\2\2\64\u01bb\3\2\2\2\66\u01d8\3\2\2\28\u01dc")
        buf.write("\3\2\2\2:\u01e7\3\2\2\2<\u01e9\3\2\2\2>\u01f9\3\2\2\2")
        buf.write("@\u0201\3\2\2\2B\u0204\3\2\2\2D\u0217\3\2\2\2F\u0257\3")
        buf.write("\2\2\2H\u0259\3\2\2\2J\u0269\3\2\2\2L\u0274\3\2\2\2N\u027d")
        buf.write("\3\2\2\2P\u0280\3\2\2\2R\u028a\3\2\2\2T\u0293\3\2\2\2")
        buf.write("V\u029d\3\2\2\2X\u02a5\3\2\2\2Z\u02b4\3\2\2\2\\\u02ed")
        buf.write("\3\2\2\2^\u032c\3\2\2\2`\u0335\3\2\2\2b\u034e\3\2\2\2")
        buf.write("d\u0350\3\2\2\2f\u038e\3\2\2\2h\u0393\3\2\2\2j\u039a\3")
        buf.write("\2\2\2l\u03aa\3\2\2\2n\u03ac\3\2\2\2p\u03c3\3\2\2\2r\u03d0")
        buf.write("\3\2\2\2t\u03da\3\2\2\2v\u03ea\3\2\2\2x\u03ec\3\2\2\2")
        buf.write("z\u03f6\3\2\2\2|\u0413\3\2\2\2~\u0086\7o\2\2\177\u0086")
        buf.write("\7p\2\2\u0080\u0082\7r\2\2\u0081\u0080\3\2\2\2\u0082\u0083")
        buf.write("\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084")
        buf.write("\u0086\3\2\2\2\u0085~\3\2\2\2\u0085\177\3\2\2\2\u0085")
        buf.write("\u0081\3\2\2\2\u0086\u00a8\3\2\2\2\u0087\u0088\7@\2\2")
        buf.write("\u0088\u0089\5(\25\2\u0089\u008a\7A\2\2\u008a\u00a8\3")
        buf.write("\2\2\2\u008b\u00a8\5\4\3\2\u008c\u008e\7\3\2\2\u008d\u008c")
        buf.write("\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u008f\3\2\2\2\u008f")
        buf.write("\u0090\7@\2\2\u0090\u0094\7D\2\2\u0091\u0093\5j\66\2\u0092")
        buf.write("\u0091\3\2\2\2\u0093\u0096\3\2\2\2\u0094\u0092\3\2\2\2")
        buf.write("\u0094\u0095\3\2\2\2\u0095\u0097\3\2\2\2\u0096\u0094\3")
        buf.write("\2\2\2\u0097\u0098\7E\2\2\u0098\u00a8\7A\2\2\u0099\u009a")
        buf.write("\7\4\2\2\u009a\u009b\7@\2\2\u009b\u009c\5\22\n\2\u009c")
        buf.write("\u009d\7^\2\2\u009d\u009e\5X-\2\u009e\u009f\7A\2\2\u009f")
        buf.write("\u00a8\3\2\2\2\u00a0\u00a1\7\5\2\2\u00a1\u00a2\7@\2\2")
        buf.write("\u00a2\u00a3\5X-\2\u00a3\u00a4\7^\2\2\u00a4\u00a5\5\22")
        buf.write("\n\2\u00a5\u00a6\7A\2\2\u00a6\u00a8\3\2\2\2\u00a7\u0085")
        buf.write("\3\2\2\2\u00a7\u0087\3\2\2\2\u00a7\u008b\3\2\2\2\u00a7")
        buf.write("\u008d\3\2\2\2\u00a7\u0099\3\2\2\2\u00a7\u00a0\3\2\2\2")
        buf.write("\u00a8\3\3\2\2\2\u00a9\u00aa\7;\2\2\u00aa\u00ab\7@\2\2")
        buf.write("\u00ab\u00b3\5$\23\2\u00ac\u00af\7^\2\2\u00ad\u00b0\5")
        buf.write("X-\2\u00ae\u00b0\7\32\2\2\u00af\u00ad\3\2\2\2\u00af\u00ae")
        buf.write("\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b2\7\\\2\2\u00b2")
        buf.write("\u00b4\5$\23\2\u00b3\u00ac\3\2\2\2\u00b4\u00b5\3\2\2\2")
        buf.write("\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3")
        buf.write("\2\2\2\u00b7\u00b8\7A\2\2\u00b8\5\3\2\2\2\u00b9\u00ba")
        buf.write("\7B\2\2\u00ba\u00bb\5(\25\2\u00bb\u00bc\7C\2\2\u00bc\u00c1")
        buf.write("\3\2\2\2\u00bd\u00c1\5\n\6\2\u00be\u00bf\t\2\2\2\u00bf")
        buf.write("\u00c1\7o\2\2\u00c0\u00b9\3\2\2\2\u00c0\u00bd\3\2\2\2")
        buf.write("\u00c0\u00be\3\2\2\2\u00c1\7\3\2\2\2\u00c2\u00d1\5\2\2")
        buf.write("\2\u00c3\u00c5\7\3\2\2\u00c4\u00c3\3\2\2\2\u00c4\u00c5")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00c7\7@\2\2\u00c7")
        buf.write("\u00c8\5X-\2\u00c8\u00c9\7A\2\2\u00c9\u00ca\7D\2\2\u00ca")
        buf.write("\u00cc\5`\61\2\u00cb\u00cd\7^\2\2\u00cc\u00cb\3\2\2\2")
        buf.write("\u00cc\u00cd\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf\7")
        buf.write("E\2\2\u00cf\u00d1\3\2\2\2\u00d0\u00c2\3\2\2\2\u00d0\u00c4")
        buf.write("\3\2\2\2\u00d1\u00d5\3\2\2\2\u00d2\u00d4\5\6\4\2\u00d3")
        buf.write("\u00d2\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2")
        buf.write("\u00d5\u00d6\3\2\2\2\u00d6\t\3\2\2\2\u00d7\u00d5\3\2\2")
        buf.write("\2\u00d8\u00da\7@\2\2\u00d9\u00db\5\20\t\2\u00da\u00d9")
        buf.write("\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\u00dd\7A\2\2\u00dd\13\3\2\2\2\u00de\u00df\t\3\2\2\u00df")
        buf.write("\u00e2\5\22\n\2\u00e0\u00e2\5\16\b\2\u00e1\u00de\3\2\2")
        buf.write("\2\u00e1\u00e0\3\2\2\2\u00e2\r\3\2\2\2\u00e3\u00e4\b\b")
        buf.write("\1\2\u00e4\u00e5\5\b\5\2\u00e5\u00e6\t\3\2\2\u00e6\u00f1")
        buf.write("\3\2\2\2\u00e7\u00eb\f\3\2\2\u00e8\u00ea\5\6\4\2\u00e9")
        buf.write("\u00e8\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2")
        buf.write("\u00eb\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2\u00ed\u00eb\3")
        buf.write("\2\2\2\u00ee\u00f0\t\3\2\2\u00ef\u00e7\3\2\2\2\u00f0\u00f3")
        buf.write("\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\17\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f9\5$\23\2\u00f5")
        buf.write("\u00f6\7^\2\2\u00f6\u00f8\5$\23\2\u00f7\u00f5\3\2\2\2")
        buf.write("\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3")
        buf.write("\2\2\2\u00fa\21\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u0110")
        buf.write("\5\b\5\2\u00fd\u0110\5\f\7\2\u00fe\u00ff\t\4\2\2\u00ff")
        buf.write("\u0110\5\24\13\2\u0100\u0106\7,\2\2\u0101\u0107\5\22\n")
        buf.write("\2\u0102\u0103\7@\2\2\u0103\u0104\5X-\2\u0104\u0105\7")
        buf.write("A\2\2\u0105\u0107\3\2\2\2\u0106\u0101\3\2\2\2\u0106\u0102")
        buf.write("\3\2\2\2\u0107\u0110\3\2\2\2\u0108\u0109\7\67\2\2\u0109")
        buf.write("\u010a\7@\2\2\u010a\u010b\5X-\2\u010b\u010c\7A\2\2\u010c")
        buf.write("\u0110\3\2\2\2\u010d\u010e\7U\2\2\u010e\u0110\7o\2\2\u010f")
        buf.write("\u00fc\3\2\2\2\u010f\u00fd\3\2\2\2\u010f\u00fe\3\2\2\2")
        buf.write("\u010f\u0100\3\2\2\2\u010f\u0108\3\2\2\2\u010f\u010d\3")
        buf.write("\2\2\2\u0110\23\3\2\2\2\u0111\u011c\5\22\n\2\u0112\u0114")
        buf.write("\7\3\2\2\u0113\u0112\3\2\2\2\u0113\u0114\3\2\2\2\u0114")
        buf.write("\u0115\3\2\2\2\u0115\u0116\7@\2\2\u0116\u0117\5X-\2\u0117")
        buf.write("\u0118\7A\2\2\u0118\u0119\5\24\13\2\u0119\u011c\3\2\2")
        buf.write("\2\u011a\u011c\7q\2\2\u011b\u0111\3\2\2\2\u011b\u0113")
        buf.write("\3\2\2\2\u011b\u011a\3\2\2\2\u011c\25\3\2\2\2\u011d\u0122")
        buf.write("\5\24\13\2\u011e\u011f\t\5\2\2\u011f\u0121\5\24\13\2\u0120")
        buf.write("\u011e\3\2\2\2\u0121\u0124\3\2\2\2\u0122\u0120\3\2\2\2")
        buf.write("\u0122\u0123\3\2\2\2\u0123\27\3\2\2\2\u0124\u0122\3\2")
        buf.write("\2\2\u0125\u0126\b\r\1\2\u0126\u0127\5\26\f\2\u0127\u012d")
        buf.write("\3\2\2\2\u0128\u0129\f\3\2\2\u0129\u012a\t\6\2\2\u012a")
        buf.write("\u012c\5\26\f\2\u012b\u0128\3\2\2\2\u012c\u012f\3\2\2")
        buf.write("\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\31\3")
        buf.write("\2\2\2\u012f\u012d\3\2\2\2\u0130\u0131\b\16\1\2\u0131")
        buf.write("\u0132\5\30\r\2\u0132\u0138\3\2\2\2\u0133\u0134\f\3\2")
        buf.write("\2\u0134\u0135\t\7\2\2\u0135\u0137\5\30\r\2\u0136\u0133")
        buf.write("\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\33\3\2\2\2\u013a\u0138\3\2\2\2\u013b")
        buf.write("\u0140\5\32\16\2\u013c\u013d\t\b\2\2\u013d\u013f\5\32")
        buf.write("\16\2\u013e\u013c\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\35\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0143\u0147\5 \21\2\u0144\u0147\5\"\22\2\u0145")
        buf.write("\u0147\5\34\17\2\u0146\u0143\3\2\2\2\u0146\u0144\3\2\2")
        buf.write("\2\u0146\u0145\3\2\2\2\u0147\37\3\2\2\2\u0148\u0149\5")
        buf.write("\34\17\2\u0149\u014a\7Z\2\2\u014a\u014b\5(\25\2\u014b")
        buf.write("\u014c\7\\\2\2\u014c\u014d\5\36\20\2\u014d!\3\2\2\2\u014e")
        buf.write("\u014f\5\34\17\2\u014f\u0150\7[\2\2\u0150\u0151\5\36\20")
        buf.write("\2\u0151#\3\2\2\2\u0152\u0159\5\36\20\2\u0153\u0154\5")
        buf.write("\22\n\2\u0154\u0155\5&\24\2\u0155\u0156\5$\23\2\u0156")
        buf.write("\u0159\3\2\2\2\u0157\u0159\7q\2\2\u0158\u0152\3\2\2\2")
        buf.write("\u0158\u0153\3\2\2\2\u0158\u0157\3\2\2\2\u0159%\3\2\2")
        buf.write("\2\u015a\u015b\t\t\2\2\u015b\'\3\2\2\2\u015c\u0161\5$")
        buf.write("\23\2\u015d\u015e\7^\2\2\u015e\u0160\5$\23\2\u015f\u015d")
        buf.write("\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161")
        buf.write("\u0162\3\2\2\2\u0162)\3\2\2\2\u0163\u0161\3\2\2\2\u0164")
        buf.write("\u0166\5,\27\2\u0165\u0164\3\2\2\2\u0166\u0167\3\2\2\2")
        buf.write("\u0167\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016a\3")
        buf.write("\2\2\2\u0169\u016b\5.\30\2\u016a\u0169\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d\7]\2\2\u016d")
        buf.write("\u0170\3\2\2\2\u016e\u0170\5d\63\2\u016f\u0165\3\2\2\2")
        buf.write("\u016f\u016e\3\2\2\2\u0170+\3\2\2\2\u0171\u0176\t\n\2")
        buf.write("\2\u0172\u0176\5\62\32\2\u0173\u0176\5> \2\u0174\u0176")
        buf.write("\5@!\2\u0175\u0171\3\2\2\2\u0175\u0172\3\2\2\2\u0175\u0173")
        buf.write("\3\2\2\2\u0175\u0174\3\2\2\2\u0176-\3\2\2\2\u0177\u017c")
        buf.write("\5\60\31\2\u0178\u0179\7^\2\2\u0179\u017b\5\60\31\2\u017a")
        buf.write("\u0178\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2\2")
        buf.write("\u017c\u017d\3\2\2\2\u017d/\3\2\2\2\u017e\u017c\3\2\2")
        buf.write("\2\u017f\u0182\5B\"\2\u0180\u0181\7_\2\2\u0181\u0183\5")
        buf.write("^\60\2\u0182\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183\61")
        buf.write("\3\2\2\2\u0184\u0197\7\63\2\2\u0185\u0197\7\27\2\2\u0186")
        buf.write("\u0197\7*\2\2\u0187\u0197\7%\2\2\u0188\u0197\7&\2\2\u0189")
        buf.write("\u0197\7 \2\2\u018a\u0197\7\34\2\2\u018b\u0197\7+\2\2")
        buf.write("\u018c\u0197\7\62\2\2\u018d\u0197\79\2\2\u018e\u0197\7")
        buf.write(":\2\2\u018f\u0197\7\6\2\2\u0190\u0197\7\7\2\2\u0191\u0197")
        buf.write("\7\b\2\2\u0192\u0193\7\3\2\2\u0193\u0194\7@\2\2\u0194")
        buf.write("\u0195\t\13\2\2\u0195\u0197\7A\2\2\u0196\u0184\3\2\2\2")
        buf.write("\u0196\u0185\3\2\2\2\u0196\u0186\3\2\2\2\u0196\u0187\3")
        buf.write("\2\2\2\u0196\u0188\3\2\2\2\u0196\u0189\3\2\2\2\u0196\u018a")
        buf.write("\3\2\2\2\u0196\u018b\3\2\2\2\u0196\u018c\3\2\2\2\u0196")
        buf.write("\u018d\3\2\2\2\u0196\u018e\3\2\2\2\u0196\u018f\3\2\2\2")
        buf.write("\u0196\u0190\3\2\2\2\u0196\u0191\3\2\2\2\u0196\u0192\3")
        buf.write("\2\2\2\u0197\u01ba\3\2\2\2\u0198\u0199\78\2\2\u0199\u019a")
        buf.write("\7@\2\2\u019a\u019b\5X-\2\u019b\u019c\7A\2\2\u019c\u01ba")
        buf.write("\3\2\2\2\u019d\u01ba\5\64\33\2\u019e\u01b1\7\36\2\2\u019f")
        buf.write("\u01a1\7o\2\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2")
        buf.write("\u01a1\u01a2\3\2\2\2\u01a2\u01a3\7D\2\2\u01a3\u01a8\5")
        buf.write("<\37\2\u01a4\u01a5\7^\2\2\u01a5\u01a7\5<\37\2\u01a6\u01a4")
        buf.write("\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2")
        buf.write("\u01ab\u01ad\7^\2\2\u01ac\u01ab\3\2\2\2\u01ac\u01ad\3")
        buf.write("\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\7E\2\2\u01af\u01b2")
        buf.write("\3\2\2\2\u01b0\u01b2\7o\2\2\u01b1\u01a0\3\2\2\2\u01b1")
        buf.write("\u01b0\3\2\2\2\u01b2\u01ba\3\2\2\2\u01b3\u01ba\7o\2\2")
        buf.write("\u01b4\u01b5\7\t\2\2\u01b5\u01b6\7@\2\2\u01b6\u01b7\5")
        buf.write("\36\20\2\u01b7\u01b8\7A\2\2\u01b8\u01ba\3\2\2\2\u01b9")
        buf.write("\u0196\3\2\2\2\u01b9\u0198\3\2\2\2\u01b9\u019d\3\2\2\2")
        buf.write("\u01b9\u019e\3\2\2\2\u01b9\u01b3\3\2\2\2\u01b9\u01b4\3")
        buf.write("\2\2\2\u01ba\63\3\2\2\2\u01bb\u01c8\7\22\2\2\u01bc\u01be")
        buf.write("\7o\2\2\u01bd\u01bc\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01bf\3\2\2\2\u01bf\u01c1\7D\2\2\u01c0\u01c2\5\66\34")
        buf.write("\2\u01c1\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1")
        buf.write("\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5")
        buf.write("\u01c6\7E\2\2\u01c6\u01c9\3\2\2\2\u01c7\u01c9\7o\2\2\u01c8")
        buf.write("\u01bd\3\2\2\2\u01c8\u01c7\3\2\2\2\u01c9\65\3\2\2\2\u01ca")
        buf.write("\u01d3\58\35\2\u01cb\u01d0\5:\36\2\u01cc\u01cd\7^\2\2")
        buf.write("\u01cd\u01cf\5:\36\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2\3")
        buf.write("\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d4")
        buf.write("\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01cb\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\7]\2\2")
        buf.write("\u01d6\u01d9\3\2\2\2\u01d7\u01d9\5d\63\2\u01d8\u01ca\3")
        buf.write("\2\2\2\u01d8\u01d7\3\2\2\2\u01d9\67\3\2\2\2\u01da\u01dd")
        buf.write("\5\62\32\2\u01db\u01dd\7\23\2\2\u01dc\u01da\3\2\2\2\u01dc")
        buf.write("\u01db\3\2\2\2\u01dd\u01df\3\2\2\2\u01de\u01e0\58\35\2")
        buf.write("\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e09\3\2\2")
        buf.write("\2\u01e1\u01e8\5B\"\2\u01e2\u01e4\5B\"\2\u01e3\u01e2\3")
        buf.write("\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6")
        buf.write("\7\\\2\2\u01e6\u01e8\5\36\20\2\u01e7\u01e1\3\2\2\2\u01e7")
        buf.write("\u01e3\3\2\2\2\u01e8;\3\2\2\2\u01e9\u01ec\7o\2\2\u01ea")
        buf.write("\u01eb\7_\2\2\u01eb\u01ed\5\36\20\2\u01ec\u01ea\3\2\2")
        buf.write("\2\u01ec\u01ed\3\2\2\2\u01ed=\3\2\2\2\u01ee\u01f7\7$\2")
        buf.write("\2\u01ef\u01f7\7=\2\2\u01f0\u01f7\7\n\2\2\u01f1\u01f7")
        buf.write("\7\13\2\2\u01f2\u01f3\7\f\2\2\u01f3\u01f4\7@\2\2\u01f4")
        buf.write("\u01f5\7o\2\2\u01f5\u01f7\7A\2\2\u01f6\u01ee\3\2\2\2\u01f6")
        buf.write("\u01ef\3\2\2\2\u01f6\u01f0\3\2\2\2\u01f6\u01f1\3\2\2\2")
        buf.write("\u01f6\u01f2\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01fa\5")
        buf.write("H%\2\u01f9\u01f6\3\2\2\2\u01f9\u01f8\3\2\2\2\u01fa?\3")
        buf.write("\2\2\2\u01fb\u01fc\7\66\2\2\u01fc\u01fd\7@\2\2\u01fd\u0202")
        buf.write("\5X-\2\u01fe\u01ff\5\36\20\2\u01ff\u0200\7A\2\2\u0200")
        buf.write("\u0202\3\2\2\2\u0201\u01fb\3\2\2\2\u0201\u01fe\3\2\2\2")
        buf.write("\u0202A\3\2\2\2\u0203\u0205\5P)\2\u0204\u0203\3\2\2\2")
        buf.write("\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u020a\5")
        buf.write("D#\2\u0207\u0209\5F$\2\u0208\u0207\3\2\2\2\u0209\u020c")
        buf.write("\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("C\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u020e\b#\1\2\u020e")
        buf.write("\u0211\7o\2\2\u020f\u0210\7\\\2\2\u0210\u0212\7q\2\2\u0211")
        buf.write("\u020f\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0218\3\2\2\2")
        buf.write("\u0213\u0214\7@\2\2\u0214\u0215\5B\"\2\u0215\u0216\7A")
        buf.write("\2\2\u0216\u0218\3\2\2\2\u0217\u020d\3\2\2\2\u0217\u0213")
        buf.write("\3\2\2\2\u0218\u024b\3\2\2\2\u0219\u0247\f\3\2\2\u021a")
        buf.write("\u0238\7B\2\2\u021b\u021d\7\23\2\2\u021c\u021b\3\2\2\2")
        buf.write("\u021d\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021f\3")
        buf.write("\2\2\2\u021f\u0225\3\2\2\2\u0220\u021e\3\2\2\2\u0221\u0223")
        buf.write("\5$\23\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u0223")
        buf.write("\u0226\3\2\2\2\u0224\u0226\7P\2\2\u0225\u0222\3\2\2\2")
        buf.write("\u0225\u0224\3\2\2\2\u0226\u0239\3\2\2\2\u0227\u022b\7")
        buf.write("-\2\2\u0228\u022a\7\23\2\2\u0229\u0228\3\2\2\2\u022a\u022d")
        buf.write("\3\2\2\2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c")
        buf.write("\u022e\3\2\2\2\u022d\u022b\3\2\2\2\u022e\u0236\7C\2\2")
        buf.write("\u022f\u0231\7\23\2\2\u0230\u022f\3\2\2\2\u0231\u0232")
        buf.write("\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233")
        buf.write("\u0234\3\2\2\2\u0234\u0236\7-\2\2\u0235\u0227\3\2\2\2")
        buf.write("\u0235\u0230\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0239\5")
        buf.write("$\23\2\u0238\u021e\3\2\2\2\u0238\u0235\3\2\2\2\u0239\u023a")
        buf.write("\3\2\2\2\u023a\u0248\7C\2\2\u023b\u0244\7@\2\2\u023c\u023f")
        buf.write("\5R*\2\u023d\u023e\7^\2\2\u023e\u0240\7n\2\2\u023f\u023d")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0245\3\2\2\2\u0241")
        buf.write("\u0243\5V,\2\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u0245\3\2\2\2\u0244\u023c\3\2\2\2\u0244\u0242\3\2\2\2")
        buf.write("\u0245\u0246\3\2\2\2\u0246\u0248\7A\2\2\u0247\u021a\3")
        buf.write("\2\2\2\u0247\u023b\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u0219")
        buf.write("\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024cE\3\2\2\2\u024d\u024b\3\2\2\2\u024e")
        buf.write("\u024f\7\r\2\2\u024f\u0251\7@\2\2\u0250\u0252\7r\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0251\3\2\2\2")
        buf.write("\u0253\u0254\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0258\7")
        buf.write("A\2\2\u0256\u0258\5H%\2\u0257\u024e\3\2\2\2\u0257\u0256")
        buf.write("\3\2\2\2\u0258G\3\2\2\2\u0259\u025a\7\16\2\2\u025a\u025b")
        buf.write("\7@\2\2\u025b\u025c\7@\2\2\u025c\u025d\5J&\2\u025d\u025e")
        buf.write("\7A\2\2\u025e\u025f\7A\2\2\u025fI\3\2\2\2\u0260\u0265")
        buf.write("\5L\'\2\u0261\u0262\7^\2\2\u0262\u0264\5L\'\2\u0263\u0261")
        buf.write("\3\2\2\2\u0264\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u026a\3\2\2\2\u0267\u0265\3\2\2\2")
        buf.write("\u0268\u026a\3\2\2\2\u0269\u0260\3\2\2\2\u0269\u0268\3")
        buf.write("\2\2\2\u026aK\3\2\2\2\u026b\u0271\n\f\2\2\u026c\u026e")
        buf.write("\7@\2\2\u026d\u026f\5\20\t\2\u026e\u026d\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\7A\2\2")
        buf.write("\u0271\u026c\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0275\3")
        buf.write("\2\2\2\u0273\u0275\3\2\2\2\u0274\u026b\3\2\2\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275M\3\2\2\2\u0276\u027c\n\r\2\2\u0277\u0278")
        buf.write("\7@\2\2\u0278\u0279\5N(\2\u0279\u027a\7A\2\2\u027a\u027c")
        buf.write("\3\2\2\2\u027b\u0276\3\2\2\2\u027b\u0277\3\2\2\2\u027c")
        buf.write("\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e\3\2\2\2")
        buf.write("\u027eO\3\2\2\2\u027f\u027d\3\2\2\2\u0280\u0284\t\16\2")
        buf.write("\2\u0281\u0283\7\23\2\2\u0282\u0281\3\2\2\2\u0283\u0286")
        buf.write("\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285")
        buf.write("\u0288\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0289\5P)\2\u0288")
        buf.write("\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289Q\3\2\2\2\u028a")
        buf.write("\u028f\5T+\2\u028b\u028c\7^\2\2\u028c\u028e\5T+\2\u028d")
        buf.write("\u028b\3\2\2\2\u028e\u0291\3\2\2\2\u028f\u028d\3\2\2\2")
        buf.write("\u028f\u0290\3\2\2\2\u0290S\3\2\2\2\u0291\u028f\3\2\2")
        buf.write("\2\u0292\u0294\5,\27\2\u0293\u0292\3\2\2\2\u0294\u0295")
        buf.write("\3\2\2\2\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u029b\3\2\2\2\u0297\u029c\5B\"\2\u0298\u029a\5Z.\2\u0299")
        buf.write("\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029c\3\2\2\2")
        buf.write("\u029b\u0297\3\2\2\2\u029b\u0299\3\2\2\2\u029cU\3\2\2")
        buf.write("\2\u029d\u02a2\7o\2\2\u029e\u029f\7^\2\2\u029f\u02a1\7")
        buf.write("o\2\2\u02a0\u029e\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0")
        buf.write("\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3W\3\2\2\2\u02a4\u02a2")
        buf.write("\3\2\2\2\u02a5\u02a7\58\35\2\u02a6\u02a8\5Z.\2\u02a7\u02a6")
        buf.write("\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8Y\3\2\2\2\u02a9\u02b5")
        buf.write("\5P)\2\u02aa\u02ac\5P)\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac")
        buf.write("\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02b1\5\\/\2\u02ae")
        buf.write("\u02b0\5F$\2\u02af\u02ae\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b5\3\2\2\2")
        buf.write("\u02b3\u02b1\3\2\2\2\u02b4\u02a9\3\2\2\2\u02b4\u02ab\3")
        buf.write("\2\2\2\u02b5[\3\2\2\2\u02b6\u02b7\b/\1\2\u02b7\u02b8\7")
        buf.write("@\2\2\u02b8\u02b9\5Z.\2\u02b9\u02bd\7A\2\2\u02ba\u02bc")
        buf.write("\5F$\2\u02bb\u02ba\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd\u02bb")
        buf.write("\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02ee\3\2\2\2\u02bf")
        buf.write("\u02bd\3\2\2\2\u02c0\u02db\7B\2\2\u02c1\u02c3\7\23\2\2")
        buf.write("\u02c2\u02c1\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4\u02c2\3")
        buf.write("\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c7\u02c9\5$\23\2\u02c8\u02c7\3\2\2\2\u02c8")
        buf.write("\u02c9\3\2\2\2\u02c9\u02dc\3\2\2\2\u02ca\u02ce\7-\2\2")
        buf.write("\u02cb\u02cd\7\23\2\2\u02cc\u02cb\3\2\2\2\u02cd\u02d0")
        buf.write("\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf")
        buf.write("\u02d8\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d1\u02d3\7\23\2")
        buf.write("\2\u02d2\u02d1\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d2")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d8\7-\2\2\u02d7\u02ca\3\2\2\2\u02d7\u02d2\3\2\2\2")
        buf.write("\u02d8\u02d9\3\2\2\2\u02d9\u02dc\5$\23\2\u02da\u02dc\7")
        buf.write("P\2\2\u02db\u02c4\3\2\2\2\u02db\u02d7\3\2\2\2\u02db\u02da")
        buf.write("\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02ee\7C\2\2\u02de")
        buf.write("\u02e4\7@\2\2\u02df\u02e2\5R*\2\u02e0\u02e1\7^\2\2\u02e1")
        buf.write("\u02e3\7n\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e5\3\2\2\2\u02e4\u02df\3\2\2\2\u02e4\u02e5\3")
        buf.write("\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02ea\7A\2\2\u02e7\u02e9")
        buf.write("\5F$\2\u02e8\u02e7\3\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8")
        buf.write("\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec")
        buf.write("\u02ea\3\2\2\2\u02ed\u02b6\3\2\2\2\u02ed\u02c0\3\2\2\2")
        buf.write("\u02ed\u02de\3\2\2\2\u02ee\u0321\3\2\2\2\u02ef\u031d\f")
        buf.write("\3\2\2\u02f0\u030b\7B\2\2\u02f1\u02f3\7\23\2\2\u02f2\u02f1")
        buf.write("\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4\u02f2\3\2\2\2\u02f4")
        buf.write("\u02f5\3\2\2\2\u02f5\u02f8\3\2\2\2\u02f6\u02f4\3\2\2\2")
        buf.write("\u02f7\u02f9\5$\23\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3")
        buf.write("\2\2\2\u02f9\u030c\3\2\2\2\u02fa\u02fe\7-\2\2\u02fb\u02fd")
        buf.write("\7\23\2\2\u02fc\u02fb\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe")
        buf.write("\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0308\3\2\2\2")
        buf.write("\u0300\u02fe\3\2\2\2\u0301\u0303\7\23\2\2\u0302\u0301")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0302\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308\7-\2\2")
        buf.write("\u0307\u02fa\3\2\2\2\u0307\u0302\3\2\2\2\u0308\u0309\3")
        buf.write("\2\2\2\u0309\u030c\5$\23\2\u030a\u030c\7P\2\2\u030b\u02f4")
        buf.write("\3\2\2\2\u030b\u0307\3\2\2\2\u030b\u030a\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u031e\7C\2\2\u030e\u0314\7@\2\2\u030f")
        buf.write("\u0312\5R*\2\u0310\u0311\7^\2\2\u0311\u0313\7n\2\2\u0312")
        buf.write("\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0315\3\2\2\2")
        buf.write("\u0314\u030f\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3")
        buf.write("\2\2\2\u0316\u031a\7A\2\2\u0317\u0319\5F$\2\u0318\u0317")
        buf.write("\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2\u031a")
        buf.write("\u031b\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2")
        buf.write("\u031d\u02f0\3\2\2\2\u031d\u030e\3\2\2\2\u031e\u0320\3")
        buf.write("\2\2\2\u031f\u02ef\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f")
        buf.write("\3\2\2\2\u0321\u0322\3\2\2\2\u0322]\3\2\2\2\u0323\u0321")
        buf.write("\3\2\2\2\u0324\u032d\5$\23\2\u0325\u0326\7D\2\2\u0326")
        buf.write("\u0328\5`\61\2\u0327\u0329\7^\2\2\u0328\u0327\3\2\2\2")
        buf.write("\u0328\u0329\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032b\7")
        buf.write("E\2\2\u032b\u032d\3\2\2\2\u032c\u0324\3\2\2\2\u032c\u0325")
        buf.write("\3\2\2\2\u032d_\3\2\2\2\u032e\u0330\5b\62\2\u032f\u032e")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u032f\3\2\2\2\u0331")
        buf.write("\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\7_\2\2")
        buf.write("\u0334\u0336\3\2\2\2\u0335\u032f\3\2\2\2\u0335\u0336\3")
        buf.write("\2\2\2\u0336\u0337\3\2\2\2\u0337\u0345\5^\60\2\u0338\u0340")
        buf.write("\7^\2\2\u0339\u033b\5b\62\2\u033a\u0339\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2")
        buf.write("\u033d\u033e\3\2\2\2\u033e\u033f\7_\2\2\u033f\u0341\3")
        buf.write("\2\2\2\u0340\u033a\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342")
        buf.write("\3\2\2\2\u0342\u0344\5^\60\2\u0343\u0338\3\2\2\2\u0344")
        buf.write("\u0347\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2")
        buf.write("\u0346a\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u0349\7B\2\2")
        buf.write("\u0349\u034a\5\36\20\2\u034a\u034b\7C\2\2\u034b\u034f")
        buf.write("\3\2\2\2\u034c\u034d\7m\2\2\u034d\u034f\7o\2\2\u034e\u0348")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034fc\3\2\2\2\u0350\u0351")
        buf.write("\7>\2\2\u0351\u0352\7@\2\2\u0352\u0353\5\36\20\2\u0353")
        buf.write("\u0355\7^\2\2\u0354\u0356\7r\2\2\u0355\u0354\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2")
        buf.write("\u0358\u0359\3\2\2\2\u0359\u035a\7A\2\2\u035a\u035b\7")
        buf.write("]\2\2\u035be\3\2\2\2\u035c\u035d\7o\2\2\u035d\u035e\7")
        buf.write("\\\2\2\u035e\u038f\5f\64\2\u035f\u038f\5h\65\2\u0360\u0364")
        buf.write("\7D\2\2\u0361\u0363\5j\66\2\u0362\u0361\3\2\2\2\u0363")
        buf.write("\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0367\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u038f\7")
        buf.write("E\2\2\u0368\u036a\5(\25\2\u0369\u0368\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u038f\7]\2\2\u036c")
        buf.write("\u038f\5l\67\2\u036d\u038f\5p9\2\u036e\u038f\5v<\2\u036f")
        buf.write("\u0370\t\17\2\2\u0370\u0371\t\20\2\2\u0371\u037a\7@\2")
        buf.write("\2\u0372\u0377\5\34\17\2\u0373\u0374\7^\2\2\u0374\u0376")
        buf.write("\5\34\17\2\u0375\u0373\3\2\2\2\u0376\u0379\3\2\2\2\u0377")
        buf.write("\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037b\3\2\2\2")
        buf.write("\u0379\u0377\3\2\2\2\u037a\u0372\3\2\2\2\u037a\u037b\3")
        buf.write("\2\2\2\u037b\u0389\3\2\2\2\u037c\u0385\7\\\2\2\u037d\u0382")
        buf.write("\5\34\17\2\u037e\u037f\7^\2\2\u037f\u0381\5\34\17\2\u0380")
        buf.write("\u037e\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2")
        buf.write("\u0382\u0383\3\2\2\2\u0383\u0386\3\2\2\2\u0384\u0382\3")
        buf.write("\2\2\2\u0385\u037d\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388")
        buf.write("\3\2\2\2\u0387\u037c\3\2\2\2\u0388\u038b\3\2\2\2\u0389")
        buf.write("\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\3\2\2\2")
        buf.write("\u038b\u0389\3\2\2\2\u038c\u038d\7A\2\2\u038d\u038f\7")
        buf.write("]\2\2\u038e\u035c\3\2\2\2\u038e\u035f\3\2\2\2\u038e\u0360")
        buf.write("\3\2\2\2\u038e\u0369\3\2\2\2\u038e\u036c\3\2\2\2\u038e")
        buf.write("\u036d\3\2\2\2\u038e\u036e\3\2\2\2\u038e\u036f\3\2\2\2")
        buf.write("\u038fg\3\2\2\2\u0390\u0391\7\26\2\2\u0391\u0394\5\36")
        buf.write("\20\2\u0392\u0394\7\32\2\2\u0393\u0390\3\2\2\2\u0393\u0392")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\7\\\2\2\u0396")
        buf.write("\u0397\5f\64\2\u0397i\3\2\2\2\u0398\u039b\5*\26\2\u0399")
        buf.write("\u039b\5f\64\2\u039a\u0398\3\2\2\2\u039a\u0399\3\2\2\2")
        buf.write("\u039bk\3\2\2\2\u039c\u039d\7#\2\2\u039d\u039e\7@\2\2")
        buf.write("\u039e\u039f\5(\25\2\u039f\u03a0\7A\2\2\u03a0\u03a2\5")
        buf.write("f\64\2\u03a1\u03a3\5n8\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3")
        buf.write("\3\2\2\2\u03a3\u03ab\3\2\2\2\u03a4\u03a5\7/\2\2\u03a5")
        buf.write("\u03a6\7@\2\2\u03a6\u03a7\5(\25\2\u03a7\u03a8\7A\2\2\u03a8")
        buf.write("\u03a9\5f\64\2\u03a9\u03ab\3\2\2\2\u03aa\u039c\3\2\2\2")
        buf.write("\u03aa\u03a4\3\2\2\2\u03abm\3\2\2\2\u03ac\u03ad\7\35\2")
        buf.write("\2\u03ad\u03ae\5f\64\2\u03aeo\3\2\2\2\u03af\u03b0\7\65")
        buf.write("\2\2\u03b0\u03b1\7@\2\2\u03b1\u03b2\5(\25\2\u03b2\u03b3")
        buf.write("\7A\2\2\u03b3\u03b4\5f\64\2\u03b4\u03c4\3\2\2\2\u03b5")
        buf.write("\u03b6\7\33\2\2\u03b6\u03b7\5f\64\2\u03b7\u03b8\7\65\2")
        buf.write("\2\u03b8\u03b9\7@\2\2\u03b9\u03ba\5(\25\2\u03ba\u03bb")
        buf.write("\7A\2\2\u03bb\u03bc\7]\2\2\u03bc\u03c4\3\2\2\2\u03bd\u03be")
        buf.write("\7!\2\2\u03be\u03bf\7@\2\2\u03bf\u03c0\5r:\2\u03c0\u03c1")
        buf.write("\7A\2\2\u03c1\u03c2\5f\64\2\u03c2\u03c4\3\2\2\2\u03c3")
        buf.write("\u03af\3\2\2\2\u03c3\u03b5\3\2\2\2\u03c3\u03bd\3\2\2\2")
        buf.write("\u03c4q\3\2\2\2\u03c5\u03c7\5,\27\2\u03c6\u03c5\3\2\2")
        buf.write("\2\u03c7\u03c8\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9")
        buf.write("\3\2\2\2\u03c9\u03cb\3\2\2\2\u03ca\u03cc\5.\30\2\u03cb")
        buf.write("\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03d1\3\2\2\2")
        buf.write("\u03cd\u03cf\5(\25\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf\3")
        buf.write("\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03c6\3\2\2\2\u03d0\u03ce")
        buf.write("\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4\7]\2\2\u03d3")
        buf.write("\u03d5\5t;\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5")
        buf.write("\u03d6\3\2\2\2\u03d6\u03d8\7]\2\2\u03d7\u03d9\5t;\2\u03d8")
        buf.write("\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9s\3\2\2\2\u03da")
        buf.write("\u03df\5$\23\2\u03db\u03dc\7^\2\2\u03dc\u03de\5$\23\2")
        buf.write("\u03dd\u03db\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3")
        buf.write("\2\2\2\u03df\u03e0\3\2\2\2\u03e0u\3\2\2\2\u03e1\u03df")
        buf.write("\3\2\2\2\u03e2\u03eb\5x=\2\u03e3\u03e4\t\21\2\2\u03e4")
        buf.write("\u03eb\7]\2\2\u03e5\u03e7\7)\2\2\u03e6\u03e8\5(\25\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03eb\7]\2\2\u03ea\u03e2\3\2\2\2\u03ea\u03e3\3")
        buf.write("\2\2\2\u03ea\u03e5\3\2\2\2\u03ebw\3\2\2\2\u03ec\u03ef")
        buf.write("\7\"\2\2\u03ed\u03f0\7o\2\2\u03ee\u03f0\5\22\n\2\u03ef")
        buf.write("\u03ed\3\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2")
        buf.write("\u03f1\u03f2\7]\2\2\u03f2y\3\2\2\2\u03f3\u03f5\5|?\2\u03f4")
        buf.write("\u03f3\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2")
        buf.write("\u03f6\u03f7\3\2\2\2\u03f7\u03f9\3\2\2\2\u03f8\u03f6\3")
        buf.write("\2\2\2\u03f9\u03fa\7\2\2\3\u03fa{\3\2\2\2\u03fb\u03fd")
        buf.write("\5,\27\2\u03fc\u03fb\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2")
        buf.write("\u0400\u03fe\3\2\2\2\u0401\u0405\5B\"\2\u0402\u0404\5")
        buf.write("*\26\2\u0403\u0402\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403")
        buf.write("\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407")
        buf.write("\u0405\3\2\2\2\u0408\u040c\7D\2\2\u0409\u040b\5j\66\2")
        buf.write("\u040a\u0409\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3")
        buf.write("\2\2\2\u040c\u040d\3\2\2\2\u040d\u040f\3\2\2\2\u040e\u040c")
        buf.write("\3\2\2\2\u040f\u0410\7E\2\2\u0410\u0414\3\2\2\2\u0411")
        buf.write("\u0414\5*\26\2\u0412\u0414\7]\2\2\u0413\u03fe\3\2\2\2")
        buf.write("\u0413\u0411\3\2\2\2\u0413\u0412\3\2\2\2\u0414}\3\2\2")
        buf.write("\2\u0097\u0083\u0085\u008d\u0094\u00a7\u00af\u00b5\u00c0")
        buf.write("\u00c4\u00cc\u00d0\u00d5\u00da\u00e1\u00eb\u00f1\u00f9")
        buf.write("\u0106\u010f\u0113\u011b\u0122\u012d\u0138\u0140\u0146")
        buf.write("\u0158\u0161\u0167\u016a\u016f\u0175\u017c\u0182\u0196")
        buf.write("\u01a0\u01a8\u01ac\u01b1\u01b9\u01bd\u01c3\u01c8\u01d0")
        buf.write("\u01d3\u01d8\u01dc\u01df\u01e3\u01e7\u01ec\u01f6\u01f9")
        buf.write("\u0201\u0204\u020a\u0211\u0217\u021e\u0222\u0225\u022b")
        buf.write("\u0232\u0235\u0238\u023f\u0242\u0244\u0247\u024b\u0253")
        buf.write("\u0257\u0265\u0269\u026e\u0271\u0274\u027b\u027d\u0284")
        buf.write("\u0288\u028f\u0295\u0299\u029b\u02a2\u02a7\u02ab\u02b1")
        buf.write("\u02b4\u02bd\u02c4\u02c8\u02ce\u02d4\u02d7\u02db\u02e2")
        buf.write("\u02e4\u02ea\u02ed\u02f4\u02f8\u02fe\u0304\u0307\u030b")
        buf.write("\u0312\u0314\u031a\u031d\u0321\u0328\u032c\u0331\u0335")
        buf.write("\u033c\u0340\u0345\u034e\u0357\u0364\u0369\u0377\u037a")
        buf.write("\u0382\u0385\u0389\u038e\u0393\u039a\u03a2\u03aa\u03c3")
        buf.write("\u03c8\u03cb\u03ce\u03d0\u03d4\u03d8\u03df\u03e7\u03ea")
        buf.write("\u03ef\u03f6\u03fe\u0405\u040c\u0413")
        return buf.getvalue()


class CParser(ParserWithTimeLimit):
    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    literalNames = ["<INVALID>", "'__extension__'", "'__builtin_va_arg'",
                    "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'",
                    "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'",
                    "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'",
                    "<INVALID>", "<INVALID>", "<INVALID>", "'auto'", "'break'",
                    "'case'", "'char'", "'const'", "'continue'", "'default'",
                    "'do'", "'double'", "'else'", "'enum'", "'extern'",
                    "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'",
                    "'long'", "'register'", "'restrict'", "'return'", "'short'",
                    "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'",
                    "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'",
                    "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'",
                    "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'",
                    "'_Noreturn'", "'_Static_assert'", "'_Thread_local'",
                    "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='",
                    "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'",
                    "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'",
                    "'||'", "'^'", "'!'", "'~'", "'?'", "'?:'", "':'",
                    "';'", "','", "'='", "'*='", "'/='", "'%='", "'+='",
                    "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'=='",
                    "'!='", "'->'", "'.'", "'...'"]

    symbolicNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "StorageClassSpecifier",
                     "StructOrUnion", "TypeQualifier", "Auto", "Break",
                     "Case", "Char", "Const", "Continue", "Default", "Do",
                     "Double", "Else", "Enum", "Extern", "Float", "For",
                     "Goto", "If", "Inline", "Int", "Long", "Register",
                     "Restrict", "Return", "Short", "Signed", "Sizeof",
                     "Static", "Struct", "Switch", "Typedef", "Union",
                     "Unsigned", "Void", "Volatile", "While", "Alignas",
                     "Alignof", "Atomic", "Bool", "Complex", "Generic",
                     "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal",
                     "LeftParen", "RightParen", "LeftBracket", "RightBracket",
                     "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater",
                     "GreaterEqual", "LeftShift", "RightShift", "Plus",
                     "PlusPlus", "Minus", "MinusMinus", "Star", "Div",
                     "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not",
                     "Tilde", "Question", "UnaryCondition", "Colon", "Semi",
                     "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign",
                     "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign",
                     "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual",
                     "Arrow", "Dot", "Ellipsis", "Identifier", "Constant",
                     "DigitSequence", "StringLiteral", "ComplexDefine",
                     "AsmBlock", "LineAfterPreprocessing", "LineDirective",
                     "PragmaDirective", "Whitespace", "Newline", "BlockComment",
                     "LineComment"]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_postOperation = 2
    RULE_postfixExpression = 3
    RULE_call = 4
    RULE_unaryIncDecExpression = 5
    RULE_postfixUnaryIncDecExpression = 6
    RULE_argumentExpressionList = 7
    RULE_unaryExpression = 8
    RULE_castExpression = 9
    RULE_shiftExpression = 10
    RULE_relationalExpression = 11
    RULE_equalityExpression = 12
    RULE_logicalOrExpression = 13
    RULE_conditionalExpression = 14
    RULE_ternaryConditionalExpression = 15
    RULE_unaryConditionalExpression = 16
    RULE_assignmentExpression = 17
    RULE_assignmentOperator = 18
    RULE_expression = 19
    RULE_declaration = 20
    RULE_declarationSpecifier = 21
    RULE_initDeclaratorList = 22
    RULE_initDeclarator = 23
    RULE_typeSpecifier = 24
    RULE_structOrUnionSpecifier = 25
    RULE_structDeclaration = 26
    RULE_specifierQualifierList = 27
    RULE_structDeclarator = 28
    RULE_enumerator = 29
    RULE_functionSpecifier = 30
    RULE_alignmentSpecifier = 31
    RULE_declarator = 32
    RULE_directDeclarator = 33
    RULE_gccDeclaratorExtension = 34
    RULE_gccAttributeSpecifier = 35
    RULE_gccAttributeList = 36
    RULE_gccAttribute = 37
    RULE_nestedParenthesesBlock = 38
    RULE_pointer = 39
    RULE_parameterList = 40
    RULE_parameterDeclaration = 41
    RULE_identifierList = 42
    RULE_typeName = 43
    RULE_abstractDeclarator = 44
    RULE_directAbstractDeclarator = 45
    RULE_initializer = 46
    RULE_initializerList = 47
    RULE_designator = 48
    RULE_staticAssertDeclaration = 49
    RULE_statement = 50
    RULE_caseStatement = 51
    RULE_blockItem = 52
    RULE_selectionStatement = 53
    RULE_elseStatement = 54
    RULE_iterationStatement = 55
    RULE_forCondition = 56
    RULE_forExpression = 57
    RULE_jumpStatement = 58
    RULE_gotoStatement = 59
    RULE_compilationUnit = 60
    RULE_externalDeclaration = 61

    ruleNames = ["primaryExpression", "genericSelection", "postOperation",
                 "postfixExpression", "call", "unaryIncDecExpression",
                 "postfixUnaryIncDecExpression", "argumentExpressionList",
                 "unaryExpression", "castExpression", "shiftExpression",
                 "relationalExpression", "equalityExpression", "logicalOrExpression",
                 "conditionalExpression", "ternaryConditionalExpression",
                 "unaryConditionalExpression", "assignmentExpression",
                 "assignmentOperator", "expression", "declaration", "declarationSpecifier",
                 "initDeclaratorList", "initDeclarator", "typeSpecifier",
                 "structOrUnionSpecifier", "structDeclaration", "specifierQualifierList",
                 "structDeclarator", "enumerator", "functionSpecifier",
                 "alignmentSpecifier", "declarator", "directDeclarator",
                 "gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList",
                 "gccAttribute", "nestedParenthesesBlock", "pointer",
                 "parameterList", "parameterDeclaration", "identifierList",
                 "typeName", "abstractDeclarator", "directAbstractDeclarator",
                 "initializer", "initializerList", "designator", "staticAssertDeclaration",
                 "statement", "caseStatement", "blockItem", "selectionStatement",
                 "elseStatement", "iterationStatement", "forCondition",
                 "forExpression", "jumpStatement", "gotoStatement", "compilationUnit",
                 "externalDeclaration"]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    StorageClassSpecifier = 15
    StructOrUnion = 16
    TypeQualifier = 17
    Auto = 18
    Break = 19
    Case = 20
    Char = 21
    Const = 22
    Continue = 23
    Default = 24
    Do = 25
    Double = 26
    Else = 27
    Enum = 28
    Extern = 29
    Float = 30
    For = 31
    Goto = 32
    If = 33
    Inline = 34
    Int = 35
    Long = 36
    Register = 37
    Restrict = 38
    Return = 39
    Short = 40
    Signed = 41
    Sizeof = 42
    Static = 43
    Struct = 44
    Switch = 45
    Typedef = 46
    Union = 47
    Unsigned = 48
    Void = 49
    Volatile = 50
    While = 51
    Alignas = 52
    Alignof = 53
    Atomic = 54
    Bool = 55
    Complex = 56
    Generic = 57
    Imaginary = 58
    Noreturn = 59
    StaticAssert = 60
    ThreadLocal = 61
    LeftParen = 62
    RightParen = 63
    LeftBracket = 64
    RightBracket = 65
    LeftBrace = 66
    RightBrace = 67
    Less = 68
    LessEqual = 69
    Greater = 70
    GreaterEqual = 71
    LeftShift = 72
    RightShift = 73
    Plus = 74
    PlusPlus = 75
    Minus = 76
    MinusMinus = 77
    Star = 78
    Div = 79
    Mod = 80
    And = 81
    Or = 82
    AndAnd = 83
    OrOr = 84
    Caret = 85
    Not = 86
    Tilde = 87
    Question = 88
    UnaryCondition = 89
    Colon = 90
    Semi = 91
    Comma = 92
    Assign = 93
    StarAssign = 94
    DivAssign = 95
    ModAssign = 96
    PlusAssign = 97
    MinusAssign = 98
    LeftShiftAssign = 99
    RightShiftAssign = 100
    AndAssign = 101
    XorAssign = 102
    OrAssign = 103
    Equal = 104
    NotEqual = 105
    Arrow = 106
    Dot = 107
    Ellipsis = 108
    Identifier = 109
    Constant = 110
    DigitSequence = 111
    StringLiteral = 112
    ComplexDefine = 113
    AsmBlock = 114
    LineAfterPreprocessing = 115
    LineDirective = 116
    PragmaDirective = 117
    Whitespace = 118
    Newline = 119
    BlockComment = 120
    LineComment = 121

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._predicates = None

    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext, 0)

        def blockItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext, i)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0  # Token type
        try:
            self.state = 165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 131
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CParser.Identifier:
                    self.state = 124
                    self.match(CParser.Identifier)
                    pass
                elif token == CParser.Constant:
                    self.state = 125
                    self.match(CParser.Constant)
                    pass
                elif token == CParser.StringLiteral:
                    self.state = 127
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 126
                            self.match(CParser.StringLiteral)

                        else:
                            raise NoViableAltException(self)
                        self.state = 129
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.match(CParser.LeftParen)
                self.state = 134
                self.expression()
                self.state = 135
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 137
                self.genericSelection()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.T__0:
                    self.state = 138
                    self.match(CParser.T__0)

                self.state = 141
                self.match(CParser.LeftParen)
                self.state = 142
                self.match(CParser.LeftBrace)
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                        1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                                1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (
                                1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.StorageClassSpecifier) | (
                                1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (1 << CParser.Break) | (
                                1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Continue) | (
                                1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (
                                1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (
                                1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (
                                1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                                1 << CParser.Sizeof) | (1 << CParser.Switch) | (1 << CParser.Unsigned) | (
                                1 << CParser.Void) | (1 << CParser.While) | (1 << CParser.Alignas) | (
                                1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (
                                1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (
                                1 << CParser.StaticAssert) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CParser.LeftBrace - 66)) | (1 << (CParser.Plus - 66)) | (
                        1 << (CParser.PlusPlus - 66)) | (1 << (CParser.Minus - 66)) | (
                                1 << (CParser.MinusMinus - 66)) | (1 << (CParser.Star - 66)) | (
                                1 << (CParser.And - 66)) | (1 << (CParser.AndAnd - 66)) | (1 << (CParser.Not - 66)) | (
                                1 << (CParser.Tilde - 66)) | (1 << (CParser.Semi - 66)) | (
                                1 << (CParser.Identifier - 66)) | (1 << (CParser.Constant - 66)) | (
                                1 << (CParser.DigitSequence - 66)) | (1 << (CParser.StringLiteral - 66)))) != 0):
                    self.state = 143
                    self.blockItem()
                    self.state = 148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 149
                self.match(CParser.RightBrace)
                self.state = 150
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 151
                self.match(CParser.T__1)
                self.state = 152
                self.match(CParser.LeftParen)
                self.state = 153
                self.unaryExpression()
                self.state = 154
                self.match(CParser.Comma)
                self.state = 155
                self.typeName()
                self.state = 156
                self.match(CParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 158
                self.match(CParser.T__2)
                self.state = 159
                self.match(CParser.LeftParen)
                self.state = 160
                self.typeName()
                self.state = 161
                self.match(CParser.Comma)
                self.state = 162
                self.unaryExpression()
                self.state = 163
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericSelectionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext, i)

        def typeName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeNameContext)
            else:
                return self.getTypedRuleContext(CParser.TypeNameContext, i)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.match(CParser.Generic)
            self.state = 168
            self.match(CParser.LeftParen)
            self.state = 169
            self.assignmentExpression()
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 170
                self.match(CParser.Comma)
                self.state = 173
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6,
                             CParser.StructOrUnion, CParser.TypeQualifier, CParser.Char, CParser.Double, CParser.Enum,
                             CParser.Float, CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned,
                             CParser.Void, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                    self.state = 171
                    self.typeName()
                    pass
                elif token == CParser.Default:
                    self.state = 172
                    self.match(CParser.Default)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 175
                self.match(CParser.Colon)
                self.state = 176
                self.assignmentExpression()
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CParser.Comma):
                    break

            self.state = 181
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostOperationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def call(self):
            return self.getTypedRuleContext(CParser.CallContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_postOperation

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postOperation(self):

        localctx = CParser.PostOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_postOperation)
        self._la = 0  # Token type
        try:
            self.state = 190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.LeftBracket:
                self.enterOuterAlt(localctx, 1)
                self.state = 183
                self.match(CParser.LeftBracket)
                self.state = 184
                self.expression()
                self.state = 185
                self.match(CParser.RightBracket)
                pass
            elif token == CParser.LeftParen:
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.call()
                pass
            elif token in [CParser.Arrow, CParser.Dot]:
                self.enterOuterAlt(localctx, 3)
                self.state = 188
                _la = self._input.LA(1)
                if not (_la == CParser.Arrow or _la == CParser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 189
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext, 0)

        def postOperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PostOperationContext)
            else:
                return self.getTypedRuleContext(CParser.PostOperationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_postfixExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.state = 192
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.T__0:
                    self.state = 193
                    self.match(CParser.T__0)

                self.state = 196
                self.match(CParser.LeftParen)
                self.state = 197
                self.typeName()
                self.state = 198
                self.match(CParser.RightParen)
                self.state = 199
                self.match(CParser.LeftBrace)
                self.state = 200
                self.initializerList()
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Comma:
                    self.state = 201
                    self.match(CParser.Comma)

                self.state = 204
                self.match(CParser.RightBrace)
                pass

            self.state = 211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 208
                    self.postOperation()
                self.state = 213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_call

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCall"):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)

    def call(self):

        localctx = CParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(CParser.LeftParen)
            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                    1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                    (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                    (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                    1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                            1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (
                            1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (
                            1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 215
                self.argumentExpressionList()

            self.state = 218
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryIncDecExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def postfixUnaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.PostfixUnaryIncDecExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryIncDecExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryIncDecExpression"):
                return visitor.visitUnaryIncDecExpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryIncDecExpression(self):

        localctx = CParser.UnaryIncDecExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unaryIncDecExpression)
        self._la = 0  # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.PlusPlus, CParser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 220
                _la = self._input.LA(1)
                if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 221
                self.unaryExpression()
                pass
            elif token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Generic, CParser.LeftParen,
                           CParser.Identifier, CParser.Constant, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self.postfixUnaryIncDecExpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryIncDecExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext, 0)

        def postfixUnaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.PostfixUnaryIncDecExpressionContext, 0)

        def postOperation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PostOperationContext)
            else:
                return self.getTypedRuleContext(CParser.PostOperationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_postfixUnaryIncDecExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def postfixUnaryIncDecExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.PostfixUnaryIncDecExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_postfixUnaryIncDecExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.postfixExpression()
            self.state = 227
            _la = self._input.LA(1)
            if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.PostfixUnaryIncDecExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixUnaryIncDecExpression)
                    self.state = 229
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                            (1 << (CParser.LeftParen - 62)) | (1 << (CParser.LeftBracket - 62)) | (
                            1 << (CParser.Arrow - 62)) | (1 << (CParser.Dot - 62)))) != 0):
                        self.state = 230
                        self.postOperation()
                        self.state = 235
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 236
                    _la = self._input.LA(1)
                    if not (_la == CParser.PlusPlus or _la == CParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 15, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_argumentExpressionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.assignmentExpression()
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CParser.Comma:
                self.state = 243
                self.match(CParser.Comma)
                self.state = 244
                self.assignmentExpression()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext, 0)

        def unaryIncDecExpression(self):
            return self.getTypedRuleContext(CParser.UnaryIncDecExpressionContext, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryExpression)
        self._la = 0  # Token type
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.unaryIncDecExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                _la = self._input.LA(1)
                if not (((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.Star - 74)) | (
                        1 << (CParser.And - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 253
                self.castExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 254
                self.match(CParser.Sizeof)
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                if la_ == 1:
                    self.state = 255
                    self.unaryExpression()
                    pass

                elif la_ == 2:
                    self.state = 256
                    self.match(CParser.LeftParen)
                    self.state = 257
                    self.typeName()
                    self.state = 258
                    self.match(CParser.RightParen)
                    pass

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.match(CParser.Alignof)
                self.state = 263
                self.match(CParser.LeftParen)
                self.state = 264
                self.typeName()
                self.state = 265
                self.match(CParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 267
                self.match(CParser.AndAnd)
                self.state = 268
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_castExpression)
        self._la = 0  # Token type
        try:
            self.state = 281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.T__0:
                    self.state = 272
                    self.match(CParser.T__0)

                self.state = 275
                self.match(CParser.LeftParen)
                self.state = 276
                self.typeName()
                self.state = 277
                self.match(CParser.RightParen)
                self.state = 278
                self.castExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.CastExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def shiftExpression(self):

        localctx = CParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_shiftExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.castExpression()
            self.state = 288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 284
                    _la = self._input.LA(1)
                    if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
                            (1 << (CParser.LeftShift - 72)) | (1 << (CParser.RightShift - 72)) | (
                            1 << (CParser.Plus - 72)) | (1 << (CParser.Minus - 72)) | (1 << (CParser.Star - 72)) | (
                                    1 << (CParser.Div - 72)) | (1 << (CParser.Mod - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 285
                    self.castExpression()
                self.state = 290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext, 0)

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalExpression"):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)

    def relationalExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_relationalExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.shiftExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                    self.state = 294
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 295
                    _la = self._input.LA(1)
                    if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & (
                            (1 << (CParser.Less - 68)) | (1 << (CParser.LessEqual - 68)) | (
                            1 << (CParser.Greater - 68)) | (1 << (CParser.GreaterEqual - 68)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 296
                    self.shiftExpression()
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEqualityExpression"):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)

    def equalityExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_equalityExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                    self.state = 305
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 306
                    _la = self._input.LA(1)
                    if not (_la == CParser.Equal or _la == CParser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 307
                    self.relationalExpression(0)
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.EqualityExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def logicalOrExpression(self):

        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_logicalOrExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.equalityExpression(0)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & (
                    (1 << (CParser.And - 81)) | (1 << (CParser.Or - 81)) | (1 << (CParser.AndAnd - 81)) | (
                    1 << (CParser.OrOr - 81)) | (1 << (CParser.Caret - 81)))) != 0):
                self.state = 314
                _la = self._input.LA(1)
                if not (((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & (
                        (1 << (CParser.And - 81)) | (1 << (CParser.Or - 81)) | (1 << (CParser.AndAnd - 81)) | (
                        1 << (CParser.OrOr - 81)) | (1 << (CParser.Caret - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 315
                self.equalityExpression(0)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ternaryConditionalExpression(self):
            return self.getTypedRuleContext(CParser.TernaryConditionalExpressionContext, 0)

        def unaryConditionalExpression(self):
            return self.getTypedRuleContext(CParser.UnaryConditionalExpressionContext, 0)

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_conditionalExpression)
        try:
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.ternaryConditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.unaryConditionalExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.logicalOrExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TernaryConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_ternaryConditionalExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTernaryConditionalExpression"):
                return visitor.visitTernaryConditionalExpression(self)
            else:
                return visitor.visitChildren(self)

    def ternaryConditionalExpression(self):

        localctx = CParser.TernaryConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_ternaryConditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.logicalOrExpression()
            self.state = 327
            self.match(CParser.Question)
            self.state = 328
            self.expression()
            self.state = 329
            self.match(CParser.Colon)
            self.state = 330
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryConditionalExpression

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnaryConditionalExpression"):
                return visitor.visitUnaryConditionalExpression(self)
            else:
                return visitor.visitChildren(self)

    def unaryConditionalExpression(self):

        localctx = CParser.UnaryConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unaryConditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.logicalOrExpression()
            self.state = 333
            self.match(CParser.UnaryCondition)
            self.state = 334
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assignmentExpression)
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 26, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.unaryExpression()
                self.state = 338
                self.assignmentOperator()
                self.state = 339
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 341
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignmentOperator"):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)

    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assignmentOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            _la = self._input.LA(1)
            if not (((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & (
                    (1 << (CParser.Assign - 93)) | (1 << (CParser.StarAssign - 93)) | (
                    1 << (CParser.DivAssign - 93)) | (1 << (CParser.ModAssign - 93)) | (
                            1 << (CParser.PlusAssign - 93)) | (1 << (CParser.MinusAssign - 93)) | (
                            1 << (CParser.LeftShiftAssign - 93)) | (1 << (CParser.RightShiftAssign - 93)) | (
                            1 << (CParser.AndAssign - 93)) | (1 << (CParser.XorAssign - 93)) | (
                            1 << (CParser.OrAssign - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.assignmentExpression()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CParser.Comma:
                self.state = 347
                self.match(CParser.Comma)
                self.state = 348
                self.assignmentExpression()
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_declaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5,
                         CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__11,
                         CParser.StorageClassSpecifier, CParser.StructOrUnion, CParser.TypeQualifier, CParser.Char,
                         CParser.Double, CParser.Enum, CParser.Float, CParser.Inline, CParser.Int, CParser.Long,
                         CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Unsigned, CParser.Void, CParser.Alignas,
                         CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic,
                         CParser.Noreturn, CParser.LeftParen, CParser.Plus, CParser.PlusPlus, CParser.Minus,
                         CParser.MinusMinus, CParser.Star, CParser.And, CParser.AndAnd, CParser.Not, CParser.Tilde,
                         CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 355
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 354
                        self.declarationSpecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)

                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (
                        1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 359
                    self.initDeclaratorList()

                self.state = 362
                self.match(CParser.Semi)
                pass
            elif token == CParser.StaticAssert:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StorageClassSpecifier(self):
            return self.getToken(CParser.StorageClassSpecifier, 0)

        def TypeQualifier(self):
            return self.getToken(CParser.TypeQualifier, 0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext, 0)

        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext, 0)

        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declarationSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                _la = self._input.LA(1)
                if not (_la == CParser.StorageClassSpecifier or _la == CParser.TypeQualifier):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self.functionSpecifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 370
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext, i)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_initDeclaratorList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.initDeclarator()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CParser.Comma:
                self.state = 374
                self.match(CParser.Comma)
                self.state = 375
                self.initDeclarator()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_initDeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.declarator()
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.Assign:
                self.state = 382
                self.match(CParser.Assign)
                self.state = 383
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext, 0)

        def enumerator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext, i)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typeSpecifier(self):

        localctx = CParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeSpecifier)
        self._la = 0  # Token type
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.Char, CParser.Double,
                         CParser.Float, CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned,
                         CParser.Void, CParser.Bool, CParser.Complex]:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CParser.Void:
                    self.state = 386
                    self.match(CParser.Void)
                    pass
                elif token == CParser.Char:
                    self.state = 387
                    self.match(CParser.Char)
                    pass
                elif token == CParser.Short:
                    self.state = 388
                    self.match(CParser.Short)
                    pass
                elif token == CParser.Int:
                    self.state = 389
                    self.match(CParser.Int)
                    pass
                elif token == CParser.Long:
                    self.state = 390
                    self.match(CParser.Long)
                    pass
                elif token == CParser.Float:
                    self.state = 391
                    self.match(CParser.Float)
                    pass
                elif token == CParser.Double:
                    self.state = 392
                    self.match(CParser.Double)
                    pass
                elif token == CParser.Signed:
                    self.state = 393
                    self.match(CParser.Signed)
                    pass
                elif token == CParser.Unsigned:
                    self.state = 394
                    self.match(CParser.Unsigned)
                    pass
                elif token == CParser.Bool:
                    self.state = 395
                    self.match(CParser.Bool)
                    pass
                elif token == CParser.Complex:
                    self.state = 396
                    self.match(CParser.Complex)
                    pass
                elif token == CParser.T__3:
                    self.state = 397
                    self.match(CParser.T__3)
                    pass
                elif token == CParser.T__4:
                    self.state = 398
                    self.match(CParser.T__4)
                    pass
                elif token == CParser.T__5:
                    self.state = 399
                    self.match(CParser.T__5)
                    pass
                elif token == CParser.T__0:
                    self.state = 400
                    self.match(CParser.T__0)
                    self.state = 401
                    self.match(CParser.LeftParen)
                    self.state = 402
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and (
                            (1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 403
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == CParser.Atomic:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(CParser.Atomic)
                self.state = 407
                self.match(CParser.LeftParen)
                self.state = 408
                self.typeName()
                self.state = 409
                self.match(CParser.RightParen)
                pass
            elif token == CParser.StructOrUnion:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.structOrUnionSpecifier()
                pass
            elif token == CParser.Enum:
                self.enterOuterAlt(localctx, 4)
                self.state = 412
                self.match(CParser.Enum)
                self.state = 431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                if la_ == 1:
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CParser.Identifier:
                        self.state = 413
                        self.match(CParser.Identifier)

                    self.state = 416
                    self.match(CParser.LeftBrace)
                    self.state = 417
                    self.enumerator()
                    self.state = 422
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 418
                            self.match(CParser.Comma)
                            self.state = 419
                            self.enumerator()
                        self.state = 424
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 36, self._ctx)

                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CParser.Comma:
                        self.state = 425
                        self.match(CParser.Comma)

                    self.state = 428
                    self.match(CParser.RightBrace)
                    pass

                elif la_ == 2:
                    self.state = 430
                    self.match(CParser.Identifier)
                    pass

                pass
            elif token == CParser.Identifier:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.match(CParser.Identifier)
                pass
            elif token == CParser.T__6:
                self.enterOuterAlt(localctx, 6)
                self.state = 434
                self.match(CParser.T__6)
                self.state = 435
                self.match(CParser.LeftParen)
                self.state = 436
                self.conditionalExpression()
                self.state = 437
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StructOrUnion(self):
            return self.getToken(CParser.StructOrUnion, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def structDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structOrUnionSpecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(CParser.StructOrUnion)
            self.state = 454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
            if la_ == 1:
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Identifier:
                    self.state = 442
                    self.match(CParser.Identifier)

                self.state = 445
                self.match(CParser.LeftBrace)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 446
                    self.structDeclaration()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (
                            1 << CParser.T__6) | (1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (
                                    1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (
                                    1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (
                                    1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Unsigned) | (
                                    1 << CParser.Void) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (
                                    1 << CParser.Complex) | (
                                    1 << CParser.StaticAssert))) != 0) or _la == CParser.Identifier):
                        break

                self.state = 451
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.state = 453
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def structDeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext, i)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_structDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.StructOrUnion,
                         CParser.TypeQualifier, CParser.Char, CParser.Double, CParser.Enum, CParser.Float, CParser.Int,
                         CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void, CParser.Atomic,
                         CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.specifierQualifierList()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (
                        1 << (CParser.Colon - 62)) | (1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 457
                    self.structDeclarator()
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CParser.Comma:
                        self.state = 458
                        self.match(CParser.Comma)
                        self.state = 459
                        self.structDeclarator()
                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 467
                self.match(CParser.Semi)
                pass
            elif token == CParser.StaticAssert:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext, 0)

        def TypeQualifier(self):
            return self.getToken(CParser.TypeQualifier, 0)

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.StructOrUnion,
                         CParser.Char, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long,
                         CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void, CParser.Atomic, CParser.Bool,
                         CParser.Complex, CParser.Identifier]:
                self.state = 472
                self.typeSpecifier()
                pass
            elif token == CParser.TypeQualifier:
                self.state = 473
                self.match(CParser.TypeQualifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
            if la_ == 1:
                self.state = 476
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structDeclarator)
        self._la = 0  # Token type
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 49, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (
                        1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 480
                    self.declarator()

                self.state = 483
                self.match(CParser.Colon)
                self.state = 484
                self.conditionalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumerator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(CParser.Identifier)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.Assign:
                self.state = 488
                self.match(CParser.Assign)
                self.state = 489
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionSpecifier)
        try:
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__7, CParser.T__8, CParser.T__9, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token == CParser.Inline:
                    self.state = 492
                    self.match(CParser.Inline)
                    pass
                elif token == CParser.Noreturn:
                    self.state = 493
                    self.match(CParser.Noreturn)
                    pass
                elif token == CParser.T__7:
                    self.state = 494
                    self.match(CParser.T__7)
                    pass
                elif token == CParser.T__8:
                    self.state = 495
                    self.match(CParser.T__8)
                    pass
                elif token == CParser.T__9:
                    self.state = 496
                    self.match(CParser.T__9)
                    self.state = 497
                    self.match(CParser.LeftParen)
                    self.state = 498
                    self.match(CParser.Identifier)
                    self.state = 499
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token == CParser.T__11:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alignmentSpecifier)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.Alignas:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.match(CParser.Alignas)
                self.state = 506
                self.match(CParser.LeftParen)
                self.state = 507
                self.typeName()
                pass
            elif token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Sizeof, CParser.Alignof, CParser.Generic,
                           CParser.LeftParen, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                           CParser.Star, CParser.And, CParser.AndAnd, CParser.Not, CParser.Tilde, CParser.Identifier,
                           CParser.Constant, CParser.DigitSequence, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.conditionalExpression()
                self.state = 509
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_declarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.Star or _la == CParser.Caret:
                self.state = 513
                self.pointer()

            self.state = 516
            self.directDeclarator(0)
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 55, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 517
                    self.gccDeclaratorExtension()
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 55, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext, 0)

        def TypeQualifier(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.TypeQualifier)
            else:
                return self.getToken(CParser.TypeQualifier, i)

        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def directDeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_directDeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.Identifier:
                self.state = 524
                self.match(CParser.Identifier)
                self.state = 527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(CParser.Colon)
                    self.state = 526
                    self.match(CParser.DigitSequence)

                pass
            elif token == CParser.LeftParen:
                self.state = 529
                self.match(CParser.LeftParen)
                self.state = 530
                self.declarator()
                self.state = 531
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                    self.state = 535
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 581
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CParser.LeftBracket:
                        self.state = 536
                        self.match(CParser.LeftBracket)
                        self.state = 566
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
                        if la_ == 1:
                            self.state = 540
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CParser.TypeQualifier:
                                self.state = 537
                                self.match(CParser.TypeQualifier)
                                self.state = 542
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 547
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input, 60, self._ctx)
                            if la_ == 1:
                                self.state = 544
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                        1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                                                1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and (
                                        (1 << (_la - 74)) & (
                                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                                        1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                                1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                                1 << (CParser.StringLiteral - 74)))) != 0):
                                    self.state = 543
                                    self.assignmentExpression()

                                pass

                            elif la_ == 2:
                                self.state = 546
                                self.match(CParser.Star)
                                pass

                            pass

                        elif la_ == 2:
                            self.state = 563
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token == CParser.Static:
                                self.state = 549
                                self.match(CParser.Static)
                                self.state = 553
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CParser.TypeQualifier:
                                    self.state = 550
                                    self.match(CParser.TypeQualifier)
                                    self.state = 555
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 556
                                self.match(CParser.RightBracket)
                                pass
                            elif token == CParser.TypeQualifier:
                                self.state = 558
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 557
                                    self.match(CParser.TypeQualifier)
                                    self.state = 560
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la == CParser.TypeQualifier):
                                        break

                                self.state = 562
                                self.match(CParser.Static)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 565
                            self.assignmentExpression()
                            pass

                        self.state = 568
                        self.match(CParser.RightBracket)
                        pass
                    elif token == CParser.LeftParen:
                        self.state = 569
                        self.match(CParser.LeftParen)
                        self.state = 578
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
                        if la_ == 1:
                            self.state = 570
                            self.parameterList()
                            self.state = 573
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CParser.Comma:
                                self.state = 571
                                self.match(CParser.Comma)
                                self.state = 572
                                self.match(CParser.Ellipsis)

                            pass

                        elif la_ == 2:
                            self.state = 576
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CParser.Identifier:
                                self.state = 575
                                self.identifierList()

                            pass

                        self.state = 580
                        self.match(CParser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_gccDeclaratorExtension)
        self._la = 0  # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.T__10:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.match(CParser.T__10)
                self.state = 589
                self.match(CParser.LeftParen)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 590
                    self.match(CParser.StringLiteral)
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CParser.StringLiteral):
                        break

                self.state = 595
                self.match(CParser.RightParen)
                pass
            elif token == CParser.T__11:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(CParser.T__11)
            self.state = 600
            self.match(CParser.LeftParen)
            self.state = 601
            self.match(CParser.LeftParen)
            self.state = 602
            self.gccAttributeList()
            self.state = 603
            self.match(CParser.RightParen)
            self.state = 604
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_gccAttributeList)
        self._la = 0  # Token type
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.gccAttribute()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CParser.Comma:
                    self.state = 607
                    self.match(CParser.Comma)
                    self.state = 608
                    self.gccAttribute()
                    self.state = 613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_gccAttribute)
        self._la = 0  # Token type
        try:
            self.state = 626
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5,
                         CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11,
                         CParser.T__12, CParser.T__13, CParser.StorageClassSpecifier, CParser.StructOrUnion,
                         CParser.TypeQualifier, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const,
                         CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum,
                         CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline,
                         CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short,
                         CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch,
                         CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile,
                         CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex,
                         CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert,
                         CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace,
                         CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual,
                         CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus,
                         CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or,
                         CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question,
                         CParser.UnaryCondition, CParser.Colon, CParser.Semi, CParser.Assign, CParser.StarAssign,
                         CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign,
                         CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign,
                         CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot,
                         CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence,
                         CParser.StringLiteral, CParser.ComplexDefine, CParser.AsmBlock, CParser.LineAfterPreprocessing,
                         CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline,
                         CParser.BlockComment, CParser.LineComment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.RightParen - 62)) | (
                        1 << (CParser.Comma - 62)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.LeftParen:
                    self.state = 618
                    self.match(CParser.LeftParen)
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                            1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                            (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                            (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                            1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                    1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                    1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                    1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                    1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                    1 << (CParser.StringLiteral - 74)))) != 0):
                        self.state = 619
                        self.argumentExpressionList()

                    self.state = 622
                    self.match(CParser.RightParen)

                pass
            elif token in [CParser.RightParen, CParser.Comma]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedParenthesesBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_nestedParenthesesBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                    1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                            1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (
                            1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.StorageClassSpecifier) | (
                            1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (1 << CParser.Auto) | (
                            1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (
                            1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (
                            1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (
                            1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (
                            1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (
                            1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (
                            1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (
                            1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (
                            1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (
                            1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (
                            1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (
                            1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (
                            1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (
                            1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or (
                    (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & (
                    (1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (
                    1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (
                            1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (
                            1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (
                            1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (
                            1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (
                            1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (
                            1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (
                            1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (
                            1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (
                            1 << (CParser.UnaryCondition - 64)) | (1 << (CParser.Colon - 64)) | (
                            1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (
                            1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (
                            1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (
                            1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (
                            1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (
                            1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (
                            1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (
                            1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (
                            1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (
                            1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (
                            1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.AsmBlock - 64)) | (
                            1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (
                            1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (
                            1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (
                            1 << (CParser.LineComment - 64)))) != 0):
                self.state = 633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5,
                             CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11,
                             CParser.T__12, CParser.T__13, CParser.StorageClassSpecifier, CParser.StructOrUnion,
                             CParser.TypeQualifier, CParser.Auto, CParser.Break, CParser.Case, CParser.Char,
                             CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else,
                             CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If,
                             CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict,
                             CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static,
                             CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned,
                             CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof,
                             CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary,
                             CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket,
                             CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less,
                             CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift,
                             CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                             CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd,
                             CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question,
                             CParser.UnaryCondition, CParser.Colon, CParser.Semi, CParser.Comma, CParser.Assign,
                             CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign,
                             CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign,
                             CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow,
                             CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence,
                             CParser.StringLiteral, CParser.ComplexDefine, CParser.AsmBlock,
                             CParser.LineAfterPreprocessing, CParser.LineDirective, CParser.PragmaDirective,
                             CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                    self.state = 628
                    _la = self._input.LA(1)
                    if _la <= 0 or _la == CParser.LeftParen or _la == CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token == CParser.LeftParen:
                    self.state = 629
                    self.match(CParser.LeftParen)
                    self.state = 630
                    self.nestedParenthesesBlock()
                    self.state = 631
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeQualifier(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.TypeQualifier)
            else:
                return self.getToken(CParser.TypeQualifier, i)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_pointer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pointer)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            _la = self._input.LA(1)
            if not (_la == CParser.Star or _la == CParser.Caret):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 639
                    self.match(CParser.TypeQualifier)
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)

            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
            if la_ == 1:
                self.state = 645
                self.pointer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def parameterList(self):

        localctx = CParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.parameterDeclaration()
            self.state = 653
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 649
                    self.match(CParser.Comma)
                    self.state = 650
                    self.parameterDeclaration()
                self.state = 655
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 656
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 82, self._ctx)

            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.state = 661
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.LeftBracket - 62)) | (
                        1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)))) != 0):
                    self.state = 662
                    self.abstractDeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_identifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(CParser.Identifier)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CParser.Comma:
                self.state = 668
                self.match(CParser.Comma)
                self.state = 669
                self.match(CParser.Identifier)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeName

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.specifierQualifierList()
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
            if la_ == 1:
                self.state = 676
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext, 0)

        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_abstractDeclarator)
        self._la = 0  # Token type
        try:
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Star or _la == CParser.Caret:
                    self.state = 680
                    self.pointer()

                self.state = 683
                self.directAbstractDeclarator(0)
                self.state = 687
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 684
                        self.gccDeclaratorExtension()
                    self.state = 689
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext, 0)

        def gccDeclaratorExtension(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext, i)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def TypeQualifier(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.TypeQualifier)
            else:
                return self.getToken(CParser.TypeQualifier, i)

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext, 0)

        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def directAbstractDeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_directAbstractDeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
            if la_ == 1:
                self.state = 693
                self.match(CParser.LeftParen)
                self.state = 694
                self.abstractDeclarator()
                self.state = 695
                self.match(CParser.RightParen)
                self.state = 699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 696
                        self.gccDeclaratorExtension()
                    self.state = 701
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

                pass

            elif la_ == 2:
                self.state = 702
                self.match(CParser.LeftBracket)
                self.state = 729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                if la_ == 1:
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CParser.TypeQualifier:
                        self.state = 703
                        self.match(CParser.TypeQualifier)
                        self.state = 708
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                            1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                            (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                            (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                            1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                    1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                    1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                    1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                    1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                    1 << (CParser.StringLiteral - 74)))) != 0):
                        self.state = 709
                        self.assignmentExpression()

                    pass

                elif la_ == 2:
                    self.state = 725
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CParser.Static:
                        self.state = 712
                        self.match(CParser.Static)
                        self.state = 716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CParser.TypeQualifier:
                            self.state = 713
                            self.match(CParser.TypeQualifier)
                            self.state = 718
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token == CParser.TypeQualifier:
                        self.state = 720
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 719
                            self.match(CParser.TypeQualifier)
                            self.state = 722
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CParser.TypeQualifier):
                                break

                        self.state = 724
                        self.match(CParser.Static)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 727
                    self.assignmentExpression()
                    pass

                elif la_ == 3:
                    self.state = 728
                    self.match(CParser.Star)
                    pass

                self.state = 731
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 732
                self.match(CParser.LeftParen)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                        1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                                1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (
                                1 << CParser.StorageClassSpecifier) | (1 << CParser.StructOrUnion) | (
                                1 << CParser.TypeQualifier) | (1 << CParser.Char) | (1 << CParser.Double) | (
                                1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Inline) | (
                                1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (
                                1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Unsigned) | (
                                1 << CParser.Void) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (
                                1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (
                                1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 733
                    self.parameterList()
                    self.state = 736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CParser.Comma:
                        self.state = 734
                        self.match(CParser.Comma)
                        self.state = 735
                        self.match(CParser.Ellipsis)

                self.state = 740
                self.match(CParser.RightParen)
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 741
                        self.gccDeclaratorExtension()
                    self.state = 746
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 99, self._ctx)

                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 799
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                    self.state = 749
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 795
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token == CParser.LeftBracket:
                        self.state = 750
                        self.match(CParser.LeftBracket)
                        self.state = 777
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                        if la_ == 1:
                            self.state = 754
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CParser.TypeQualifier:
                                self.state = 751
                                self.match(CParser.TypeQualifier)
                                self.state = 756
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 758
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                    1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (
                                            1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and (
                                    (1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                                    1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                                                 1 << (CParser.Star - 74)) | (
                                                                 1 << (CParser.And - 74)) | (
                                                                 1 << (CParser.AndAnd - 74)) | (
                                                                 1 << (CParser.Not - 74)) | (
                                                                 1 << (CParser.Tilde - 74)) | (
                                                                 1 << (CParser.Identifier - 74)) | (
                                                                 1 << (CParser.Constant - 74)) | (
                                                                 1 << (CParser.DigitSequence - 74)) | (
                                                                 1 << (CParser.StringLiteral - 74)))) != 0):
                                self.state = 757
                                self.assignmentExpression()

                            pass

                        elif la_ == 2:
                            self.state = 773
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token == CParser.Static:
                                self.state = 760
                                self.match(CParser.Static)
                                self.state = 764
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == CParser.TypeQualifier:
                                    self.state = 761
                                    self.match(CParser.TypeQualifier)
                                    self.state = 766
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass
                            elif token == CParser.TypeQualifier:
                                self.state = 768
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 767
                                    self.match(CParser.TypeQualifier)
                                    self.state = 770
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la == CParser.TypeQualifier):
                                        break

                                self.state = 772
                                self.match(CParser.Static)
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 775
                            self.assignmentExpression()
                            pass

                        elif la_ == 3:
                            self.state = 776
                            self.match(CParser.Star)
                            pass

                        self.state = 779
                        self.match(CParser.RightBracket)
                        pass
                    elif token == CParser.LeftParen:
                        self.state = 780
                        self.match(CParser.LeftParen)
                        self.state = 786
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (
                                1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (
                                        1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (
                                        1 << CParser.T__11) | (1 << CParser.StorageClassSpecifier) | (
                                        1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (
                                        1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (
                                        1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (
                                        1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                                        1 << CParser.Sizeof) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (
                                        1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (
                                        1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (
                                        1 << CParser.Noreturn) | (1 << CParser.LeftParen))) != 0) or (
                                (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                                (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                                1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                        1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                        1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                        1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                        1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                        1 << (CParser.StringLiteral - 74)))) != 0):
                            self.state = 781
                            self.parameterList()
                            self.state = 784
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CParser.Comma:
                                self.state = 782
                                self.match(CParser.Comma)
                                self.state = 783
                                self.match(CParser.Ellipsis)

                        self.state = 788
                        self.match(CParser.RightParen)
                        self.state = 792
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 789
                                self.gccDeclaratorExtension()
                            self.state = 794
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 801
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Sizeof, CParser.Alignof, CParser.Generic,
                         CParser.LeftParen, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus,
                         CParser.Star, CParser.And, CParser.AndAnd, CParser.Not, CParser.Tilde, CParser.Identifier,
                         CParser.Constant, CParser.DigitSequence, CParser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.assignmentExpression()
                pass
            elif token == CParser.LeftBrace:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(CParser.LeftBrace)
                self.state = 804
                self.initializerList()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CParser.Comma:
                    self.state = 805
                    self.match(CParser.Comma)

                self.state = 808
                self.match(CParser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitializerContext)
            else:
                return self.getTypedRuleContext(CParser.InitializerContext, i)

        def designator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext, i)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def initializerList(self):

        localctx = CParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_initializerList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CParser.LeftBracket or _la == CParser.Dot:
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 812
                    self.designator()
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CParser.LeftBracket or _la == CParser.Dot):
                        break

                self.state = 817
                self.match(CParser.Assign)

            self.state = 821
            self.initializer()
            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 822
                    self.match(CParser.Comma)
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CParser.LeftBracket or _la == CParser.Dot:
                        self.state = 824
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 823
                            self.designator()
                            self.state = 826
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CParser.LeftBracket or _la == CParser.Dot):
                                break

                        self.state = 828
                        self.match(CParser.Assign)

                    self.state = 832
                    self.initializer()
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_designator)
        try:
            self.state = 844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.LeftBracket:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.match(CParser.LeftBracket)
                self.state = 839
                self.conditionalExpression()
                self.state = 840
                self.match(CParser.RightBracket)
                pass
            elif token == CParser.Dot:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                self.match(CParser.Dot)
                self.state = 843
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def StringLiteral(self, i: int = None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staticAssertDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(CParser.StaticAssert)
            self.state = 847
            self.match(CParser.LeftParen)
            self.state = 848
            self.conditionalExpression()
            self.state = 849
            self.match(CParser.Comma)
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 850
                self.match(CParser.StringLiteral)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CParser.StringLiteral):
                    break

            self.state = 855
            self.match(CParser.RightParen)
            self.state = 856
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def caseStatement(self):
            return self.getTypedRuleContext(CParser.CaseStatementContext, 0)

        def blockItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext, i)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext, 0)

        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext, 0)

        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext, 0)

        def logicalOrExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 128, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(CParser.Identifier)
                self.state = 859
                self.match(CParser.Colon)
                self.state = 860
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self.match(CParser.LeftBrace)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                        1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                                1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (
                                1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.StorageClassSpecifier) | (
                                1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (1 << CParser.Break) | (
                                1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Continue) | (
                                1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (
                                1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (
                                1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (
                                1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                                1 << CParser.Sizeof) | (1 << CParser.Switch) | (1 << CParser.Unsigned) | (
                                1 << CParser.Void) | (1 << CParser.While) | (1 << CParser.Alignas) | (
                                1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (
                                1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (
                                1 << CParser.StaticAssert) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CParser.LeftBrace - 66)) | (1 << (CParser.Plus - 66)) | (
                        1 << (CParser.PlusPlus - 66)) | (1 << (CParser.Minus - 66)) | (
                                1 << (CParser.MinusMinus - 66)) | (1 << (CParser.Star - 66)) | (
                                1 << (CParser.And - 66)) | (1 << (CParser.AndAnd - 66)) | (1 << (CParser.Not - 66)) | (
                                1 << (CParser.Tilde - 66)) | (1 << (CParser.Semi - 66)) | (
                                1 << (CParser.Identifier - 66)) | (1 << (CParser.Constant - 66)) | (
                                1 << (CParser.DigitSequence - 66)) | (1 << (CParser.StringLiteral - 66)))) != 0):
                    self.state = 863
                    self.blockItem()
                    self.state = 868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 869
                self.match(CParser.RightBrace)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                        1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 870
                    self.expression()

                self.state = 873
                self.match(CParser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 874
                self.selectionStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 875
                self.iterationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 876
                self.jumpStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 877
                _la = self._input.LA(1)
                if not (_la == CParser.T__10 or _la == CParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 878
                _la = self._input.LA(1)
                if not (_la == CParser.T__13 or _la == CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                self.match(CParser.LeftParen)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                        1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 880
                    self.logicalOrExpression()
                    self.state = 885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CParser.Comma:
                        self.state = 881
                        self.match(CParser.Comma)
                        self.state = 882
                        self.logicalOrExpression()
                        self.state = 887
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CParser.Colon:
                    self.state = 890
                    self.match(CParser.Colon)
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                            (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                            1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                            (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                            (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (
                            1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (
                                    1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                    1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                    1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                    1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                    1 << (CParser.StringLiteral - 74)))) != 0):
                        self.state = 891
                        self.logicalOrExpression()
                        self.state = 896
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CParser.Comma:
                            self.state = 892
                            self.match(CParser.Comma)
                            self.state = 893
                            self.logicalOrExpression()
                            self.state = 898
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 906
                self.match(CParser.RightParen)
                self.state = 907
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_caseStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCaseStatement"):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)

    def caseStatement(self):

        localctx = CParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_caseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.Case:
                self.state = 910
                self.match(CParser.Case)
                self.state = 911
                self.conditionalExpression()
                pass
            elif token == CParser.Default:
                self.state = 912
                self.match(CParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 915
            self.match(CParser.Colon)
            self.state = 916
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_blockItem)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def elseStatement(self):
            return self.getTypedRuleContext(CParser.ElseStatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionStatement)
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.If:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.match(CParser.If)
                self.state = 923
                self.match(CParser.LeftParen)
                self.state = 924
                self.expression()
                self.state = 925
                self.match(CParser.RightParen)
                self.state = 926
                self.statement()
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
                if la_ == 1:
                    self.state = 927
                    self.elseStatement()

                pass
            elif token == CParser.Switch:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.match(CParser.Switch)
                self.state = 931
                self.match(CParser.LeftParen)
                self.state = 932
                self.expression()
                self.state = 933
                self.match(CParser.RightParen)
                self.state = 934
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_elseStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElseStatement"):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)

    def elseStatement(self):

        localctx = CParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(CParser.Else)
            self.state = 939
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext, 0)

        def Do(self):
            return self.getToken(CParser.Do, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationStatement)
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.While:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.match(CParser.While)
                self.state = 942
                self.match(CParser.LeftParen)
                self.state = 943
                self.expression()
                self.state = 944
                self.match(CParser.RightParen)
                self.state = 945
                self.statement()
                pass
            elif token == CParser.Do:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(CParser.Do)
                self.state = 948
                self.statement()
                self.state = 949
                self.match(CParser.While)
                self.state = 950
                self.match(CParser.LeftParen)
                self.state = 951
                self.expression()
                self.state = 952
                self.match(CParser.RightParen)
                self.state = 953
                self.match(CParser.Semi)
                pass
            elif token == CParser.For:
                self.enterOuterAlt(localctx, 3)
                self.state = 955
                self.match(CParser.For)
                self.state = 956
                self.match(CParser.LeftParen)
                self.state = 957
                self.forCondition()
                self.state = 958
                self.match(CParser.RightParen)
                self.state = 959
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext, i)

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forCondition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.state = 964
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 963
                        self.declarationSpecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 134, self._ctx)

                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & (
                        (1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (
                        1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 968
                    self.initDeclaratorList()

                pass

            elif la_ == 2:
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                        1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 971
                    self.expression()

                pass

            self.state = 976
            self.match(CParser.Semi)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                    1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                    (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                    (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                    1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                            1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (
                            1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (
                            1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 977
                self.forExpression()

            self.state = 980
            self.match(CParser.Semi)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                    1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                    (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                    (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                    1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                            1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (
                            1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (
                            1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 981
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext, i)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def forExpression(self):

        localctx = CParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.assignmentExpression()
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CParser.Comma:
                self.state = 985
                self.match(CParser.Comma)
                self.state = 986
                self.assignmentExpression()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gotoStatement(self):
            return self.getTypedRuleContext(CParser.GotoStatementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_jumpStatement)
        self._la = 0  # Token type
        try:
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token == CParser.Goto:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.gotoStatement()
                pass
            elif token in [CParser.Break, CParser.Continue]:
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                _la = self._input.LA(1)
                if not (_la == CParser.Break or _la == CParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 994
                self.match(CParser.Semi)
                pass
            elif token == CParser.Return:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(CParser.Return)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (
                        1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 996
                    self.expression()

                self.state = 999
                self.match(CParser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext, 0)

        def getRuleIndex(self):
            return CParser.RULE_gotoStatement

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGotoStatement"):
                return visitor.visitGotoStatement(self)
            else:
                return visitor.visitChildren(self)

    def gotoStatement(self):

        localctx = CParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(CParser.Goto)
            self.state = 1005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 143, self._ctx)
            if la_ == 1:
                self.state = 1003
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1004
                self.unaryExpression()
                pass

            self.state = 1007
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def externalDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext, i)

        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_compilationUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                    (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                    1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                            1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (
                            1 << CParser.StorageClassSpecifier) | (1 << CParser.StructOrUnion) | (
                            1 << CParser.TypeQualifier) | (1 << CParser.Char) | (1 << CParser.Double) | (
                            1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (
                            1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                            1 << CParser.Sizeof) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (
                            1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (
                            1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (
                            1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.LeftParen))) != 0) or (
                    (((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & (
                    (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                    1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                            1 << (CParser.AndAnd - 74)) | (1 << (CParser.Caret - 74)) | (1 << (CParser.Not - 74)) | (
                            1 << (CParser.Tilde - 74)) | (1 << (CParser.Semi - 74)) | (
                            1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (
                            1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 1009
                self.externalDeclaration()
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext, 0)

        def declarationSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext, i)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext, i)

        def blockItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext, i)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def accept(self, visitor: ParseTreeVisitor):
            return visitor.visitChildren(self)

    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_externalDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 148, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1017
                        self.declarationSpecifier()
                    self.state = 1022
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

                self.state = 1023
                self.declarator()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                        1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                                1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (
                                1 << CParser.StorageClassSpecifier) | (1 << CParser.StructOrUnion) | (
                                1 << CParser.TypeQualifier) | (1 << CParser.Char) | (1 << CParser.Double) | (
                                1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Inline) | (
                                1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (
                                1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Unsigned) | (
                                1 << CParser.Void) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (
                                1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (
                                1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (
                                1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and (
                        (1 << (_la - 74)) & (
                        (1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (
                        1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (
                                1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (
                                1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (
                                1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (
                                1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 1024
                    self.declaration()
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1030
                self.match(CParser.LeftBrace)
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                        (1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (
                        1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (
                                1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (
                                1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.StorageClassSpecifier) | (
                                1 << CParser.StructOrUnion) | (1 << CParser.TypeQualifier) | (1 << CParser.Break) | (
                                1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Continue) | (
                                1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (
                                1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (
                                1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (
                                1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (
                                1 << CParser.Sizeof) | (1 << CParser.Switch) | (1 << CParser.Unsigned) | (
                                1 << CParser.Void) | (1 << CParser.While) | (1 << CParser.Alignas) | (
                                1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (
                                1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (
                                1 << CParser.StaticAssert) | (1 << CParser.LeftParen))) != 0) or (
                        (((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                        (1 << (CParser.LeftBrace - 66)) | (1 << (CParser.Plus - 66)) | (
                        1 << (CParser.PlusPlus - 66)) | (1 << (CParser.Minus - 66)) | (
                                1 << (CParser.MinusMinus - 66)) | (1 << (CParser.Star - 66)) | (
                                1 << (CParser.And - 66)) | (1 << (CParser.AndAnd - 66)) | (1 << (CParser.Not - 66)) | (
                                1 << (CParser.Tilde - 66)) | (1 << (CParser.Semi - 66)) | (
                                1 << (CParser.Identifier - 66)) | (1 << (CParser.Constant - 66)) | (
                                1 << (CParser.DigitSequence - 66)) | (1 << (CParser.StringLiteral - 66)))) != 0):
                    self.state = 1031
                    self.blockItem()
                    self.state = 1036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1037
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[6] = self.postfixUnaryIncDecExpression_sempred
        self._predicates[11] = self.relationalExpression_sempred
        self._predicates[12] = self.equalityExpression_sempred
        self._predicates[33] = self.directDeclarator_sempred
        self._predicates[45] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixUnaryIncDecExpression_sempred(self, localctx: PostfixUnaryIncDecExpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relationalExpression_sempred(self, localctx: RelationalExpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def equalityExpression_sempred(self, localctx: EqualityExpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def directDeclarator_sempred(self, localctx: DirectDeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def directAbstractDeclarator_sempred(self, localctx: DirectAbstractDeclaratorContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 1)
