# Generated from /home/meanmail/MyProjects/antlr/cpp/grammars/CPP14.g4 by ANTLR 4.7
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *
from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3w")
        buf.write("\u0a9f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\3\2\7\2p\n\2\f\2\16\2s")
        buf.write("\13\2\3\2\3\2\3\3\5\3x\n\3\3\3\3\3\3\3\5\3}\n\3\3\3\5")
        buf.write("\3\u0080\n\3\3\3\3\3\3\3\3\3\3\3\5\3\u0087\n\3\3\3\3\3")
        buf.write("\5\3\u008b\n\3\3\3\5\3\u008e\n\3\3\3\6\3\u0091\n\3\r\3")
        buf.write("\16\3\u0092\3\3\7\3\u0096\n\3\f\3\16\3\u0099\13\3\3\3")
        buf.write("\7\3\u009c\n\3\f\3\16\3\u009f\13\3\5\3\u00a1\n\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\7\3\u00a9\n\3\f\3\16\3\u00ac\13\3\3")
        buf.write("\3\5\3\u00af\n\3\3\3\5\3\u00b2\n\3\3\4\3\4\3\4\5\4\u00b7")
        buf.write("\n\4\3\4\5\4\u00ba\n\4\3\4\3\4\3\4\3\4\3\4\7\4\u00c1\n")
        buf.write("\4\f\4\16\4\u00c4\13\4\3\4\5\4\u00c7\n\4\3\4\5\4\u00ca")
        buf.write("\n\4\3\4\3\4\3\4\5\4\u00cf\n\4\3\4\3\4\3\4\5\4\u00d4\n")
        buf.write("\4\3\4\5\4\u00d7\n\4\3\4\7\4\u00da\n\4\f\4\16\4\u00dd")
        buf.write("\13\4\3\5\3\5\3\5\3\5\7\5\u00e3\n\5\f\5\16\5\u00e6\13")
        buf.write("\5\5\5\u00e8\n\5\3\5\5\5\u00eb\n\5\3\5\3\5\3\5\7\5\u00f0")
        buf.write("\n\5\f\5\16\5\u00f3\13\5\3\5\3\5\3\5\5\5\u00f8\n\5\3\5")
        buf.write("\3\5\5\5\u00fc\n\5\3\5\3\5\3\5\6\5\u0101\n\5\r\5\16\5")
        buf.write("\u0102\3\5\7\5\u0106\n\5\f\5\16\5\u0109\13\5\3\5\5\5\u010c")
        buf.write("\n\5\3\5\5\5\u010f\n\5\3\5\3\5\6\5\u0113\n\5\r\5\16\5")
        buf.write("\u0114\3\5\7\5\u0118\n\5\f\5\16\5\u011b\13\5\3\5\5\5\u011e")
        buf.write("\n\5\3\5\5\5\u0121\n\5\7\5\u0123\n\5\f\5\16\5\u0126\13")
        buf.write("\5\5\5\u0128\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0130\n\5")
        buf.write("\5\5\u0132\n\5\3\5\7\5\u0135\n\5\f\5\16\5\u0138\13\5\3")
        buf.write("\5\3\5\6\5\u013c\n\5\r\5\16\5\u013d\3\5\7\5\u0141\n\5")
        buf.write("\f\5\16\5\u0144\13\5\3\5\5\5\u0147\n\5\5\5\u0149\n\5\3")
        buf.write("\6\3\6\3\6\3\6\7\6\u014f\n\6\f\6\16\6\u0152\13\6\3\6\3")
        buf.write("\6\3\6\5\6\u0157\n\6\5\6\u0159\n\6\3\6\5\6\u015c\n\6\3")
        buf.write("\6\3\6\3\6\5\6\u0161\n\6\3\6\3\6\3\6\5\6\u0166\n\6\3\6")
        buf.write("\3\6\5\6\u016a\n\6\5\6\u016c\n\6\3\6\3\6\5\6\u0170\n\6")
        buf.write("\5\6\u0172\n\6\3\7\3\7\3\7\5\7\u0177\n\7\5\7\u0179\n\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u0180\n\7\3\7\3\7\5\7\u0184\n")
        buf.write("\7\3\7\5\7\u0187\n\7\3\7\5\7\u018a\n\7\7\7\u018c\n\7\f")
        buf.write("\7\16\7\u018f\13\7\3\7\5\7\u0192\n\7\3\7\3\7\5\7\u0196")
        buf.write("\n\7\3\7\5\7\u0199\n\7\3\7\5\7\u019c\n\7\3\7\3\7\5\7\u01a0")
        buf.write("\n\7\3\7\3\7\5\7\u01a4\n\7\3\7\5\7\u01a7\n\7\3\7\5\7\u01aa")
        buf.write("\n\7\7\7\u01ac\n\7\f\7\16\7\u01af\13\7\5\7\u01b1\n\7\3")
        buf.write("\7\3\7\5\7\u01b5\n\7\3\7\3\7\7\7\u01b9\n\7\f\7\16\7\u01bc")
        buf.write("\13\7\3\7\3\7\3\7\3\7\5\7\u01c2\n\7\3\7\3\7\3\7\3\7\5")
        buf.write("\7\u01c8\n\7\5\7\u01ca\n\7\3\7\5\7\u01cd\n\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u01d3\n\7\3\7\3\7\3\7\5\7\u01d8\n\7\3\7\5\7")
        buf.write("\u01db\n\7\3\7\3\7\5\7\u01df\n\7\3\7\3\7\3\7\3\7\5\7\u01e5")
        buf.write("\n\7\5\7\u01e7\n\7\3\7\5\7\u01ea\n\7\3\7\3\7\3\7\6\7\u01ef")
        buf.write("\n\7\r\7\16\7\u01f0\3\7\7\7\u01f4\n\7\f\7\16\7\u01f7\13")
        buf.write("\7\3\7\5\7\u01fa\n\7\3\7\3\7\5\7\u01fe\n\7\3\7\3\7\3\7")
        buf.write("\3\7\7\7\u0204\n\7\f\7\16\7\u0207\13\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\7\7\u0210\n\7\f\7\16\7\u0213\13\7\3\7\3\7")
        buf.write("\3\7\3\7\6\7\u0219\n\7\r\7\16\7\u021a\3\7\7\7\u021e\n")
        buf.write("\7\f\7\16\7\u0221\13\7\3\7\5\7\u0224\n\7\3\7\3\7\5\7\u0228")
        buf.write("\n\7\5\7\u022a\n\7\3\7\7\7\u022d\n\7\f\7\16\7\u0230\13")
        buf.write("\7\3\b\5\b\u0233\n\b\3\b\3\b\3\b\5\b\u0238\n\b\3\b\5\b")
        buf.write("\u023b\n\b\3\b\5\b\u023e\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0245")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u024a\n\b\3\b\3\b\3\b\3\b\5\b\u0250")
        buf.write("\n\b\3\b\5\b\u0253\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u025b")
        buf.write("\n\b\f\b\16\b\u025e\13\b\3\b\5\b\u0261\n\b\3\b\5\b\u0264")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\6\t\u026e\n\t\r\t")
        buf.write("\16\t\u026f\3\t\7\t\u0273\n\t\f\t\16\t\u0276\13\t\3\t")
        buf.write("\5\t\u0279\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0281\n\t\3")
        buf.write("\t\3\t\3\t\6\t\u0286\n\t\r\t\16\t\u0287\3\t\7\t\u028b")
        buf.write("\n\t\f\t\16\t\u028e\13\t\3\t\5\t\u0291\n\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\7\t\u029a\n\t\f\t\16\t\u029d\13\t\3\t")
        buf.write("\3\t\3\t\3\t\5\t\u02a3\n\t\3\n\3\n\3\n\5\n\u02a8\n\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\7\13\u02b0\n\13\f\13\16\13")
        buf.write("\u02b3\13\13\3\13\7\13\u02b6\n\13\f\13\16\13\u02b9\13")
        buf.write("\13\3\f\5\f\u02bc\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u02c3\n")
        buf.write("\f\3\f\6\f\u02c6\n\f\r\f\16\f\u02c7\3\f\7\f\u02cb\n\f")
        buf.write("\f\f\16\f\u02ce\13\f\3\f\5\f\u02d1\n\f\3\f\3\f\6\f\u02d5")
        buf.write("\n\f\r\f\16\f\u02d6\3\f\7\f\u02da\n\f\f\f\16\f\u02dd\13")
        buf.write("\f\3\f\5\f\u02e0\n\f\3\f\3\f\5\f\u02e4\n\f\3\f\3\f\5\f")
        buf.write("\u02e8\n\f\3\f\3\f\3\f\3\f\5\f\u02ee\n\f\5\f\u02f0\n\f")
        buf.write("\3\f\5\f\u02f3\n\f\3\r\3\r\5\r\u02f7\n\r\3\r\3\r\3\r\3")
        buf.write("\r\7\r\u02fd\n\r\f\r\16\r\u0300\13\r\3\r\3\r\7\r\u0304")
        buf.write("\n\r\f\r\16\r\u0307\13\r\3\r\3\r\3\r\3\r\7\r\u030d\n\r")
        buf.write("\f\r\16\r\u0310\13\r\7\r\u0312\n\r\f\r\16\r\u0315\13\r")
        buf.write("\5\r\u0317\n\r\3\16\5\16\u031a\n\16\3\16\3\16\3\16\5\16")
        buf.write("\u031f\n\16\3\16\3\16\3\17\3\17\6\17\u0325\n\17\r\17\16")
        buf.write("\17\u0326\3\17\7\17\u032a\n\17\f\17\16\17\u032d\13\17")
        buf.write("\3\17\5\17\u0330\n\17\3\17\3\17\7\17\u0334\n\17\f\17\16")
        buf.write("\17\u0337\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u0346\n\20\3\20\7\20\u0349")
        buf.write("\n\20\f\20\16\20\u034c\13\20\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\7\21\u0354\n\21\f\21\16\21\u0357\13\21\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\7\22\u035f\n\22\f\22\16\22\u0362")
        buf.write("\13\22\3\23\3\23\3\23\7\23\u0367\n\23\f\23\16\23\u036a")
        buf.write("\13\23\3\23\3\23\3\23\3\23\7\23\u0370\n\23\f\23\16\23")
        buf.write("\u0373\13\23\3\23\3\23\3\23\3\24\3\24\3\24\7\24\u037b")
        buf.write("\n\24\f\24\16\24\u037e\13\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\7\25\u0386\n\25\f\25\16\25\u0389\13\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0390\n\25\5\25\u0392\n\25\3\25\5")
        buf.write("\25\u0395\n\25\5\25\u0397\n\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u039d\n\25\5\25\u039f\n\25\3\26\3\26\3\26\3\26\5\26\u03a5")
        buf.write("\n\26\3\27\3\27\3\27\7\27\u03aa\n\27\f\27\16\27\u03ad")
        buf.write("\13\27\3\27\3\27\5\27\u03b1\n\27\3\30\7\30\u03b4\n\30")
        buf.write("\f\30\16\30\u03b7\13\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\5\30\u03c0\n\30\3\30\3\30\3\30\3\30\3\30\7\30\u03c7")
        buf.write("\n\30\f\30\16\30\u03ca\13\30\5\30\u03cc\n\30\3\30\3\30")
        buf.write("\3\30\7\30\u03d1\n\30\f\30\16\30\u03d4\13\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u03dd\n\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\7\30\u03e6\n\30\f\30\16\30\u03e9")
        buf.write("\13\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u03f2\n")
        buf.write("\30\3\30\3\30\3\30\3\30\7\30\u03f8\n\30\f\30\16\30\u03fb")
        buf.write("\13\30\5\30\u03fd\n\30\3\30\7\30\u0400\n\30\f\30\16\30")
        buf.write("\u0403\13\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u040b")
        buf.write("\n\30\f\30\16\30\u040e\13\30\3\30\3\30\3\30\5\30\u0413")
        buf.write("\n\30\5\30\u0415\n\30\3\30\5\30\u0418\n\30\5\30\u041a")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30")
        buf.write("\u0425\n\30\f\30\16\30\u0428\13\30\5\30\u042a\n\30\3\30")
        buf.write("\3\30\3\30\5\30\u042f\n\30\5\30\u0431\n\30\3\30\5\30\u0434")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u043b\n\30\3\30\3")
        buf.write("\30\3\30\5\30\u0440\n\30\3\30\6\30\u0443\n\30\r\30\16")
        buf.write("\30\u0444\3\30\5\30\u0448\n\30\3\30\3\30\5\30\u044c\n")
        buf.write("\30\3\30\3\30\3\30\5\30\u0451\n\30\7\30\u0453\n\30\f\30")
        buf.write("\16\30\u0456\13\30\3\30\3\30\3\30\5\30\u045b\n\30\3\30")
        buf.write("\3\30\5\30\u045f\n\30\3\30\3\30\3\30\5\30\u0464\n\30\7")
        buf.write("\30\u0466\n\30\f\30\16\30\u0469\13\30\5\30\u046b\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u0477\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u047e\n\30\3")
        buf.write("\30\5\30\u0481\n\30\3\30\3\30\3\30\7\30\u0486\n\30\f\30")
        buf.write("\16\30\u0489\13\30\3\30\3\30\6\30\u048d\n\30\r\30\16\30")
        buf.write("\u048e\3\30\7\30\u0492\n\30\f\30\16\30\u0495\13\30\3\30")
        buf.write("\5\30\u0498\n\30\5\30\u049a\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u04a8\n\30")
        buf.write("\3\30\7\30\u04ab\n\30\f\30\16\30\u04ae\13\30\3\30\3\30")
        buf.write("\3\30\6\30\u04b3\n\30\r\30\16\30\u04b4\3\30\7\30\u04b8")
        buf.write("\n\30\f\30\16\30\u04bb\13\30\5\30\u04bd\n\30\3\30\5\30")
        buf.write("\u04c0\n\30\3\31\3\31\3\31\5\31\u04c5\n\31\3\31\3\31\3")
        buf.write("\31\3\32\3\32\3\32\3\33\3\33\3\33\7\33\u04d0\n\33\f\33")
        buf.write("\16\33\u04d3\13\33\3\33\7\33\u04d6\n\33\f\33\16\33\u04d9")
        buf.write("\13\33\3\33\3\33\3\33\3\33\3\33\5\33\u04e0\n\33\3\33\3")
        buf.write("\33\3\33\5\33\u04e5\n\33\5\33\u04e7\n\33\3\33\5\33\u04ea")
        buf.write("\n\33\5\33\u04ec\n\33\3\34\3\34\3\34\7\34\u04f1\n\34\f")
        buf.write("\34\16\34\u04f4\13\34\5\34\u04f6\n\34\3\34\5\34\u04f9")
        buf.write("\n\34\3\34\3\34\5\34\u04fd\n\34\3\34\3\34\3\34\5\34\u0502")
        buf.write("\n\34\7\34\u0504\n\34\f\34\16\34\u0507\13\34\5\34\u0509")
        buf.write("\n\34\3\34\6\34\u050c\n\34\r\34\16\34\u050d\3\34\5\34")
        buf.write("\u0511\n\34\3\34\3\34\5\34\u0515\n\34\3\34\3\34\3\34\5")
        buf.write("\34\u051a\n\34\7\34\u051c\n\34\f\34\16\34\u051f\13\34")
        buf.write("\5\34\u0521\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\5")
        buf.write("\36\u052a\n\36\3\36\3\36\5\36\u052e\n\36\3\36\3\36\3\36")
        buf.write("\5\36\u0533\n\36\7\36\u0535\n\36\f\36\16\36\u0538\13\36")
        buf.write("\5\36\u053a\n\36\3\36\3\36\6\36\u053e\n\36\r\36\16\36")
        buf.write("\u053f\3\36\5\36\u0543\n\36\3\36\3\36\5\36\u0547\n\36")
        buf.write("\3\36\3\36\3\36\5\36\u054c\n\36\7\36\u054e\n\36\f\36\16")
        buf.write("\36\u0551\13\36\5\36\u0553\n\36\3\36\3\36\3\36\7\36\u0558")
        buf.write("\n\36\f\36\16\36\u055b\13\36\3\36\3\36\3\36\5\36\u0560")
        buf.write("\n\36\3\36\3\36\3\36\5\36\u0565\n\36\3\36\3\36\7\36\u0569")
        buf.write("\n\36\f\36\16\36\u056c\13\36\3\36\3\36\5\36\u0570\n\36")
        buf.write("\3\36\3\36\7\36\u0574\n\36\f\36\16\36\u0577\13\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u057d\n\36\3\36\3\36\7\36\u0581\n")
        buf.write("\36\f\36\16\36\u0584\13\36\3\36\3\36\6\36\u0588\n\36\r")
        buf.write("\36\16\36\u0589\3\36\3\36\3\36\5\36\u058f\n\36\5\36\u0591")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u059c\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u05a3\n\36\3")
        buf.write("\36\5\36\u05a6\n\36\3\36\3\36\3\36\7\36\u05ab\n\36\f\36")
        buf.write("\16\36\u05ae\13\36\3\36\3\36\6\36\u05b2\n\36\r\36\16\36")
        buf.write("\u05b3\3\36\7\36\u05b7\n\36\f\36\16\36\u05ba\13\36\3\36")
        buf.write("\5\36\u05bd\n\36\5\36\u05bf\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u05cd\n\36")
        buf.write("\3\36\7\36\u05d0\n\36\f\36\16\36\u05d3\13\36\3\36\3\36")
        buf.write("\3\36\6\36\u05d8\n\36\r\36\16\36\u05d9\3\36\7\36\u05dd")
        buf.write("\n\36\f\36\16\36\u05e0\13\36\5\36\u05e2\n\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u05e8\n\36\3\36\3\36\5\36\u05ec\n\36\3")
        buf.write("\36\5\36\u05ef\n\36\3\36\3\36\3\36\3\36\3\36\7\36\u05f6")
        buf.write("\n\36\f\36\16\36\u05f9\13\36\3\36\3\36\5\36\u05fd\n\36")
        buf.write("\3\36\5\36\u0600\n\36\3\36\3\36\5\36\u0604\n\36\3\36\3")
        buf.write("\36\7\36\u0608\n\36\f\36\16\36\u060b\13\36\3\36\3\36\5")
        buf.write("\36\u060f\n\36\3\37\3\37\6\37\u0613\n\37\r\37\16\37\u0614")
        buf.write("\3\37\7\37\u0618\n\37\f\37\16\37\u061b\13\37\3 \3 \3 ")
        buf.write("\7 \u0620\n \f \16 \u0623\13 \3 \5 \u0626\n \3 \3 \3 ")
        buf.write("\5 \u062b\n \3 \5 \u062e\n \3 \5 \u0631\n \5 \u0633\n")
        buf.write(" \3 \3 \3 \5 \u0638\n \3 \3 \3 \5 \u063d\n \7 \u063f\n")
        buf.write(" \f \16 \u0642\13 \5 \u0644\n \3 \3 \3 \3 \5 \u064a\n")
        buf.write(" \3 \3 \3 \5 \u064f\n \3 \7 \u0652\n \f \16 \u0655\13")
        buf.write(" \3 \5 \u0658\n \3 \5 \u065b\n \3 \3 \6 \u065f\n \r \16")
        buf.write(" \u0660\3 \7 \u0664\n \f \16 \u0667\13 \5 \u0669\n \3")
        buf.write(" \3 \3 \3 \5 \u066f\n \3 \3 \3 \3 \5 \u0675\n \7 \u0677")
        buf.write("\n \f \16 \u067a\13 \3 \5 \u067d\n \3 \5 \u0680\n \3!")
        buf.write("\3!\3!\7!\u0685\n!\f!\16!\u0688\13!\3!\5!\u068b\n!\3!")
        buf.write("\3!\3!\5!\u0690\n!\5!\u0692\n!\3!\3!\3!\5!\u0697\n!\3")
        buf.write("!\5!\u069a\n!\3!\3!\5!\u069e\n!\3!\3!\3!\3!\3!\5!\u06a5")
        buf.write("\n!\3!\3!\3!\5!\u06aa\n!\3!\5!\u06ad\n!\3!\5!\u06b0\n")
        buf.write("!\3\"\5\"\u06b3\n\"\3\"\3\"\3\"\5\"\u06b8\n\"\3\"\5\"")
        buf.write("\u06bb\n\"\3\"\3\"\3\"\3\"\3\"\5\"\u06c2\n\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\7\"\u06cc\n\"\f\"\16\"\u06cf\13")
        buf.write("\"\3\"\5\"\u06d2\n\"\3\"\5\"\u06d5\n\"\3#\3#\3#\3#\3#")
        buf.write("\5#\u06dc\n#\3#\3#\7#\u06e0\n#\f#\16#\u06e3\13#\3#\5#")
        buf.write("\u06e6\n#\3#\5#\u06e9\n#\5#\u06eb\n#\3#\3#\3#\3#\5#\u06f1")
        buf.write("\n#\3#\3#\7#\u06f5\n#\f#\16#\u06f8\13#\3#\5#\u06fb\n#")
        buf.write("\3#\5#\u06fe\n#\5#\u0700\n#\7#\u0702\n#\f#\16#\u0705\13")
        buf.write("#\3#\3#\3#\3#\3#\6#\u070c\n#\r#\16#\u070d\3#\7#\u0711")
        buf.write("\n#\f#\16#\u0714\13#\3#\5#\u0717\n#\3#\5#\u071a\n#\3#")
        buf.write("\5#\u071d\n#\3#\3#\5#\u0721\n#\3$\3$\7$\u0725\n$\f$\16")
        buf.write("$\u0728\13$\3$\3$\3$\7$\u072d\n$\f$\16$\u0730\13$\3$\3")
        buf.write("$\3$\7$\u0735\n$\f$\16$\u0738\13$\3$\5$\u073b\n$\3%\7")
        buf.write("%\u073e\n%\f%\16%\u0741\13%\3%\3%\3%\3%\3%\6%\u0748\n")
        buf.write("%\r%\16%\u0749\3%\7%\u074d\n%\f%\16%\u0750\13%\3%\5%\u0753")
        buf.write("\n%\5%\u0755\n%\3&\3&\5&\u0759\n&\3&\3&\5&\u075d\n&\5")
        buf.write("&\u075f\n&\3&\3&\7&\u0763\n&\f&\16&\u0766\13&\3&\3&\7")
        buf.write("&\u076a\n&\f&\16&\u076d\13&\3&\3&\3&\5&\u0772\n&\3&\3")
        buf.write("&\3&\3&\5&\u0778\n&\3&\3&\7&\u077c\n&\f&\16&\u077f\13")
        buf.write("&\5&\u0781\n&\7&\u0783\n&\f&\16&\u0786\13&\3\'\3\'\3\'")
        buf.write("\3\'\7\'\u078c\n\'\f\'\16\'\u078f\13\'\5\'\u0791\n\'\3")
        buf.write("\'\5\'\u0794\n\'\3\'\3\'\3\'\7\'\u0799\n\'\f\'\16\'\u079c")
        buf.write("\13\'\3\'\3\'\3\'\5\'\u07a1\n\'\3\'\3\'\7\'\u07a5\n\'")
        buf.write("\f\'\16\'\u07a8\13\'\3\'\5\'\u07ab\n\'\3\'\3\'\3\'\6\'")
        buf.write("\u07b0\n\'\r\'\16\'\u07b1\3\'\7\'\u07b5\n\'\f\'\16\'\u07b8")
        buf.write("\13\'\3\'\5\'\u07bb\n\'\3\'\5\'\u07be\n\'\3\'\3\'\6\'")
        buf.write("\u07c2\n\'\r\'\16\'\u07c3\3\'\7\'\u07c7\n\'\f\'\16\'\u07ca")
        buf.write("\13\'\3\'\5\'\u07cd\n\'\3\'\5\'\u07d0\n\'\7\'\u07d2\n")
        buf.write("\'\f\'\16\'\u07d5\13\'\5\'\u07d7\n\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\5\'\u07df\n\'\5\'\u07e1\n\'\3\'\7\'\u07e4\n\'\f")
        buf.write("\'\16\'\u07e7\13\'\3(\5(\u07ea\n(\3(\3(\7(\u07ee\n(\f")
        buf.write("(\16(\u07f1\13(\3(\7(\u07f4\n(\f(\16(\u07f7\13(\3(\3(")
        buf.write("\7(\u07fb\n(\f(\16(\u07fe\13(\5(\u0800\n(\3)\5)\u0803")
        buf.write("\n)\3)\3)\3)\6)\u0808\n)\r)\16)\u0809\3)\7)\u080d\n)\f")
        buf.write(")\16)\u0810\13)\7)\u0812\n)\f)\16)\u0815\13)\3)\7)\u0818")
        buf.write("\n)\f)\16)\u081b\13)\3)\3)\3)\3)\3)\5)\u0822\n)\3)\3)")
        buf.write("\7)\u0826\n)\f)\16)\u0829\13)\7)\u082b\n)\f)\16)\u082e")
        buf.write("\13)\5)\u0830\n)\3*\3*\3*\3*\5*\u0836\n*\3*\3*\7*\u083a")
        buf.write("\n*\f*\16*\u083d\13*\3*\3*\7*\u0841\n*\f*\16*\u0844\13")
        buf.write("*\3*\3*\3*\5*\u0849\n*\3*\3*\3*\3*\5*\u084f\n*\3*\3*\7")
        buf.write("*\u0853\n*\f*\16*\u0856\13*\5*\u0858\n*\7*\u085a\n*\f")
        buf.write("*\16*\u085d\13*\3+\7+\u0860\n+\f+\16+\u0863\13+\3+\3+")
        buf.write("\3+\5+\u0868\n+\3+\3+\3+\3+\3+\5+\u086f\n+\5+\u0871\n")
        buf.write("+\3+\5+\u0874\n+\5+\u0876\n+\3,\3,\3,\5,\u087b\n,\3,\3")
        buf.write(",\3,\5,\u0880\n,\5,\u0882\n,\3,\3,\3,\3,\3,\5,\u0889\n")
        buf.write(",\3-\3-\3-\3-\5-\u088f\n-\5-\u0891\n-\3-\5-\u0894\n-\3")
        buf.write("-\5-\u0897\n-\3-\3-\3-\3-\3-\5-\u089e\n-\5-\u08a0\n-\3")
        buf.write("-\5-\u08a3\n-\3-\5-\u08a6\n-\7-\u08a8\n-\f-\16-\u08ab")
        buf.write("\13-\3.\7.\u08ae\n.\f.\16.\u08b1\13.\3.\5.\u08b4\n.\3")
        buf.write(".\3.\3.\7.\u08b9\n.\f.\16.\u08bc\13.\5.\u08be\n.\3.\3")
        buf.write(".\3.\7.\u08c3\n.\f.\16.\u08c6\13.\3.\3.\5.\u08ca\n.\3")
        buf.write(".\3.\7.\u08ce\n.\f.\16.\u08d1\13.\3.\3.\3.\3.\5.\u08d7")
        buf.write("\n.\3.\3.\7.\u08db\n.\f.\16.\u08de\13.\3.\3.\6.\u08e2")
        buf.write("\n.\r.\16.\u08e3\3.\3.\3.\5.\u08e9\n.\5.\u08eb\n.\3.\3")
        buf.write(".\5.\u08ef\n.\3.\3.\5.\u08f3\n.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\7.\u0909\n.\f.\16")
        buf.write(".\u090c\13.\3.\3.\6.\u0910\n.\r.\16.\u0911\3.\7.\u0915")
        buf.write("\n.\f.\16.\u0918\13.\3.\5.\u091b\n.\3.\3.\3.\5.\u0920")
        buf.write("\n.\3/\3/\7/\u0924\n/\f/\16/\u0927\13/\3/\5/\u092a\n/")
        buf.write("\3/\3/\3/\5/\u092f\n/\3/\3/\3/\5/\u0934\n/\5/\u0936\n")
        buf.write("/\3/\5/\u0939\n/\5/\u093b\n/\3/\5/\u093e\n/\3/\7/\u0941")
        buf.write("\n/\f/\16/\u0944\13/\3/\3/\5/\u0948\n/\3\60\3\60\3\60")
        buf.write("\3\60\3\61\7\61\u094f\n\61\f\61\16\61\u0952\13\61\3\61")
        buf.write("\3\61\5\61\u0956\n\61\3\61\3\61\5\61\u095a\n\61\5\61\u095c")
        buf.write("\n\61\3\61\5\61\u095f\n\61\3\61\3\61\3\61\5\61\u0964\n")
        buf.write("\61\3\61\5\61\u0967\n\61\3\61\3\61\3\61\3\61\3\61\7\61")
        buf.write("\u096e\n\61\f\61\16\61\u0971\13\61\3\61\5\61\u0974\n\61")
        buf.write("\3\61\5\61\u0977\n\61\3\62\5\62\u097a\n\62\3\62\3\62\3")
        buf.write("\62\5\62\u097f\n\62\3\62\5\62\u0982\n\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\7\62\u0989\n\62\f\62\16\62\u098c\13\62\3\62")
        buf.write("\5\62\u098f\n\62\3\62\3\62\5\62\u0993\n\62\3\62\3\62\5")
        buf.write("\62\u0997\n\62\3\62\3\62\3\62\3\62\5\62\u099d\n\62\5\62")
        buf.write("\u099f\n\62\3\62\5\62\u09a2\n\62\3\62\5\62\u09a5\n\62")
        buf.write("\3\62\3\62\5\62\u09a9\n\62\3\63\3\63\5\63\u09ad\n\63\3")
        buf.write("\63\5\63\u09b0\n\63\3\63\5\63\u09b3\n\63\3\63\3\63\6\63")
        buf.write("\u09b7\n\63\r\63\16\63\u09b8\3\63\7\63\u09bc\n\63\f\63")
        buf.write("\16\63\u09bf\13\63\3\63\5\63\u09c2\n\63\5\63\u09c4\n\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u09cc\n\63\3\63\5")
        buf.write("\63\u09cf\n\63\3\63\5\63\u09d2\n\63\3\63\3\63\3\63\5\63")
        buf.write("\u09d7\n\63\5\63\u09d9\n\63\3\63\5\63\u09dc\n\63\3\63")
        buf.write("\5\63\u09df\n\63\3\63\3\63\3\63\5\63\u09e4\n\63\3\63\5")
        buf.write("\63\u09e7\n\63\3\63\5\63\u09ea\n\63\3\63\3\63\6\63\u09ee")
        buf.write("\n\63\r\63\16\63\u09ef\3\63\7\63\u09f3\n\63\f\63\16\63")
        buf.write("\u09f6\13\63\3\63\5\63\u09f9\n\63\5\63\u09fb\n\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0a03\n\63\3\63\5\63\u0a06")
        buf.write("\n\63\3\63\5\63\u0a09\n\63\3\63\3\63\3\63\5\63\u0a0e\n")
        buf.write("\63\5\63\u0a10\n\63\3\63\5\63\u0a13\n\63\3\63\5\63\u0a16")
        buf.write("\n\63\7\63\u0a18\n\63\f\63\16\63\u0a1b\13\63\3\64\6\64")
        buf.write("\u0a1e\n\64\r\64\16\64\u0a1f\3\64\7\64\u0a23\n\64\f\64")
        buf.write("\16\64\u0a26\13\64\3\64\5\64\u0a29\n\64\3\64\3\64\3\64")
        buf.write("\5\64\u0a2e\n\64\5\64\u0a30\n\64\3\64\5\64\u0a33\n\64")
        buf.write("\3\64\5\64\u0a36\n\64\3\64\3\64\6\64\u0a3a\n\64\r\64\16")
        buf.write("\64\u0a3b\3\64\7\64\u0a3f\n\64\f\64\16\64\u0a42\13\64")
        buf.write("\3\64\5\64\u0a45\n\64\3\64\3\64\3\64\5\64\u0a4a\n\64\5")
        buf.write("\64\u0a4c\n\64\3\64\5\64\u0a4f\n\64\3\64\5\64\u0a52\n")
        buf.write("\64\7\64\u0a54\n\64\f\64\16\64\u0a57\13\64\3\65\3\65\3")
        buf.write("\65\7\65\u0a5c\n\65\f\65\16\65\u0a5f\13\65\3\65\3\65\6")
        buf.write("\65\u0a63\n\65\r\65\16\65\u0a64\3\66\3\66\3\66\7\66\u0a6a")
        buf.write("\n\66\f\66\16\66\u0a6d\13\66\3\66\6\66\u0a70\n\66\r\66")
        buf.write("\16\66\u0a71\3\66\7\66\u0a75\n\66\f\66\16\66\u0a78\13")
        buf.write("\66\3\66\3\66\5\66\u0a7c\n\66\5\66\u0a7e\n\66\3\66\5\66")
        buf.write("\u0a81\n\66\3\66\3\66\3\66\7\66\u0a86\n\66\f\66\16\66")
        buf.write("\u0a89\13\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\5\67\u0a97\n\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u0a9d\n\67\3\67\3\u0678\7\24 \"JR8\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjl\2\26\4\2aaff\7\2\30\30##//jjps\4")
        buf.write("\2EEII\4\2?AEH\3\2\\]\4\2JKXY\3\2VW\4\2DFZ[\5\2IILSUU")
        buf.write("\4\2--88\4\2\t\t\17\17\4\2\f\f,,\4\2\31\31%%\3\2\21\22")
        buf.write("\7\2\27\27\35\35\37\37\'\'\67\67\5\2\f\f,,\65\65\5\2\b")
        buf.write("\b\36\36))\4\2EEZZ\4\2\f\f\64\64\5\2\22\22!!?a\2\u0cc6")
        buf.write("\2q\3\2\2\2\4\u00b1\3\2\2\2\6\u00c9\3\2\2\2\b\u00de\3")
        buf.write("\2\2\2\n\u0171\3\2\2\2\f\u0229\3\2\2\2\16\u0263\3\2\2")
        buf.write("\2\20\u02a2\3\2\2\2\22\u02a7\3\2\2\2\24\u02a9\3\2\2\2")
        buf.write("\26\u02bb\3\2\2\2\30\u0316\3\2\2\2\32\u0319\3\2\2\2\34")
        buf.write("\u0335\3\2\2\2\36\u033a\3\2\2\2 \u034d\3\2\2\2\"\u0358")
        buf.write("\3\2\2\2$\u0363\3\2\2\2&\u0377\3\2\2\2(\u039e\3\2\2\2")
        buf.write("*\u03a4\3\2\2\2,\u03b0\3\2\2\2.\u04bf\3\2\2\2\60\u04c4")
        buf.write("\3\2\2\2\62\u04c9\3\2\2\2\64\u04eb\3\2\2\2\66\u0520\3")
        buf.write("\2\2\28\u0524\3\2\2\2:\u060e\3\2\2\2<\u0612\3\2\2\2>\u067f")
        buf.write("\3\2\2\2@\u06af\3\2\2\2B\u06d4\3\2\2\2D\u0720\3\2\2\2")
        buf.write("F\u073a\3\2\2\2H\u0754\3\2\2\2J\u0771\3\2\2\2L\u0787\3")
        buf.write("\2\2\2N\u07ff\3\2\2\2P\u0813\3\2\2\2R\u0848\3\2\2\2T\u0861")
        buf.write("\3\2\2\2V\u0888\3\2\2\2X\u0893\3\2\2\2Z\u091f\3\2\2\2")
        buf.write("\\\u0947\3\2\2\2^\u0949\3\2\2\2`\u0950\3\2\2\2b\u0992")
        buf.write("\3\2\2\2d\u09de\3\2\2\2f\u0a32\3\2\2\2h\u0a58\3\2\2\2")
        buf.write("j\u0a66\3\2\2\2l\u0a9c\3\2\2\2np\5:\36\2on\3\2\2\2ps\3")
        buf.write("\2\2\2qo\3\2\2\2qr\3\2\2\2rt\3\2\2\2sq\3\2\2\2tu\7\2\2")
        buf.write("\3u\3\3\2\2\2vx\7G\2\2wv\3\2\2\2wx\3\2\2\2xy\3\2\2\2y")
        buf.write("\177\7i\2\2z|\7J\2\2{}\5f\64\2|{\3\2\2\2|}\3\2\2\2}~\3")
        buf.write("\2\2\2~\u0080\7K\2\2\177z\3\2\2\2\177\u0080\3\2\2\2\u0080")
        buf.write("\u00b2\3\2\2\2\u0081\u00a0\7$\2\2\u0082\u0087\5l\67\2")
        buf.write("\u0083\u0084\7q\2\2\u0084\u0087\7i\2\2\u0085\u0087\7s")
        buf.write("\2\2\u0086\u0082\3\2\2\2\u0086\u0083\3\2\2\2\u0086\u0085")
        buf.write("\3\2\2\2\u0087\u008d\3\2\2\2\u0088\u008a\7J\2\2\u0089")
        buf.write("\u008b\5f\64\2\u008a\u0089\3\2\2\2\u008a\u008b\3\2\2\2")
        buf.write("\u008b\u008c\3\2\2\2\u008c\u008e\7K\2\2\u008d\u0088\3")
        buf.write("\2\2\2\u008d\u008e\3\2\2\2\u008e\u00a1\3\2\2\2\u008f\u0091")
        buf.write("\5> \2\u0090\u008f\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0090")
        buf.write("\3\2\2\2\u0092\u0093\3\2\2\2\u0093\u0097\3\2\2\2\u0094")
        buf.write("\u0096\5D#\2\u0095\u0094\3\2\2\2\u0096\u0099\3\2\2\2\u0097")
        buf.write("\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098\u009d\3\2\2\2")
        buf.write("\u0099\u0097\3\2\2\2\u009a\u009c\5N(\2\u009b\u009a\3\2")
        buf.write("\2\2\u009c\u009f\3\2\2\2\u009d\u009b\3\2\2\2\u009d\u009e")
        buf.write("\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2\u00a0")
        buf.write("\u0086\3\2\2\2\u00a0\u0090\3\2\2\2\u00a1\u00b2\3\2\2\2")
        buf.write("\u00a2\u00a3\7G\2\2\u00a3\u00a4\7\20\2\2\u00a4\u00ae\7")
        buf.write("9\2\2\u00a5\u00aa\5(\25\2\u00a6\u00a7\7_\2\2\u00a7\u00a9")
        buf.write("\5(\25\2\u00a8\u00a6\3\2\2\2\u00a9\u00ac\3\2\2\2\u00aa")
        buf.write("\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00af\3\2\2\2")
        buf.write("\u00ac\u00aa\3\2\2\2\u00ad\u00af\7\b\2\2\u00ae\u00a5\3")
        buf.write("\2\2\2\u00ae\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b2")
        buf.write("\7:\2\2\u00b1w\3\2\2\2\u00b1\u0081\3\2\2\2\u00b1\u00a2")
        buf.write("\3\2\2\2\u00b2\5\3\2\2\2\u00b3\u00b9\7i\2\2\u00b4\u00b6")
        buf.write("\7J\2\2\u00b5\u00b7\5f\64\2\u00b6\u00b5\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00ba\7K\2\2")
        buf.write("\u00b9\u00b4\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00ca\3")
        buf.write("\2\2\2\u00bb\u00bc\7\20\2\2\u00bc\u00c6\79\2\2\u00bd\u00c2")
        buf.write("\5(\25\2\u00be\u00bf\7_\2\2\u00bf\u00c1\5(\25\2\u00c0")
        buf.write("\u00be\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2")
        buf.write("\u00c2\u00c3\3\2\2\2\u00c3\u00c7\3\2\2\2\u00c4\u00c2\3")
        buf.write("\2\2\2\u00c5\u00c7\7\b\2\2\u00c6\u00bd\3\2\2\2\u00c6\u00c5")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ca\7:\2\2\u00c9")
        buf.write("\u00b3\3\2\2\2\u00c9\u00bb\3\2\2\2\u00ca\u00cb\3\2\2\2")
        buf.write("\u00cb\u00db\7d\2\2\u00cc\u00d7\7i\2\2\u00cd\u00cf\7.")
        buf.write("\2\2\u00ce\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0")
        buf.write("\3\2\2\2\u00d0\u00d1\7i\2\2\u00d1\u00d3\7J\2\2\u00d2\u00d4")
        buf.write("\5f\64\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4")
        buf.write("\u00d5\3\2\2\2\u00d5\u00d7\7K\2\2\u00d6\u00cc\3\2\2\2")
        buf.write("\u00d6\u00ce\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00da\7")
        buf.write("d\2\2\u00d9\u00d6\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\7\3\2\2\2\u00dd\u00db")
        buf.write("\3\2\2\2\u00de\u00f7\79\2\2\u00df\u00e4\5T+\2\u00e0\u00e1")
        buf.write("\7_\2\2\u00e1\u00e3\5T+\2\u00e2\u00e0\3\2\2\2\u00e3\u00e6")
        buf.write("\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5")
        buf.write("\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00df\3\2\2\2")
        buf.write("\u00e7\u00e8\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00eb\7")
        buf.write("h\2\2\u00ea\u00e9\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00f8")
        buf.write("\3\2\2\2\u00ec\u00f1\5T+\2\u00ed\u00ee\7_\2\2\u00ee\u00f0")
        buf.write("\5T+\2\u00ef\u00ed\3\2\2\2\u00f0\u00f3\3\2\2\2\u00f1\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f4\3\2\2\2\u00f3")
        buf.write("\u00f1\3\2\2\2\u00f4\u00f5\7_\2\2\u00f5\u00f6\7h\2\2\u00f6")
        buf.write("\u00f8\3\2\2\2\u00f7\u00e7\3\2\2\2\u00f7\u00ec\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u00fb\7:\2\2\u00fa\u00fc\7")
        buf.write("\37\2\2\u00fb\u00fa\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc")
        buf.write("\u0131\3\2\2\2\u00fd\u00fe\7\60\2\2\u00fe\u0127\79\2\2")
        buf.write("\u00ff\u0101\5> \2\u0100\u00ff\3\2\2\2\u0101\u0102\3\2")
        buf.write("\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0107")
        buf.write("\3\2\2\2\u0104\u0106\5D#\2\u0105\u0104\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010c\5P)\2\u010b")
        buf.write("\u010a\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e\3\2\2\2")
        buf.write("\u010d\u010f\7h\2\2\u010e\u010d\3\2\2\2\u010e\u010f\3")
        buf.write("\2\2\2\u010f\u0124\3\2\2\2\u0110\u0112\7_\2\2\u0111\u0113")
        buf.write("\5> \2\u0112\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0112")
        buf.write("\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0119\3\2\2\2\u0116")
        buf.write("\u0118\5D#\2\u0117\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011d\3\2\2\2")
        buf.write("\u011b\u0119\3\2\2\2\u011c\u011e\5P)\2\u011d\u011c\3\2")
        buf.write("\2\2\u011d\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u0121")
        buf.write("\7h\2\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121")
        buf.write("\u0123\3\2\2\2\u0122\u0110\3\2\2\2\u0123\u0126\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0128\3")
        buf.write("\2\2\2\u0126\u0124\3\2\2\2\u0127\u0100\3\2\2\2\u0127\u0128")
        buf.write("\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0132\7:\2\2\u012a")
        buf.write("\u012f\7\"\2\2\u012b\u012c\79\2\2\u012c\u012d\5,\27\2")
        buf.write("\u012d\u012e\7:\2\2\u012e\u0130\3\2\2\2\u012f\u012b\3")
        buf.write("\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132\3\2\2\2\u0131\u00fd")
        buf.write("\3\2\2\2\u0131\u012a\3\2\2\2\u0131\u0132\3\2\2\2\u0132")
        buf.write("\u0136\3\2\2\2\u0133\u0135\5D#\2\u0134\u0133\3\2\2\2\u0135")
        buf.write("\u0138\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2")
        buf.write("\u0137\u0148\3\2\2\2\u0138\u0136\3\2\2\2\u0139\u013b\7")
        buf.write("a\2\2\u013a\u013c\5@!\2\u013b\u013a\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("\u0142\3\2\2\2\u013f\u0141\5D#\2\u0140\u013f\3\2\2\2\u0141")
        buf.write("\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2")
        buf.write("\u0143\u0146\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0147\5")
        buf.write("P)\2\u0146\u0145\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0149")
        buf.write("\3\2\2\2\u0148\u0139\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\t\3\2\2\2\u014a\u015b\7;\2\2\u014b\u0150\5(\25\2\u014c")
        buf.write("\u014d\7_\2\2\u014d\u014f\5(\25\2\u014e\u014c\3\2\2\2")
        buf.write("\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3")
        buf.write("\2\2\2\u0151\u015c\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0158")
        buf.write("\7=\2\2\u0154\u0156\5X-\2\u0155\u0157\7_\2\2\u0156\u0155")
        buf.write("\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158")
        buf.write("\u0154\3\2\2\2\u0158\u0159\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u015c\7>\2\2\u015b\u014b\3\2\2\2\u015b\u0153\3")
        buf.write("\2\2\2\u015c\u015d\3\2\2\2\u015d\u0172\7<\2\2\u015e\u0160")
        buf.write("\79\2\2\u015f\u0161\5X-\2\u0160\u015f\3\2\2\2\u0160\u0161")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0172\7:\2\2\u0163")
        buf.write("\u016f\t\2\2\2\u0164\u0166\7.\2\2\u0165\u0164\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u016b\3\2\2\2\u0167\u0169\5")
        buf.write("\6\4\2\u0168\u016a\7.\2\2\u0169\u0168\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\u016c\3\2\2\2\u016b\u0167\3\2\2\2\u016b")
        buf.write("\u016c\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0170\5\4\3\2")
        buf.write("\u016e\u0170\5\16\b\2\u016f\u0165\3\2\2\2\u016f\u016e")
        buf.write("\3\2\2\2\u0170\u0172\3\2\2\2\u0171\u014a\3\2\2\2\u0171")
        buf.write("\u015e\3\2\2\2\u0171\u0163\3\2\2\2\u0172\13\3\2\2\2\u0173")
        buf.write("\u022a\t\3\2\2\u0174\u0176\5\6\4\2\u0175\u0177\7.\2\2")
        buf.write("\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179\3")
        buf.write("\2\2\2\u0178\u0174\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u022a\5\4\3\2\u017b\u01b0\7;\2\2\u017c")
        buf.write("\u018d\t\4\2\2\u017d\u0186\7_\2\2\u017e\u0180\7E\2\2\u017f")
        buf.write("\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u0183\7i\2\2\u0182\u0184\5V,\2\u0183\u0182\3\2")
        buf.write("\2\2\u0183\u0184\3\2\2\2\u0184\u0187\3\2\2\2\u0185\u0187")
        buf.write("\7/\2\2\u0186\u017f\3\2\2\2\u0186\u0185\3\2\2\2\u0187")
        buf.write("\u0189\3\2\2\2\u0188\u018a\7h\2\2\u0189\u0188\3\2\2\2")
        buf.write("\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u017d\3")
        buf.write("\2\2\2\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u01b1\3\2\2\2\u018f\u018d\3\2\2\2\u0190")
        buf.write("\u0192\7E\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2")
        buf.write("\u0192\u0193\3\2\2\2\u0193\u0195\7i\2\2\u0194\u0196\5")
        buf.write("V,\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0199")
        buf.write("\3\2\2\2\u0197\u0199\7/\2\2\u0198\u0191\3\2\2\2\u0198")
        buf.write("\u0197\3\2\2\2\u0199\u019b\3\2\2\2\u019a\u019c\7h\2\2")
        buf.write("\u019b\u019a\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u01ad\3")
        buf.write("\2\2\2\u019d\u01a6\7_\2\2\u019e\u01a0\7E\2\2\u019f\u019e")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u01a3\7i\2\2\u01a2\u01a4\5V,\2\u01a3\u01a2\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\u01a7\3\2\2\2\u01a5\u01a7\7/\2\2")
        buf.write("\u01a6\u019f\3\2\2\2\u01a6\u01a5\3\2\2\2\u01a7\u01a9\3")
        buf.write("\2\2\2\u01a8\u01aa\7h\2\2\u01a9\u01a8\3\2\2\2\u01a9\u01aa")
        buf.write("\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab\u019d\3\2\2\2\u01ac")
        buf.write("\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2")
        buf.write("\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u017c\3")
        buf.write("\2\2\2\u01b0\u0198\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2")
        buf.write("\3\2\2\2\u01b2\u01b4\7<\2\2\u01b3\u01b5\5\b\5\2\u01b4")
        buf.write("\u01b3\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2")
        buf.write("\u01b6\u01ba\7=\2\2\u01b7\u01b9\5.\30\2\u01b8\u01b7\3")
        buf.write("\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd")
        buf.write("\u022a\7>\2\2\u01be\u01cc\5B\"\2\u01bf\u01c1\79\2\2\u01c0")
        buf.write("\u01c2\5X-\2\u01c1\u01c0\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01cd\7:\2\2\u01c4\u01c9\7=\2\2\u01c5")
        buf.write("\u01c7\5X-\2\u01c6\u01c8\7_\2\2\u01c7\u01c6\3\2\2\2\u01c7")
        buf.write("\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01c5\3\2\2\2")
        buf.write("\u01c9\u01ca\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cd\7")
        buf.write(">\2\2\u01cc\u01bf\3\2\2\2\u01cc\u01c4\3\2\2\2\u01cd\u022a")
        buf.write("\3\2\2\2\u01ce\u01cf\7\64\2\2\u01cf\u01da\5\6\4\2\u01d0")
        buf.write("\u01db\7i\2\2\u01d1\u01d3\7.\2\2\u01d2\u01d1\3\2\2\2\u01d2")
        buf.write("\u01d3\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\7i\2\2")
        buf.write("\u01d5\u01d7\7J\2\2\u01d6\u01d8\5f\64\2\u01d7\u01d6\3")
        buf.write("\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db")
        buf.write("\7K\2\2\u01da\u01d0\3\2\2\2\u01da\u01d2\3\2\2\2\u01db")
        buf.write("\u01e9\3\2\2\2\u01dc\u01de\79\2\2\u01dd\u01df\5X-\2\u01de")
        buf.write("\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01ea\7:\2\2\u01e1\u01e6\7=\2\2\u01e2\u01e4\5X")
        buf.write("-\2\u01e3\u01e5\7_\2\2\u01e4\u01e3\3\2\2\2\u01e4\u01e5")
        buf.write("\3\2\2\2\u01e5\u01e7\3\2\2\2\u01e6\u01e2\3\2\2\2\u01e6")
        buf.write("\u01e7\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ea\7>\2\2")
        buf.write("\u01e9\u01dc\3\2\2\2\u01e9\u01e1\3\2\2\2\u01ea\u022a\3")
        buf.write("\2\2\2\u01eb\u01ec\7\16\2\2\u01ec\u01ee\7J\2\2\u01ed\u01ef")
        buf.write("\5> \2\u01ee\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01ee")
        buf.write("\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f5\3\2\2\2\u01f2")
        buf.write("\u01f4\5D#\2\u01f3\u01f2\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5")
        buf.write("\u01f3\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f9\3\2\2\2")
        buf.write("\u01f7\u01f5\3\2\2\2\u01f8\u01fa\5P)\2\u01f9\u01f8\3\2")
        buf.write("\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc")
        buf.write("\7K\2\2\u01fc\u01fe\3\2\2\2\u01fd\u01eb\3\2\2\2\u01fd")
        buf.write("\u01fe\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0200\79\2\2")
        buf.write("\u0200\u0205\5(\25\2\u0201\u0202\7_\2\2\u0202\u0204\5")
        buf.write("(\25\2\u0203\u0201\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203")
        buf.write("\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0208\3\2\2\2\u0207")
        buf.write("\u0205\3\2\2\2\u0208\u0209\7:\2\2\u0209\u022a\3\2\2\2")
        buf.write("\u020a\u0227\7\63\2\2\u020b\u020c\79\2\2\u020c\u0211\5")
        buf.write("(\25\2\u020d\u020e\7_\2\2\u020e\u0210\5(\25\2\u020f\u020d")
        buf.write("\3\2\2\2\u0210\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0214\3\2\2\2\u0213\u0211\3\2\2\2")
        buf.write("\u0214\u0215\7:\2\2\u0215\u0228\3\2\2\2\u0216\u0218\7")
        buf.write("9\2\2\u0217\u0219\5> \2\u0218\u0217\3\2\2\2\u0219\u021a")
        buf.write("\3\2\2\2\u021a\u0218\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\u021f\3\2\2\2\u021c\u021e\5D#\2\u021d\u021c\3\2\2\2\u021e")
        buf.write("\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220\u0223\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0224\5")
        buf.write("P)\2\u0223\u0222\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225")
        buf.write("\3\2\2\2\u0225\u0226\7:\2\2\u0226\u0228\3\2\2\2\u0227")
        buf.write("\u020b\3\2\2\2\u0227\u0216\3\2\2\2\u0228\u022a\3\2\2\2")
        buf.write("\u0229\u0173\3\2\2\2\u0229\u0178\3\2\2\2\u0229\u017b\3")
        buf.write("\2\2\2\u0229\u01be\3\2\2\2\u0229\u01ce\3\2\2\2\u0229\u01fd")
        buf.write("\3\2\2\2\u0229\u020a\3\2\2\2\u022a\u022e\3\2\2\2\u022b")
        buf.write("\u022d\5\n\6\2\u022c\u022b\3\2\2\2\u022d\u0230\3\2\2\2")
        buf.write("\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\r\3\2\2")
        buf.write("\2\u0230\u022e\3\2\2\2\u0231\u0233\5\6\4\2\u0232\u0231")
        buf.write("\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u023d\3\2\2\2\u0234")
        buf.write("\u023a\7i\2\2\u0235\u0237\7J\2\2\u0236\u0238\5f\64\2\u0237")
        buf.write("\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0239\3\2\2\2")
        buf.write("\u0239\u023b\7K\2\2\u023a\u0235\3\2\2\2\u023a\u023b\3")
        buf.write("\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e\7d\2\2\u023d\u0234")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u024a\3\2\2\2\u023f")
        buf.write("\u0240\5\6\4\2\u0240\u0241\7.\2\2\u0241\u0242\7i\2\2\u0242")
        buf.write("\u0244\7J\2\2\u0243\u0245\5f\64\2\u0244\u0243\3\2\2\2")
        buf.write("\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\7")
        buf.write("K\2\2\u0247\u0248\7d\2\2\u0248\u024a\3\2\2\2\u0249\u0232")
        buf.write("\3\2\2\2\u0249\u023f\3\2\2\2\u024a\u024b\3\2\2\2\u024b")
        buf.write("\u024c\7G\2\2\u024c\u0252\7i\2\2\u024d\u024f\7J\2\2\u024e")
        buf.write("\u0250\5f\64\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2")
        buf.write("\u0250\u0251\3\2\2\2\u0251\u0253\7K\2\2\u0252\u024d\3")
        buf.write("\2\2\2\u0252\u0253\3\2\2\2\u0253\u0264\3\2\2\2\u0254\u0255")
        buf.write("\7G\2\2\u0255\u0256\7\20\2\2\u0256\u0260\79\2\2\u0257")
        buf.write("\u025c\5(\25\2\u0258\u0259\7_\2\2\u0259\u025b\5(\25\2")
        buf.write("\u025a\u0258\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a\3")
        buf.write("\2\2\2\u025c\u025d\3\2\2\2\u025d\u0261\3\2\2\2\u025e\u025c")
        buf.write("\3\2\2\2\u025f\u0261\7\b\2\2\u0260\u0257\3\2\2\2\u0260")
        buf.write("\u025f\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\7:\2\2")
        buf.write("\u0263\u0249\3\2\2\2\u0263\u0254\3\2\2\2\u0264\17\3\2")
        buf.write("\2\2\u0265\u02a3\5\f\7\2\u0266\u02a3\5\22\n\2\u0267\u0268")
        buf.write("\t\5\2\2\u0268\u02a3\5\34\17\2\u0269\u0280\7*\2\2\u026a")
        buf.write("\u0281\5\20\t\2\u026b\u026d\79\2\2\u026c\u026e\5> \2\u026d")
        buf.write("\u026c\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u026d\3\2\2\2")
        buf.write("\u026f\u0270\3\2\2\2\u0270\u0274\3\2\2\2\u0271\u0273\5")
        buf.write("D#\2\u0272\u0271\3\2\2\2\u0273\u0276\3\2\2\2\u0274\u0272")
        buf.write("\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0278\3\2\2\2\u0276")
        buf.write("\u0274\3\2\2\2\u0277\u0279\5P)\2\u0278\u0277\3\2\2\2\u0278")
        buf.write("\u0279\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\7:\2\2")
        buf.write("\u027b\u0281\3\2\2\2\u027c\u027d\7h\2\2\u027d\u027e\7")
        buf.write("9\2\2\u027e\u027f\7i\2\2\u027f\u0281\7:\2\2\u0280\u026a")
        buf.write("\3\2\2\2\u0280\u026b\3\2\2\2\u0280\u027c\3\2\2\2\u0281")
        buf.write("\u02a3\3\2\2\2\u0282\u0283\7\6\2\2\u0283\u0285\79\2\2")
        buf.write("\u0284\u0286\5> \2\u0285\u0284\3\2\2\2\u0286\u0287\3\2")
        buf.write("\2\2\u0287\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u028c")
        buf.write("\3\2\2\2\u0289\u028b\5D#\2\u028a\u0289\3\2\2\2\u028b\u028e")
        buf.write("\3\2\2\2\u028c\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d")
        buf.write("\u0290\3\2\2\2\u028e\u028c\3\2\2\2\u028f\u0291\5P)\2\u0290")
        buf.write("\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0293\7:\2\2\u0293\u02a3\3\2\2\2\u0294\u0295\7")
        buf.write("\"\2\2\u0295\u0296\79\2\2\u0296\u029b\5(\25\2\u0297\u0298")
        buf.write("\7_\2\2\u0298\u029a\5(\25\2\u0299\u0297\3\2\2\2\u029a")
        buf.write("\u029d\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write("\u029c\u029e\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u029f\7")
        buf.write(":\2\2\u029f\u02a3\3\2\2\2\u02a0\u02a3\5\26\f\2\u02a1\u02a3")
        buf.write("\5\32\16\2\u02a2\u0265\3\2\2\2\u02a2\u0266\3\2\2\2\u02a2")
        buf.write("\u0267\3\2\2\2\u02a2\u0269\3\2\2\2\u02a2\u0282\3\2\2\2")
        buf.write("\u02a2\u0294\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a1\3")
        buf.write("\2\2\2\u02a3\21\3\2\2\2\u02a4\u02a5\t\6\2\2\u02a5\u02a8")
        buf.write("\5\34\17\2\u02a6\u02a8\5\24\13\2\u02a7\u02a4\3\2\2\2\u02a7")
        buf.write("\u02a6\3\2\2\2\u02a8\23\3\2\2\2\u02a9\u02aa\b\13\1\2\u02aa")
        buf.write("\u02ab\5\f\7\2\u02ab\u02ac\t\6\2\2\u02ac\u02b7\3\2\2\2")
        buf.write("\u02ad\u02b1\f\3\2\2\u02ae\u02b0\5\n\6\2\u02af\u02ae\3")
        buf.write("\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2")
        buf.write("\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4")
        buf.write("\u02b6\t\6\2\2\u02b5\u02ad\3\2\2\2\u02b6\u02b9\3\2\2\2")
        buf.write("\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\25\3\2")
        buf.write("\2\2\u02b9\u02b7\3\2\2\2\u02ba\u02bc\7d\2\2\u02bb\u02ba")
        buf.write("\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02c2\7!\2\2\u02be\u02bf\79\2\2\u02bf\u02c0\5X-\2\u02c0")
        buf.write("\u02c1\7:\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02be\3\2\2\2")
        buf.write("\u02c2\u02c3\3\2\2\2\u02c3\u02e3\3\2\2\2\u02c4\u02c6\5")
        buf.write("> \2\u02c5\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c5")
        buf.write("\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02cc\3\2\2\2\u02c9")
        buf.write("\u02cb\5D#\2\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc")
        buf.write("\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02d0\3\2\2\2")
        buf.write("\u02ce\u02cc\3\2\2\2\u02cf\u02d1\5\30\r\2\u02d0\u02cf")
        buf.write("\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02e4\3\2\2\2\u02d2")
        buf.write("\u02d4\79\2\2\u02d3\u02d5\5> \2\u02d4\u02d3\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2")
        buf.write("\u02d7\u02db\3\2\2\2\u02d8\u02da\5D#\2\u02d9\u02d8\3\2")
        buf.write("\2\2\u02da\u02dd\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02dc")
        buf.write("\3\2\2\2\u02dc\u02df\3\2\2\2\u02dd\u02db\3\2\2\2\u02de")
        buf.write("\u02e0\5P)\2\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0")
        buf.write("\u02e1\3\2\2\2\u02e1\u02e2\7:\2\2\u02e2\u02e4\3\2\2\2")
        buf.write("\u02e3\u02c5\3\2\2\2\u02e3\u02d2\3\2\2\2\u02e4\u02f2\3")
        buf.write("\2\2\2\u02e5\u02e7\79\2\2\u02e6\u02e8\5X-\2\u02e7\u02e6")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9")
        buf.write("\u02f3\7:\2\2\u02ea\u02ef\7=\2\2\u02eb\u02ed\5X-\2\u02ec")
        buf.write("\u02ee\7_\2\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2")
        buf.write("\u02ee\u02f0\3\2\2\2\u02ef\u02eb\3\2\2\2\u02ef\u02f0\3")
        buf.write("\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f3\7>\2\2\u02f2\u02e5")
        buf.write("\3\2\2\2\u02f2\u02ea\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3")
        buf.write("\27\3\2\2\2\u02f4\u02f6\5N(\2\u02f5\u02f7\5\30\r\2\u02f6")
        buf.write("\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u0317\3\2\2\2")
        buf.write("\u02f8\u02f9\7;\2\2\u02f9\u02fe\5(\25\2\u02fa\u02fb\7")
        buf.write("_\2\2\u02fb\u02fd\5(\25\2\u02fc\u02fa\3\2\2\2\u02fd\u0300")
        buf.write("\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff")
        buf.write("\u0301\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0305\7<\2\2")
        buf.write("\u0302\u0304\5D#\2\u0303\u0302\3\2\2\2\u0304\u0307\3\2")
        buf.write("\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0313")
        buf.write("\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309\7;\2\2\u0309")
        buf.write("\u030a\5,\27\2\u030a\u030e\7<\2\2\u030b\u030d\5D#\2\u030c")
        buf.write("\u030b\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2")
        buf.write("\u030e\u030f\3\2\2\2\u030f\u0312\3\2\2\2\u0310\u030e\3")
        buf.write("\2\2\2\u0311\u0308\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0311")
        buf.write("\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0317\3\2\2\2\u0315")
        buf.write("\u0313\3\2\2\2\u0316\u02f4\3\2\2\2\u0316\u02f8\3\2\2\2")
        buf.write("\u0317\31\3\2\2\2\u0318\u031a\7d\2\2\u0319\u0318\3\2\2")
        buf.write("\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031e")
        buf.write("\7\22\2\2\u031c\u031d\7;\2\2\u031d\u031f\7<\2\2\u031e")
        buf.write("\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\3\2\2\2")
        buf.write("\u0320\u0321\5\34\17\2\u0321\33\3\2\2\2\u0322\u0324\7")
        buf.write("9\2\2\u0323\u0325\5> \2\u0324\u0323\3\2\2\2\u0325\u0326")
        buf.write("\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u032b\3\2\2\2\u0328\u032a\5D#\2\u0329\u0328\3\2\2\2\u032a")
        buf.write("\u032d\3\2\2\2\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2")
        buf.write("\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032e\u0330\5")
        buf.write("P)\2\u032f\u032e\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331")
        buf.write("\3\2\2\2\u0331\u0332\7:\2\2\u0332\u0334\3\2\2\2\u0333")
        buf.write("\u0322\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3\2\2\2")
        buf.write("\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335\3")
        buf.write("\2\2\2\u0338\u0339\5\20\t\2\u0339\35\3\2\2\2\u033a\u034a")
        buf.write("\5\34\17\2\u033b\u0346\7g\2\2\u033c\u0346\7`\2\2\u033d")
        buf.write("\u0346\7A\2\2\u033e\u0346\7B\2\2\u033f\u0346\7C\2\2\u0340")
        buf.write("\u0346\7?\2\2\u0341\u0346\7@\2\2\u0342\u0346\7T\2\2\u0343")
        buf.write("\u0344\7K\2\2\u0344\u0346\7K\2\2\u0345\u033b\3\2\2\2\u0345")
        buf.write("\u033c\3\2\2\2\u0345\u033d\3\2\2\2\u0345\u033e\3\2\2\2")
        buf.write("\u0345\u033f\3\2\2\2\u0345\u0340\3\2\2\2\u0345\u0341\3")
        buf.write("\2\2\2\u0345\u0342\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u0349\5\34\17\2\u0348\u0345\3\2\2\2\u0349")
        buf.write("\u034c\3\2\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\37\3\2\2\2\u034c\u034a\3\2\2\2\u034d\u034e\b\21")
        buf.write("\1\2\u034e\u034f\5\36\20\2\u034f\u0355\3\2\2\2\u0350\u0351")
        buf.write("\f\3\2\2\u0351\u0352\t\7\2\2\u0352\u0354\5\36\20\2\u0353")
        buf.write("\u0350\3\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3\2\2\2")
        buf.write("\u0355\u0356\3\2\2\2\u0356!\3\2\2\2\u0357\u0355\3\2\2")
        buf.write("\2\u0358\u0359\b\22\1\2\u0359\u035a\5 \21\2\u035a\u0360")
        buf.write("\3\2\2\2\u035b\u035c\f\3\2\2\u035c\u035d\t\b\2\2\u035d")
        buf.write("\u035f\5 \21\2\u035e\u035b\3\2\2\2\u035f\u0362\3\2\2\2")
        buf.write("\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361#\3\2\2")
        buf.write("\2\u0362\u0360\3\2\2\2\u0363\u0368\5\"\22\2\u0364\u0365")
        buf.write("\t\t\2\2\u0365\u0367\5\"\22\2\u0366\u0364\3\2\2\2\u0367")
        buf.write("\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369\3\2\2\2")
        buf.write("\u0369\u036b\3\2\2\2\u036a\u0368\3\2\2\2\u036b\u036c\7")
        buf.write("b\2\2\u036c\u0371\5(\25\2\u036d\u036e\7_\2\2\u036e\u0370")
        buf.write("\5(\25\2\u036f\u036d\3\2\2\2\u0370\u0373\3\2\2\2\u0371")
        buf.write("\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374\3\2\2\2")
        buf.write("\u0373\u0371\3\2\2\2\u0374\u0375\7c\2\2\u0375\u0376\5")
        buf.write("(\25\2\u0376%\3\2\2\2\u0377\u037c\5\"\22\2\u0378\u0379")
        buf.write("\t\t\2\2\u0379\u037b\5\"\22\2\u037a\u0378\3\2\2\2\u037b")
        buf.write("\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u037f\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u0380\7")
        buf.write("^\2\2\u0380\u0381\5(\25\2\u0381\'\3\2\2\2\u0382\u0387")
        buf.write("\5\"\22\2\u0383\u0384\t\t\2\2\u0384\u0386\5\"\22\2\u0385")
        buf.write("\u0383\3\2\2\2\u0386\u0389\3\2\2\2\u0387\u0385\3\2\2\2")
        buf.write("\u0387\u0388\3\2\2\2\u0388\u0396\3\2\2\2\u0389\u0387\3")
        buf.write("\2\2\2\u038a\u0394\5*\26\2\u038b\u0395\5(\25\2\u038c\u0391")
        buf.write("\7=\2\2\u038d\u038f\5X-\2\u038e\u0390\7_\2\2\u038f\u038e")
        buf.write("\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0392\3\2\2\2\u0391")
        buf.write("\u038d\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2")
        buf.write("\u0393\u0395\7>\2\2\u0394\u038b\3\2\2\2\u0394\u038c\3")
        buf.write("\2\2\2\u0395\u0397\3\2\2\2\u0396\u038a\3\2\2\2\u0396\u0397")
        buf.write("\3\2\2\2\u0397\u039f\3\2\2\2\u0398\u039f\5$\23\2\u0399")
        buf.write("\u039f\5&\24\2\u039a\u039c\7\60\2\2\u039b\u039d\5(\25")
        buf.write("\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f")
        buf.write("\3\2\2\2\u039e\u0382\3\2\2\2\u039e\u0398\3\2\2\2\u039e")
        buf.write("\u0399\3\2\2\2\u039e\u039a\3\2\2\2\u039f)\3\2\2\2\u03a0")
        buf.write("\u03a5\t\n\2\2\u03a1\u03a2\7K\2\2\u03a2\u03a3\7K\2\2\u03a3")
        buf.write("\u03a5\7I\2\2\u03a4\u03a0\3\2\2\2\u03a4\u03a1\3\2\2\2")
        buf.write("\u03a5+\3\2\2\2\u03a6\u03ab\5\"\22\2\u03a7\u03a8\t\t\2")
        buf.write("\2\u03a8\u03aa\5\"\22\2\u03a9\u03a7\3\2\2\2\u03aa\u03ad")
        buf.write("\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write("\u03b1\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae\u03b1\5$\23\2")
        buf.write("\u03af\u03b1\5&\24\2\u03b0\u03a6\3\2\2\2\u03b0\u03ae\3")
        buf.write("\2\2\2\u03b0\u03af\3\2\2\2\u03b1-\3\2\2\2\u03b2\u03b4")
        buf.write("\5D#\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5\u03b3")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u043f\3\2\2\2\u03b7")
        buf.write("\u03b5\3\2\2\2\u03b8\u03b9\7i\2\2\u03b9\u03c0\7c\2\2\u03ba")
        buf.write("\u03bb\t\13\2\2\u03bb\u03bc\79\2\2\u03bc\u03bd\5\64\33")
        buf.write("\2\u03bd\u03be\7:\2\2\u03be\u03c0\3\2\2\2\u03bf\u03b8")
        buf.write("\3\2\2\2\u03bf\u03ba\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write("\u0440\5.\30\2\u03c2\u0440\5\60\31\2\u03c3\u03c8\5(\25")
        buf.write("\2\u03c4\u03c5\7_\2\2\u03c5\u03c7\5(\25\2\u03c6\u03c4")
        buf.write("\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2")
        buf.write("\u03cb\u03c3\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3")
        buf.write("\2\2\2\u03cd\u0440\7e\2\2\u03ce\u03d2\7=\2\2\u03cf\u03d1")
        buf.write("\5.\30\2\u03d0\u03cf\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2")
        buf.write("\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\3\2\2\2")
        buf.write("\u03d4\u03d2\3\2\2\2\u03d5\u0440\7>\2\2\u03d6\u03d7\7")
        buf.write("\34\2\2\u03d7\u03d8\79\2\2\u03d8\u03d9\5\64\33\2\u03d9")
        buf.write("\u03da\7:\2\2\u03da\u03dc\5.\30\2\u03db\u03dd\5\62\32")
        buf.write("\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u0440")
        buf.write("\3\2\2\2\u03de\u03df\7\23\2\2\u03df\u03e0\5.\30\2\u03e0")
        buf.write("\u03e1\78\2\2\u03e1\u03e2\79\2\2\u03e2\u03e7\5(\25\2\u03e3")
        buf.write("\u03e4\7_\2\2\u03e4\u03e6\5(\25\2\u03e5\u03e3\3\2\2\2")
        buf.write("\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e8\3")
        buf.write("\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e7\3\2\2\2\u03ea\u03eb")
        buf.write("\7:\2\2\u03eb\u03ec\7e\2\2\u03ec\u0440\3\2\2\2\u03ed\u03ee")
        buf.write("\7\32\2\2\u03ee\u0419\79\2\2\u03ef\u03f1\5\66\34\2\u03f0")
        buf.write("\u03f2\5\64\33\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2")
        buf.write("\2\u03f2\u03f3\3\2\2\2\u03f3\u03fc\7e\2\2\u03f4\u03f9")
        buf.write("\5(\25\2\u03f5\u03f6\7_\2\2\u03f6\u03f8\5(\25\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f8\u03fb\3\2\2\2\u03f9\u03f7\3\2\2\2")
        buf.write("\u03f9\u03fa\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3")
        buf.write("\2\2\2\u03fc\u03f4\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u041a")
        buf.write("\3\2\2\2\u03fe\u0400\5D#\2\u03ff\u03fe\3\2\2\2\u0400\u0403")
        buf.write("\3\2\2\2\u0401\u03ff\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0404\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u0405\5<\37\2")
        buf.write("\u0405\u0406\5H%\2\u0406\u0417\7c\2\2\u0407\u040c\5(\25")
        buf.write("\2\u0408\u0409\7_\2\2\u0409\u040b\5(\25\2\u040a\u0408")
        buf.write("\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d\u0418\3\2\2\2\u040e\u040c\3\2\2\2")
        buf.write("\u040f\u0414\7=\2\2\u0410\u0412\5X-\2\u0411\u0413\7_\2")
        buf.write("\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415")
        buf.write("\3\2\2\2\u0414\u0410\3\2\2\2\u0414\u0415\3\2\2\2\u0415")
        buf.write("\u0416\3\2\2\2\u0416\u0418\7>\2\2\u0417\u0407\3\2\2\2")
        buf.write("\u0417\u040f\3\2\2\2\u0418\u041a\3\2\2\2\u0419\u03ef\3")
        buf.write("\2\2\2\u0419\u0401\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c")
        buf.write("\7:\2\2\u041c\u041d\5.\30\2\u041d\u0440\3\2\2\2\u041e")
        buf.write("\u041f\t\f\2\2\u041f\u0440\7e\2\2\u0420\u0433\7(\2\2\u0421")
        buf.write("\u0426\5(\25\2\u0422\u0423\7_\2\2\u0423\u0425\5(\25\2")
        buf.write("\u0424\u0422\3\2\2\2\u0425\u0428\3\2\2\2\u0426\u0424\3")
        buf.write("\2\2\2\u0426\u0427\3\2\2\2\u0427\u042a\3\2\2\2\u0428\u0426")
        buf.write("\3\2\2\2\u0429\u0421\3\2\2\2\u0429\u042a\3\2\2\2\u042a")
        buf.write("\u0434\3\2\2\2\u042b\u0430\7=\2\2\u042c\u042e\5X-\2\u042d")
        buf.write("\u042f\7_\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2")
        buf.write("\u042f\u0431\3\2\2\2\u0430\u042c\3\2\2\2\u0430\u0431\3")
        buf.write("\2\2\2\u0431\u0432\3\2\2\2\u0432\u0434\7>\2\2\u0433\u0429")
        buf.write("\3\2\2\2\u0433\u042b\3\2\2\2\u0434\u0435\3\2\2\2\u0435")
        buf.write("\u0440\7e\2\2\u0436\u0440\58\35\2\u0437\u0438\7\66\2\2")
        buf.write("\u0438\u043a\7 \2\2\u0439\u043b\5\6\4\2\u043a\u0439\3")
        buf.write("\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d")
        buf.write("\7i\2\2\u043d\u0440\7e\2\2\u043e\u0440\5h\65\2\u043f\u03bf")
        buf.write("\3\2\2\2\u043f\u03c2\3\2\2\2\u043f\u03cb\3\2\2\2\u043f")
        buf.write("\u03ce\3\2\2\2\u043f\u03d6\3\2\2\2\u043f\u03de\3\2\2\2")
        buf.write("\u043f\u03ed\3\2\2\2\u043f\u041e\3\2\2\2\u043f\u0420\3")
        buf.write("\2\2\2\u043f\u0436\3\2\2\2\u043f\u0437\3\2\2\2\u043f\u043e")
        buf.write("\3\2\2\2\u0440\u04c0\3\2\2\2\u0441\u0443\5D#\2\u0442\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0442\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0448\5<\37\2")
        buf.write("\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\3")
        buf.write("\2\2\2\u0449\u044b\5H%\2\u044a\u044c\5V,\2\u044b\u044a")
        buf.write("\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u0454\3\2\2\2\u044d")
        buf.write("\u044e\7_\2\2\u044e\u0450\5H%\2\u044f\u0451\5V,\2\u0450")
        buf.write("\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0453\3\2\2\2")
        buf.write("\u0452\u044d\3\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452\3")
        buf.write("\2\2\2\u0454\u0455\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0454")
        buf.write("\3\2\2\2\u0457\u0458\7e\2\2\u0458\u04c0\3\2\2\2\u0459")
        buf.write("\u045b\5<\37\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u046a\3\2\2\2\u045c\u045e\5H%\2\u045d\u045f\5V")
        buf.write(",\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0467")
        buf.write("\3\2\2\2\u0460\u0461\7_\2\2\u0461\u0463\5H%\2\u0462\u0464")
        buf.write("\5V,\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466")
        buf.write("\3\2\2\2\u0465\u0460\3\2\2\2\u0466\u0469\3\2\2\2\u0467")
        buf.write("\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046b\3\2\2\2")
        buf.write("\u0469\u0467\3\2\2\2\u046a\u045c\3\2\2\2\u046a\u046b\3")
        buf.write("\2\2\2\u046b\u046c\3\2\2\2\u046c\u04c0\7e\2\2\u046d\u046e")
        buf.write("\7\7\2\2\u046e\u046f\79\2\2\u046f\u0470\7q\2\2\u0470\u0471")
        buf.write("\7:\2\2\u0471\u04c0\7e\2\2\u0472\u0473\7 \2\2\u0473\u0474")
        buf.write("\7i\2\2\u0474\u0476\7I\2\2\u0475\u0477\5\6\4\2\u0476\u0475")
        buf.write("\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0478\3\2\2\2\u0478")
        buf.write("\u0479\7i\2\2\u0479\u04c0\7e\2\2\u047a\u0499\7\66\2\2")
        buf.write("\u047b\u0481\7d\2\2\u047c\u047e\7\64\2\2\u047d\u047c\3")
        buf.write("\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0481")
        buf.write("\5\6\4\2\u0480\u047b\3\2\2\2\u0480\u047d\3\2\2\2\u0481")
        buf.write("\u0482\3\2\2\2\u0482\u049a\5\4\3\2\u0483\u0487\7i\2\2")
        buf.write("\u0484\u0486\5D#\2\u0485\u0484\3\2\2\2\u0486\u0489\3\2")
        buf.write("\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a")
        buf.write("\3\2\2\2\u0489\u0487\3\2\2\2\u048a\u048c\7I\2\2\u048b")
        buf.write("\u048d\5> \2\u048c\u048b\3\2\2\2\u048d\u048e\3\2\2\2\u048e")
        buf.write("\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0493\3\2\2\2")
        buf.write("\u0490\u0492\5D#\2\u0491\u0490\3\2\2\2\u0492\u0495\3\2")
        buf.write("\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0497")
        buf.write("\3\2\2\2\u0495\u0493\3\2\2\2\u0496\u0498\5P)\2\u0497\u0496")
        buf.write("\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\3\2\2\2\u0499")
        buf.write("\u0480\3\2\2\2\u0499\u0483\3\2\2\2\u049a\u049b\3\2\2\2")
        buf.write("\u049b\u049c\7e\2\2\u049c\u04c0\3\2\2\2\u049d\u049e\7")
        buf.write("+\2\2\u049e\u049f\79\2\2\u049f\u04a0\5,\27\2\u04a0\u04a1")
        buf.write("\7_\2\2\u04a1\u04a2\7q\2\2\u04a2\u04a3\7:\2\2\u04a3\u04a4")
        buf.write("\7e\2\2\u04a4\u04c0\3\2\2\2\u04a5\u04a7\7\25\2\2\u04a6")
        buf.write("\u04a8\t\r\2\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2")
        buf.write("\u04a8\u04ac\3\2\2\2\u04a9\u04ab\5D#\2\u04aa\u04a9\3\2")
        buf.write("\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad")
        buf.write("\3\2\2\2\u04ad\u04af\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af")
        buf.write("\u04bc\7i\2\2\u04b0\u04b2\7c\2\2\u04b1\u04b3\5> \2\u04b2")
        buf.write("\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b2\3\2\2\2")
        buf.write("\u04b4\u04b5\3\2\2\2\u04b5\u04b9\3\2\2\2\u04b6\u04b8\5")
        buf.write("D#\2\u04b7\u04b6\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9\u04b7")
        buf.write("\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bd\3\2\2\2\u04bb")
        buf.write("\u04b9\3\2\2\2\u04bc\u04b0\3\2\2\2\u04bc\u04bd\3\2\2\2")
        buf.write("\u04bd\u04be\3\2\2\2\u04be\u04c0\7e\2\2\u04bf\u03b5\3")
        buf.write("\2\2\2\u04bf\u0442\3\2\2\2\u04bf\u045a\3\2\2\2\u04bf\u046d")
        buf.write("\3\2\2\2\u04bf\u0472\3\2\2\2\u04bf\u047a\3\2\2\2\u04bf")
        buf.write("\u049d\3\2\2\2\u04bf\u04a5\3\2\2\2\u04c0/\3\2\2\2\u04c1")
        buf.write("\u04c2\7\n\2\2\u04c2\u04c5\5,\27\2\u04c3\u04c5\7\21\2")
        buf.write("\2\u04c4\u04c1\3\2\2\2\u04c4\u04c3\3\2\2\2\u04c5\u04c6")
        buf.write("\3\2\2\2\u04c6\u04c7\7c\2\2\u04c7\u04c8\5.\30\2\u04c8")
        buf.write("\61\3\2\2\2\u04c9\u04ca\7\24\2\2\u04ca\u04cb\5.\30\2\u04cb")
        buf.write("\63\3\2\2\2\u04cc\u04d1\5(\25\2\u04cd\u04ce\7_\2\2\u04ce")
        buf.write("\u04d0\5(\25\2\u04cf\u04cd\3\2\2\2\u04d0\u04d3\3\2\2\2")
        buf.write("\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04ec\3")
        buf.write("\2\2\2\u04d3\u04d1\3\2\2\2\u04d4\u04d6\5D#\2\u04d5\u04d4")
        buf.write("\3\2\2\2\u04d6\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7")
        buf.write("\u04d8\3\2\2\2\u04d8\u04da\3\2\2\2\u04d9\u04d7\3\2\2\2")
        buf.write("\u04da\u04db\5<\37\2\u04db\u04e9\5H%\2\u04dc\u04dd\7I")
        buf.write("\2\2\u04dd\u04ea\5(\25\2\u04de\u04e0\7I\2\2\u04df\u04de")
        buf.write("\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1")
        buf.write("\u04e6\7=\2\2\u04e2\u04e4\5X-\2\u04e3\u04e5\7_\2\2\u04e4")
        buf.write("\u04e3\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\3\2\2\2")
        buf.write("\u04e6\u04e2\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e8\3")
        buf.write("\2\2\2\u04e8\u04ea\7>\2\2\u04e9\u04dc\3\2\2\2\u04e9\u04df")
        buf.write("\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04cc\3\2\2\2\u04eb")
        buf.write("\u04d7\3\2\2\2\u04ec\65\3\2\2\2\u04ed\u04f2\5(\25\2\u04ee")
        buf.write("\u04ef\7_\2\2\u04ef\u04f1\5(\25\2\u04f0\u04ee\3\2\2\2")
        buf.write("\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3")
        buf.write("\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5\u04ed")
        buf.write("\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u0521\3\2\2\2\u04f7")
        buf.write("\u04f9\5<\37\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2")
        buf.write("\u04f9\u0508\3\2\2\2\u04fa\u04fc\5H%\2\u04fb\u04fd\5V")
        buf.write(",\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0505")
        buf.write("\3\2\2\2\u04fe\u04ff\7_\2\2\u04ff\u0501\5H%\2\u0500\u0502")
        buf.write("\5V,\2\u0501\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0504")
        buf.write("\3\2\2\2\u0503\u04fe\3\2\2\2\u0504\u0507\3\2\2\2\u0505")
        buf.write("\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0509\3\2\2\2")
        buf.write("\u0507\u0505\3\2\2\2\u0508\u04fa\3\2\2\2\u0508\u0509\3")
        buf.write("\2\2\2\u0509\u0521\3\2\2\2\u050a\u050c\5D#\2\u050b\u050a")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050b\3\2\2\2\u050d")
        buf.write("\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u0511\5<\37\2")
        buf.write("\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\3")
        buf.write("\2\2\2\u0512\u0514\5H%\2\u0513\u0515\5V,\2\u0514\u0513")
        buf.write("\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u051d\3\2\2\2\u0516")
        buf.write("\u0517\7_\2\2\u0517\u0519\5H%\2\u0518\u051a\5V,\2\u0519")
        buf.write("\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051c\3\2\2\2")
        buf.write("\u051b\u0516\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3")
        buf.write("\2\2\2\u051d\u051e\3\2\2\2\u051e\u0521\3\2\2\2\u051f\u051d")
        buf.write("\3\2\2\2\u0520\u04f5\3\2\2\2\u0520\u04f8\3\2\2\2\u0520")
        buf.write("\u050b\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0523\7e\2\2")
        buf.write("\u0523\67\3\2\2\2\u0524\u0525\7\33\2\2\u0525\u0526\7i")
        buf.write("\2\2\u0526\u0527\7e\2\2\u05279\3\2\2\2\u0528\u052a\5<")
        buf.write("\37\2\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u0539")
        buf.write("\3\2\2\2\u052b\u052d\5H%\2\u052c\u052e\5V,\2\u052d\u052c")
        buf.write("\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0536\3\2\2\2\u052f")
        buf.write("\u0530\7_\2\2\u0530\u0532\5H%\2\u0531\u0533\5V,\2\u0532")
        buf.write("\u0531\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0535\3\2\2\2")
        buf.write("\u0534\u052f\3\2\2\2\u0535\u0538\3\2\2\2\u0536\u0534\3")
        buf.write("\2\2\2\u0536\u0537\3\2\2\2\u0537\u053a\3\2\2\2\u0538\u0536")
        buf.write("\3\2\2\2\u0539\u052b\3\2\2\2\u0539\u053a\3\2\2\2\u053a")
        buf.write("\u053b\3\2\2\2\u053b\u060f\7e\2\2\u053c\u053e\5D#\2\u053d")
        buf.write("\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u053d\3\2\2\2")
        buf.write("\u053f\u0540\3\2\2\2\u0540\u0552\3\2\2\2\u0541\u0543\5")
        buf.write("<\37\2\u0542\u0541\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u0546\5H%\2\u0545\u0547\5V,\2\u0546\u0545")
        buf.write("\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u054f\3\2\2\2\u0548")
        buf.write("\u0549\7_\2\2\u0549\u054b\5H%\2\u054a\u054c\5V,\2\u054b")
        buf.write("\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054e\3\2\2\2")
        buf.write("\u054d\u0548\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3")
        buf.write("\2\2\2\u054f\u0550\3\2\2\2\u0550\u0553\3\2\2\2\u0551\u054f")
        buf.write("\3\2\2\2\u0552\u0542\3\2\2\2\u0552\u0553\3\2\2\2\u0553")
        buf.write("\u0554\3\2\2\2\u0554\u0555\7e\2\2\u0555\u060f\3\2\2\2")
        buf.write("\u0556\u0558\5D#\2\u0557\u0556\3\2\2\2\u0558\u055b\3\2")
        buf.write("\2\2\u0559\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u0590")
        buf.write("\3\2\2\2\u055b\u0559\3\2\2\2\u055c\u055d\7\66\2\2\u055d")
        buf.write("\u055f\7 \2\2\u055e\u0560\5\6\4\2\u055f\u055e\3\2\2\2")
        buf.write("\u055f\u0560\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\7")
        buf.write("i\2\2\u0562\u0591\7e\2\2\u0563\u0565\5<\37\2\u0564\u0563")
        buf.write("\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u056a\5H%\2\u0567\u0569\t\16\2\2\u0568\u0567\3\2\2\2")
        buf.write("\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2\u056a\u056b\3")
        buf.write("\2\2\2\u056b\u058e\3\2\2\2\u056c\u056a\3\2\2\2\u056d\u056e")
        buf.write("\7c\2\2\u056e\u0570\5b\62\2\u056f\u056d\3\2\2\2\u056f")
        buf.write("\u0570\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0575\7=\2\2")
        buf.write("\u0572\u0574\5.\30\2\u0573\u0572\3\2\2\2\u0574\u0577\3")
        buf.write("\2\2\2\u0575\u0573\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578")
        buf.write("\3\2\2\2\u0577\u0575\3\2\2\2\u0578\u058f\7>\2\2\u0579")
        buf.write("\u057c\7\62\2\2\u057a\u057b\7c\2\2\u057b\u057d\5b\62\2")
        buf.write("\u057c\u057a\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3")
        buf.write("\2\2\2\u057e\u0582\7=\2\2\u057f\u0581\5.\30\2\u0580\u057f")
        buf.write("\3\2\2\2\u0581\u0584\3\2\2\2\u0582\u0580\3\2\2\2\u0582")
        buf.write("\u0583\3\2\2\2\u0583\u0585\3\2\2\2\u0584\u0582\3\2\2\2")
        buf.write("\u0585\u0587\7>\2\2\u0586\u0588\5j\66\2\u0587\u0586\3")
        buf.write("\2\2\2\u0588\u0589\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u058a")
        buf.write("\3\2\2\2\u058a\u058f\3\2\2\2\u058b\u058c\7I\2\2\u058c")
        buf.write("\u058d\t\17\2\2\u058d\u058f\7e\2\2\u058e\u056f\3\2\2\2")
        buf.write("\u058e\u0579\3\2\2\2\u058e\u058b\3\2\2\2\u058f\u0591\3")
        buf.write("\2\2\2\u0590\u055c\3\2\2\2\u0590\u0564\3\2\2\2\u0591\u060f")
        buf.write("\3\2\2\2\u0592\u0593\7\7\2\2\u0593\u0594\79\2\2\u0594")
        buf.write("\u0595\7q\2\2\u0595\u0596\7:\2\2\u0596\u060f\7e\2\2\u0597")
        buf.write("\u0598\7 \2\2\u0598\u0599\7i\2\2\u0599\u059b\7I\2\2\u059a")
        buf.write("\u059c\5\6\4\2\u059b\u059a\3\2\2\2\u059b\u059c\3\2\2\2")
        buf.write("\u059c\u059d\3\2\2\2\u059d\u059e\7i\2\2\u059e\u060f\7")
        buf.write("e\2\2\u059f\u05be\7\66\2\2\u05a0\u05a6\7d\2\2\u05a1\u05a3")
        buf.write("\7\64\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3")
        buf.write("\u05a4\3\2\2\2\u05a4\u05a6\5\6\4\2\u05a5\u05a0\3\2\2\2")
        buf.write("\u05a5\u05a2\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05bf\5")
        buf.write("\4\3\2\u05a8\u05ac\7i\2\2\u05a9\u05ab\5D#\2\u05aa\u05a9")
        buf.write("\3\2\2\2\u05ab\u05ae\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac")
        buf.write("\u05ad\3\2\2\2\u05ad\u05af\3\2\2\2\u05ae\u05ac\3\2\2\2")
        buf.write("\u05af\u05b1\7I\2\2\u05b0\u05b2\5> \2\u05b1\u05b0\3\2")
        buf.write("\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4")
        buf.write("\3\2\2\2\u05b4\u05b8\3\2\2\2\u05b5\u05b7\5D#\2\u05b6\u05b5")
        buf.write("\3\2\2\2\u05b7\u05ba\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b8")
        buf.write("\u05b9\3\2\2\2\u05b9\u05bc\3\2\2\2\u05ba\u05b8\3\2\2\2")
        buf.write("\u05bb\u05bd\5P)\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2")
        buf.write("\2\2\u05bd\u05bf\3\2\2\2\u05be\u05a5\3\2\2\2\u05be\u05a8")
        buf.write("\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\7e\2\2\u05c1")
        buf.write("\u060f\3\2\2\2\u05c2\u05c3\7+\2\2\u05c3\u05c4\79\2\2\u05c4")
        buf.write("\u05c5\5,\27\2\u05c5\u05c6\7_\2\2\u05c6\u05c7\7q\2\2\u05c7")
        buf.write("\u05c8\7:\2\2\u05c8\u05c9\7e\2\2\u05c9\u060f\3\2\2\2\u05ca")
        buf.write("\u05cc\7\25\2\2\u05cb\u05cd\t\r\2\2\u05cc\u05cb\3\2\2")
        buf.write("\2\u05cc\u05cd\3\2\2\2\u05cd\u05d1\3\2\2\2\u05ce\u05d0")
        buf.write("\5D#\2\u05cf\u05ce\3\2\2\2\u05d0\u05d3\3\2\2\2\u05d1\u05cf")
        buf.write("\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3")
        buf.write("\u05d1\3\2\2\2\u05d4\u05e1\7i\2\2\u05d5\u05d7\7c\2\2\u05d6")
        buf.write("\u05d8\5> \2\u05d7\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9")
        buf.write("\u05d7\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05de\3\2\2\2")
        buf.write("\u05db\u05dd\5D#\2\u05dc\u05db\3\2\2\2\u05dd\u05e0\3\2")
        buf.write("\2\2\u05de\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e2")
        buf.write("\3\2\2\2\u05e0\u05de\3\2\2\2\u05e1\u05d5\3\2\2\2\u05e1")
        buf.write("\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u060f\7e\2\2")
        buf.write("\u05e4\u05e5\7.\2\2\u05e5\u05e7\7J\2\2\u05e6\u05e8\5d")
        buf.write("\63\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05e9")
        buf.write("\3\2\2\2\u05e9\u05ef\7K\2\2\u05ea\u05ec\7\27\2\2\u05eb")
        buf.write("\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ed\3\2\2\2")
        buf.write("\u05ed\u05ef\7.\2\2\u05ee\u05e4\3\2\2\2\u05ee\u05eb\3")
        buf.write("\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u060f\5:\36\2\u05f1\u05f2")
        buf.write("\7\27\2\2\u05f2\u05fc\7q\2\2\u05f3\u05f7\7=\2\2\u05f4")
        buf.write("\u05f6\5:\36\2\u05f5\u05f4\3\2\2\2\u05f6\u05f9\3\2\2\2")
        buf.write("\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05fa\3")
        buf.write("\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fd\7>\2\2\u05fb\u05fd")
        buf.write("\5:\36\2\u05fc\u05f3\3\2\2\2\u05fc\u05fb\3\2\2\2\u05fd")
        buf.write("\u060f\3\2\2\2\u05fe\u0600\7\35\2\2\u05ff\u05fe\3\2\2")
        buf.write("\2\u05ff\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0603")
        buf.write("\7 \2\2\u0602\u0604\7i\2\2\u0603\u0602\3\2\2\2\u0603\u0604")
        buf.write("\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u0609\7=\2\2\u0606")
        buf.write("\u0608\5:\36\2\u0607\u0606\3\2\2\2\u0608\u060b\3\2\2\2")
        buf.write("\u0609\u0607\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\3")
        buf.write("\2\2\2\u060b\u0609\3\2\2\2\u060c\u060f\7>\2\2\u060d\u060f")
        buf.write("\7e\2\2\u060e\u0529\3\2\2\2\u060e\u053d\3\2\2\2\u060e")
        buf.write("\u0559\3\2\2\2\u060e\u0592\3\2\2\2\u060e\u0597\3\2\2\2")
        buf.write("\u060e\u059f\3\2\2\2\u060e\u05c2\3\2\2\2\u060e\u05ca\3")
        buf.write("\2\2\2\u060e\u05ee\3\2\2\2\u060e\u05f1\3\2\2\2\u060e\u05ff")
        buf.write("\3\2\2\2\u060e\u060d\3\2\2\2\u060f;\3\2\2\2\u0610\u0613")
        buf.write("\t\20\2\2\u0611\u0613\5> \2\u0612\u0610\3\2\2\2\u0612")
        buf.write("\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0612\3\2\2\2")
        buf.write("\u0614\u0615\3\2\2\2\u0615\u0619\3\2\2\2\u0616\u0618\5")
        buf.write("D#\2\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617")
        buf.write("\3\2\2\2\u0619\u061a\3\2\2\2\u061a=\3\2\2\2\u061b\u0619")
        buf.write("\3\2\2\2\u061c\u0680\5@!\2\u061d\u0621\t\21\2\2\u061e")
        buf.write("\u0620\5D#\2\u061f\u061e\3\2\2\2\u0620\u0623\3\2\2\2\u0621")
        buf.write("\u061f\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0632\3\2\2\2")
        buf.write("\u0623\u0621\3\2\2\2\u0624\u0626\5\6\4\2\u0625\u0624\3")
        buf.write("\2\2\2\u0625\u0626\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u062d")
        buf.write("\7i\2\2\u0628\u062a\7J\2\2\u0629\u062b\5f\64\2\u062a\u0629")
        buf.write("\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u062e\7K\2\2\u062d\u0628\3\2\2\2\u062d\u062e\3\2\2\2")
        buf.write("\u062e\u0630\3\2\2\2\u062f\u0631\7\31\2\2\u0630\u062f")
        buf.write("\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0633\3\2\2\2\u0632")
        buf.write("\u0625\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0643\3\2\2\2")
        buf.write("\u0634\u0635\7c\2\2\u0635\u0637\5`\61\2\u0636\u0638\7")
        buf.write("h\2\2\u0637\u0636\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u0640")
        buf.write("\3\2\2\2\u0639\u063a\7_\2\2\u063a\u063c\5`\61\2\u063b")
        buf.write("\u063d\7h\2\2\u063c\u063b\3\2\2\2\u063c\u063d\3\2\2\2")
        buf.write("\u063d\u063f\3\2\2\2\u063e\u0639\3\2\2\2\u063f\u0642\3")
        buf.write("\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0644")
        buf.write("\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0634\3\2\2\2\u0643")
        buf.write("\u0644\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0649\7=\2\2")
        buf.write("\u0646\u064a\5Z.\2\u0647\u0648\7&\2\2\u0648\u064a\7c\2")
        buf.write("\2\u0649\u0646\3\2\2\2\u0649\u0647\3\2\2\2\u0649\u064a")
        buf.write("\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u0680\7>\2\2\u064c")
        buf.write("\u064e\7\25\2\2\u064d\u064f\t\r\2\2\u064e\u064d\3\2\2")
        buf.write("\2\u064e\u064f\3\2\2\2\u064f\u0653\3\2\2\2\u0650\u0652")
        buf.write("\5D#\2\u0651\u0650\3\2\2\2\u0652\u0655\3\2\2\2\u0653\u0651")
        buf.write("\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u065a\3\2\2\2\u0655")
        buf.write("\u0653\3\2\2\2\u0656\u0658\5\6\4\2\u0657\u0656\3\2\2\2")
        buf.write("\u0657\u0658\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\7")
        buf.write("i\2\2\u065a\u0657\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u0668")
        buf.write("\3\2\2\2\u065c\u065e\7c\2\2\u065d\u065f\5> \2\u065e\u065d")
        buf.write("\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u065e\3\2\2\2\u0660")
        buf.write("\u0661\3\2\2\2\u0661\u0665\3\2\2\2\u0662\u0664\5D#\2\u0663")
        buf.write("\u0662\3\2\2\2\u0664\u0667\3\2\2\2\u0665\u0663\3\2\2\2")
        buf.write("\u0665\u0666\3\2\2\2\u0666\u0669\3\2\2\2\u0667\u0665\3")
        buf.write("\2\2\2\u0668\u065c\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066a")
        buf.write("\3\2\2\2\u066a\u066b\7=\2\2\u066b\u066e\7i\2\2\u066c\u066d")
        buf.write("\7I\2\2\u066d\u066f\5,\27\2\u066e\u066c\3\2\2\2\u066e")
        buf.write("\u066f\3\2\2\2\u066f\u0678\3\2\2\2\u0670\u0671\7_\2\2")
        buf.write("\u0671\u0674\7i\2\2\u0672\u0673\7I\2\2\u0673\u0675\5,")
        buf.write("\27\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0677")
        buf.write("\3\2\2\2\u0676\u0670\3\2\2\2\u0677\u067a\3\2\2\2\u0678")
        buf.write("\u0679\3\2\2\2\u0678\u0676\3\2\2\2\u0679\u067c\3\2\2\2")
        buf.write("\u067a\u0678\3\2\2\2\u067b\u067d\7_\2\2\u067c\u067b\3")
        buf.write("\2\2\2\u067c\u067d\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0680")
        buf.write("\7>\2\2\u067f\u061c\3\2\2\2\u067f\u061d\3\2\2\2\u067f")
        buf.write("\u064c\3\2\2\2\u0680?\3\2\2\2\u0681\u06b0\5B\"\2\u0682")
        buf.write("\u0699\t\21\2\2\u0683\u0685\5D#\2\u0684\u0683\3\2\2\2")
        buf.write("\u0685\u0688\3\2\2\2\u0686\u0684\3\2\2\2\u0686\u0687\3")
        buf.write("\2\2\2\u0687\u068a\3\2\2\2\u0688\u0686\3\2\2\2\u0689\u068b")
        buf.write("\5\6\4\2\u068a\u0689\3\2\2\2\u068a\u068b\3\2\2\2\u068b")
        buf.write("\u068c\3\2\2\2\u068c\u069a\7i\2\2\u068d\u068f\5\6\4\2")
        buf.write("\u068e\u0690\7.\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3")
        buf.write("\2\2\2\u0690\u0692\3\2\2\2\u0691\u068d\3\2\2\2\u0691\u0692")
        buf.write("\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694\7i\2\2\u0694")
        buf.write("\u0696\7J\2\2\u0695\u0697\5f\64\2\u0696\u0695\3\2\2\2")
        buf.write("\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u069a\7")
        buf.write("K\2\2\u0699\u0686\3\2\2\2\u0699\u0691\3\2\2\2\u069a\u06b0")
        buf.write("\3\2\2\2\u069b\u069d\7\25\2\2\u069c\u069e\5\6\4\2\u069d")
        buf.write("\u069c\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\3\2\2\2")
        buf.write("\u069f\u06b0\7i\2\2\u06a0\u06a1\7\64\2\2\u06a1\u06ac\5")
        buf.write("\6\4\2\u06a2\u06ad\7i\2\2\u06a3\u06a5\7.\2\2\u06a4\u06a3")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6")
        buf.write("\u06a7\7i\2\2\u06a7\u06a9\7J\2\2\u06a8\u06aa\5f\64\2\u06a9")
        buf.write("\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2")
        buf.write("\u06ab\u06ad\7K\2\2\u06ac\u06a2\3\2\2\2\u06ac\u06a4\3")
        buf.write("\2\2\2\u06ad\u06b0\3\2\2\2\u06ae\u06b0\7\r\2\2\u06af\u0681")
        buf.write("\3\2\2\2\u06af\u0682\3\2\2\2\u06af\u069b\3\2\2\2\u06af")
        buf.write("\u06a0\3\2\2\2\u06af\u06ae\3\2\2\2\u06b0A\3\2\2\2\u06b1")
        buf.write("\u06b3\5\6\4\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2")
        buf.write("\u06b3\u06b4\3\2\2\2\u06b4\u06ba\7i\2\2\u06b5\u06b7\7")
        buf.write("J\2\2\u06b6\u06b8\5f\64\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8")
        buf.write("\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\7K\2\2\u06ba")
        buf.write("\u06b5\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06d5\3\2\2\2")
        buf.write("\u06bc\u06bd\5\6\4\2\u06bd\u06be\7.\2\2\u06be\u06bf\7")
        buf.write("i\2\2\u06bf\u06c1\7J\2\2\u06c0\u06c2\5f\64\2\u06c1\u06c0")
        buf.write("\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3")
        buf.write("\u06c4\7K\2\2\u06c4\u06d5\3\2\2\2\u06c5\u06d5\t\22\2\2")
        buf.write("\u06c6\u06c7\7\20\2\2\u06c7\u06d1\79\2\2\u06c8\u06cd\5")
        buf.write("(\25\2\u06c9\u06ca\7_\2\2\u06ca\u06cc\5(\25\2\u06cb\u06c9")
        buf.write("\3\2\2\2\u06cc\u06cf\3\2\2\2\u06cd\u06cb\3\2\2\2\u06cd")
        buf.write("\u06ce\3\2\2\2\u06ce\u06d2\3\2\2\2\u06cf\u06cd\3\2\2\2")
        buf.write("\u06d0\u06d2\7\b\2\2\u06d1\u06c8\3\2\2\2\u06d1\u06d0\3")
        buf.write("\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d5\7:\2\2\u06d4\u06b2")
        buf.write("\3\2\2\2\u06d4\u06bc\3\2\2\2\u06d4\u06c5\3\2\2\2\u06d4")
        buf.write("\u06c6\3\2\2\2\u06d5C\3\2\2\2\u06d6\u06d7\7;\2\2\u06d7")
        buf.write("\u06ea\7;\2\2\u06d8\u06db\7i\2\2\u06d9\u06da\7d\2\2\u06da")
        buf.write("\u06dc\7i\2\2\u06db\u06d9\3\2\2\2\u06db\u06dc\3\2\2\2")
        buf.write("\u06dc\u06e5\3\2\2\2\u06dd\u06e1\79\2\2\u06de\u06e0\5")
        buf.write("F$\2\u06df\u06de\3\2\2\2\u06e0\u06e3\3\2\2\2\u06e1\u06df")
        buf.write("\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u06e4\3\2\2\2\u06e3")
        buf.write("\u06e1\3\2\2\2\u06e4\u06e6\7:\2\2\u06e5\u06dd\3\2\2\2")
        buf.write("\u06e5\u06e6\3\2\2\2\u06e6\u06e8\3\2\2\2\u06e7\u06e9\7")
        buf.write("h\2\2\u06e8\u06e7\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb")
        buf.write("\3\2\2\2\u06ea\u06d8\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb")
        buf.write("\u0703\3\2\2\2\u06ec\u06ff\7_\2\2\u06ed\u06f0\7i\2\2\u06ee")
        buf.write("\u06ef\7d\2\2\u06ef\u06f1\7i\2\2\u06f0\u06ee\3\2\2\2\u06f0")
        buf.write("\u06f1\3\2\2\2\u06f1\u06fa\3\2\2\2\u06f2\u06f6\79\2\2")
        buf.write("\u06f3\u06f5\5F$\2\u06f4\u06f3\3\2\2\2\u06f5\u06f8\3\2")
        buf.write("\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f9")
        buf.write("\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f9\u06fb\7:\2\2\u06fa")
        buf.write("\u06f2\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fd\3\2\2\2")
        buf.write("\u06fc\u06fe\7h\2\2\u06fd\u06fc\3\2\2\2\u06fd\u06fe\3")
        buf.write("\2\2\2\u06fe\u0700\3\2\2\2\u06ff\u06ed\3\2\2\2\u06ff\u0700")
        buf.write("\3\2\2\2\u0700\u0702\3\2\2\2\u0701\u06ec\3\2\2\2\u0702")
        buf.write("\u0705\3\2\2\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2")
        buf.write("\u0704\u0706\3\2\2\2\u0705\u0703\3\2\2\2\u0706\u0707\7")
        buf.write("<\2\2\u0707\u0721\7<\2\2\u0708\u0709\7\5\2\2\u0709\u0719")
        buf.write("\79\2\2\u070a\u070c\5> \2\u070b\u070a\3\2\2\2\u070c\u070d")
        buf.write("\3\2\2\2\u070d\u070b\3\2\2\2\u070d\u070e\3\2\2\2\u070e")
        buf.write("\u0712\3\2\2\2\u070f\u0711\5D#\2\u0710\u070f\3\2\2\2\u0711")
        buf.write("\u0714\3\2\2\2\u0712\u0710\3\2\2\2\u0712\u0713\3\2\2\2")
        buf.write("\u0713\u0716\3\2\2\2\u0714\u0712\3\2\2\2\u0715\u0717\5")
        buf.write("P)\2\u0716\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u071a")
        buf.write("\3\2\2\2\u0718\u071a\5,\27\2\u0719\u070b\3\2\2\2\u0719")
        buf.write("\u0718\3\2\2\2\u071a\u071c\3\2\2\2\u071b\u071d\7h\2\2")
        buf.write("\u071c\u071b\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071e\3")
        buf.write("\2\2\2\u071e\u071f\7:\2\2\u071f\u0721\3\2\2\2\u0720\u06d6")
        buf.write("\3\2\2\2\u0720\u0708\3\2\2\2\u0721E\3\2\2\2\u0722\u0726")
        buf.write("\79\2\2\u0723\u0725\5F$\2\u0724\u0723\3\2\2\2\u0725\u0728")
        buf.write("\3\2\2\2\u0726\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727")
        buf.write("\u0729\3\2\2\2\u0728\u0726\3\2\2\2\u0729\u073b\7:\2\2")
        buf.write("\u072a\u072e\7;\2\2\u072b\u072d\5F$\2\u072c\u072b\3\2")
        buf.write("\2\2\u072d\u0730\3\2\2\2\u072e\u072c\3\2\2\2\u072e\u072f")
        buf.write("\3\2\2\2\u072f\u0731\3\2\2\2\u0730\u072e\3\2\2\2\u0731")
        buf.write("\u073b\7<\2\2\u0732\u0736\7=\2\2\u0733\u0735\5F$\2\u0734")
        buf.write("\u0733\3\2\2\2\u0735\u0738\3\2\2\2\u0736\u0734\3\2\2\2")
        buf.write("\u0736\u0737\3\2\2\2\u0737\u0739\3\2\2\2\u0738\u0736\3")
        buf.write("\2\2\2\u0739\u073b\7>\2\2\u073a\u0722\3\2\2\2\u073a\u072a")
        buf.write("\3\2\2\2\u073a\u0732\3\2\2\2\u073bG\3\2\2\2\u073c\u073e")
        buf.write("\5N(\2\u073d\u073c\3\2\2\2\u073e\u0741\3\2\2\2\u073f\u073d")
        buf.write("\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0742\3\2\2\2\u0741")
        buf.write("\u073f\3\2\2\2\u0742\u0755\5J&\2\u0743\u0744\5J&\2\u0744")
        buf.write("\u0745\5L\'\2\u0745\u0747\7a\2\2\u0746\u0748\5@!\2\u0747")
        buf.write("\u0746\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u0747\3\2\2\2")
        buf.write("\u0749\u074a\3\2\2\2\u074a\u074e\3\2\2\2\u074b\u074d\5")
        buf.write("D#\2\u074c\u074b\3\2\2\2\u074d\u0750\3\2\2\2\u074e\u074c")
        buf.write("\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0752\3\2\2\2\u0750")
        buf.write("\u074e\3\2\2\2\u0751\u0753\5P)\2\u0752\u0751\3\2\2\2\u0752")
        buf.write("\u0753\3\2\2\2\u0753\u0755\3\2\2\2\u0754\u073f\3\2\2\2")
        buf.write("\u0754\u0743\3\2\2\2\u0755I\3\2\2\2\u0756\u0758\b&\1\2")
        buf.write("\u0757\u0759\7h\2\2\u0758\u0757\3\2\2\2\u0758\u0759\3")
        buf.write("\2\2\2\u0759\u075e\3\2\2\2\u075a\u075c\5\6\4\2\u075b\u075d")
        buf.write("\7.\2\2\u075c\u075b\3\2\2\2\u075c\u075d\3\2\2\2\u075d")
        buf.write("\u075f\3\2\2\2\u075e\u075a\3\2\2\2\u075e\u075f\3\2\2\2")
        buf.write("\u075f\u0760\3\2\2\2\u0760\u0764\5\4\3\2\u0761\u0763\5")
        buf.write("D#\2\u0762\u0761\3\2\2\2\u0763\u0766\3\2\2\2\u0764\u0762")
        buf.write("\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0772\3\2\2\2\u0766")
        buf.write("\u0764\3\2\2\2\u0767\u076b\79\2\2\u0768\u076a\5N(\2\u0769")
        buf.write("\u0768\3\2\2\2\u076a\u076d\3\2\2\2\u076b\u0769\3\2\2\2")
        buf.write("\u076b\u076c\3\2\2\2\u076c\u076e\3\2\2\2\u076d\u076b\3")
        buf.write("\2\2\2\u076e\u076f\5J&\2\u076f\u0770\7:\2\2\u0770\u0772")
        buf.write("\3\2\2\2\u0771\u0756\3\2\2\2\u0771\u0767\3\2\2\2\u0772")
        buf.write("\u0784\3\2\2\2\u0773\u0780\f\4\2\2\u0774\u0781\5L\'\2")
        buf.write("\u0775\u0777\7;\2\2\u0776\u0778\5,\27\2\u0777\u0776\3")
        buf.write("\2\2\2\u0777\u0778\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077d")
        buf.write("\7<\2\2\u077a\u077c\5D#\2\u077b\u077a\3\2\2\2\u077c\u077f")
        buf.write("\3\2\2\2\u077d\u077b\3\2\2\2\u077d\u077e\3\2\2\2\u077e")
        buf.write("\u0781\3\2\2\2\u077f\u077d\3\2\2\2\u0780\u0774\3\2\2\2")
        buf.write("\u0780\u0775\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0773\3")
        buf.write("\2\2\2\u0783\u0786\3\2\2\2\u0784\u0782\3\2\2\2\u0784\u0785")
        buf.write("\3\2\2\2\u0785K\3\2\2\2\u0786\u0784\3\2\2\2\u0787\u07a0")
        buf.write("\79\2\2\u0788\u078d\5T+\2\u0789\u078a\7_\2\2\u078a\u078c")
        buf.write("\5T+\2\u078b\u0789\3\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b")
        buf.write("\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0791\3\2\2\2\u078f")
        buf.write("\u078d\3\2\2\2\u0790\u0788\3\2\2\2\u0790\u0791\3\2\2\2")
        buf.write("\u0791\u0793\3\2\2\2\u0792\u0794\7h\2\2\u0793\u0792\3")
        buf.write("\2\2\2\u0793\u0794\3\2\2\2\u0794\u07a1\3\2\2\2\u0795\u079a")
        buf.write("\5T+\2\u0796\u0797\7_\2\2\u0797\u0799\5T+\2\u0798\u0796")
        buf.write("\3\2\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079a")
        buf.write("\u079b\3\2\2\2\u079b\u079d\3\2\2\2\u079c\u079a\3\2\2\2")
        buf.write("\u079d\u079e\7_\2\2\u079e\u079f\7h\2\2\u079f\u07a1\3\2")
        buf.write("\2\2\u07a0\u0790\3\2\2\2\u07a0\u0795\3\2\2\2\u07a1\u07a2")
        buf.write("\3\2\2\2\u07a2\u07a6\7:\2\2\u07a3\u07a5\7\r\2\2\u07a4")
        buf.write("\u07a3\3\2\2\2\u07a5\u07a8\3\2\2\2\u07a6\u07a4\3\2\2\2")
        buf.write("\u07a6\u07a7\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3")
        buf.write("\2\2\2\u07a9\u07ab\t\23\2\2\u07aa\u07a9\3\2\2\2\u07aa")
        buf.write("\u07ab\3\2\2\2\u07ab\u07e0\3\2\2\2\u07ac\u07ad\7\60\2")
        buf.write("\2\u07ad\u07d6\79\2\2\u07ae\u07b0\5> \2\u07af\u07ae\3")
        buf.write("\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07af\3\2\2\2\u07b1\u07b2")
        buf.write("\3\2\2\2\u07b2\u07b6\3\2\2\2\u07b3\u07b5\5D#\2\u07b4\u07b3")
        buf.write("\3\2\2\2\u07b5\u07b8\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b6")
        buf.write("\u07b7\3\2\2\2\u07b7\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2")
        buf.write("\u07b9\u07bb\5P)\2\u07ba\u07b9\3\2\2\2\u07ba\u07bb\3\2")
        buf.write("\2\2\u07bb\u07bd\3\2\2\2\u07bc\u07be\7h\2\2\u07bd\u07bc")
        buf.write("\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07d3\3\2\2\2\u07bf")
        buf.write("\u07c1\7_\2\2\u07c0\u07c2\5> \2\u07c1\u07c0\3\2\2\2\u07c2")
        buf.write("\u07c3\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c4\3\2\2\2")
        buf.write("\u07c4\u07c8\3\2\2\2\u07c5\u07c7\5D#\2\u07c6\u07c5\3\2")
        buf.write("\2\2\u07c7\u07ca\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c8\u07c9")
        buf.write("\3\2\2\2\u07c9\u07cc\3\2\2\2\u07ca\u07c8\3\2\2\2\u07cb")
        buf.write("\u07cd\5P)\2\u07cc\u07cb\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd")
        buf.write("\u07cf\3\2\2\2\u07ce\u07d0\7h\2\2\u07cf\u07ce\3\2\2\2")
        buf.write("\u07cf\u07d0\3\2\2\2\u07d0\u07d2\3\2\2\2\u07d1\u07bf\3")
        buf.write("\2\2\2\u07d2\u07d5\3\2\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d4")
        buf.write("\3\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d6")
        buf.write("\u07af\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\3\2\2\2")
        buf.write("\u07d8\u07e1\7:\2\2\u07d9\u07de\7\"\2\2\u07da\u07db\7")
        buf.write("9\2\2\u07db\u07dc\5,\27\2\u07dc\u07dd\7:\2\2\u07dd\u07df")
        buf.write("\3\2\2\2\u07de\u07da\3\2\2\2\u07de\u07df\3\2\2\2\u07df")
        buf.write("\u07e1\3\2\2\2\u07e0\u07ac\3\2\2\2\u07e0\u07d9\3\2\2\2")
        buf.write("\u07e0\u07e1\3\2\2\2\u07e1\u07e5\3\2\2\2\u07e2\u07e4\5")
        buf.write("D#\2\u07e3\u07e2\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5\u07e3")
        buf.write("\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6M\3\2\2\2\u07e7\u07e5")
        buf.write("\3\2\2\2\u07e8\u07ea\5\6\4\2\u07e9\u07e8\3\2\2\2\u07e9")
        buf.write("\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ef\7A\2\2")
        buf.write("\u07ec\u07ee\5D#\2\u07ed\u07ec\3\2\2\2\u07ee\u07f1\3\2")
        buf.write("\2\2\u07ef\u07ed\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f5")
        buf.write("\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f2\u07f4\7\r\2\2\u07f3")
        buf.write("\u07f2\3\2\2\2\u07f4\u07f7\3\2\2\2\u07f5\u07f3\3\2\2\2")
        buf.write("\u07f5\u07f6\3\2\2\2\u07f6\u0800\3\2\2\2\u07f7\u07f5\3")
        buf.write("\2\2\2\u07f8\u07fc\t\23\2\2\u07f9\u07fb\5D#\2\u07fa\u07f9")
        buf.write("\3\2\2\2\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fc")
        buf.write("\u07fd\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2")
        buf.write("\u07ff\u07e9\3\2\2\2\u07ff\u07f8\3\2\2\2\u0800O\3\2\2")
        buf.write("\2\u0801\u0803\5R*\2\u0802\u0801\3\2\2\2\u0802\u0803\3")
        buf.write("\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\5L\'\2\u0805\u0807")
        buf.write("\7a\2\2\u0806\u0808\5@!\2\u0807\u0806\3\2\2\2\u0808\u0809")
        buf.write("\3\2\2\2\u0809\u0807\3\2\2\2\u0809\u080a\3\2\2\2\u080a")
        buf.write("\u080e\3\2\2\2\u080b\u080d\5D#\2\u080c\u080b\3\2\2\2\u080d")
        buf.write("\u0810\3\2\2\2\u080e\u080c\3\2\2\2\u080e\u080f\3\2\2\2")
        buf.write("\u080f\u0812\3\2\2\2\u0810\u080e\3\2\2\2\u0811\u0802\3")
        buf.write("\2\2\2\u0812\u0815\3\2\2\2\u0813\u0811\3\2\2\2\u0813\u0814")
        buf.write("\3\2\2\2\u0814\u0819\3\2\2\2\u0815\u0813\3\2\2\2\u0816")
        buf.write("\u0818\5N(\2\u0817\u0816\3\2\2\2\u0818\u081b\3\2\2\2\u0819")
        buf.write("\u0817\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u082f\3\2\2\2")
        buf.write("\u081b\u0819\3\2\2\2\u081c\u0830\5R*\2\u081d\u082c\7h")
        buf.write("\2\2\u081e\u082b\5L\'\2\u081f\u0821\7;\2\2\u0820\u0822")
        buf.write("\5,\27\2\u0821\u0820\3\2\2\2\u0821\u0822\3\2\2\2\u0822")
        buf.write("\u0823\3\2\2\2\u0823\u0827\7<\2\2\u0824\u0826\5D#\2\u0825")
        buf.write("\u0824\3\2\2\2\u0826\u0829\3\2\2\2\u0827\u0825\3\2\2\2")
        buf.write("\u0827\u0828\3\2\2\2\u0828\u082b\3\2\2\2\u0829\u0827\3")
        buf.write("\2\2\2\u082a\u081e\3\2\2\2\u082a\u081f\3\2\2\2\u082b\u082e")
        buf.write("\3\2\2\2\u082c\u082a\3\2\2\2\u082c\u082d\3\2\2\2\u082d")
        buf.write("\u0830\3\2\2\2\u082e\u082c\3\2\2\2\u082f\u081c\3\2\2\2")
        buf.write("\u082f\u081d\3\2\2\2\u0830Q\3\2\2\2\u0831\u0832\b*\1\2")
        buf.write("\u0832\u0849\5L\'\2\u0833\u0835\7;\2\2\u0834\u0836\5,")
        buf.write("\27\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837")
        buf.write("\3\2\2\2\u0837\u083b\7<\2\2\u0838\u083a\5D#\2\u0839\u0838")
        buf.write("\3\2\2\2\u083a\u083d\3\2\2\2\u083b\u0839\3\2\2\2\u083b")
        buf.write("\u083c\3\2\2\2\u083c\u0849\3\2\2\2\u083d\u083b\3\2\2\2")
        buf.write("\u083e\u0842\79\2\2\u083f\u0841\5N(\2\u0840\u083f\3\2")
        buf.write("\2\2\u0841\u0844\3\2\2\2\u0842\u0840\3\2\2\2\u0842\u0843")
        buf.write("\3\2\2\2\u0843\u0845\3\2\2\2\u0844\u0842\3\2\2\2\u0845")
        buf.write("\u0846\5R*\2\u0846\u0847\7:\2\2\u0847\u0849\3\2\2\2\u0848")
        buf.write("\u0831\3\2\2\2\u0848\u0833\3\2\2\2\u0848\u083e\3\2\2\2")
        buf.write("\u0849\u085b\3\2\2\2\u084a\u0857\f\6\2\2\u084b\u0858\5")
        buf.write("L\'\2\u084c\u084e\7;\2\2\u084d\u084f\5,\27\2\u084e\u084d")
        buf.write("\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850\3\2\2\2\u0850")
        buf.write("\u0854\7<\2\2\u0851\u0853\5D#\2\u0852\u0851\3\2\2\2\u0853")
        buf.write("\u0856\3\2\2\2\u0854\u0852\3\2\2\2\u0854\u0855\3\2\2\2")
        buf.write("\u0855\u0858\3\2\2\2\u0856\u0854\3\2\2\2\u0857\u084b\3")
        buf.write("\2\2\2\u0857\u084c\3\2\2\2\u0858\u085a\3\2\2\2\u0859\u084a")
        buf.write("\3\2\2\2\u085a\u085d\3\2\2\2\u085b\u0859\3\2\2\2\u085b")
        buf.write("\u085c\3\2\2\2\u085cS\3\2\2\2\u085d\u085b\3\2\2\2\u085e")
        buf.write("\u0860\5D#\2\u085f\u085e\3\2\2\2\u0860\u0863\3\2\2\2\u0861")
        buf.write("\u085f\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\3\2\2\2")
        buf.write("\u0863\u0861\3\2\2\2\u0864\u0867\5<\37\2\u0865\u0868\5")
        buf.write("H%\2\u0866\u0868\5P)\2\u0867\u0865\3\2\2\2\u0867\u0866")
        buf.write("\3\2\2\2\u0868\u0875\3\2\2\2\u0869\u0873\7I\2\2\u086a")
        buf.write("\u0874\5(\25\2\u086b\u0870\7=\2\2\u086c\u086e\5X-\2\u086d")
        buf.write("\u086f\7_\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2")
        buf.write("\u086f\u0871\3\2\2\2\u0870\u086c\3\2\2\2\u0870\u0871\3")
        buf.write("\2\2\2\u0871\u0872\3\2\2\2\u0872\u0874\7>\2\2\u0873\u086a")
        buf.write("\3\2\2\2\u0873\u086b\3\2\2\2\u0874\u0876\3\2\2\2\u0875")
        buf.write("\u0869\3\2\2\2\u0875\u0876\3\2\2\2\u0876U\3\2\2\2\u0877")
        buf.write("\u0878\7I\2\2\u0878\u0889\5(\25\2\u0879\u087b\7I\2\2\u087a")
        buf.write("\u0879\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c\3\2\2\2")
        buf.write("\u087c\u0881\7=\2\2\u087d\u087f\5X-\2\u087e\u0880\7_\2")
        buf.write("\2\u087f\u087e\3\2\2\2\u087f\u0880\3\2\2\2\u0880\u0882")
        buf.write("\3\2\2\2\u0881\u087d\3\2\2\2\u0881\u0882\3\2\2\2\u0882")
        buf.write("\u0883\3\2\2\2\u0883\u0889\7>\2\2\u0884\u0885\79\2\2\u0885")
        buf.write("\u0886\5X-\2\u0886\u0887\7:\2\2\u0887\u0889\3\2\2\2\u0888")
        buf.write("\u0877\3\2\2\2\u0888\u087a\3\2\2\2\u0888\u0884\3\2\2\2")
        buf.write("\u0889W\3\2\2\2\u088a\u0894\5(\25\2\u088b\u0890\7=\2\2")
        buf.write("\u088c\u088e\5X-\2\u088d\u088f\7_\2\2\u088e\u088d\3\2")
        buf.write("\2\2\u088e\u088f\3\2\2\2\u088f\u0891\3\2\2\2\u0890\u088c")
        buf.write("\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0892\3\2\2\2\u0892")
        buf.write("\u0894\7>\2\2\u0893\u088a\3\2\2\2\u0893\u088b\3\2\2\2")
        buf.write("\u0894\u0896\3\2\2\2\u0895\u0897\7h\2\2\u0896\u0895\3")
        buf.write("\2\2\2\u0896\u0897\3\2\2\2\u0897\u08a9\3\2\2\2\u0898\u08a2")
        buf.write("\7_\2\2\u0899\u08a3\5(\25\2\u089a\u089f\7=\2\2\u089b\u089d")
        buf.write("\5X-\2\u089c\u089e\7_\2\2\u089d\u089c\3\2\2\2\u089d\u089e")
        buf.write("\3\2\2\2\u089e\u08a0\3\2\2\2\u089f\u089b\3\2\2\2\u089f")
        buf.write("\u08a0\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a3\7>\2\2")
        buf.write("\u08a2\u0899\3\2\2\2\u08a2\u089a\3\2\2\2\u08a3\u08a5\3")
        buf.write("\2\2\2\u08a4\u08a6\7h\2\2\u08a5\u08a4\3\2\2\2\u08a5\u08a6")
        buf.write("\3\2\2\2\u08a6\u08a8\3\2\2\2\u08a7\u0898\3\2\2\2\u08a8")
        buf.write("\u08ab\3\2\2\2\u08a9\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2")
        buf.write("\u08aaY\3\2\2\2\u08ab\u08a9\3\2\2\2\u08ac\u08ae\5D#\2")
        buf.write("\u08ad\u08ac\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af\u08ad\3")
        buf.write("\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b3\3\2\2\2\u08b1\u08af")
        buf.write("\3\2\2\2\u08b2\u08b4\5<\37\2\u08b3\u08b2\3\2\2\2\u08b3")
        buf.write("\u08b4\3\2\2\2\u08b4\u08ea\3\2\2\2\u08b5\u08ba\5\\/\2")
        buf.write("\u08b6\u08b7\7_\2\2\u08b7\u08b9\5\\/\2\u08b8\u08b6\3\2")
        buf.write("\2\2\u08b9\u08bc\3\2\2\2\u08ba\u08b8\3\2\2\2\u08ba\u08bb")
        buf.write("\3\2\2\2\u08bb\u08be\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bd")
        buf.write("\u08b5\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08bf\3\2\2\2")
        buf.write("\u08bf\u08eb\7e\2\2\u08c0\u08c4\5H%\2\u08c1\u08c3\t\16")
        buf.write("\2\2\u08c2\u08c1\3\2\2\2\u08c3\u08c6\3\2\2\2\u08c4\u08c2")
        buf.write("\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08e8\3\2\2\2\u08c6")
        buf.write("\u08c4\3\2\2\2\u08c7\u08c8\7c\2\2\u08c8\u08ca\5b\62\2")
        buf.write("\u08c9\u08c7\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cb\3")
        buf.write("\2\2\2\u08cb\u08cf\7=\2\2\u08cc\u08ce\5.\30\2\u08cd\u08cc")
        buf.write("\3\2\2\2\u08ce\u08d1\3\2\2\2\u08cf\u08cd\3\2\2\2\u08cf")
        buf.write("\u08d0\3\2\2\2\u08d0\u08d2\3\2\2\2\u08d1\u08cf\3\2\2\2")
        buf.write("\u08d2\u08e9\7>\2\2\u08d3\u08d6\7\62\2\2\u08d4\u08d5\7")
        buf.write("c\2\2\u08d5\u08d7\5b\62\2\u08d6\u08d4\3\2\2\2\u08d6\u08d7")
        buf.write("\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08dc\7=\2\2\u08d9")
        buf.write("\u08db\5.\30\2\u08da\u08d9\3\2\2\2\u08db\u08de\3\2\2\2")
        buf.write("\u08dc\u08da\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08df\3")
        buf.write("\2\2\2\u08de\u08dc\3\2\2\2\u08df\u08e1\7>\2\2\u08e0\u08e2")
        buf.write("\5j\66\2\u08e1\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3")
        buf.write("\u08e1\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e9\3\2\2\2")
        buf.write("\u08e5\u08e6\7I\2\2\u08e6\u08e7\t\17\2\2\u08e7\u08e9\7")
        buf.write("e\2\2\u08e8\u08c9\3\2\2\2\u08e8\u08d3\3\2\2\2\u08e8\u08e5")
        buf.write("\3\2\2\2\u08e9\u08eb\3\2\2\2\u08ea\u08bd\3\2\2\2\u08ea")
        buf.write("\u08c0\3\2\2\2\u08eb\u0920\3\2\2\2\u08ec\u08f2\7\66\2")
        buf.write("\2\u08ed\u08ef\7\64\2\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef")
        buf.write("\3\2\2\2\u08ef\u08f0\3\2\2\2\u08f0\u08f3\5\6\4\2\u08f1")
        buf.write("\u08f3\7d\2\2\u08f2\u08ee\3\2\2\2\u08f2\u08f1\3\2\2\2")
        buf.write("\u08f3\u08f4\3\2\2\2\u08f4\u08f5\5\4\3\2\u08f5\u08f6\7")
        buf.write("e\2\2\u08f6\u0920\3\2\2\2\u08f7\u08f8\7+\2\2\u08f8\u08f9")
        buf.write("\79\2\2\u08f9\u08fa\5,\27\2\u08fa\u08fb\7_\2\2\u08fb\u08fc")
        buf.write("\7q\2\2\u08fc\u08fd\7:\2\2\u08fd\u08fe\7e\2\2\u08fe\u0920")
        buf.write("\3\2\2\2\u08ff\u0900\7.\2\2\u0900\u0901\7J\2\2\u0901\u0902")
        buf.write("\5d\63\2\u0902\u0903\7K\2\2\u0903\u0904\5:\36\2\u0904")
        buf.write("\u0920\3\2\2\2\u0905\u0906\7\66\2\2\u0906\u090a\7i\2\2")
        buf.write("\u0907\u0909\5D#\2\u0908\u0907\3\2\2\2\u0909\u090c\3\2")
        buf.write("\2\2\u090a\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090d")
        buf.write("\3\2\2\2\u090c\u090a\3\2\2\2\u090d\u090f\7I\2\2\u090e")
        buf.write("\u0910\5> \2\u090f\u090e\3\2\2\2\u0910\u0911\3\2\2\2\u0911")
        buf.write("\u090f\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0916\3\2\2\2")
        buf.write("\u0913\u0915\5D#\2\u0914\u0913\3\2\2\2\u0915\u0918\3\2")
        buf.write("\2\2\u0916\u0914\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u091a")
        buf.write("\3\2\2\2\u0918\u0916\3\2\2\2\u0919\u091b\5P)\2\u091a\u0919")
        buf.write("\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091c\3\2\2\2\u091c")
        buf.write("\u091d\7e\2\2\u091d\u0920\3\2\2\2\u091e\u0920\7e\2\2\u091f")
        buf.write("\u08af\3\2\2\2\u091f\u08ec\3\2\2\2\u091f\u08f7\3\2\2\2")
        buf.write("\u091f\u08ff\3\2\2\2\u091f\u0905\3\2\2\2\u091f\u091e\3")
        buf.write("\2\2\2\u0920[\3\2\2\2\u0921\u093a\5H%\2\u0922\u0924\t")
        buf.write("\16\2\2\u0923\u0922\3\2\2\2\u0924\u0927\3\2\2\2\u0925")
        buf.write("\u0923\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0929\3\2\2\2")
        buf.write("\u0927\u0925\3\2\2\2\u0928\u092a\5^\60\2\u0929\u0928\3")
        buf.write("\2\2\2\u0929\u092a\3\2\2\2\u092a\u093b\3\2\2\2\u092b\u092c")
        buf.write("\7I\2\2\u092c\u0939\5(\25\2\u092d\u092f\7I\2\2\u092e\u092d")
        buf.write("\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0930\3\2\2\2\u0930")
        buf.write("\u0935\7=\2\2\u0931\u0933\5X-\2\u0932\u0934\7_\2\2\u0933")
        buf.write("\u0932\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0936\3\2\2\2")
        buf.write("\u0935\u0931\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0937\3")
        buf.write("\2\2\2\u0937\u0939\7>\2\2\u0938\u092b\3\2\2\2\u0938\u092e")
        buf.write("\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093b\3\2\2\2\u093a")
        buf.write("\u0925\3\2\2\2\u093a\u0938\3\2\2\2\u093b\u0948\3\2\2\2")
        buf.write("\u093c\u093e\7i\2\2\u093d\u093c\3\2\2\2\u093d\u093e\3")
        buf.write("\2\2\2\u093e\u0942\3\2\2\2\u093f\u0941\5D#\2\u0940\u093f")
        buf.write("\3\2\2\2\u0941\u0944\3\2\2\2\u0942\u0940\3\2\2\2\u0942")
        buf.write("\u0943\3\2\2\2\u0943\u0945\3\2\2\2\u0944\u0942\3\2\2\2")
        buf.write("\u0945\u0946\7c\2\2\u0946\u0948\5,\27\2\u0947\u0921\3")
        buf.write("\2\2\2\u0947\u093d\3\2\2\2\u0948]\3\2\2\2\u0949\u094a")
        buf.write("\7I\2\2\u094a\u094b\7l\2\2\u094b\u094c\b\60\1\2\u094c")
        buf.write("_\3\2\2\2\u094d\u094f\5D#\2\u094e\u094d\3\2\2\2\u094f")
        buf.write("\u0952\3\2\2\2\u0950\u094e\3\2\2\2\u0950\u0951\3\2\2\2")
        buf.write("\u0951\u095b\3\2\2\2\u0952\u0950\3\2\2\2\u0953\u0955\7")
        buf.write("\67\2\2\u0954\u0956\7&\2\2\u0955\u0954\3\2\2\2\u0955\u0956")
        buf.write("\3\2\2\2\u0956\u095c\3\2\2\2\u0957\u0959\7&\2\2\u0958")
        buf.write("\u095a\7\67\2\2\u0959\u0958\3\2\2\2\u0959\u095a\3\2\2")
        buf.write("\2\u095a\u095c\3\2\2\2\u095b\u0953\3\2\2\2\u095b\u0957")
        buf.write("\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u0976\3\2\2\2\u095d")
        buf.write("\u095f\5\6\4\2\u095e\u095d\3\2\2\2\u095e\u095f\3\2\2\2")
        buf.write("\u095f\u0960\3\2\2\2\u0960\u0966\7i\2\2\u0961\u0963\7")
        buf.write("J\2\2\u0962\u0964\5f\64\2\u0963\u0962\3\2\2\2\u0963\u0964")
        buf.write("\3\2\2\2\u0964\u0965\3\2\2\2\u0965\u0967\7K\2\2\u0966")
        buf.write("\u0961\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u0977\3\2\2\2")
        buf.write("\u0968\u0969\7\20\2\2\u0969\u0973\79\2\2\u096a\u096f\5")
        buf.write("(\25\2\u096b\u096c\7_\2\2\u096c\u096e\5(\25\2\u096d\u096b")
        buf.write("\3\2\2\2\u096e\u0971\3\2\2\2\u096f\u096d\3\2\2\2\u096f")
        buf.write("\u0970\3\2\2\2\u0970\u0974\3\2\2\2\u0971\u096f\3\2\2\2")
        buf.write("\u0972\u0974\7\b\2\2\u0973\u096a\3\2\2\2\u0973\u0972\3")
        buf.write("\2\2\2\u0974\u0975\3\2\2\2\u0975\u0977\7:\2\2\u0976\u095e")
        buf.write("\3\2\2\2\u0976\u0968\3\2\2\2\u0977a\3\2\2\2\u0978\u097a")
        buf.write("\5\6\4\2\u0979\u0978\3\2\2\2\u0979\u097a\3\2\2\2\u097a")
        buf.write("\u097b\3\2\2\2\u097b\u0981\7i\2\2\u097c\u097e\7J\2\2\u097d")
        buf.write("\u097f\5f\64\2\u097e\u097d\3\2\2\2\u097e\u097f\3\2\2\2")
        buf.write("\u097f\u0980\3\2\2\2\u0980\u0982\7K\2\2\u0981\u097c\3")
        buf.write("\2\2\2\u0981\u0982\3\2\2\2\u0982\u0993\3\2\2\2\u0983\u0984")
        buf.write("\7\20\2\2\u0984\u098e\79\2\2\u0985\u098a\5(\25\2\u0986")
        buf.write("\u0987\7_\2\2\u0987\u0989\5(\25\2\u0988\u0986\3\2\2\2")
        buf.write("\u0989\u098c\3\2\2\2\u098a\u0988\3\2\2\2\u098a\u098b\3")
        buf.write("\2\2\2\u098b\u098f\3\2\2\2\u098c\u098a\3\2\2\2\u098d\u098f")
        buf.write("\7\b\2\2\u098e\u0985\3\2\2\2\u098e\u098d\3\2\2\2\u098f")
        buf.write("\u0990\3\2\2\2\u0990\u0993\7:\2\2\u0991\u0993\7i\2\2\u0992")
        buf.write("\u0979\3\2\2\2\u0992\u0983\3\2\2\2\u0992\u0991\3\2\2\2")
        buf.write("\u0993\u09a1\3\2\2\2\u0994\u0996\79\2\2\u0995\u0997\5")
        buf.write("X-\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998")
        buf.write("\3\2\2\2\u0998\u09a2\7:\2\2\u0999\u099e\7=\2\2\u099a\u099c")
        buf.write("\5X-\2\u099b\u099d\7_\2\2\u099c\u099b\3\2\2\2\u099c\u099d")
        buf.write("\3\2\2\2\u099d\u099f\3\2\2\2\u099e\u099a\3\2\2\2\u099e")
        buf.write("\u099f\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a2\7>\2\2")
        buf.write("\u09a1\u0994\3\2\2\2\u09a1\u0999\3\2\2\2\u09a2\u09a4\3")
        buf.write("\2\2\2\u09a3\u09a5\7h\2\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5")
        buf.write("\3\2\2\2\u09a5\u09a8\3\2\2\2\u09a6\u09a7\7_\2\2\u09a7")
        buf.write("\u09a9\5b\62\2\u09a8\u09a6\3\2\2\2\u09a8\u09a9\3\2\2\2")
        buf.write("\u09a9c\3\2\2\2\u09aa\u09c3\t\24\2\2\u09ab\u09ad\7h\2")
        buf.write("\2\u09ac\u09ab\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09af")
        buf.write("\3\2\2\2\u09ae\u09b0\7i\2\2\u09af\u09ae\3\2\2\2\u09af")
        buf.write("\u09b0\3\2\2\2\u09b0\u09c4\3\2\2\2\u09b1\u09b3\7i\2\2")
        buf.write("\u09b2\u09b1\3\2\2\2\u09b2\u09b3\3\2\2\2\u09b3\u09b4\3")
        buf.write("\2\2\2\u09b4\u09b6\7I\2\2\u09b5\u09b7\5> \2\u09b6\u09b5")
        buf.write("\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09b6\3\2\2\2\u09b8")
        buf.write("\u09b9\3\2\2\2\u09b9\u09bd\3\2\2\2\u09ba\u09bc\5D#\2\u09bb")
        buf.write("\u09ba\3\2\2\2\u09bc\u09bf\3\2\2\2\u09bd\u09bb\3\2\2\2")
        buf.write("\u09bd\u09be\3\2\2\2\u09be\u09c1\3\2\2\2\u09bf\u09bd\3")
        buf.write("\2\2\2\u09c0\u09c2\5P)\2\u09c1\u09c0\3\2\2\2\u09c1\u09c2")
        buf.write("\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09ac\3\2\2\2\u09c3")
        buf.write("\u09b2\3\2\2\2\u09c4\u09df\3\2\2\2\u09c5\u09c6\7.\2\2")
        buf.write("\u09c6\u09c7\7J\2\2\u09c7\u09c8\5d\63\2\u09c8\u09c9\7")
        buf.write("K\2\2\u09c9\u09db\7\f\2\2\u09ca\u09cc\7h\2\2\u09cb\u09ca")
        buf.write("\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09ce\3\2\2\2\u09cd")
        buf.write("\u09cf\7i\2\2\u09ce\u09cd\3\2\2\2\u09ce\u09cf\3\2\2\2")
        buf.write("\u09cf\u09dc\3\2\2\2\u09d0\u09d2\7i\2\2\u09d1\u09d0\3")
        buf.write("\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d8")
        buf.write("\7I\2\2\u09d4\u09d6\5\6\4\2\u09d5\u09d7\7.\2\2\u09d6\u09d5")
        buf.write("\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d9\3\2\2\2\u09d8")
        buf.write("\u09d4\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\3\2\2\2")
        buf.write("\u09da\u09dc\5\4\3\2\u09db\u09cb\3\2\2\2\u09db\u09d1\3")
        buf.write("\2\2\2\u09dc\u09df\3\2\2\2\u09dd\u09df\5T+\2\u09de\u09aa")
        buf.write("\3\2\2\2\u09de\u09c5\3\2\2\2\u09de\u09dd\3\2\2\2\u09df")
        buf.write("\u0a19\3\2\2\2\u09e0\u0a15\7_\2\2\u09e1\u09fa\t\24\2\2")
        buf.write("\u09e2\u09e4\7h\2\2\u09e3\u09e2\3\2\2\2\u09e3\u09e4\3")
        buf.write("\2\2\2\u09e4\u09e6\3\2\2\2\u09e5\u09e7\7i\2\2\u09e6\u09e5")
        buf.write("\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u09fb\3\2\2\2\u09e8")
        buf.write("\u09ea\7i\2\2\u09e9\u09e8\3\2\2\2\u09e9\u09ea\3\2\2\2")
        buf.write("\u09ea\u09eb\3\2\2\2\u09eb\u09ed\7I\2\2\u09ec\u09ee\5")
        buf.write("> \2\u09ed\u09ec\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09ed")
        buf.write("\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f4\3\2\2\2\u09f1")
        buf.write("\u09f3\5D#\2\u09f2\u09f1\3\2\2\2\u09f3\u09f6\3\2\2\2\u09f4")
        buf.write("\u09f2\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f8\3\2\2\2")
        buf.write("\u09f6\u09f4\3\2\2\2\u09f7\u09f9\5P)\2\u09f8\u09f7\3\2")
        buf.write("\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fb\3\2\2\2\u09fa\u09e3")
        buf.write("\3\2\2\2\u09fa\u09e9\3\2\2\2\u09fb\u0a16\3\2\2\2\u09fc")
        buf.write("\u09fd\7.\2\2\u09fd\u09fe\7J\2\2\u09fe\u09ff\5d\63\2\u09ff")
        buf.write("\u0a00\7K\2\2\u0a00\u0a12\7\f\2\2\u0a01\u0a03\7h\2\2\u0a02")
        buf.write("\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a05\3\2\2\2")
        buf.write("\u0a04\u0a06\7i\2\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3")
        buf.write("\2\2\2\u0a06\u0a13\3\2\2\2\u0a07\u0a09\7i\2\2\u0a08\u0a07")
        buf.write("\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a")
        buf.write("\u0a0f\7I\2\2\u0a0b\u0a0d\5\6\4\2\u0a0c\u0a0e\7.\2\2\u0a0d")
        buf.write("\u0a0c\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a10\3\2\2\2")
        buf.write("\u0a0f\u0a0b\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3")
        buf.write("\2\2\2\u0a11\u0a13\5\4\3\2\u0a12\u0a02\3\2\2\2\u0a12\u0a08")
        buf.write("\3\2\2\2\u0a13\u0a16\3\2\2\2\u0a14\u0a16\5T+\2\u0a15\u09e1")
        buf.write("\3\2\2\2\u0a15\u09fc\3\2\2\2\u0a15\u0a14\3\2\2\2\u0a16")
        buf.write("\u0a18\3\2\2\2\u0a17\u09e0\3\2\2\2\u0a18\u0a1b\3\2\2\2")
        buf.write("\u0a19\u0a17\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1ae\3\2\2")
        buf.write("\2\u0a1b\u0a19\3\2\2\2\u0a1c\u0a1e\5> \2\u0a1d\u0a1c\3")
        buf.write("\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f\u0a20")
        buf.write("\3\2\2\2\u0a20\u0a24\3\2\2\2\u0a21\u0a23\5D#\2\u0a22\u0a21")
        buf.write("\3\2\2\2\u0a23\u0a26\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a24")
        buf.write("\u0a25\3\2\2\2\u0a25\u0a28\3\2\2\2\u0a26\u0a24\3\2\2\2")
        buf.write("\u0a27\u0a29\5P)\2\u0a28\u0a27\3\2\2\2\u0a28\u0a29\3\2")
        buf.write("\2\2\u0a29\u0a33\3\2\2\2\u0a2a\u0a33\5,\27\2\u0a2b\u0a2d")
        buf.write("\5\6\4\2\u0a2c\u0a2e\7.\2\2\u0a2d\u0a2c\3\2\2\2\u0a2d")
        buf.write("\u0a2e\3\2\2\2\u0a2e\u0a30\3\2\2\2\u0a2f\u0a2b\3\2\2\2")
        buf.write("\u0a2f\u0a30\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33\5")
        buf.write("\4\3\2\u0a32\u0a1d\3\2\2\2\u0a32\u0a2a\3\2\2\2\u0a32\u0a2f")
        buf.write("\3\2\2\2\u0a33\u0a35\3\2\2\2\u0a34\u0a36\7h\2\2\u0a35")
        buf.write("\u0a34\3\2\2\2\u0a35\u0a36\3\2\2\2\u0a36\u0a55\3\2\2\2")
        buf.write("\u0a37\u0a4e\7_\2\2\u0a38\u0a3a\5> \2\u0a39\u0a38\3\2")
        buf.write("\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3c")
        buf.write("\3\2\2\2\u0a3c\u0a40\3\2\2\2\u0a3d\u0a3f\5D#\2\u0a3e\u0a3d")
        buf.write("\3\2\2\2\u0a3f\u0a42\3\2\2\2\u0a40\u0a3e\3\2\2\2\u0a40")
        buf.write("\u0a41\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42\u0a40\3\2\2\2")
        buf.write("\u0a43\u0a45\5P)\2\u0a44\u0a43\3\2\2\2\u0a44\u0a45\3\2")
        buf.write("\2\2\u0a45\u0a4f\3\2\2\2\u0a46\u0a4f\5,\27\2\u0a47\u0a49")
        buf.write("\5\6\4\2\u0a48\u0a4a\7.\2\2\u0a49\u0a48\3\2\2\2\u0a49")
        buf.write("\u0a4a\3\2\2\2\u0a4a\u0a4c\3\2\2\2\u0a4b\u0a47\3\2\2\2")
        buf.write("\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4f\5")
        buf.write("\4\3\2\u0a4e\u0a39\3\2\2\2\u0a4e\u0a46\3\2\2\2\u0a4e\u0a4b")
        buf.write("\3\2\2\2\u0a4f\u0a51\3\2\2\2\u0a50\u0a52\7h\2\2\u0a51")
        buf.write("\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2")
        buf.write("\u0a53\u0a37\3\2\2\2\u0a54\u0a57\3\2\2\2\u0a55\u0a53\3")
        buf.write("\2\2\2\u0a55\u0a56\3\2\2\2\u0a56g\3\2\2\2\u0a57\u0a55")
        buf.write("\3\2\2\2\u0a58\u0a59\7\62\2\2\u0a59\u0a5d\7=\2\2\u0a5a")
        buf.write("\u0a5c\5.\30\2\u0a5b\u0a5a\3\2\2\2\u0a5c\u0a5f\3\2\2\2")
        buf.write("\u0a5d\u0a5b\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0a60\3")
        buf.write("\2\2\2\u0a5f\u0a5d\3\2\2\2\u0a60\u0a62\7>\2\2\u0a61\u0a63")
        buf.write("\5j\66\2\u0a62\u0a61\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64")
        buf.write("\u0a62\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65i\3\2\2\2\u0a66")
        buf.write("\u0a67\7\13\2\2\u0a67\u0a80\79\2\2\u0a68\u0a6a\5D#\2\u0a69")
        buf.write("\u0a68\3\2\2\2\u0a6a\u0a6d\3\2\2\2\u0a6b\u0a69\3\2\2\2")
        buf.write("\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6f\3\2\2\2\u0a6d\u0a6b\3")
        buf.write("\2\2\2\u0a6e\u0a70\5> \2\u0a6f\u0a6e\3\2\2\2\u0a70\u0a71")
        buf.write("\3\2\2\2\u0a71\u0a6f\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72")
        buf.write("\u0a76\3\2\2\2\u0a73\u0a75\5D#\2\u0a74\u0a73\3\2\2\2\u0a75")
        buf.write("\u0a78\3\2\2\2\u0a76\u0a74\3\2\2\2\u0a76\u0a77\3\2\2\2")
        buf.write("\u0a77\u0a7d\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a79\u0a7e\5")
        buf.write("H%\2\u0a7a\u0a7c\5P)\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c")
        buf.write("\3\2\2\2\u0a7c\u0a7e\3\2\2\2\u0a7d\u0a79\3\2\2\2\u0a7d")
        buf.write("\u0a7b\3\2\2\2\u0a7e\u0a81\3\2\2\2\u0a7f\u0a81\7h\2\2")
        buf.write("\u0a80\u0a6b\3\2\2\2\u0a80\u0a7f\3\2\2\2\u0a81\u0a82\3")
        buf.write("\2\2\2\u0a82\u0a83\7:\2\2\u0a83\u0a87\7=\2\2\u0a84\u0a86")
        buf.write("\5.\30\2\u0a85\u0a84\3\2\2\2\u0a86\u0a89\3\2\2\2\u0a87")
        buf.write("\u0a85\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a8a\3\2\2\2")
        buf.write("\u0a89\u0a87\3\2\2\2\u0a8a\u0a8b\7>\2\2\u0a8bk\3\2\2\2")
        buf.write("\u0a8c\u0a9d\t\25\2\2\u0a8d\u0a8e\7!\2\2\u0a8e\u0a8f\7")
        buf.write(";\2\2\u0a8f\u0a9d\7<\2\2\u0a90\u0a91\7\22\2\2\u0a91\u0a92")
        buf.write("\7;\2\2\u0a92\u0a9d\7<\2\2\u0a93\u0a94\7K\2\2\u0a94\u0a96")
        buf.write("\7K\2\2\u0a95\u0a97\7I\2\2\u0a96\u0a95\3\2\2\2\u0a96\u0a97")
        buf.write("\3\2\2\2\u0a97\u0a9d\3\2\2\2\u0a98\u0a99\79\2\2\u0a99")
        buf.write("\u0a9d\7:\2\2\u0a9a\u0a9b\7;\2\2\u0a9b\u0a9d\7<\2\2\u0a9c")
        buf.write("\u0a8c\3\2\2\2\u0a9c\u0a8d\3\2\2\2\u0a9c\u0a90\3\2\2\2")
        buf.write("\u0a9c\u0a93\3\2\2\2\u0a9c\u0a98\3\2\2\2\u0a9c\u0a9a\3")
        buf.write("\2\2\2\u0a9dm\3\2\2\2\u020dqw|\177\u0086\u008a\u008d\u0092")
        buf.write("\u0097\u009d\u00a0\u00aa\u00ae\u00b1\u00b6\u00b9\u00c2")
        buf.write("\u00c6\u00c9\u00ce\u00d3\u00d6\u00db\u00e4\u00e7\u00ea")
        buf.write("\u00f1\u00f7\u00fb\u0102\u0107\u010b\u010e\u0114\u0119")
        buf.write("\u011d\u0120\u0124\u0127\u012f\u0131\u0136\u013d\u0142")
        buf.write("\u0146\u0148\u0150\u0156\u0158\u015b\u0160\u0165\u0169")
        buf.write("\u016b\u016f\u0171\u0176\u0178\u017f\u0183\u0186\u0189")
        buf.write("\u018d\u0191\u0195\u0198\u019b\u019f\u01a3\u01a6\u01a9")
        buf.write("\u01ad\u01b0\u01b4\u01ba\u01c1\u01c7\u01c9\u01cc\u01d2")
        buf.write("\u01d7\u01da\u01de\u01e4\u01e6\u01e9\u01f0\u01f5\u01f9")
        buf.write("\u01fd\u0205\u0211\u021a\u021f\u0223\u0227\u0229\u022e")
        buf.write("\u0232\u0237\u023a\u023d\u0244\u0249\u024f\u0252\u025c")
        buf.write("\u0260\u0263\u026f\u0274\u0278\u0280\u0287\u028c\u0290")
        buf.write("\u029b\u02a2\u02a7\u02b1\u02b7\u02bb\u02c2\u02c7\u02cc")
        buf.write("\u02d0\u02d6\u02db\u02df\u02e3\u02e7\u02ed\u02ef\u02f2")
        buf.write("\u02f6\u02fe\u0305\u030e\u0313\u0316\u0319\u031e\u0326")
        buf.write("\u032b\u032f\u0335\u0345\u034a\u0355\u0360\u0368\u0371")
        buf.write("\u037c\u0387\u038f\u0391\u0394\u0396\u039c\u039e\u03a4")
        buf.write("\u03ab\u03b0\u03b5\u03bf\u03c8\u03cb\u03d2\u03dc\u03e7")
        buf.write("\u03f1\u03f9\u03fc\u0401\u040c\u0412\u0414\u0417\u0419")
        buf.write("\u0426\u0429\u042e\u0430\u0433\u043a\u043f\u0444\u0447")
        buf.write("\u044b\u0450\u0454\u045a\u045e\u0463\u0467\u046a\u0476")
        buf.write("\u047d\u0480\u0487\u048e\u0493\u0497\u0499\u04a7\u04ac")
        buf.write("\u04b4\u04b9\u04bc\u04bf\u04c4\u04d1\u04d7\u04df\u04e4")
        buf.write("\u04e6\u04e9\u04eb\u04f2\u04f5\u04f8\u04fc\u0501\u0505")
        buf.write("\u0508\u050d\u0510\u0514\u0519\u051d\u0520\u0529\u052d")
        buf.write("\u0532\u0536\u0539\u053f\u0542\u0546\u054b\u054f\u0552")
        buf.write("\u0559\u055f\u0564\u056a\u056f\u0575\u057c\u0582\u0589")
        buf.write("\u058e\u0590\u059b\u05a2\u05a5\u05ac\u05b3\u05b8\u05bc")
        buf.write("\u05be\u05cc\u05d1\u05d9\u05de\u05e1\u05e7\u05eb\u05ee")
        buf.write("\u05f7\u05fc\u05ff\u0603\u0609\u060e\u0612\u0614\u0619")
        buf.write("\u0621\u0625\u062a\u062d\u0630\u0632\u0637\u063c\u0640")
        buf.write("\u0643\u0649\u064e\u0653\u0657\u065a\u0660\u0665\u0668")
        buf.write("\u066e\u0674\u0678\u067c\u067f\u0686\u068a\u068f\u0691")
        buf.write("\u0696\u0699\u069d\u06a4\u06a9\u06ac\u06af\u06b2\u06b7")
        buf.write("\u06ba\u06c1\u06cd\u06d1\u06d4\u06db\u06e1\u06e5\u06e8")
        buf.write("\u06ea\u06f0\u06f6\u06fa\u06fd\u06ff\u0703\u070d\u0712")
        buf.write("\u0716\u0719\u071c\u0720\u0726\u072e\u0736\u073a\u073f")
        buf.write("\u0749\u074e\u0752\u0754\u0758\u075c\u075e\u0764\u076b")
        buf.write("\u0771\u0777\u077d\u0780\u0784\u078d\u0790\u0793\u079a")
        buf.write("\u07a0\u07a6\u07aa\u07b1\u07b6\u07ba\u07bd\u07c3\u07c8")
        buf.write("\u07cc\u07cf\u07d3\u07d6\u07de\u07e0\u07e5\u07e9\u07ef")
        buf.write("\u07f5\u07fc\u07ff\u0802\u0809\u080e\u0813\u0819\u0821")
        buf.write("\u0827\u082a\u082c\u082f\u0835\u083b\u0842\u0848\u084e")
        buf.write("\u0854\u0857\u085b\u0861\u0867\u086e\u0870\u0873\u0875")
        buf.write("\u087a\u087f\u0881\u0888\u088e\u0890\u0893\u0896\u089d")
        buf.write("\u089f\u08a2\u08a5\u08a9\u08af\u08b3\u08ba\u08bd\u08c4")
        buf.write("\u08c9\u08cf\u08d6\u08dc\u08e3\u08e8\u08ea\u08ee\u08f2")
        buf.write("\u090a\u0911\u0916\u091a\u091f\u0925\u0929\u092e\u0933")
        buf.write("\u0935\u0938\u093a\u093d\u0942\u0947\u0950\u0955\u0959")
        buf.write("\u095b\u095e\u0963\u0966\u096f\u0973\u0976\u0979\u097e")
        buf.write("\u0981\u098a\u098e\u0992\u0996\u099c\u099e\u09a1\u09a4")
        buf.write("\u09a8\u09ac\u09af\u09b2\u09b8\u09bd\u09c1\u09c3\u09cb")
        buf.write("\u09ce\u09d1\u09d6\u09d8\u09db\u09de\u09e3\u09e6\u09e9")
        buf.write("\u09ef\u09f4\u09f8\u09fa\u0a02\u0a05\u0a08\u0a0d\u0a0f")
        buf.write("\u0a12\u0a15\u0a19\u0a1f\u0a24\u0a28\u0a2d\u0a2f\u0a32")
        buf.write("\u0a35\u0a3b\u0a40\u0a44\u0a49\u0a4b\u0a4e\u0a51\u0a55")
        buf.write("\u0a5d\u0a64\u0a6b\u0a71\u0a76\u0a7b\u0a7d\u0a80\u0a87")
        buf.write("\u0a96\u0a9c")
        return buf.getvalue()


class CPP14Parser(Parser):
    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "<INVALID>", "<INVALID>", "'alignas'",
                    "'alignof'", "'asm'", "'auto'", "'break'", "'case'",
                    "'catch'", "'class'", "<INVALID>", "<INVALID>", "'continue'",
                    "'decltype'", "'default'", "'delete'", "'do'", "'else'",
                    "'enum'", "'export'", "'extern'", "<INVALID>", "'final'",
                    "'for'", "'goto'", "'if'", "'inline'", "<INVALID>",
                    "'mutable'", "'namespace'", "'new'", "'noexcept'",
                    "'nullptr'", "'operator'", "'override'", "<INVALID>",
                    "<INVALID>", "'return'", "<INVALID>", "'sizeof'", "'static_assert'",
                    "'struct'", "'switch'", "'template'", "'this'", "'throw'",
                    "'true'", "'try'", "'typeid'", "'typename'", "'union'",
                    "'using'", "'virtual'", "'while'", "'('", "')'", "'['",
                    "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'",
                    "'^'", "'&'", "'|'", "'~'", "'!'", "'='", "'<'", "'>'",
                    "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='",
                    "'|='", "'<<'", "'<<='", "'=='", "'!='", "'<='", "'>='",
                    "'&&'", "'||'", "'++'", "'--'", "'?:'", "','", "'->*'",
                    "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'",
                    "'...'"]

    symbolicNames = ["<INVALID>", "MultiLineMacro", "Directive", "Alignas",
                     "Alignof", "Asm", "Auto", "Break", "Case", "Catch",
                     "Class", "ConstOrVolatile", "Cast", "Continue", "Decltype",
                     "Default", "Delete", "Do", "Else", "Enum", "Export",
                     "Extern", "TrueFalse", "Final", "For", "Goto", "If",
                     "Inline", "Types", "Mutable", "Namespace", "New",
                     "Noexcept", "Nullptr", "Operator", "Override", "PrivateProtectedPublic",
                     "Specifier", "Return", "SignedUnsigned", "Sizeof",
                     "Static_assert", "Struct", "Switch", "Template", "This",
                     "Throw", "TrueToken", "Try", "Typeid", "Typename",
                     "Union", "Using", "Virtual", "While", "LeftParen",
                     "RightParen", "LeftBracket", "RightBracket", "LeftBrace",
                     "RightBrace", "Plus", "Minus", "Star", "Div", "Mod",
                     "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less",
                     "Greater", "PlusAssign", "MinusAssign", "StarAssign",
                     "DivAssign", "ModAssign", "XorAssign", "AndAssign",
                     "OrAssign", "LeftShift", "LeftShiftAssign", "Equal",
                     "NotEqual", "LessEqual", "GreaterEqual", "AndAnd",
                     "OrOr", "PlusPlus", "MinusMinus", "UnaryCondition",
                     "Comma", "ArrowStar", "Arrow", "Question", "Colon",
                     "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis",
                     "Identifier", "Numberliteral", "Decimalliteral", "Octalliteral",
                     "Hexadecimalliteral", "Binaryliteral", "Integersuffix",
                     "Characterliteral", "Stringliteral", "Userdefinedliteral",
                     "Userdefinedstringliteral", "Whitespace", "Newline",
                     "BlockComment", "LineComment"]

    RULE_translationunit = 0
    RULE_unqualifiedid = 1
    RULE_nestednamespecifier = 2
    RULE_lambdadeclarator = 3
    RULE_postfix = 4
    RULE_postfixexpression = 5
    RULE_pseudodestructorname = 6
    RULE_unaryexpression = 7
    RULE_unaryincdecexpression = 8
    RULE_postfixunaryincdecexpression = 9
    RULE_newexpression = 10
    RULE_newdeclarator = 11
    RULE_deleteexpression = 12
    RULE_castexpression = 13
    RULE_shiftexpression = 14
    RULE_relationalexpression = 15
    RULE_equalityexpression = 16
    RULE_ternaryconditionalexpression = 17
    RULE_unaryconditionalexpression = 18
    RULE_assignmentexpression = 19
    RULE_assignmentoperator = 20
    RULE_constantexpression = 21
    RULE_statement = 22
    RULE_casestatement = 23
    RULE_elsestatement = 24
    RULE_condition = 25
    RULE_forinitstatement = 26
    RULE_gotostatement = 27
    RULE_declaration = 28
    RULE_declspecifierseq = 29
    RULE_typespecifier = 30
    RULE_trailingtypespecifier = 31
    RULE_simpletypespecifier = 32
    RULE_attributespecifier = 33
    RULE_balancedtoken = 34
    RULE_declarator = 35
    RULE_noptrdeclarator = 36
    RULE_parametersandqualifiers = 37
    RULE_ptroperator = 38
    RULE_abstractdeclarator = 39
    RULE_noptrabstractdeclarator = 40
    RULE_parameterdeclaration = 41
    RULE_initializer = 42
    RULE_initializerlist = 43
    RULE_memberdeclaration = 44
    RULE_memberdeclarator = 45
    RULE_purespecifier = 46
    RULE_basespecifier = 47
    RULE_meminitializerlist = 48
    RULE_templateparameterlist = 49
    RULE_templateargumentlist = 50
    RULE_tryblock = 51
    RULE_handler = 52
    RULE_theoperator = 53

    ruleNames = ["translationunit", "unqualifiedid", "nestednamespecifier",
                 "lambdadeclarator", "postfix", "postfixexpression", "pseudodestructorname",
                 "unaryexpression", "unaryincdecexpression", "postfixunaryincdecexpression",
                 "newexpression", "newdeclarator", "deleteexpression",
                 "castexpression", "shiftexpression", "relationalexpression",
                 "equalityexpression", "ternaryconditionalexpression",
                 "unaryconditionalexpression", "assignmentexpression",
                 "assignmentoperator", "constantexpression", "statement",
                 "casestatement", "elsestatement", "condition", "forinitstatement",
                 "gotostatement", "declaration", "declspecifierseq", "typespecifier",
                 "trailingtypespecifier", "simpletypespecifier", "attributespecifier",
                 "balancedtoken", "declarator", "noptrdeclarator", "parametersandqualifiers",
                 "ptroperator", "abstractdeclarator", "noptrabstractdeclarator",
                 "parameterdeclaration", "initializer", "initializerlist",
                 "memberdeclaration", "memberdeclarator", "purespecifier",
                 "basespecifier", "meminitializerlist", "templateparameterlist",
                 "templateargumentlist", "tryblock", "handler", "theoperator"]

    EOF = Token.EOF
    MultiLineMacro = 1
    Directive = 2
    Alignas = 3
    Alignof = 4
    Asm = 5
    Auto = 6
    Break = 7
    Case = 8
    Catch = 9
    Class = 10
    ConstOrVolatile = 11
    Cast = 12
    Continue = 13
    Decltype = 14
    Default = 15
    Delete = 16
    Do = 17
    Else = 18
    Enum = 19
    Export = 20
    Extern = 21
    TrueFalse = 22
    Final = 23
    For = 24
    Goto = 25
    If = 26
    Inline = 27
    Types = 28
    Mutable = 29
    Namespace = 30
    New = 31
    Noexcept = 32
    Nullptr = 33
    Operator = 34
    Override = 35
    PrivateProtectedPublic = 36
    Specifier = 37
    Return = 38
    SignedUnsigned = 39
    Sizeof = 40
    Static_assert = 41
    Struct = 42
    Switch = 43
    Template = 44
    This = 45
    Throw = 46
    TrueToken = 47
    Try = 48
    Typeid = 49
    Typename = 50
    Union = 51
    Using = 52
    Virtual = 53
    While = 54
    LeftParen = 55
    RightParen = 56
    LeftBracket = 57
    RightBracket = 58
    LeftBrace = 59
    RightBrace = 60
    Plus = 61
    Minus = 62
    Star = 63
    Div = 64
    Mod = 65
    Caret = 66
    And = 67
    Or = 68
    Tilde = 69
    Not = 70
    Assign = 71
    Less = 72
    Greater = 73
    PlusAssign = 74
    MinusAssign = 75
    StarAssign = 76
    DivAssign = 77
    ModAssign = 78
    XorAssign = 79
    AndAssign = 80
    OrAssign = 81
    LeftShift = 82
    LeftShiftAssign = 83
    Equal = 84
    NotEqual = 85
    LessEqual = 86
    GreaterEqual = 87
    AndAnd = 88
    OrOr = 89
    PlusPlus = 90
    MinusMinus = 91
    UnaryCondition = 92
    Comma = 93
    ArrowStar = 94
    Arrow = 95
    Question = 96
    Colon = 97
    Doublecolon = 98
    Semi = 99
    Dot = 100
    DotStar = 101
    Ellipsis = 102
    Identifier = 103
    Numberliteral = 104
    Decimalliteral = 105
    Octalliteral = 106
    Hexadecimalliteral = 107
    Binaryliteral = 108
    Integersuffix = 109
    Characterliteral = 110
    Stringliteral = 111
    Userdefinedliteral = 112
    Userdefinedstringliteral = 113
    Whitespace = 114
    Newline = 115
    BlockComment = 116
    LineComment = 117

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTranslationunit"):
                listener.enterTranslationunit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTranslationunit"):
                listener.exitTranslationunit(self)

    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                        1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                        1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                        1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                    (((_la - 67)) & ~0x3f) == 0 and (
                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 108
                self.declaration()
                self.state = 113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 114
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnqualifiedid"):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnqualifiedid"):
                listener.exitUnqualifiedid(self)

    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unqualifiedid)
        self._la = 0  # Token type
        try:
            self.state = 175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Tilde:
                    self.state = 116
                    self.match(CPP14Parser.Tilde)

                self.state = 119
                self.match(CPP14Parser.Identifier)
                self.state = 125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
                if la_ == 1:
                    self.state = 120
                    self.match(CPP14Parser.Less)
                    self.state = 122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 121
                        self.templateargumentlist()

                    self.state = 124
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 127
                self.match(CPP14Parser.Operator)
                self.state = 158
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod,
                             CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                             CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign,
                             CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign,
                             CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign,
                             CPP14Parser.LeftShift, CPP14Parser.LeftShiftAssign, CPP14Parser.Equal,
                             CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd,
                             CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                             CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow, CPP14Parser.Stringliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 132
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Delete, CPP14Parser.New, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                                 CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div,
                                 CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                                 CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater,
                                 CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                                 CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign,
                                 CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShift,
                                 CPP14Parser.LeftShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual,
                                 CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.UnaryCondition,
                                 CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow]:
                        self.state = 128
                        self.theoperator()
                        pass
                    elif token in [CPP14Parser.Stringliteral]:
                        self.state = 129
                        self.match(CPP14Parser.Stringliteral)
                        self.state = 130
                        self.match(CPP14Parser.Identifier)
                        pass
                    elif token in [CPP14Parser.Userdefinedstringliteral]:
                        self.state = 131
                        self.match(CPP14Parser.Userdefinedstringliteral)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 139
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
                    if la_ == 1:
                        self.state = 134
                        self.match(CPP14Parser.Less)
                        self.state = 136
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (
                                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 135
                            self.templateargumentlist()

                        self.state = 138
                        self.match(CPP14Parser.Greater)

                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                               CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Identifier]:
                    self.state = 142
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 141
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 144
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)

                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 146
                            self.attributespecifier()
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

                    self.state = 155
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 152
                            self.ptroperator()
                        self.state = 157
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 160
                self.match(CPP14Parser.Tilde)
                self.state = 161
                self.match(CPP14Parser.Decltype)
                self.state = 162
                self.match(CPP14Parser.LeftParen)
                self.state = 172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
                if la_ == 1:
                    self.state = 163
                    self.assignmentexpression()
                    self.state = 168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 164
                        self.match(CPP14Parser.Comma)
                        self.state = 165
                        self.assignmentexpression()
                        self.state = 170
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 171
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 174
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def templateargumentlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, i)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestednamespecifier"):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestednamespecifier"):
                listener.exitNestednamespecifier(self)

    def nestednamespecifier(self):

        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nestednamespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.state = 177
                self.match(CPP14Parser.Identifier)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 178
                    self.match(CPP14Parser.Less)
                    self.state = 180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 179
                        self.templateargumentlist()

                    self.state = 182
                    self.match(CPP14Parser.Greater)

                pass
            elif token in [CPP14Parser.Decltype]:
                self.state = 185
                self.match(CPP14Parser.Decltype)
                self.state = 186
                self.match(CPP14Parser.LeftParen)
                self.state = 196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
                if la_ == 1:
                    self.state = 187
                    self.assignmentexpression()
                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 188
                        self.match(CPP14Parser.Comma)
                        self.state = 189
                        self.assignmentexpression()
                        self.state = 194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 195
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 198
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 201
            self.match(CPP14Parser.Doublecolon)
            self.state = 217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 212
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
                    if la_ == 1:
                        self.state = 202
                        self.match(CPP14Parser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 204
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 203
                            self.match(CPP14Parser.Template)

                        self.state = 206
                        self.match(CPP14Parser.Identifier)
                        self.state = 207
                        self.match(CPP14Parser.Less)
                        self.state = 209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (
                                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 208
                            self.templateargumentlist()

                        self.state = 211
                        self.match(CPP14Parser.Greater)
                        pass

                    self.state = 214
                    self.match(CPP14Parser.Doublecolon)
                self.state = 219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 22, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLambdadeclarator"):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLambdadeclarator"):
                listener.exitLambdadeclarator(self)

    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_lambdadeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(CPP14Parser.LeftParen)
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
            if la_ == 1:
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                    1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 221
                    self.parameterdeclaration()
                    self.state = 226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 222
                        self.match(CPP14Parser.Comma)
                        self.state = 223
                        self.parameterdeclaration()
                        self.state = 228
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 231
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.state = 234
                self.parameterdeclaration()
                self.state = 239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 235
                        self.match(CPP14Parser.Comma)
                        self.state = 236
                        self.parameterdeclaration()
                    self.state = 241
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 26, self._ctx)

                self.state = 242
                self.match(CPP14Parser.Comma)
                self.state = 243
                self.match(CPP14Parser.Ellipsis)
                pass

            self.state = 247
            self.match(CPP14Parser.RightParen)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Mutable:
                self.state = 248
                self.match(CPP14Parser.Mutable)

            self.state = 303
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.state = 251
                self.match(CPP14Parser.Throw)
                self.state = 252
                self.match(CPP14Parser.LeftParen)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 254
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 253
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 256
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 258
                            self.attributespecifier()
                        self.state = 263
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 30, self._ctx)

                    self.state = 265
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
                    if la_ == 1:
                        self.state = 264
                        self.abstractdeclarator()

                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 267
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 270
                        self.match(CPP14Parser.Comma)
                        self.state = 272
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 271
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 274
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 33, self._ctx)

                        self.state = 279
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 276
                                self.attributespecifier()
                            self.state = 281
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 34, self._ctx)

                        self.state = 283
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 35, self._ctx)
                        if la_ == 1:
                            self.state = 282
                            self.abstractdeclarator()

                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 285
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 295
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.state = 296
                self.match(CPP14Parser.Noexcept)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 297
                    self.match(CPP14Parser.LeftParen)
                    self.state = 298
                    self.constantexpression()
                    self.state = 299
                    self.match(CPP14Parser.RightParen)

                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket, CPP14Parser.LeftBrace, CPP14Parser.Arrow]:
                pass
            else:
                pass
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 305
                self.attributespecifier()
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Arrow:
                self.state = 311
                self.match(CPP14Parser.Arrow)
                self.state = 313
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 312
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 315
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 42, self._ctx)

                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 317
                        self.attributespecifier()
                    self.state = 322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 43, self._ctx)

                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 323
                    self.abstractdeclarator()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext, 0)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfix

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfix"):
                listener.enterPostfix(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfix"):
                listener.exitPostfix(self)

    def postfix(self):

        localctx = CPP14Parser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfix)
        self._la = 0  # Token type
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.match(CPP14Parser.LeftBracket)
                self.state = 345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 329
                    self.assignmentexpression()
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 330
                        self.match(CPP14Parser.Comma)
                        self.state = 331
                        self.assignmentexpression()
                        self.state = 336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 337
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 338
                        self.initializerlist()
                        self.state = 340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 339
                            self.match(CPP14Parser.Comma)

                    self.state = 344
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 347
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.match(CPP14Parser.LeftParen)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 349
                    self.initializerlist()

                self.state = 352
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Arrow, CPP14Parser.Dot]:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Arrow or _la == CPP14Parser.Dot):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 54, self._ctx)
                if la_ == 1:
                    self.state = 355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 354
                        self.match(CPP14Parser.Template)

                    self.state = 361
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
                    if la_ == 1:
                        self.state = 357
                        self.nestednamespecifier()
                        self.state = 359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 358
                            self.match(CPP14Parser.Template)

                    self.state = 363
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 364
                    self.pseudodestructorname()
                    pass

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def Numberliteral(self):
            return self.getToken(CPP14Parser.Numberliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def TrueFalse(self):
            return self.getToken(CPP14Parser.TrueFalse, 0)

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def Userdefinedliteral(self):
            return self.getToken(CPP14Parser.Userdefinedliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def This(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.This)
            else:
                return self.getToken(CPP14Parser.This, i)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostfixContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostfixContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def Cast(self):
            return self.getToken(CPP14Parser.Cast, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixexpression"):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixexpression"):
                listener.exitPostfixexpression(self)

    def postfixexpression(self):

        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_postfixexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
            if la_ == 1:
                self.state = 369
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.This))) != 0) or (
                                (((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & (
                                                (1 << (CPP14Parser.Numberliteral - 104)) | (
                                                        1 << (CPP14Parser.Characterliteral - 104)) | (
                                                    1 << (CPP14Parser.Stringliteral - 104)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 104)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 104)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.state = 374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
                if la_ == 1:
                    self.state = 370
                    self.nestednamespecifier()
                    self.state = 372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 371
                        self.match(CPP14Parser.Template)

                self.state = 376
                self.unqualifiedid()
                pass

            elif la_ == 3:
                self.state = 377
                self.match(CPP14Parser.LeftBracket)
                self.state = 430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                if la_ == 1:
                    self.state = 378
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.And or _la == CPP14Parser.Assign):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 395
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 379
                        self.match(CPP14Parser.Comma)
                        self.state = 388
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 380
                                self.match(CPP14Parser.And)

                            self.state = 383
                            self.match(CPP14Parser.Identifier)
                            self.state = 385
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                            (1 << (CPP14Parser.LeftParen - 55)) | (
                                            1 << (CPP14Parser.LeftBrace - 55)) | (
                                                1 << (CPP14Parser.Assign - 55)))) != 0):
                                self.state = 384
                                self.initializer()

                            pass
                        elif token in [CPP14Parser.This]:
                            self.state = 387
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 390
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 397
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)


                elif la_ == 2:
                    self.state = 406
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                        self.state = 399
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.And:
                            self.state = 398
                            self.match(CPP14Parser.And)

                        self.state = 401
                        self.match(CPP14Parser.Identifier)
                        self.state = 403
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 402
                            self.initializer()

                        pass
                    elif token in [CPP14Parser.This]:
                        self.state = 405
                        self.match(CPP14Parser.This)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 408
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 411
                        self.match(CPP14Parser.Comma)
                        self.state = 420
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.And, CPP14Parser.Identifier]:
                            self.state = 413
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.And:
                                self.state = 412
                                self.match(CPP14Parser.And)

                            self.state = 415
                            self.match(CPP14Parser.Identifier)
                            self.state = 417
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                            (1 << (CPP14Parser.LeftParen - 55)) | (
                                            1 << (CPP14Parser.LeftBrace - 55)) | (
                                                1 << (CPP14Parser.Assign - 55)))) != 0):
                                self.state = 416
                                self.initializer()

                            pass
                        elif token in [CPP14Parser.This]:
                            self.state = 419
                            self.match(CPP14Parser.This)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 422
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 432
                self.match(CPP14Parser.RightBracket)
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.LeftParen:
                    self.state = 433
                    self.lambdadeclarator()

                self.state = 436
                self.match(CPP14Parser.LeftBrace)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                            1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                    1 << CPP14Parser.Continue) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                            1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                    1 << CPP14Parser.SignedUnsigned) | (
                            1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                            1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                    (1 << (CPP14Parser.And - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Or - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.Tilde - 67)) | (
                                                                                    1 << (CPP14Parser.Not - 67)) | (
                                                                                1 << (CPP14Parser.AndAnd - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Semi - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                        1 << (CPP14Parser.Identifier - 67)) | (
                                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                                1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 437
                    self.statement()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 443
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 4:
                self.state = 444
                self.simpletypespecifier()
                self.state = 458
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 445
                    self.match(CPP14Parser.LeftParen)
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 446
                        self.initializerlist()

                    self.state = 449
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 450
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 451
                        self.initializerlist()
                        self.state = 453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 452
                            self.match(CPP14Parser.Comma)

                    self.state = 457
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.state = 460
                self.match(CPP14Parser.Typename)
                self.state = 461
                self.nestednamespecifier()
                self.state = 472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
                if la_ == 1:
                    self.state = 462
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 463
                        self.match(CPP14Parser.Template)

                    self.state = 466
                    self.match(CPP14Parser.Identifier)
                    self.state = 467
                    self.match(CPP14Parser.Less)
                    self.state = 469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 468
                        self.templateargumentlist()

                    self.state = 471
                    self.match(CPP14Parser.Greater)
                    pass

                self.state = 487
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftParen]:
                    self.state = 474
                    self.match(CPP14Parser.LeftParen)
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 475
                        self.initializerlist()

                    self.state = 478
                    self.match(CPP14Parser.RightParen)
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 479
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 480
                        self.initializerlist()
                        self.state = 482
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 481
                            self.match(CPP14Parser.Comma)

                    self.state = 486
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Cast:
                    self.state = 489
                    self.match(CPP14Parser.Cast)
                    self.state = 490
                    self.match(CPP14Parser.Less)
                    self.state = 492
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 491
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 494
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 86, self._ctx)

                    self.state = 499
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 496
                            self.attributespecifier()
                        self.state = 501
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)

                    self.state = 503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 502
                        self.abstractdeclarator()

                    self.state = 505
                    self.match(CPP14Parser.Greater)

                self.state = 509
                self.match(CPP14Parser.LeftParen)
                self.state = 510
                self.assignmentexpression()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 511
                    self.match(CPP14Parser.Comma)
                    self.state = 512
                    self.assignmentexpression()
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 518
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 520
                self.match(CPP14Parser.Typeid)
                self.state = 549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.match(CPP14Parser.LeftParen)
                    self.state = 522
                    self.assignmentexpression()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 523
                        self.match(CPP14Parser.Comma)
                        self.state = 524
                        self.assignmentexpression()
                        self.state = 529
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 530
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 2:
                    self.state = 532
                    self.match(CPP14Parser.LeftParen)
                    self.state = 534
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 533
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 536
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)

                    self.state = 541
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 538
                            self.attributespecifier()
                        self.state = 543
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 544
                        self.abstractdeclarator()

                    self.state = 547
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            self.state = 556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 553
                    self.postfix()
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateargumentlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateargumentlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, i)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPseudodestructorname"):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPseudodestructorname"):
                listener.exitPseudodestructorname(self)

    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_pseudodestructorname)
        self._la = 0  # Token type
        try:
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
                if la_ == 1:
                    self.state = 560
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
                    if la_ == 1:
                        self.state = 559
                        self.nestednamespecifier()

                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 562
                        self.match(CPP14Parser.Identifier)
                        self.state = 568
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Less:
                            self.state = 563
                            self.match(CPP14Parser.Less)
                            self.state = 565
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                        1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                        1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.Enum) | (
                                        1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.New) | (
                                        1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (
                                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or (
                                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                            (1 << (
                                                                                                CPP14Parser.And - 67)) | (
                                                                                                    1 << (
                                                                                                    CPP14Parser.Or - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Tilde - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Not - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.PlusPlus - 67)) | (
                                                                                    1 << (
                                                                                    CPP14Parser.MinusMinus - 67)) | (
                                                                                1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                            1 << (CPP14Parser.Identifier - 67)) | (
                                                                        1 << (CPP14Parser.Numberliteral - 67)) | (
                                                                    1 << (CPP14Parser.Characterliteral - 67)) | (
                                                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 564
                                self.templateargumentlist()

                            self.state = 567
                            self.match(CPP14Parser.Greater)

                        self.state = 570
                        self.match(CPP14Parser.Doublecolon)

                    pass

                elif la_ == 2:
                    self.state = 573
                    self.nestednamespecifier()
                    self.state = 574
                    self.match(CPP14Parser.Template)
                    self.state = 575
                    self.match(CPP14Parser.Identifier)
                    self.state = 576
                    self.match(CPP14Parser.Less)
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 577
                        self.templateargumentlist()

                    self.state = 580
                    self.match(CPP14Parser.Greater)
                    self.state = 581
                    self.match(CPP14Parser.Doublecolon)
                    pass

                self.state = 585
                self.match(CPP14Parser.Tilde)
                self.state = 586
                self.match(CPP14Parser.Identifier)
                self.state = 592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
                if la_ == 1:
                    self.state = 587
                    self.match(CPP14Parser.Less)
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 588
                        self.templateargumentlist()

                    self.state = 591
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.match(CPP14Parser.Tilde)
                self.state = 595
                self.match(CPP14Parser.Decltype)
                self.state = 596
                self.match(CPP14Parser.LeftParen)
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
                if la_ == 1:
                    self.state = 597
                    self.assignmentexpression()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 598
                        self.match(CPP14Parser.Comma)
                        self.state = 599
                        self.assignmentexpression()
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 605
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 608
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def unaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryincdecexpressionContext, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext, 0)

        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryexpression"):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryexpression"):
                listener.exitUnaryexpression(self)

    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryexpression)
        self._la = 0  # Token type
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 117, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.postfixexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.unaryincdecexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                _la = self._input.LA(1)
                if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & (
                                                (1 << (CPP14Parser.Plus - 61)) | (1 << (CPP14Parser.Minus - 61)) | (
                                                    1 << (CPP14Parser.Star - 61)) | (1 << (CPP14Parser.And - 61)) | (
                                            1 << (CPP14Parser.Or - 61)) | (1 << (CPP14Parser.Tilde - 61)) | (
                                    1 << (CPP14Parser.Not - 61)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 614
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 615
                self.match(CPP14Parser.Sizeof)
                self.state = 638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.unaryexpression()
                    pass

                elif la_ == 2:
                    self.state = 617
                    self.match(CPP14Parser.LeftParen)
                    self.state = 619
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 618
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 621
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)

                    self.state = 626
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 623
                            self.attributespecifier()
                        self.state = 628
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 110, self._ctx)

                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 629
                        self.abstractdeclarator()

                    self.state = 632
                    self.match(CPP14Parser.RightParen)
                    pass

                elif la_ == 3:
                    self.state = 634
                    self.match(CPP14Parser.Ellipsis)
                    self.state = 635
                    self.match(CPP14Parser.LeftParen)
                    self.state = 636
                    self.match(CPP14Parser.Identifier)
                    self.state = 637
                    self.match(CPP14Parser.RightParen)
                    pass

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 640
                self.match(CPP14Parser.Alignof)
                self.state = 641
                self.match(CPP14Parser.LeftParen)
                self.state = 643
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 642
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 645
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

                self.state = 650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 647
                        self.attributespecifier()
                    self.state = 652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 114, self._ctx)

                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 653
                    self.abstractdeclarator()

                self.state = 656
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 658
                self.match(CPP14Parser.Noexcept)
                self.state = 659
                self.match(CPP14Parser.LeftParen)
                self.state = 660
                self.assignmentexpression()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 661
                    self.match(CPP14Parser.Comma)
                    self.state = 662
                    self.assignmentexpression()
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 668
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 670
                self.newexpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 671
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryincdecexpression"):
                listener.enterUnaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryincdecexpression"):
                listener.exitUnaryincdecexpression(self)

    def unaryincdecexpression(self):

        localctx = CPP14Parser.UnaryincdecexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryincdecexpression)
        self._la = 0  # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.PlusPlus, CPP14Parser.MinusMinus]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 675
                self.castexpression()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype, CPP14Parser.TrueFalse,
                           CPP14Parser.Types, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                           CPP14Parser.This, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                           CPP14Parser.LeftBracket, CPP14Parser.Tilde, CPP14Parser.Identifier,
                           CPP14Parser.Numberliteral, CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                           CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.postfixunaryincdecexpression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixunaryincdecexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext, 0)

        def postfixunaryincdecexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixunaryincdecexpressionContext, 0)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PostfixContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PostfixContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixunaryincdecexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixunaryincdecexpression"):
                listener.enterPostfixunaryincdecexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixunaryincdecexpression"):
                listener.exitPostfixunaryincdecexpression(self)

    def postfixunaryincdecexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixunaryincdecexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.postfixexpression()
            self.state = 681
            _la = self._input.LA(1)
            if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self._ctx.stop = self._input.LT(-1)
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.PostfixunaryincdecexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixunaryincdecexpression)
                    self.state = 683
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBracket - 55)) | (
                                            1 << (CPP14Parser.Arrow - 55)) | (1 << (CPP14Parser.Dot - 55)))) != 0):
                        self.state = 684
                        self.postfix()
                        self.state = 689
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 690
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.PlusPlus or _la == CPP14Parser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 120, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewexpression"):
                listener.enterNewexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewexpression"):
                listener.exitNewexpression(self)

    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_newexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 696
                self.match(CPP14Parser.Doublecolon)

            self.state = 699
            self.match(CPP14Parser.New)
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 122, self._ctx)
            if la_ == 1:
                self.state = 700
                self.match(CPP14Parser.LeftParen)
                self.state = 701
                self.initializerlist()
                self.state = 702
                self.match(CPP14Parser.RightParen)

            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                         CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned, CPP14Parser.Struct,
                         CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Identifier]:
                self.state = 707
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 706
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 123, self._ctx)

                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 711
                        self.attributespecifier()
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 124, self._ctx)

                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 720
                self.match(CPP14Parser.LeftParen)
                self.state = 722
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 721
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 724
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 126, self._ctx)

                self.state = 729
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 127, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 726
                        self.attributespecifier()
                    self.state = 731
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 127, self._ctx)

                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 732
                    self.abstractdeclarator()

                self.state = 735
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 133, self._ctx)
            if la_ == 1:
                self.state = 739
                self.match(CPP14Parser.LeftParen)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 740
                    self.initializerlist()

                self.state = 743
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 744
                self.match(CPP14Parser.LeftBrace)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 745
                    self.initializerlist()
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 746
                        self.match(CPP14Parser.Comma)

                self.state = 751
                self.match(CPP14Parser.RightBrace)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, 0)

        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewdeclarator"):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewdeclarator"):
                listener.exitNewdeclarator(self)

    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_newdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.AndAnd,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.ptroperator()
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 134, self._ctx)
                if la_ == 1:
                    self.state = 755
                    self.newdeclarator()

                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(CPP14Parser.LeftBracket)
                self.state = 759
                self.assignmentexpression()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 760
                    self.match(CPP14Parser.Comma)
                    self.state = 761
                    self.assignmentexpression()
                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                self.match(CPP14Parser.RightBracket)
                self.state = 771
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 768
                        self.attributespecifier()
                    self.state = 773
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 136, self._ctx)

                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 138, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 774
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 775
                        self.constantexpression()
                        self.state = 776
                        self.match(CPP14Parser.RightBracket)
                        self.state = 780
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 777
                                self.attributespecifier()
                            self.state = 782
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 137, self._ctx)

                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 138, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeleteexpression"):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeleteexpression"):
                listener.exitDeleteexpression(self)

    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_deleteexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Doublecolon:
                self.state = 790
                self.match(CPP14Parser.Doublecolon)

            self.state = 793
            self.match(CPP14Parser.Delete)
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 141, self._ctx)
            if la_ == 1:
                self.state = 794
                self.match(CPP14Parser.LeftBracket)
                self.state = 795
                self.match(CPP14Parser.RightBracket)

            self.state = 798
            self.castexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastexpression"):
                listener.enterCastexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastexpression"):
                listener.exitCastexpression(self)

    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_castexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 800
                    self.match(CPP14Parser.LeftParen)
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 801
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 804
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 142, self._ctx)

                    self.state = 809
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 806
                            self.attributespecifier()
                        self.state = 811
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 143, self._ctx)

                    self.state = 813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 812
                        self.abstractdeclarator()

                    self.state = 815
                    self.match(CPP14Parser.RightParen)
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 145, self._ctx)

            self.state = 822
            self.unaryexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.CastexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.CastexpressionContext, i)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShiftexpression"):
                listener.enterShiftexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShiftexpression"):
                listener.exitShiftexpression(self)

    def shiftexpression(self):

        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_shiftexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.castexpression()
            self.state = 840
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 835
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.DotStar]:
                        self.state = 825
                        self.match(CPP14Parser.DotStar)
                        pass
                    elif token in [CPP14Parser.ArrowStar]:
                        self.state = 826
                        self.match(CPP14Parser.ArrowStar)
                        pass
                    elif token in [CPP14Parser.Star]:
                        self.state = 827
                        self.match(CPP14Parser.Star)
                        pass
                    elif token in [CPP14Parser.Div]:
                        self.state = 828
                        self.match(CPP14Parser.Div)
                        pass
                    elif token in [CPP14Parser.Mod]:
                        self.state = 829
                        self.match(CPP14Parser.Mod)
                        pass
                    elif token in [CPP14Parser.Plus]:
                        self.state = 830
                        self.match(CPP14Parser.Plus)
                        pass
                    elif token in [CPP14Parser.Minus]:
                        self.state = 831
                        self.match(CPP14Parser.Minus)
                        pass
                    elif token in [CPP14Parser.LeftShift]:
                        self.state = 832
                        self.match(CPP14Parser.LeftShift)
                        pass
                    elif token in [CPP14Parser.Greater]:
                        self.state = 833
                        self.match(CPP14Parser.Greater)
                        self.state = 834
                        self.match(CPP14Parser.Greater)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 837
                    self.castexpression()
                self.state = 842
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 147, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext, 0)

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalexpression"):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalexpression"):
                listener.exitRelationalexpression(self)

    def relationalexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_relationalexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.shiftexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                    self.state = 846
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 847
                    _la = self._input.LA(1)
                    if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & (
                                        (1 << (CPP14Parser.Less - 72)) | (1 << (CPP14Parser.Greater - 72)) | (
                                            1 << (CPP14Parser.LessEqual - 72)) | (
                                1 << (CPP14Parser.GreaterEqual - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 848
                    self.shiftexpression()
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext, 0)

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityexpression"):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityexpression"):
                listener.exitEqualityexpression(self)

    def equalityexpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_equalityexpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                    self.state = 857
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 858
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Equal or _la == CPP14Parser.NotEqual):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 859
                    self.relationalexpression(0)
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 149, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TernaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ternaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryconditionalexpression"):
                listener.enterTernaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryconditionalexpression"):
                listener.exitTernaryconditionalexpression(self)

    def ternaryconditionalexpression(self):

        localctx = CPP14Parser.TernaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ternaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.equalityexpression(0)
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.OrOr - 66)))) != 0):
                self.state = 866
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.OrOr - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 867
                self.equalityexpression(0)
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 873
            self.match(CPP14Parser.Question)
            self.state = 874
            self.assignmentexpression()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 875
                self.match(CPP14Parser.Comma)
                self.state = 876
                self.assignmentexpression()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 882
            self.match(CPP14Parser.Colon)
            self.state = 883
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryconditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryconditionalexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryconditionalexpression"):
                listener.enterUnaryconditionalexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryconditionalexpression"):
                listener.exitUnaryconditionalexpression(self)

    def unaryconditionalexpression(self):

        localctx = CPP14Parser.UnaryconditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unaryconditionalexpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.equalityexpression(0)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                    (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                        1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                1 << (CPP14Parser.OrOr - 66)))) != 0):
                self.state = 886
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.OrOr - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 887
                self.equalityexpression(0)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            self.match(CPP14Parser.UnaryCondition)
            self.state = 894
            self.assignmentexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentexpression"):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentexpression"):
                listener.exitAssignmentexpression(self)

    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignmentexpression)
        self._la = 0  # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.equalityexpression(0)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.OrOr - 66)))) != 0):
                    self.state = 897
                    _la = self._input.LA(1)
                    if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                                1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                        1 << (CPP14Parser.OrOr - 66)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 898
                    self.equalityexpression(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.assignmentoperator()
                    self.state = 914
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 905
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 906
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 911
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 907
                            self.initializerlist()
                            self.state = 909
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 908
                                self.match(CPP14Parser.Comma)

                        self.state = 913
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 919
                self.unaryconditionalexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 920
                self.match(CPP14Parser.Throw)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and (
                            (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                    1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 921
                    self.assignmentexpression()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentoperator"):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentoperator"):
                listener.exitAssignmentoperator(self)

    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignmentoperator)
        self._la = 0  # Token type
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign, CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign,
                         CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign,
                         CPP14Parser.OrAssign, CPP14Parser.LeftShiftAssign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                _la = self._input.LA(1)
                if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CPP14Parser.Assign - 71)) | (
                            1 << (CPP14Parser.PlusAssign - 71)) | (1 << (CPP14Parser.MinusAssign - 71)) | (
                            1 << (CPP14Parser.StarAssign - 71)) | (1 << (CPP14Parser.DivAssign - 71)) | (
                            1 << (CPP14Parser.ModAssign - 71)) | (1 << (CPP14Parser.XorAssign - 71)) | (
                            1 << (CPP14Parser.AndAssign - 71)) | (1 << (CPP14Parser.OrAssign - 71)) | (
                            1 << (CPP14Parser.LeftShiftAssign - 71)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CPP14Parser.Greater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(CPP14Parser.Greater)
                self.state = 928
                self.match(CPP14Parser.Greater)
                self.state = 929
                self.match(CPP14Parser.Assign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.EqualityexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext, i)

        def ternaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.TernaryconditionalexpressionContext, 0)

        def unaryconditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryconditionalexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantexpression"):
                listener.enterConstantexpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantexpression"):
                listener.exitConstantexpression(self)

    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constantexpression)
        self._la = 0  # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.equalityexpression(0)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                        (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                            1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                    1 << (CPP14Parser.OrOr - 66)))) != 0):
                    self.state = 933
                    _la = self._input.LA(1)
                    if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & (
                                            (1 << (CPP14Parser.Caret - 66)) | (1 << (CPP14Parser.And - 66)) | (
                                                1 << (CPP14Parser.Or - 66)) | (1 << (CPP14Parser.AndAnd - 66)) | (
                                        1 << (CPP14Parser.OrOr - 66)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 934
                    self.equalityexpression(0)
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.ternaryconditionalexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.unaryconditionalexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def casestatement(self):
            return self.getTypedRuleContext(CPP14Parser.CasestatementContext, 0)

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext, 0)

        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def gotostatement(self):
            return self.getTypedRuleContext(CPP14Parser.GotostatementContext, 0)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def elsestatement(self):
            return self.getTypedRuleContext(CPP14Parser.ElsestatementContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 209, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 944
                        self.attributespecifier()
                    self.state = 949
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 163, self._ctx)

                self.state = 1085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
                if la_ == 1:
                    self.state = 957
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Identifier]:
                        self.state = 950
                        self.match(CPP14Parser.Identifier)
                        self.state = 951
                        self.match(CPP14Parser.Colon)
                        pass
                    elif token in [CPP14Parser.Switch, CPP14Parser.While]:
                        self.state = 952
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Switch or _la == CPP14Parser.While):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 953
                        self.match(CPP14Parser.LeftParen)
                        self.state = 954
                        self.condition()
                        self.state = 955
                        self.match(CPP14Parser.RightParen)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 959
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 960
                    self.casestatement()
                    pass

                elif la_ == 3:
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.Plus) | (
                                1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                        1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                        1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                        1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                        1 << (CPP14Parser.Numberliteral - 67)) | (
                                1 << (CPP14Parser.Characterliteral - 67)) | (
                                        1 << (CPP14Parser.Stringliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 961
                        self.assignmentexpression()
                        self.state = 966
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 962
                            self.match(CPP14Parser.Comma)
                            self.state = 963
                            self.assignmentexpression()
                            self.state = 968
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 971
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 4:
                    self.state = 972
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Continue) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Goto) | (
                                1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                        1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static_assert) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (
                                1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                        (1 << (
                                                                                            CPP14Parser.And - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Or - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Tilde - 67)) | (
                                                                                        1 << (CPP14Parser.Not - 67)) | (
                                                                                    1 << (CPP14Parser.AndAnd - 67)) | (
                                                                                1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                        1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                    1 << (CPP14Parser.Semi - 67)) | (
                                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                                            1 << (CPP14Parser.Identifier - 67)) | (
                                                        1 << (CPP14Parser.Numberliteral - 67)) | (
                                                    1 << (CPP14Parser.Characterliteral - 67)) | (
                                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 973
                        self.statement()
                        self.state = 978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 979
                    self.match(CPP14Parser.RightBrace)
                    pass

                elif la_ == 5:
                    self.state = 980
                    self.match(CPP14Parser.If)
                    self.state = 981
                    self.match(CPP14Parser.LeftParen)
                    self.state = 982
                    self.condition()
                    self.state = 983
                    self.match(CPP14Parser.RightParen)
                    self.state = 984
                    self.statement()
                    self.state = 986
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
                    if la_ == 1:
                        self.state = 985
                        self.elsestatement()

                    pass

                elif la_ == 6:
                    self.state = 988
                    self.match(CPP14Parser.Do)
                    self.state = 989
                    self.statement()
                    self.state = 990
                    self.match(CPP14Parser.While)
                    self.state = 991
                    self.match(CPP14Parser.LeftParen)
                    self.state = 992
                    self.assignmentexpression()
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 993
                        self.match(CPP14Parser.Comma)
                        self.state = 994
                        self.assignmentexpression()
                        self.state = 999
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1000
                    self.match(CPP14Parser.RightParen)
                    self.state = 1001
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 7:
                    self.state = 1003
                    self.match(CPP14Parser.For)

                    self.state = 1004
                    self.match(CPP14Parser.LeftParen)
                    self.state = 1047
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
                    if la_ == 1:
                        self.state = 1005
                        self.forinitstatement()
                        self.state = 1007
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (
                                    1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                            1 << CPP14Parser.Operator) | (
                                    1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (
                            1 << CPP14Parser.Typename) | (
                                    1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                                1 << (CPP14Parser.Not - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1006
                            self.condition()

                        self.state = 1009
                        self.match(CPP14Parser.Semi)
                        self.state = 1018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                                1 << (CPP14Parser.Not - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1010
                            self.assignmentexpression()
                            self.state = 1015
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1011
                                self.match(CPP14Parser.Comma)
                                self.state = 1012
                                self.assignmentexpression()
                                self.state = 1017
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1023
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                            self.state = 1020
                            self.attributespecifier()
                            self.state = 1025
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1026
                        self.declspecifierseq()
                        self.state = 1027
                        self.declarator()
                        self.state = 1028
                        self.match(CPP14Parser.Colon)
                        self.state = 1045
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                     CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                     CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                     CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This,
                                     CPP14Parser.Throw, CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                     CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                     CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                     CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                     CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                     CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                     CPP14Parser.Userdefinedstringliteral]:
                            self.state = 1029
                            self.assignmentexpression()
                            self.state = 1034
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1030
                                self.match(CPP14Parser.Comma)
                                self.state = 1031
                                self.assignmentexpression()
                                self.state = 1036
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass
                        elif token in [CPP14Parser.LeftBrace]:
                            self.state = 1037
                            self.match(CPP14Parser.LeftBrace)
                            self.state = 1042
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (
                                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (
                                        1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                        1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                        1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                                1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (
                                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                                1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 1038
                                self.initializerlist()
                                self.state = 1040
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la == CPP14Parser.Comma:
                                    self.state = 1039
                                    self.match(CPP14Parser.Comma)

                            self.state = 1044
                            self.match(CPP14Parser.RightBrace)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    self.state = 1049
                    self.match(CPP14Parser.RightParen)
                    self.state = 1050
                    self.statement()
                    pass

                elif la_ == 8:
                    self.state = 1052
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Break or _la == CPP14Parser.Continue):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1053
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 9:
                    self.state = 1054
                    self.match(CPP14Parser.Return)
                    self.state = 1073
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Semi, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                                 CPP14Parser.Characterliteral, CPP14Parser.Stringliteral,
                                 CPP14Parser.Userdefinedliteral, CPP14Parser.Userdefinedstringliteral]:
                        self.state = 1063
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                                1 << (CPP14Parser.Not - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1055
                            self.assignmentexpression()
                            self.state = 1060
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la == CPP14Parser.Comma:
                                self.state = 1056
                                self.match(CPP14Parser.Comma)
                                self.state = 1057
                                self.assignmentexpression()
                                self.state = 1062
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 1065
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1070
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1066
                            self.initializerlist()
                            self.state = 1068
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 1067
                                self.match(CPP14Parser.Comma)

                        self.state = 1072
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1075
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 10:
                    self.state = 1076
                    self.gotostatement()
                    pass

                elif la_ == 11:
                    self.state = 1077
                    self.match(CPP14Parser.Using)
                    self.state = 1078
                    self.match(CPP14Parser.Namespace)
                    self.state = 1080
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 184, self._ctx)
                    if la_ == 1:
                        self.state = 1079
                        self.nestednamespecifier()

                    self.state = 1082
                    self.match(CPP14Parser.Identifier)
                    self.state = 1083
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 12:
                    self.state = 1084
                    self.tryblock()
                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1087
                    self.attributespecifier()
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 187, self._ctx)
                if la_ == 1:
                    self.state = 1092
                    self.declspecifierseq()

                self.state = 1095
                self.declarator()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                    1 << (CPP14Parser.Assign - 55)))) != 0):
                    self.state = 1096
                    self.initializer()

                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1099
                    self.match(CPP14Parser.Comma)
                    self.state = 1100
                    self.declarator()
                    self.state = 1102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1101
                        self.initializer()

                    self.state = 1108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1109
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 191, self._ctx)
                if la_ == 1:
                    self.state = 1111
                    self.declspecifierseq()

                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1114
                    self.declarator()
                    self.state = 1116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1115
                        self.initializer()

                    self.state = 1125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1118
                        self.match(CPP14Parser.Comma)
                        self.state = 1119
                        self.declarator()
                        self.state = 1121
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1120
                            self.initializer()

                        self.state = 1127
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1130
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1131
                self.match(CPP14Parser.Asm)
                self.state = 1132
                self.match(CPP14Parser.LeftParen)
                self.state = 1133
                self.match(CPP14Parser.Stringliteral)
                self.state = 1134
                self.match(CPP14Parser.RightParen)
                self.state = 1135
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1136
                self.match(CPP14Parser.Namespace)
                self.state = 1137
                self.match(CPP14Parser.Identifier)
                self.state = 1138
                self.match(CPP14Parser.Assign)
                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 196, self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.nestednamespecifier()

                self.state = 1142
                self.match(CPP14Parser.Identifier)
                self.state = 1143
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1144
                self.match(CPP14Parser.Using)
                self.state = 1175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 203, self._ctx)
                if la_ == 1:
                    self.state = 1150
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1145
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1147
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1146
                            self.match(CPP14Parser.Typename)

                        self.state = 1149
                        self.nestednamespecifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1152
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 1153
                    self.match(CPP14Parser.Identifier)
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1154
                        self.attributespecifier()
                        self.state = 1159
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1160
                    self.match(CPP14Parser.Assign)
                    self.state = 1162
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1161
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1164
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)

                    self.state = 1169
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1166
                            self.attributespecifier()
                        self.state = 1171
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)

                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1172
                        self.abstractdeclarator()

                    pass

                self.state = 1177
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1179
                self.match(CPP14Parser.Static_assert)
                self.state = 1180
                self.match(CPP14Parser.LeftParen)
                self.state = 1181
                self.constantexpression()
                self.state = 1182
                self.match(CPP14Parser.Comma)
                self.state = 1183
                self.match(CPP14Parser.Stringliteral)
                self.state = 1184
                self.match(CPP14Parser.RightParen)
                self.state = 1185
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1187
                self.match(CPP14Parser.Enum)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1188
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1191
                    self.attributespecifier()
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1197
                self.match(CPP14Parser.Identifier)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1198
                    self.match(CPP14Parser.Colon)
                    self.state = 1200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1199
                        self.typespecifier()
                        self.state = 1202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                                    (1 << CPP14Parser.Auto) | (
                                                                    1 << CPP14Parser.Class) | (
                                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                                    1 << CPP14Parser.Decltype) | (
                                                        1 << CPP14Parser.Enum) | (
                                                            1 << CPP14Parser.Types) | (
                                                1 << CPP14Parser.SignedUnsigned) | (
                                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1204
                        self.attributespecifier()
                        self.state = 1209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1212
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CasestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_casestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCasestatement"):
                listener.enterCasestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCasestatement"):
                listener.exitCasestatement(self)

    def casestatement(self):

        localctx = CPP14Parser.CasestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_casestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Case]:
                self.state = 1215
                self.match(CPP14Parser.Case)
                self.state = 1216
                self.constantexpression()
                pass
            elif token in [CPP14Parser.Default]:
                self.state = 1217
                self.match(CPP14Parser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1220
            self.match(CPP14Parser.Colon)
            self.state = 1221
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElsestatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elsestatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElsestatement"):
                listener.enterElsestatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElsestatement"):
                listener.exitElsestatement(self)

    def elsestatement(self):

        localctx = CPP14Parser.ElsestatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_elsestatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(CPP14Parser.Else)
            self.state = 1224
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_condition)
        self._la = 0  # Token type
        try:
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.assignmentexpression()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1227
                    self.match(CPP14Parser.Comma)
                    self.state = 1228
                    self.assignmentexpression()
                    self.state = 1233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1234
                    self.attributespecifier()
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1240
                self.declspecifierseq()
                self.state = 1241
                self.declarator()
                self.state = 1255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 216, self._ctx)
                if la_ == 1:
                    self.state = 1242
                    self.match(CPP14Parser.Assign)
                    self.state = 1243
                    self.assignmentexpression()
                    pass

                elif la_ == 2:
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 1244
                        self.match(CPP14Parser.Assign)

                    self.state = 1247
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1248
                        self.initializerlist()
                        self.state = 1250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 1249
                            self.match(CPP14Parser.Comma)

                    self.state = 1254
                    self.match(CPP14Parser.RightBrace)
                    pass

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForinitstatement"):
                listener.enterForinitstatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForinitstatement"):
                listener.exitForinitstatement(self)

    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_forinitstatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and (
                            (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                    1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 1259
                    self.assignmentexpression()
                    self.state = 1264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1260
                        self.match(CPP14Parser.Comma)
                        self.state = 1261
                        self.assignmentexpression()
                        self.state = 1266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
                if la_ == 1:
                    self.state = 1269
                    self.declspecifierseq()

                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1272
                    self.declarator()
                    self.state = 1274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1273
                        self.initializer()

                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1276
                        self.match(CPP14Parser.Comma)
                        self.state = 1277
                        self.declarator()
                        self.state = 1279
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1278
                            self.initializer()

                        self.state = 1285
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1288
                    self.attributespecifier()
                    self.state = 1291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 226, self._ctx)
                if la_ == 1:
                    self.state = 1293
                    self.declspecifierseq()

                self.state = 1296
                self.declarator()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                    1 << (CPP14Parser.Assign - 55)))) != 0):
                    self.state = 1297
                    self.initializer()

                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1300
                    self.match(CPP14Parser.Comma)
                    self.state = 1301
                    self.declarator()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1302
                        self.initializer()

                    self.state = 1309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            self.state = 1312
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotostatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_gotostatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGotostatement"):
                listener.enterGotostatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGotostatement"):
                listener.exitGotostatement(self)

    def gotostatement(self):

        localctx = CPP14Parser.GotostatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_gotostatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(CPP14Parser.Goto)
            self.state = 1315
            self.match(CPP14Parser.Identifier)
            self.state = 1316
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, i)

        def initializer(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def declaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.DeclarationContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declaration)
        self._la = 0  # Token type
        try:
            self.state = 1548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1318
                    self.declspecifierseq()

                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1321
                    self.declarator()
                    self.state = 1323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1322
                        self.initializer()

                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1325
                        self.match(CPP14Parser.Comma)
                        self.state = 1326
                        self.declarator()
                        self.state = 1328
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1327
                            self.initializer()

                        self.state = 1334
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1337
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1338
                    self.attributespecifier()
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket):
                        break

                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                        (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1344
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
                    if la_ == 1:
                        self.state = 1343
                        self.declspecifierseq()

                    self.state = 1346
                    self.declarator()
                    self.state = 1348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                    (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                        1 << (CPP14Parser.Assign - 55)))) != 0):
                        self.state = 1347
                        self.initializer()

                    self.state = 1357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1350
                        self.match(CPP14Parser.Comma)
                        self.state = 1351
                        self.declarator()
                        self.state = 1353
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & (
                                        (1 << (CPP14Parser.LeftParen - 55)) | (1 << (CPP14Parser.LeftBrace - 55)) | (
                                            1 << (CPP14Parser.Assign - 55)))) != 0):
                            self.state = 1352
                            self.initializer()

                        self.state = 1359
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1362
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1364
                    self.attributespecifier()
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1422
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Using]:
                    self.state = 1370
                    self.match(CPP14Parser.Using)
                    self.state = 1371
                    self.match(CPP14Parser.Namespace)
                    self.state = 1373
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
                    if la_ == 1:
                        self.state = 1372
                        self.nestednamespecifier()

                    self.state = 1375
                    self.match(CPP14Parser.Identifier)
                    self.state = 1376
                    self.match(CPP14Parser.Semi)
                    pass
                elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype,
                               CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Types,
                               CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                               CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union,
                               CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1378
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 244, self._ctx)
                    if la_ == 1:
                        self.state = 1377
                        self.declspecifierseq()

                    self.state = 1380
                    self.declarator()
                    self.state = 1384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 1381
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1420
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 1389
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1387
                            self.match(CPP14Parser.Colon)
                            self.state = 1388
                            self.meminitializerlist()

                        self.state = 1391
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1395
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.Return) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Switch) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                            (1 << (
                                                                                                CPP14Parser.And - 67)) | (
                                                                                                    1 << (
                                                                                                    CPP14Parser.Or - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Tilde - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Not - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.AndAnd - 67)) | (
                                                                                    1 << (
                                                                                    CPP14Parser.PlusPlus - 67)) | (
                                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1392
                            self.statement()
                            self.state = 1397
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1398
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 1399
                        self.match(CPP14Parser.Try)
                        self.state = 1402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 1400
                            self.match(CPP14Parser.Colon)
                            self.state = 1401
                            self.meminitializerlist()

                        self.state = 1404
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 1408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.Return) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Switch) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                            (1 << (
                                                                                                CPP14Parser.And - 67)) | (
                                                                                                    1 << (
                                                                                                    CPP14Parser.Or - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Tilde - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Not - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.AndAnd - 67)) | (
                                                                                    1 << (
                                                                                    CPP14Parser.PlusPlus - 67)) | (
                                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1405
                            self.statement()
                            self.state = 1410
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1411
                        self.match(CPP14Parser.RightBrace)
                        self.state = 1413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1412
                            self.handler()
                            self.state = 1415
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.Catch):
                                break

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 1417
                        self.match(CPP14Parser.Assign)
                        self.state = 1418
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1419
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1424
                self.match(CPP14Parser.Asm)
                self.state = 1425
                self.match(CPP14Parser.LeftParen)
                self.state = 1426
                self.match(CPP14Parser.Stringliteral)
                self.state = 1427
                self.match(CPP14Parser.RightParen)
                self.state = 1428
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1429
                self.match(CPP14Parser.Namespace)
                self.state = 1430
                self.match(CPP14Parser.Identifier)
                self.state = 1431
                self.match(CPP14Parser.Assign)
                self.state = 1433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 253, self._ctx)
                if la_ == 1:
                    self.state = 1432
                    self.nestednamespecifier()

                self.state = 1435
                self.match(CPP14Parser.Identifier)
                self.state = 1436
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1437
                self.match(CPP14Parser.Using)
                self.state = 1468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 260, self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Doublecolon]:
                        self.state = 1438
                        self.match(CPP14Parser.Doublecolon)
                        pass
                    elif token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                        self.state = 1440
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Typename:
                            self.state = 1439
                            self.match(CPP14Parser.Typename)

                        self.state = 1442
                        self.nestednamespecifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1445
                    self.unqualifiedid()
                    pass

                elif la_ == 2:
                    self.state = 1446
                    self.match(CPP14Parser.Identifier)
                    self.state = 1450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1447
                        self.attributespecifier()
                        self.state = 1452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1453
                    self.match(CPP14Parser.Assign)
                    self.state = 1455
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1454
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1457
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 257, self._ctx)

                    self.state = 1462
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1459
                            self.attributespecifier()
                        self.state = 1464
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 258, self._ctx)

                    self.state = 1466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1465
                        self.abstractdeclarator()

                    pass

                self.state = 1470
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1472
                self.match(CPP14Parser.Static_assert)
                self.state = 1473
                self.match(CPP14Parser.LeftParen)
                self.state = 1474
                self.constantexpression()
                self.state = 1475
                self.match(CPP14Parser.Comma)
                self.state = 1476
                self.match(CPP14Parser.Stringliteral)
                self.state = 1477
                self.match(CPP14Parser.RightParen)
                self.state = 1478
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1480
                self.match(CPP14Parser.Enum)
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1481
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1484
                    self.attributespecifier()
                    self.state = 1489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1490
                self.match(CPP14Parser.Identifier)
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1491
                    self.match(CPP14Parser.Colon)
                    self.state = 1493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1492
                        self.typespecifier()
                        self.state = 1495
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                                    (1 << CPP14Parser.Auto) | (
                                                                    1 << CPP14Parser.Class) | (
                                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                                    1 << CPP14Parser.Decltype) | (
                                                        1 << CPP14Parser.Enum) | (
                                                            1 << CPP14Parser.Types) | (
                                                1 << CPP14Parser.SignedUnsigned) | (
                                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1497
                        self.attributespecifier()
                        self.state = 1502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1505
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 268, self._ctx)
                if la_ == 1:
                    self.state = 1506
                    self.match(CPP14Parser.Template)
                    self.state = 1507
                    self.match(CPP14Parser.Less)
                    self.state = 1509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Decltype) | (
                                1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                                1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                                1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                        self.state = 1508
                        self.templateparameterlist()

                    self.state = 1511
                    self.match(CPP14Parser.Greater)
                    pass

                elif la_ == 2:
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Extern:
                        self.state = 1512
                        self.match(CPP14Parser.Extern)

                    self.state = 1515
                    self.match(CPP14Parser.Template)
                    pass

                self.state = 1518
                self.declaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1519
                self.match(CPP14Parser.Extern)
                self.state = 1520
                self.match(CPP14Parser.Stringliteral)
                self.state = 1530
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.LeftBrace]:
                    self.state = 1521
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 1525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                                1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                        1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (
                                1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.Specifier) | (1 << CPP14Parser.SignedUnsigned) | (
                                1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                        1 << CPP14Parser.Template) | (
                                1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                                1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Star))) != 0) or (
                            (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                                    1 << (CPP14Parser.AndAnd - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                                            1 << (CPP14Parser.Ellipsis - 67)) | (
                                1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 1522
                        self.declaration()
                        self.state = 1527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1528
                    self.match(CPP14Parser.RightBrace)
                    pass
                elif token in [CPP14Parser.Alignas, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Class,
                               CPP14Parser.ConstOrVolatile, CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Extern,
                               CPP14Parser.Inline, CPP14Parser.Types, CPP14Parser.Mutable, CPP14Parser.Namespace,
                               CPP14Parser.Operator, CPP14Parser.Specifier, CPP14Parser.SignedUnsigned,
                               CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template,
                               CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Using, CPP14Parser.Virtual,
                               CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And,
                               CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Semi, CPP14Parser.Ellipsis,
                               CPP14Parser.Identifier]:
                    self.state = 1529
                    self.declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Inline:
                    self.state = 1532
                    self.match(CPP14Parser.Inline)

                self.state = 1535
                self.match(CPP14Parser.Namespace)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1536
                    self.match(CPP14Parser.Identifier)

                self.state = 1539
                self.match(CPP14Parser.LeftBrace)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (
                            1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (
                            1 << CPP14Parser.Inline) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Static_assert) | (
                    1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Template) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (
                            1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                    (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                                        1 << (CPP14Parser.AndAnd - 67)) | (
                                            1 << (CPP14Parser.Semi - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 1540
                    self.declaration()
                    self.state = 1545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1546
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1547
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Specifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Specifier)
            else:
                return self.getToken(CPP14Parser.Specifier, i)

        def Mutable(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Mutable)
            else:
                return self.getToken(CPP14Parser.Mutable, i)

        def Extern(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Extern)
            else:
                return self.getToken(CPP14Parser.Extern, i)

        def Virtual(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Virtual)
            else:
                return self.getToken(CPP14Parser.Virtual, i)

        def Inline(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Inline)
            else:
                return self.getToken(CPP14Parser.Inline, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclspecifierseq"):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclspecifierseq"):
                listener.exitDeclspecifierseq(self)

    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declspecifierseq)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1552
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Extern, CPP14Parser.Inline, CPP14Parser.Mutable, CPP14Parser.Specifier,
                                 CPP14Parser.Virtual]:
                        self.state = 1550
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                                                    1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                                            1 << CPP14Parser.Virtual))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                                   CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types,
                                   CPP14Parser.SignedUnsigned, CPP14Parser.Struct, CPP14Parser.Typename,
                                   CPP14Parser.Union, CPP14Parser.Identifier]:
                        self.state = 1551
                        self.typespecifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

            self.state = 1559
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1556
                    self.attributespecifier()
                self.state = 1561
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 277, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def basespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BasespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BasespecifierContext, i)

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypespecifier"):
                listener.enterTypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypespecifier"):
                listener.exitTypespecifier(self)

    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 300, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1562
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1563
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1564
                    self.attributespecifier()
                    self.state = 1569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1571
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
                    if la_ == 1:
                        self.state = 1570
                        self.nestednamespecifier()

                    self.state = 1573
                    self.match(CPP14Parser.Identifier)
                    self.state = 1579
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Less:
                        self.state = 1574
                        self.match(CPP14Parser.Less)
                        self.state = 1576
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (
                                    1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                    1 << CPP14Parser.Enum) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (1 << CPP14Parser.This) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1575
                            self.templateargumentlist()

                        self.state = 1578
                        self.match(CPP14Parser.Greater)

                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Final:
                        self.state = 1581
                        self.match(CPP14Parser.Final)

                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1586
                    self.match(CPP14Parser.Colon)
                    self.state = 1587
                    self.basespecifier()
                    self.state = 1589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1588
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 1598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1591
                        self.match(CPP14Parser.Comma)
                        self.state = 1592
                        self.basespecifier()
                        self.state = 1594
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1593
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 1600
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1603
                self.match(CPP14Parser.LeftBrace)
                self.state = 1607
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                             CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Extern, CPP14Parser.Inline,
                             CPP14Parser.Types, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Specifier,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Static_assert, CPP14Parser.Struct,
                             CPP14Parser.Template, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.Using,
                             CPP14Parser.Virtual, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star,
                             CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.AndAnd, CPP14Parser.Colon,
                             CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                    self.state = 1604
                    self.memberdeclaration()
                    pass
                elif token in [CPP14Parser.PrivateProtectedPublic]:
                    self.state = 1605
                    self.match(CPP14Parser.PrivateProtectedPublic)
                    self.state = 1606
                    self.match(CPP14Parser.Colon)
                    pass
                elif token in [CPP14Parser.RightBrace]:
                    pass
                else:
                    pass
                self.state = 1609
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1610
                self.match(CPP14Parser.Enum)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Class or _la == CPP14Parser.Struct:
                    self.state = 1611
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Struct):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 1614
                    self.attributespecifier()
                    self.state = 1619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 1621
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 291, self._ctx)
                    if la_ == 1:
                        self.state = 1620
                        self.nestednamespecifier()

                    self.state = 1623
                    self.match(CPP14Parser.Identifier)

                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Colon:
                    self.state = 1626
                    self.match(CPP14Parser.Colon)
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1627
                        self.typespecifier()
                        self.state = 1630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                                    (1 << CPP14Parser.Auto) | (
                                                                    1 << CPP14Parser.Class) | (
                                                                        1 << CPP14Parser.ConstOrVolatile) | (
                                                                    1 << CPP14Parser.Decltype) | (
                                                        1 << CPP14Parser.Enum) | (
                                                            1 << CPP14Parser.Types) | (
                                                1 << CPP14Parser.SignedUnsigned) | (
                                                    1 << CPP14Parser.Struct) | (1 << CPP14Parser.Typename) | (
                                            1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier):
                            break

                    self.state = 1635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1632
                        self.attributespecifier()
                        self.state = 1637
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1640
                self.match(CPP14Parser.LeftBrace)
                self.state = 1641
                self.match(CPP14Parser.Identifier)
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 1642
                    self.match(CPP14Parser.Assign)
                    self.state = 1643
                    self.constantexpression()

                self.state = 1654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 298, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 1646
                        self.match(CPP14Parser.Comma)
                        self.state = 1647
                        self.match(CPP14Parser.Identifier)
                        self.state = 1650
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Assign:
                            self.state = 1648
                            self.match(CPP14Parser.Assign)
                            self.state = 1649
                            self.constantexpression()

                    self.state = 1656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 298, self._ctx)

                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Comma:
                    self.state = 1657
                    self.match(CPP14Parser.Comma)

                self.state = 1660
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def ConstOrVolatile(self):
            return self.getToken(CPP14Parser.ConstOrVolatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTrailingtypespecifier"):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTrailingtypespecifier"):
                listener.exitTrailingtypespecifier(self)

    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_trailingtypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Decltype, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1663
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Class) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Union))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1687
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 306, self._ctx)
                if la_ == 1:
                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                        self.state = 1665
                        self.attributespecifier()
                        self.state = 1670
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1672
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 302, self._ctx)
                    if la_ == 1:
                        self.state = 1671
                        self.nestednamespecifier()

                    self.state = 1674
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1679
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 304, self._ctx)
                    if la_ == 1:
                        self.state = 1675
                        self.nestednamespecifier()
                        self.state = 1677
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 1676
                            self.match(CPP14Parser.Template)

                    self.state = 1681
                    self.match(CPP14Parser.Identifier)
                    self.state = 1682
                    self.match(CPP14Parser.Less)
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1683
                        self.templateargumentlist()

                    self.state = 1686
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.Enum]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1689
                self.match(CPP14Parser.Enum)
                self.state = 1691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 307, self._ctx)
                if la_ == 1:
                    self.state = 1690
                    self.nestednamespecifier()

                self.state = 1693
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.Typename]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1694
                self.match(CPP14Parser.Typename)
                self.state = 1695
                self.nestednamespecifier()
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 310, self._ctx)
                if la_ == 1:
                    self.state = 1696
                    self.match(CPP14Parser.Identifier)
                    pass

                elif la_ == 2:
                    self.state = 1698
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1697
                        self.match(CPP14Parser.Template)

                    self.state = 1700
                    self.match(CPP14Parser.Identifier)
                    self.state = 1701
                    self.match(CPP14Parser.Less)
                    self.state = 1703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1702
                        self.templateargumentlist()

                    self.state = 1705
                    self.match(CPP14Parser.Greater)
                    pass

                pass
            elif token in [CPP14Parser.ConstOrVolatile]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1708
                self.match(CPP14Parser.ConstOrVolatile)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Types(self):
            return self.getToken(CPP14Parser.Types, 0)

        def SignedUnsigned(self):
            return self.getToken(CPP14Parser.SignedUnsigned, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpletypespecifier"):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpletypespecifier"):
                listener.exitSimpletypespecifier(self)

    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_simpletypespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 318, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 312, self._ctx)
                if la_ == 1:
                    self.state = 1711
                    self.nestednamespecifier()

                self.state = 1714
                self.match(CPP14Parser.Identifier)
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 314, self._ctx)
                if la_ == 1:
                    self.state = 1715
                    self.match(CPP14Parser.Less)
                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 1716
                        self.templateargumentlist()

                    self.state = 1719
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1722
                self.nestednamespecifier()
                self.state = 1723
                self.match(CPP14Parser.Template)
                self.state = 1724
                self.match(CPP14Parser.Identifier)
                self.state = 1725
                self.match(CPP14Parser.Less)
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                            1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 1726
                    self.templateargumentlist()

                self.state = 1729
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1731
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Types) | (
                            1 << CPP14Parser.SignedUnsigned))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1732
                self.match(CPP14Parser.Decltype)
                self.state = 1733
                self.match(CPP14Parser.LeftParen)
                self.state = 1743
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 317, self._ctx)
                if la_ == 1:
                    self.state = 1734
                    self.assignmentexpression()
                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1735
                        self.match(CPP14Parser.Comma)
                        self.state = 1736
                        self.assignmentexpression()
                        self.state = 1741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1742
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 1745
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAttributespecifier"):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAttributespecifier"):
                listener.exitAttributespecifier(self)

    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_attributespecifier)
        self._la = 0  # Token type
        try:
            self.state = 1822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1748
                self.match(CPP14Parser.LeftBracket)
                self.state = 1749
                self.match(CPP14Parser.LeftBracket)
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 1750
                    self.match(CPP14Parser.Identifier)
                    self.state = 1753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Doublecolon:
                        self.state = 1751
                        self.match(CPP14Parser.Doublecolon)
                        self.state = 1752
                        self.match(CPP14Parser.Identifier)

                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.LeftParen:
                        self.state = 1755
                        self.match(CPP14Parser.LeftParen)
                        self.state = 1759
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                            1 << CPP14Parser.LeftBrace))) != 0):
                            self.state = 1756
                            self.balancedtoken()
                            self.state = 1761
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1762
                        self.match(CPP14Parser.RightParen)

                    self.state = 1766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1765
                        self.match(CPP14Parser.Ellipsis)

                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Comma:
                    self.state = 1770
                    self.match(CPP14Parser.Comma)
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 1771
                        self.match(CPP14Parser.Identifier)
                        self.state = 1774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Doublecolon:
                            self.state = 1772
                            self.match(CPP14Parser.Doublecolon)
                            self.state = 1773
                            self.match(CPP14Parser.Identifier)

                        self.state = 1784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.LeftParen:
                            self.state = 1776
                            self.match(CPP14Parser.LeftParen)
                            self.state = 1780
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                            (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                                1 << CPP14Parser.LeftBrace))) != 0):
                                self.state = 1777
                                self.balancedtoken()
                                self.state = 1782
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1783
                            self.match(CPP14Parser.RightParen)

                        self.state = 1787
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1786
                            self.match(CPP14Parser.Ellipsis)

                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1796
                self.match(CPP14Parser.RightBracket)
                self.state = 1797
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1798
                self.match(CPP14Parser.Alignas)
                self.state = 1799
                self.match(CPP14Parser.LeftParen)
                self.state = 1815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 333, self._ctx)
                if la_ == 1:
                    self.state = 1801
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1800
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1803
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 330, self._ctx)

                    self.state = 1808
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 331, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1805
                            self.attributespecifier()
                        self.state = 1810
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 331, self._ctx)

                    self.state = 1812
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 332, self._ctx)
                    if la_ == 1:
                        self.state = 1811
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 1814
                    self.constantexpression()
                    pass

                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1817
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1820
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.BalancedtokenContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBalancedtoken"):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBalancedtoken"):
                listener.exitBalancedtoken(self)

    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_balancedtoken)
        self._la = 0  # Token type
        try:
            self.state = 1848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1824
                self.match(CPP14Parser.LeftParen)
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1825
                    self.balancedtoken()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1831
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1832
                self.match(CPP14Parser.LeftBracket)
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1833
                    self.balancedtoken()
                    self.state = 1838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1839
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1840
                self.match(CPP14Parser.LeftBrace)
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                (1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace))) != 0):
                    self.state = 1841
                    self.balancedtoken()
                    self.state = 1846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1847
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclarator"):
                listener.enterDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclarator"):
                listener.exitDeclarator(self)

    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_declarator)
        try:
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 344, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1850
                        self.ptroperator()
                    self.state = 1855
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 340, self._ctx)

                self.state = 1856
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.noptrdeclarator(0)
                self.state = 1858
                self.parametersandqualifiers()
                self.state = 1859
                self.match(CPP14Parser.Arrow)
                self.state = 1861
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1860
                        self.trailingtypespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1863
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 341, self._ctx)

                self.state = 1868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 342, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1865
                        self.attributespecifier()
                    self.state = 1870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 342, self._ctx)

                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 343, self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.abstractdeclarator()

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrdeclarator"):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrdeclarator"):
                listener.exitNoptrdeclarator(self)

    def noptrdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_noptrdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Ellipsis,
                         CPP14Parser.Identifier]:
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1877
                    self.match(CPP14Parser.Ellipsis)

                self.state = 1884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 347, self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self.nestednamespecifier()
                    self.state = 1882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 1881
                        self.match(CPP14Parser.Template)

                self.state = 1886
                self.unqualifiedid()
                self.state = 1890
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 348, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1887
                        self.attributespecifier()
                    self.state = 1892
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 348, self._ctx)

                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1893
                self.match(CPP14Parser.LeftParen)
                self.state = 1897
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 349, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1894
                        self.ptroperator()
                    self.state = 1899
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 349, self._ctx)

                self.state = 1900
                self.noptrdeclarator(0)
                self.state = 1901
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 354, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                    self.state = 1905
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1918
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 1906
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 1907
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1909
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                                1 << (CPP14Parser.Not - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 1908
                            self.constantexpression()

                        self.state = 1911
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1915
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 352, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1912
                                self.attributespecifier()
                            self.state = 1917
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 352, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 1924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 354, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParametersandqualifiers"):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParametersandqualifiers"):
                listener.exitParametersandqualifiers(self)

    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parametersandqualifiers)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1925
            self.match(CPP14Parser.LeftParen)
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 359, self._ctx)
            if la_ == 1:
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                    1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Enum) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Inline) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                    1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (1 << CPP14Parser.Virtual) | (
                            1 << CPP14Parser.LeftBracket))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 1926
                    self.parameterdeclaration()
                    self.state = 1931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1927
                        self.match(CPP14Parser.Comma)
                        self.state = 1928
                        self.parameterdeclaration()
                        self.state = 1933
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 1936
                    self.match(CPP14Parser.Ellipsis)

                pass

            elif la_ == 2:
                self.state = 1939
                self.parameterdeclaration()
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 358, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1940
                        self.match(CPP14Parser.Comma)
                        self.state = 1941
                        self.parameterdeclaration()
                    self.state = 1946
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 358, self._ctx)

                self.state = 1947
                self.match(CPP14Parser.Comma)
                self.state = 1948
                self.match(CPP14Parser.Ellipsis)
                pass

            self.state = 1952
            self.match(CPP14Parser.RightParen)
            self.state = 1956
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 360, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1953
                    self.match(CPP14Parser.ConstOrVolatile)
                self.state = 1958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 360, self._ctx)

            self.state = 1960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 361, self._ctx)
            if la_ == 1:
                self.state = 1959
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 2014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 373, self._ctx)
            if la_ == 1:
                self.state = 1962
                self.match(CPP14Parser.Throw)
                self.state = 1963
                self.match(CPP14Parser.LeftParen)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Auto) | (1 << CPP14Parser.Class) | (
                            1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Decltype) | (
                    1 << CPP14Parser.Enum) | (
                            1 << CPP14Parser.Types) | (1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Typename) | (
                    1 << CPP14Parser.Union))) != 0) or _la == CPP14Parser.Identifier:
                    self.state = 1965
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1964
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1967
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 362, self._ctx)

                    self.state = 1972
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 363, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1969
                            self.attributespecifier()
                        self.state = 1974
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 363, self._ctx)

                    self.state = 1976
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 364, self._ctx)
                    if la_ == 1:
                        self.state = 1975
                        self.abstractdeclarator()

                    self.state = 1979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 1978
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 1981
                        self.match(CPP14Parser.Comma)
                        self.state = 1983
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1982
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1985
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 366, self._ctx)

                        self.state = 1990
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 367, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1987
                                self.attributespecifier()
                            self.state = 1992
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 367, self._ctx)

                        self.state = 1994
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 368, self._ctx)
                        if la_ == 1:
                            self.state = 1993
                            self.abstractdeclarator()

                        self.state = 1997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 1996
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2003
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2006
                self.match(CPP14Parser.RightParen)

            elif la_ == 2:
                self.state = 2007
                self.match(CPP14Parser.Noexcept)
                self.state = 2012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 372, self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.match(CPP14Parser.LeftParen)
                    self.state = 2009
                    self.constantexpression()
                    self.state = 2010
                    self.match(CPP14Parser.RightParen)

            self.state = 2019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2016
                    self.attributespecifier()
                self.state = 2021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 374, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def ConstOrVolatile(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.ConstOrVolatile)
            else:
                return self.getToken(CPP14Parser.ConstOrVolatile, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtroperator"):
                listener.enterPtroperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtroperator"):
                listener.exitPtroperator(self)

    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ptroperator)
        self._la = 0  # Token type
        try:
            self.state = 2045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Decltype or _la == CPP14Parser.Identifier:
                    self.state = 2022
                    self.nestednamespecifier()

                self.state = 2025
                self.match(CPP14Parser.Star)
                self.state = 2029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2026
                        self.attributespecifier()
                    self.state = 2031
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 376, self._ctx)

                self.state = 2035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2032
                        self.match(CPP14Parser.ConstOrVolatile)
                    self.state = 2037
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 377, self._ctx)

                pass
            elif token in [CPP14Parser.And, CPP14Parser.AndAnd]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.And or _la == CPP14Parser.AndAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2039
                        self.attributespecifier()
                    self.state = 2044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 378, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NoptrabstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, i)

        def parametersandqualifiers(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParametersandqualifiersContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, i)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def trailingtypespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TrailingtypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAbstractdeclarator"):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAbstractdeclarator"):
                listener.exitAbstractdeclarator(self)

    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_abstractdeclarator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2048
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 380, self._ctx)
                    if la_ == 1:
                        self.state = 2047
                        self.noptrabstractdeclarator(0)

                    self.state = 2050
                    self.parametersandqualifiers()
                    self.state = 2051
                    self.match(CPP14Parser.Arrow)
                    self.state = 2053
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2052
                            self.trailingtypespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2055
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 381, self._ctx)

                    self.state = 2060
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 382, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2057
                            self.attributespecifier()
                        self.state = 2062
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 382, self._ctx)

                self.state = 2067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 383, self._ctx)

            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Decltype or _la == CPP14Parser.Star or ((((_la - 67)) & ~0x3f) == 0 and (
                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                1 << (CPP14Parser.Identifier - 67)))) != 0):
                self.state = 2068
                self.ptroperator()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.state = 2074
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.state = 2075
                self.match(CPP14Parser.Ellipsis)
                self.state = 2090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2088
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [CPP14Parser.LeftParen]:
                            self.state = 2076
                            self.parametersandqualifiers()
                            pass
                        elif token in [CPP14Parser.LeftBracket]:
                            self.state = 2077
                            self.match(CPP14Parser.LeftBracket)
                            self.state = 2079
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                        1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (
                                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                                1 << CPP14Parser.Types) | (
                                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (
                                1 << CPP14Parser.Nullptr) | (
                                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                        1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Typeid) | (
                                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                                1 << CPP14Parser.Minus) | (
                                        1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (
                                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                                                1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                                self.state = 2078
                                self.constantexpression()

                            self.state = 2081
                            self.match(CPP14Parser.RightBracket)
                            self.state = 2085
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)
                            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 2082
                                    self.attributespecifier()
                                self.state = 2087
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input, 386, self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                    self.state = 2092
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 388, self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext, 0)

        def ptroperator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.PtroperatorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.PtroperatorContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoptrabstractdeclarator"):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoptrabstractdeclarator"):
                listener.exitNoptrabstractdeclarator(self)

    def noptrabstractdeclarator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 393, self._ctx)
            if la_ == 1:
                self.state = 2096
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 2097
                self.match(CPP14Parser.LeftBracket)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                            1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                        (1 << (CPP14Parser.And - 67)) | (
                                                                                1 << (CPP14Parser.Or - 67)) | (
                                                                            1 << (CPP14Parser.Tilde - 67)) | (
                                                                        1 << (CPP14Parser.Not - 67)) | (
                                                                    1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                        1 << (CPP14Parser.Identifier - 67)) | (
                                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                                1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2098
                    self.constantexpression()

                self.state = 2101
                self.match(CPP14Parser.RightBracket)
                self.state = 2105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2102
                        self.attributespecifier()
                    self.state = 2107
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 391, self._ctx)

                pass

            elif la_ == 3:
                self.state = 2108
                self.match(CPP14Parser.LeftParen)
                self.state = 2112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Decltype or _la == CPP14Parser.Star or ((((_la - 67)) & ~0x3f) == 0 and (
                            (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2109
                    self.ptroperator()
                    self.state = 2114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2115
                self.noptrabstractdeclarator(0)
                self.state = 2116
                self.match(CPP14Parser.RightParen)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 2137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                    self.state = 2120
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 2133
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftParen]:
                        self.state = 2121
                        self.parametersandqualifiers()
                        pass
                    elif token in [CPP14Parser.LeftBracket]:
                        self.state = 2122
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 2124
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (
                                    1 << CPP14Parser.Typename) | (1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Plus) | (
                            1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                (1 << (CPP14Parser.And - 67)) | (
                                                                                        1 << (CPP14Parser.Or - 67)) | (
                                                                                    1 << (CPP14Parser.Tilde - 67)) | (
                                                                                1 << (CPP14Parser.Not - 67)) | (
                                                                            1 << (CPP14Parser.PlusPlus - 67)) | (
                                                                        1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2123
                            self.constantexpression()

                        self.state = 2126
                        self.match(CPP14Parser.RightBracket)
                        self.state = 2130
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 395, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2127
                                self.attributespecifier()
                            self.state = 2132
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 395, self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 2139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 397, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterdeclaration"):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterdeclaration"):
                listener.exitParameterdeclaration(self)

    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterdeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2140
                self.attributespecifier()
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2146
            self.declspecifierseq()
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 399, self._ctx)
            if la_ == 1:
                self.state = 2147
                self.declarator()
                pass

            elif la_ == 2:
                self.state = 2148
                self.abstractdeclarator()
                pass

            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Assign:
                self.state = 2151
                self.match(CPP14Parser.Assign)
                self.state = 2161
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                             CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                             CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                             CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                             CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket,
                             CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or,
                             CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus,
                             CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Numberliteral,
                             CPP14Parser.Characterliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                             CPP14Parser.Userdefinedstringliteral]:
                    self.state = 2152
                    self.assignmentexpression()
                    pass
                elif token in [CPP14Parser.LeftBrace]:
                    self.state = 2153
                    self.match(CPP14Parser.LeftBrace)
                    self.state = 2158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.This) | (
                                1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                        1 << CPP14Parser.LeftBrace) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2154
                        self.initializerlist()
                        self.state = 2156
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Comma:
                            self.state = 2155
                            self.match(CPP14Parser.Comma)

                    self.state = 2160
                    self.match(CPP14Parser.RightBrace)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializer"):
                listener.enterInitializer(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializer"):
                listener.exitInitializer(self)

    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_initializer)
        self._la = 0  # Token type
        try:
            self.state = 2182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 407, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.match(CPP14Parser.Assign)
                self.state = 2166
                self.assignmentexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Assign:
                    self.state = 2167
                    self.match(CPP14Parser.Assign)

                self.state = 2170
                self.match(CPP14Parser.LeftBrace)
                self.state = 2175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2171
                    self.initializerlist()
                    self.state = 2173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2172
                        self.match(CPP14Parser.Comma)

                self.state = 2177
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2178
                self.match(CPP14Parser.LeftParen)
                self.state = 2179
                self.initializerlist()
                self.state = 2180
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def initializerlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.InitializerlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInitializerlist"):
                listener.enterInitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInitializerlist"):
                listener.exitInitializerlist(self)

    def initializerlist(self):

        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                         CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                         CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.Typeid,
                         CPP14Parser.Typename, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus,
                         CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde,
                         CPP14Parser.Not, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                         CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                         CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                         CPP14Parser.Userdefinedstringliteral]:
                self.state = 2184
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 2185
                self.match(CPP14Parser.LeftBrace)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2186
                    self.initializerlist()
                    self.state = 2188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2187
                        self.match(CPP14Parser.Comma)

                self.state = 2192
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2195
                self.match(CPP14Parser.Ellipsis)

            self.state = 2215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2198
                    self.match(CPP14Parser.Comma)
                    self.state = 2208
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Cast, CPP14Parser.Decltype,
                                 CPP14Parser.Delete, CPP14Parser.TrueFalse, CPP14Parser.Types, CPP14Parser.New,
                                 CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator,
                                 CPP14Parser.SignedUnsigned, CPP14Parser.Sizeof, CPP14Parser.This, CPP14Parser.Throw,
                                 CPP14Parser.Typeid, CPP14Parser.Typename, CPP14Parser.LeftParen,
                                 CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star,
                                 CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not,
                                 CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon,
                                 CPP14Parser.Identifier, CPP14Parser.Numberliteral, CPP14Parser.Characterliteral,
                                 CPP14Parser.Stringliteral, CPP14Parser.Userdefinedliteral,
                                 CPP14Parser.Userdefinedstringliteral]:
                        self.state = 2199
                        self.assignmentexpression()
                        pass
                    elif token in [CPP14Parser.LeftBrace]:
                        self.state = 2200
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2201
                            self.initializerlist()
                            self.state = 2203
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 2202
                                self.match(CPP14Parser.Comma)

                        self.state = 2207
                        self.match(CPP14Parser.RightBrace)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2210
                        self.match(CPP14Parser.Ellipsis)

                self.state = 2217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 416, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext, 0)

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def memberdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.MemberdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext, i)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclaration"):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclaration"):
                listener.exitMemberdeclaration(self)

    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_memberdeclaration)
        self._la = 0  # Token type
        try:
            self.state = 2333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 435, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2221
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2218
                        self.attributespecifier()
                    self.state = 2223
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 417, self._ctx)

                self.state = 2225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 418, self._ctx)
                if la_ == 1:
                    self.state = 2224
                    self.declspecifierseq()

                self.state = 2280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 428, self._ctx)
                if la_ == 1:
                    self.state = 2235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                                (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (
                                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                        (1 << (CPP14Parser.And - 67)) | (
                                                        1 << (CPP14Parser.Tilde - 67)) | (
                                                            1 << (CPP14Parser.AndAnd - 67)) | (
                                                1 << (CPP14Parser.Colon - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2227
                        self.memberdeclarator()
                        self.state = 2232
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == CPP14Parser.Comma:
                            self.state = 2228
                            self.match(CPP14Parser.Comma)
                            self.state = 2229
                            self.memberdeclarator()
                            self.state = 2234
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2237
                    self.match(CPP14Parser.Semi)
                    pass

                elif la_ == 2:
                    self.state = 2238
                    self.declarator()
                    self.state = 2242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2239
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2244
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2278
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [CPP14Parser.LeftBrace, CPP14Parser.Colon]:
                        self.state = 2247
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 2245
                            self.match(CPP14Parser.Colon)
                            self.state = 2246
                            self.meminitializerlist()

                        self.state = 2249
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.Return) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Switch) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                            (1 << (
                                                                                                CPP14Parser.And - 67)) | (
                                                                                                    1 << (
                                                                                                    CPP14Parser.Or - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Tilde - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Not - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.AndAnd - 67)) | (
                                                                                    1 << (
                                                                                    CPP14Parser.PlusPlus - 67)) | (
                                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2250
                            self.statement()
                            self.state = 2255
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2256
                        self.match(CPP14Parser.RightBrace)
                        pass
                    elif token in [CPP14Parser.Try]:
                        self.state = 2257
                        self.match(CPP14Parser.Try)
                        self.state = 2260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Colon:
                            self.state = 2258
                            self.match(CPP14Parser.Colon)
                            self.state = 2259
                            self.meminitializerlist()

                        self.state = 2262
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (
                                    1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (
                                    1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Class) | (
                                    1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                                    1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (
                            1 << CPP14Parser.Default) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                                    1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                                    1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                                    1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (
                            1 << CPP14Parser.Namespace) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (
                            1 << CPP14Parser.Return) | (
                                    1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                                    1 << CPP14Parser.Static_assert) | (1 << CPP14Parser.Struct) | (
                            1 << CPP14Parser.Switch) | (
                                    1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.Union) | (
                                    1 << CPP14Parser.Using) | (1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (
                                    1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                                    1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (
                                    1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                                                            (1 << (
                                                                                                CPP14Parser.And - 67)) | (
                                                                                                    1 << (
                                                                                                    CPP14Parser.Or - 67)) | (
                                                                                                1 << (
                                                                                                CPP14Parser.Tilde - 67)) | (
                                                                                            1 << (
                                                                                            CPP14Parser.Not - 67)) | (
                                                                                        1 << (
                                                                                        CPP14Parser.AndAnd - 67)) | (
                                                                                    1 << (
                                                                                    CPP14Parser.PlusPlus - 67)) | (
                                                                                1 << (CPP14Parser.MinusMinus - 67)) | (
                                                                            1 << (CPP14Parser.Doublecolon - 67)) | (
                                                                        1 << (CPP14Parser.Semi - 67)) | (
                                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                                                1 << (CPP14Parser.Identifier - 67)) | (
                                                            1 << (CPP14Parser.Numberliteral - 67)) | (
                                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                                1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2263
                            self.statement()
                            self.state = 2268
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2269
                        self.match(CPP14Parser.RightBrace)
                        self.state = 2271
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 2270
                            self.handler()
                            self.state = 2273
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la == CPP14Parser.Catch):
                                break

                        pass
                    elif token in [CPP14Parser.Assign]:
                        self.state = 2275
                        self.match(CPP14Parser.Assign)
                        self.state = 2276
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Default or _la == CPP14Parser.Delete):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2277
                        self.match(CPP14Parser.Semi)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2282
                self.match(CPP14Parser.Using)
                self.state = 2288
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CPP14Parser.Decltype, CPP14Parser.Typename, CPP14Parser.Identifier]:
                    self.state = 2284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Typename:
                        self.state = 2283
                        self.match(CPP14Parser.Typename)

                    self.state = 2286
                    self.nestednamespecifier()
                    pass
                elif token in [CPP14Parser.Doublecolon]:
                    self.state = 2287
                    self.match(CPP14Parser.Doublecolon)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2290
                self.unqualifiedid()
                self.state = 2291
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2293
                self.match(CPP14Parser.Static_assert)
                self.state = 2294
                self.match(CPP14Parser.LeftParen)
                self.state = 2295
                self.constantexpression()
                self.state = 2296
                self.match(CPP14Parser.Comma)
                self.state = 2297
                self.match(CPP14Parser.Stringliteral)
                self.state = 2298
                self.match(CPP14Parser.RightParen)
                self.state = 2299
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2301
                self.match(CPP14Parser.Template)
                self.state = 2302
                self.match(CPP14Parser.Less)
                self.state = 2303
                self.templateparameterlist()
                self.state = 2304
                self.match(CPP14Parser.Greater)
                self.state = 2305
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2307
                self.match(CPP14Parser.Using)
                self.state = 2308
                self.match(CPP14Parser.Identifier)
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2309
                    self.attributespecifier()
                    self.state = 2314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2315
                self.match(CPP14Parser.Assign)
                self.state = 2317
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2316
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 432, self._ctx)

                self.state = 2324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 433, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2321
                        self.attributespecifier()
                    self.state = 2326
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 433, self._ctx)

                self.state = 2328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                    (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                            (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                1 << (CPP14Parser.Ellipsis - 67)) | (
                                    1 << (CPP14Parser.Identifier - 67)))) != 0):
                    self.state = 2327
                    self.abstractdeclarator()

                self.state = 2330
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2332
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, 0)

        def Override(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Override)
            else:
                return self.getToken(CPP14Parser.Override, i)

        def Final(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Final)
            else:
                return self.getToken(CPP14Parser.Final, i)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberdeclarator"):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberdeclarator"):
                listener.exitMemberdeclarator(self)

    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_memberdeclarator)
        self._la = 0  # Token type
        try:
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 445, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2335
                self.declarator()
                self.state = 2360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 442, self._ctx)
                if la_ == 1:
                    self.state = 2339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Final or _la == CPP14Parser.Override:
                        self.state = 2336
                        _la = self._input.LA(1)
                        if not (_la == CPP14Parser.Final or _la == CPP14Parser.Override):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2341
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Assign:
                        self.state = 2342
                        self.purespecifier()

                    pass

                elif la_ == 2:
                    self.state = 2358
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 441, self._ctx)
                    if la_ == 1:
                        self.state = 2345
                        self.match(CPP14Parser.Assign)
                        self.state = 2346
                        self.assignmentexpression()

                    elif la_ == 2:
                        self.state = 2348
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Assign:
                            self.state = 2347
                            self.match(CPP14Parser.Assign)

                        self.state = 2350
                        self.match(CPP14Parser.LeftBrace)
                        self.state = 2355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (
                                    1 << CPP14Parser.Auto) | (1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (
                                    1 << CPP14Parser.Delete) | (1 << CPP14Parser.TrueFalse) | (
                            1 << CPP14Parser.Types) | (
                                    1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                                    1 << CPP14Parser.Operator) | (1 << CPP14Parser.SignedUnsigned) | (
                                    1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (1 << CPP14Parser.Throw) | (
                                    1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (
                                    1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (
                                    1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and (
                                    (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                            1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                            1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                            1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                            1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                            self.state = 2351
                            self.initializerlist()
                            self.state = 2353
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Comma:
                                self.state = 2352
                                self.match(CPP14Parser.Comma)

                        self.state = 2357
                        self.match(CPP14Parser.RightBrace)

                    pass

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Identifier:
                    self.state = 2362
                    self.match(CPP14Parser.Identifier)

                self.state = 2368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2365
                    self.attributespecifier()
                    self.state = 2370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2371
                self.match(CPP14Parser.Colon)
                self.state = 2372
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPurespecifier"):
                listener.enterPurespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPurespecifier"):
                listener.exitPurespecifier(self)

    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2375
            self.match(CPP14Parser.Assign)
            self.state = 2376
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if (None if localctx.val is None else localctx.val.text).compareTo('0') != 0:
                raise InputMismatchException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def PrivateProtectedPublic(self):
            return self.getToken(CPP14Parser.PrivateProtectedPublic, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasespecifier"):
                listener.enterBasespecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasespecifier"):
                listener.exitBasespecifier(self)

    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_basespecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                self.state = 2379
                self.attributespecifier()
                self.state = 2384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Virtual]:
                self.state = 2385
                self.match(CPP14Parser.Virtual)
                self.state = 2387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.PrivateProtectedPublic:
                    self.state = 2386
                    self.match(CPP14Parser.PrivateProtectedPublic)

                pass
            elif token in [CPP14Parser.PrivateProtectedPublic]:
                self.state = 2389
                self.match(CPP14Parser.PrivateProtectedPublic)
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Virtual:
                    self.state = 2390
                    self.match(CPP14Parser.Virtual)

                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Identifier]:
                pass
            else:
                pass
            self.state = 2420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 455, self._ctx)
            if la_ == 1:
                self.state = 2396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 450, self._ctx)
                if la_ == 1:
                    self.state = 2395
                    self.nestednamespecifier()

                self.state = 2398
                self.match(CPP14Parser.Identifier)
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2399
                    self.match(CPP14Parser.Less)
                    self.state = 2401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2400
                        self.templateargumentlist()

                    self.state = 2403
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.state = 2406
                self.match(CPP14Parser.Decltype)
                self.state = 2407
                self.match(CPP14Parser.LeftParen)
                self.state = 2417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 454, self._ctx)
                if la_ == 1:
                    self.state = 2408
                    self.assignmentexpression()
                    self.state = 2413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2409
                        self.match(CPP14Parser.Comma)
                        self.state = 2410
                        self.assignmentexpression()
                        self.state = 2415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2416
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2419
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext, 0)

        def assignmentexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AssignmentexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext, i)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMeminitializerlist"):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMeminitializerlist"):
                listener.exitMeminitializerlist(self)

    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_meminitializerlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 461, self._ctx)
            if la_ == 1:
                self.state = 2423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 456, self._ctx)
                if la_ == 1:
                    self.state = 2422
                    self.nestednamespecifier()

                self.state = 2425
                self.match(CPP14Parser.Identifier)
                self.state = 2431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Less:
                    self.state = 2426
                    self.match(CPP14Parser.Less)
                    self.state = 2428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                                1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (
                        1 << CPP14Parser.Cast) | (
                                1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Enum) | (
                                1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                                1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (
                                1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                        1 << CPP14Parser.Struct) | (
                                1 << CPP14Parser.This) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                                1 << CPP14Parser.Union) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (
                                1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and (
                                (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                        1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                                        1 << (CPP14Parser.Not - 67)) | (1 << (CPP14Parser.PlusPlus - 67)) | (
                                        1 << (CPP14Parser.MinusMinus - 67)) | (1 << (CPP14Parser.Doublecolon - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (
                                        1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                        1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                        self.state = 2427
                        self.templateargumentlist()

                    self.state = 2430
                    self.match(CPP14Parser.Greater)

                pass

            elif la_ == 2:
                self.state = 2433
                self.match(CPP14Parser.Decltype)
                self.state = 2434
                self.match(CPP14Parser.LeftParen)
                self.state = 2444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 460, self._ctx)
                if la_ == 1:
                    self.state = 2435
                    self.assignmentexpression()
                    self.state = 2440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == CPP14Parser.Comma:
                        self.state = 2436
                        self.match(CPP14Parser.Comma)
                        self.state = 2437
                        self.assignmentexpression()
                        self.state = 2442
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2443
                    self.match(CPP14Parser.Auto)
                    pass

                self.state = 2446
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 2447
                self.match(CPP14Parser.Identifier)
                pass

            self.state = 2463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.state = 2450
                self.match(CPP14Parser.LeftParen)
                self.state = 2452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2451
                    self.initializerlist()

                self.state = 2454
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.state = 2455
                self.match(CPP14Parser.LeftBrace)
                self.state = 2460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (
                            1 << CPP14Parser.Cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (
                            1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.Types) | (1 << CPP14Parser.New) | (
                            1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (
                            1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.This) | (
                            1 << CPP14Parser.Throw) | (1 << CPP14Parser.Typeid) | (1 << CPP14Parser.Typename) | (
                            1 << CPP14Parser.LeftParen) | (1 << CPP14Parser.LeftBracket) | (
                    1 << CPP14Parser.LeftBrace) | (
                            1 << CPP14Parser.Plus) | (1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                                (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (
                                    1 << (CPP14Parser.Or - 67)) | (1 << (CPP14Parser.Tilde - 67)) | (
                            1 << (CPP14Parser.Not - 67)) | (
                                    1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                    1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                    1 << (CPP14Parser.Numberliteral - 67)) | (
                            1 << (CPP14Parser.Characterliteral - 67)) | (
                                    1 << (CPP14Parser.Stringliteral - 67)) | (
                            1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                    1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                    self.state = 2456
                    self.initializerlist()
                    self.state = 2458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Comma:
                        self.state = 2457
                        self.match(CPP14Parser.Comma)

                self.state = 2462
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2465
                self.match(CPP14Parser.Ellipsis)

            self.state = 2470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Comma:
                self.state = 2468
                self.match(CPP14Parser.Comma)
                self.state = 2469
                self.meminitializerlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def templateparameterlist(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TemplateparameterlistContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext, i)

        def Class(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Class)
            else:
                return self.getToken(CPP14Parser.Class, i)

        def parameterdeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ParameterdeclarationContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext, i)

        def Typename(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Typename)
            else:
                return self.getToken(CPP14Parser.Typename, i)

        def unqualifiedid(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnqualifiedidContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, i)

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Identifier)
            else:
                return self.getToken(CPP14Parser.Identifier, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateparameterlist"):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateparameterlist"):
                listener.exitTemplateparameterlist(self)

    def templateparameterlist(self):

        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_templateparameterlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 481, self._ctx)
            if la_ == 1:
                self.state = 2472
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 474, self._ctx)
                if la_ == 1:
                    self.state = 2474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2473
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2476
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2479
                        self.match(CPP14Parser.Identifier)

                    self.state = 2482
                    self.match(CPP14Parser.Assign)
                    self.state = 2484
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2483
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2486
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 471, self._ctx)

                    self.state = 2491
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 472, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2488
                            self.attributespecifier()
                        self.state = 2493
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 472, self._ctx)

                    self.state = 2495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2494
                        self.abstractdeclarator()

                    pass

                pass

            elif la_ == 2:
                self.state = 2499
                self.match(CPP14Parser.Template)
                self.state = 2500
                self.match(CPP14Parser.Less)
                self.state = 2501
                self.templateparameterlist()
                self.state = 2502
                self.match(CPP14Parser.Greater)
                self.state = 2503
                self.match(CPP14Parser.Class)
                self.state = 2521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 480, self._ctx)
                if la_ == 1:
                    self.state = 2505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Ellipsis:
                        self.state = 2504
                        self.match(CPP14Parser.Ellipsis)

                    self.state = 2508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2507
                        self.match(CPP14Parser.Identifier)

                    pass

                elif la_ == 2:
                    self.state = 2511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Identifier:
                        self.state = 2510
                        self.match(CPP14Parser.Identifier)

                    self.state = 2513
                    self.match(CPP14Parser.Assign)
                    self.state = 2518
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 479, self._ctx)
                    if la_ == 1:
                        self.state = 2514
                        self.nestednamespecifier()
                        self.state = 2516
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2515
                            self.match(CPP14Parser.Template)

                    self.state = 2520
                    self.unqualifiedid()
                    pass

                pass

            elif la_ == 3:
                self.state = 2523
                self.parameterdeclaration()
                pass

            self.state = 2583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 2526
                self.match(CPP14Parser.Comma)
                self.state = 2579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 495, self._ctx)
                if la_ == 1:
                    self.state = 2527
                    _la = self._input.LA(1)
                    if not (_la == CPP14Parser.Class or _la == CPP14Parser.Typename):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2552
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 488, self._ctx)
                    if la_ == 1:
                        self.state = 2529
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2528
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2531
                            self.match(CPP14Parser.Identifier)

                        pass

                    elif la_ == 2:
                        self.state = 2535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2534
                            self.match(CPP14Parser.Identifier)

                        self.state = 2537
                        self.match(CPP14Parser.Assign)
                        self.state = 2539
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2538
                                self.typespecifier()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2541
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 485, self._ctx)

                        self.state = 2546
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 486, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2543
                                self.attributespecifier()
                            self.state = 2548
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input, 486, self._ctx)

                        self.state = 2550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                            (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                                1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                        (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                    (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                        1 << (CPP14Parser.Ellipsis - 67)) | (
                                            1 << (CPP14Parser.Identifier - 67)))) != 0):
                            self.state = 2549
                            self.abstractdeclarator()

                        pass

                    pass

                elif la_ == 2:
                    self.state = 2554
                    self.match(CPP14Parser.Template)
                    self.state = 2555
                    self.match(CPP14Parser.Less)
                    self.state = 2556
                    self.templateparameterlist()
                    self.state = 2557
                    self.match(CPP14Parser.Greater)
                    self.state = 2558
                    self.match(CPP14Parser.Class)
                    self.state = 2576
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 494, self._ctx)
                    if la_ == 1:
                        self.state = 2560
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Ellipsis:
                            self.state = 2559
                            self.match(CPP14Parser.Ellipsis)

                        self.state = 2563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2562
                            self.match(CPP14Parser.Identifier)

                        pass

                    elif la_ == 2:
                        self.state = 2566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Identifier:
                            self.state = 2565
                            self.match(CPP14Parser.Identifier)

                        self.state = 2568
                        self.match(CPP14Parser.Assign)
                        self.state = 2573
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 493, self._ctx)
                        if la_ == 1:
                            self.state = 2569
                            self.nestednamespecifier()
                            self.state = 2571
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == CPP14Parser.Template:
                                self.state = 2570
                                self.match(CPP14Parser.Template)

                        self.state = 2575
                        self.unqualifiedid()
                        pass

                    pass

                elif la_ == 3:
                    self.state = 2578
                    self.parameterdeclaration()
                    pass

                self.state = 2585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantexpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ConstantexpressionContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext, i)

        def unqualifiedid(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.UnqualifiedidContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def abstractdeclarator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AbstractdeclaratorContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, i)

        def nestednamespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.NestednamespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext, i)

        def Template(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Template)
            else:
                return self.getToken(CPP14Parser.Template, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTemplateargumentlist"):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTemplateargumentlist"):
                listener.exitTemplateargumentlist(self)

    def templateargumentlist(self):

        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_templateargumentlist)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 502, self._ctx)
            if la_ == 1:
                self.state = 2587
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2586
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2589
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 497, self._ctx)

                self.state = 2594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 498, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2591
                        self.attributespecifier()
                    self.state = 2596
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 498, self._ctx)

                self.state = 2598
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 499, self._ctx)
                if la_ == 1:
                    self.state = 2597
                    self.abstractdeclarator()

                pass

            elif la_ == 2:
                self.state = 2600
                self.constantexpression()
                pass

            elif la_ == 3:
                self.state = 2605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 501, self._ctx)
                if la_ == 1:
                    self.state = 2601
                    self.nestednamespecifier()
                    self.state = 2603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == CPP14Parser.Template:
                        self.state = 2602
                        self.match(CPP14Parser.Template)

                self.state = 2607
                self.unqualifiedid()
                pass

            self.state = 2611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == CPP14Parser.Ellipsis:
                self.state = 2610
                self.match(CPP14Parser.Ellipsis)

            self.state = 2643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == CPP14Parser.Comma:
                self.state = 2613
                self.match(CPP14Parser.Comma)
                self.state = 2636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 509, self._ctx)
                if la_ == 1:
                    self.state = 2615
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2614
                            self.typespecifier()

                        else:
                            raise NoViableAltException(self)
                        self.state = 2617
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 504, self._ctx)

                    self.state = 2622
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 505, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 2619
                            self.attributespecifier()
                        self.state = 2624
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 505, self._ctx)

                    self.state = 2626
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 506, self._ctx)
                    if la_ == 1:
                        self.state = 2625
                        self.abstractdeclarator()

                    pass

                elif la_ == 2:
                    self.state = 2628
                    self.constantexpression()
                    pass

                elif la_ == 3:
                    self.state = 2633
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 508, self._ctx)
                    if la_ == 1:
                        self.state = 2629
                        self.nestednamespecifier()
                        self.state = 2631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == CPP14Parser.Template:
                            self.state = 2630
                            self.match(CPP14Parser.Template)

                    self.state = 2635
                    self.unqualifiedid()
                    pass

                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == CPP14Parser.Ellipsis:
                    self.state = 2638
                    self.match(CPP14Parser.Ellipsis)

                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def handler(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.HandlerContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.HandlerContext, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryblock"):
                listener.enterTryblock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryblock"):
                listener.exitTryblock(self)

    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tryblock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2646
            self.match(CPP14Parser.Try)
            self.state = 2647
            self.match(CPP14Parser.LeftBrace)
            self.state = 2651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                        1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                        1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                        1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_assert) | (
                        1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                        1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                        1 << (CPP14Parser.AndAnd - 67)) | (
                                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                self.state = 2648
                self.statement()
                self.state = 2653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2654
            self.match(CPP14Parser.RightBrace)
            self.state = 2656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2655
                self.handler()
                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == CPP14Parser.Catch):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext, i)

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext, 0)

        def attributespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.AttributespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext, i)

        def typespecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypespecifierContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypespecifierContext, i)

        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHandler"):
                listener.enterHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHandler"):
                listener.exitHandler(self)

    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_handler)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.match(CPP14Parser.Catch)
            self.state = 2661
            self.match(CPP14Parser.LeftParen)
            self.state = 2686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Class, CPP14Parser.ConstOrVolatile,
                         CPP14Parser.Decltype, CPP14Parser.Enum, CPP14Parser.Types, CPP14Parser.SignedUnsigned,
                         CPP14Parser.Struct, CPP14Parser.Typename, CPP14Parser.Union, CPP14Parser.LeftBracket,
                         CPP14Parser.Identifier]:
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == CPP14Parser.Alignas or _la == CPP14Parser.LeftBracket:
                    self.state = 2662
                    self.attributespecifier()
                    self.state = 2667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2669
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2668
                        self.typespecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2671
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 515, self._ctx)

                self.state = 2676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 516, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2673
                        self.attributespecifier()
                    self.state = 2678
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 516, self._ctx)

                self.state = 2683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 518, self._ctx)
                if la_ == 1:
                    self.state = 2679
                    self.declarator()
                    pass

                elif la_ == 2:
                    self.state = 2681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.LeftParen) | (
                                            1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.Star))) != 0) or (
                                    (((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & (
                                                (1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.AndAnd - 67)) | (
                                                    1 << (CPP14Parser.Ellipsis - 67)) | (
                                        1 << (CPP14Parser.Identifier - 67)))) != 0):
                        self.state = 2680
                        self.abstractdeclarator()

                    pass

                pass
            elif token in [CPP14Parser.Ellipsis]:
                self.state = 2685
                self.match(CPP14Parser.Ellipsis)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2688
            self.match(CPP14Parser.RightParen)
            self.state = 2689
            self.match(CPP14Parser.LeftBrace)
            self.state = 2693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (
                        1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Break) | (
                1 << CPP14Parser.Case) | (
                        1 << CPP14Parser.Class) | (1 << CPP14Parser.ConstOrVolatile) | (1 << CPP14Parser.Cast) | (
                        1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (
                        1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Enum) | (
                        1 << CPP14Parser.Extern) | (1 << CPP14Parser.TrueFalse) | (1 << CPP14Parser.For) | (
                        1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (
                        1 << CPP14Parser.Types) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (
                        1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (
                        1 << CPP14Parser.Operator) | (1 << CPP14Parser.Specifier) | (1 << CPP14Parser.Return) | (
                        1 << CPP14Parser.SignedUnsigned) | (1 << CPP14Parser.Sizeof) | (
                1 << CPP14Parser.Static_assert) | (
                        1 << CPP14Parser.Struct) | (1 << CPP14Parser.Switch) | (1 << CPP14Parser.This) | (
                        1 << CPP14Parser.Throw) | (1 << CPP14Parser.Try) | (1 << CPP14Parser.Typeid) | (
                        1 << CPP14Parser.Typename) | (1 << CPP14Parser.Union) | (1 << CPP14Parser.Using) | (
                        1 << CPP14Parser.Virtual) | (1 << CPP14Parser.While) | (1 << CPP14Parser.LeftParen) | (
                        1 << CPP14Parser.LeftBracket) | (1 << CPP14Parser.LeftBrace) | (1 << CPP14Parser.Plus) | (
                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and (
                        (1 << (_la - 67)) & ((1 << (CPP14Parser.And - 67)) | (1 << (CPP14Parser.Or - 67)) | (
                                1 << (CPP14Parser.Tilde - 67)) | (1 << (CPP14Parser.Not - 67)) | (
                        1 << (CPP14Parser.AndAnd - 67)) | (
                                1 << (CPP14Parser.PlusPlus - 67)) | (1 << (CPP14Parser.MinusMinus - 67)) | (
                                1 << (CPP14Parser.Doublecolon - 67)) | (1 << (CPP14Parser.Semi - 67)) | (
                                1 << (CPP14Parser.Ellipsis - 67)) | (1 << (CPP14Parser.Identifier - 67)) | (
                                1 << (CPP14Parser.Numberliteral - 67)) | (1 << (CPP14Parser.Characterliteral - 67)) | (
                                1 << (CPP14Parser.Stringliteral - 67)) | (
                        1 << (CPP14Parser.Userdefinedliteral - 67)) | (
                                1 << (CPP14Parser.Userdefinedstringliteral - 67)))) != 0):
                self.state = 2690
                self.statement()
                self.state = 2695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2696
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def Greater(self, i: int = None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTheoperator"):
                listener.enterTheoperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTheoperator"):
                listener.exitTheoperator(self)

    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_theoperator)
        self._la = 0  # Token type
        try:
            self.state = 2714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 522, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2698
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & (
                                        (1 << CPP14Parser.Delete) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Plus) | (
                                        1 << CPP14Parser.Minus) | (1 << CPP14Parser.Star))) != 0) or (
                        (((_la - 64)) & ~0x3f) == 0 and (
                            (1 << (_la - 64)) & ((1 << (CPP14Parser.Div - 64)) | (1 << (CPP14Parser.Mod - 64)) | (
                                    1 << (CPP14Parser.Caret - 64)) | (1 << (CPP14Parser.And - 64)) | (
                            1 << (CPP14Parser.Or - 64)) | (
                                    1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.Not - 64)) | (
                                    1 << (CPP14Parser.Assign - 64)) | (1 << (CPP14Parser.Less - 64)) | (
                                    1 << (CPP14Parser.Greater - 64)) | (1 << (CPP14Parser.PlusAssign - 64)) | (
                                    1 << (CPP14Parser.MinusAssign - 64)) | (1 << (CPP14Parser.StarAssign - 64)) | (
                                    1 << (CPP14Parser.DivAssign - 64)) | (1 << (CPP14Parser.ModAssign - 64)) | (
                                    1 << (CPP14Parser.XorAssign - 64)) | (1 << (CPP14Parser.AndAssign - 64)) | (
                                    1 << (CPP14Parser.OrAssign - 64)) | (1 << (CPP14Parser.LeftShift - 64)) | (
                                    1 << (CPP14Parser.LeftShiftAssign - 64)) | (1 << (CPP14Parser.Equal - 64)) | (
                                    1 << (CPP14Parser.NotEqual - 64)) | (1 << (CPP14Parser.LessEqual - 64)) | (
                                    1 << (CPP14Parser.GreaterEqual - 64)) | (1 << (CPP14Parser.AndAnd - 64)) | (
                                    1 << (CPP14Parser.OrOr - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (
                                    1 << (CPP14Parser.MinusMinus - 64)) | (1 << (CPP14Parser.UnaryCondition - 64)) | (
                                    1 << (CPP14Parser.Comma - 64)) | (1 << (CPP14Parser.ArrowStar - 64)) | (
                                    1 << (CPP14Parser.Arrow - 64)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2699
                self.match(CPP14Parser.New)
                self.state = 2700
                self.match(CPP14Parser.LeftBracket)
                self.state = 2701
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2702
                self.match(CPP14Parser.Delete)
                self.state = 2703
                self.match(CPP14Parser.LeftBracket)
                self.state = 2704
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2705
                self.match(CPP14Parser.Greater)
                self.state = 2706
                self.match(CPP14Parser.Greater)
                self.state = 2708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 521, self._ctx)
                if la_ == 1:
                    self.state = 2707
                    self.match(CPP14Parser.Assign)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2710
                self.match(CPP14Parser.LeftParen)
                self.state = 2711
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2712
                self.match(CPP14Parser.LeftBracket)
                self.state = 2713
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[9] = self.postfixunaryincdecexpression_sempred
        self._predicates[15] = self.relationalexpression_sempred
        self._predicates[16] = self.equalityexpression_sempred
        self._predicates[36] = self.noptrdeclarator_sempred
        self._predicates[40] = self.noptrabstractdeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixunaryincdecexpression_sempred(self, localctx: PostfixunaryincdecexpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relationalexpression_sempred(self, localctx: RelationalexpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def equalityexpression_sempred(self, localctx: EqualityexpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def noptrdeclarator_sempred(self, localctx: NoptrdeclaratorContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 2)

    def noptrabstractdeclarator_sempred(self, localctx: NoptrabstractdeclaratorContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 4)
